"""
Verify that the instances of the meta-model satisfy the invariants.

Here is an example how to verify an instance of :py:class:`sdk.types.MyClass`:

.. code-block::

    import sdk.types as aas_types
    import sdk.verification as aas_verification

    an_instance = aas_types.MyClass(
        # ... some constructor arguments ...
    )

    for error in aas_verification.verify(an_instance):
        print(f"{error.cause} at: {error.path}")
"""


# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.


import math
import re
import struct
import sys
from typing import (
    Callable,
    Iterable,
    Iterator,
    List,
    Mapping,
    Optional,
    Pattern,
    Sequence,
    Set,
    Union
)

if sys.version_info >= (3, 8):
    from typing import Final
else:
    from typing_extensions import Final

from sdk import (
    constants as aas_constants,
    types as aas_types,
)


class PropertySegment:
    """Represent a property access on a path to an erroneous value."""

    #: Instance containing the property
    instance: Final[aas_types.Class]

    #: Name of the property
    name: Final[str]

    def __init__(
            self,
            instance: aas_types.Class,
            name: str
    ) -> None:
        """Initialize with the given values."""
        self.instance = instance
        self.name = name

    def __str__(self) -> str:
        return f'.{self.name}'


class IndexSegment:
    """Represent an index access on a path to an erroneous value."""

    #: Sequence containing the item at :py:attr:`~index`
    sequence: Final[Sequence[aas_types.Class]]

    #: Index of the item
    index: Final[int]

    def __init__(
            self,
            sequence: Sequence[aas_types.Class],
            index: int
    ) -> None:
        """Initialize with the given values."""
        self.sequence = sequence
        self.index = index

    def __str__(self) -> str:
        return f'[{self.index}]'


Segment = Union[PropertySegment, IndexSegment]


class Path:
    """Represent the relative path to the erroneous value."""

    def __init__(self) -> None:
        """Initialize as an empty path."""
        self._segments = []  # type: List[Segment]

    @property
    def segments(self) -> Sequence[Segment]:
        """Get the segments of the path."""
        return self._segments

    def _prepend(self, segment: Segment) -> None:
        """Insert the :paramref:`segment` in front of other segments."""
        self._segments.insert(0, segment)

    def __str__(self) -> str:
        return "".join(str(segment) for segment in self._segments)


class Error:
    """Represent a verification error in the data."""

    #: Human-readable description of the error
    cause: Final[str]

    #: Path to the erroneous value
    path: Final[Path]

    def __init__(self, cause: str) -> None:
        """Initialize as an error with an empty path."""
        self.cause = cause
        self.path = Path()

    def __repr__(self) -> str:
        return f"Error(path={self.path}, cause={self.cause})"


class _Transformer(
        aas_types.AbstractTransformer[
            Iterator[Error]
        ]
):
    # noinspection PyMethodMayBeStatic
    def transform_my_class(
            self,
            that: aas_types.MyClass
    ) -> Iterator[Error]:
        # No verification has been defined for MyClass.
        return
        # For this uncommon return-yield construction, see:
        # https://stackoverflow.com/questions/13243766/how-to-define-an-empty-generator-function
        # noinspection PyUnreachableCode
        yield

    # noinspection PyMethodMayBeStatic
    def transform_root(
            self,
            that: aas_types.Root
    ) -> Iterator[Error]:
        for error in self.transform(that.foo):
            error.path._prepend(
                PropertySegment(
                    that,
                    'foo'
                )
            )
            yield error

        for i, an_item in enumerate(that.foos):
            for error in self.transform(an_item):
                error.path._prepend(
                    IndexSegment(
                        that.foos,
                        i
                    )
                )
                error.path._prepend(
                    PropertySegment(
                        that,
                        'foos'
                    )
                )
                yield error


_TRANSFORMER = _Transformer()


def verify(
        that: aas_types.Class
) -> Iterator[Error]:
    """
    Verify the constraints of :paramref:`that` recursively.

    :param that: instance whose constraints we want to verify
    :yield: constraint violations
    """
    yield from _TRANSFORMER.transform(that)


# This code has been automatically generated by aas-core-codegen.
# Do NOT edit or append.
