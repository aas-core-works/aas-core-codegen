"""Provide common functions shared among different Java code generation modules."""
import re
from typing import cast, Optional

from icontract import require

from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped, assert_never
from aas_core_codegen.java import naming as java_naming


PRIMITIVE_TYPE_MAP = {
    intermediate.PrimitiveType.BOOL: Stripped("Boolean"),
    intermediate.PrimitiveType.INT: Stripped("Long"),
    intermediate.PrimitiveType.FLOAT: Stripped("Float"),
    intermediate.PrimitiveType.STR: Stripped("String"),
    intermediate.PrimitiveType.BYTEARRAY: Stripped("byte[]"),
}


# fmt: off
@require(
    lambda our_type_qualifier:
    not (our_type_qualifier is not None)
    or not our_type_qualifier.endswith('.')
)
# fmt: on
def generate_type(
    type_annotation: intermediate.TypeAnnotationUnion,
    our_type_qualifier: Optional[Stripped] = None,
) -> Stripped:
    """
    Generate the Java type for the given type annotation.

    ``our_type_prefix`` is appended to all our types, if specified.
    """
    our_type_prefix = "" if our_type_qualifier is None else f"{our_type_qualifier}."
    if isinstance(type_annotation, intermediate.PrimitiveTypeAnnotation):
        return PRIMITIVE_TYPE_MAP[type_annotation.a_type]

    elif isinstance(type_annotation, intermediate.OurTypeAnnotation):
        our_type = type_annotation.our_type

        if isinstance(our_type, intermediate.Enumeration):
            return Stripped(
                our_type_prefix + java_naming.enum_name(type_annotation.our_type.name)
            )

        elif isinstance(our_type, intermediate.ConstrainedPrimitive):
            return PRIMITIVE_TYPE_MAP[our_type.constrainee]

        elif isinstance(our_type, intermediate.Class):
            return Stripped(
                our_type_prefix + java_naming.interface_name(our_type.name)
            )

    elif isinstance(type_annotation, intermediate.ListTypeAnnotation):
        item_type = generate_type(
            type_annotation=type_annotation.items, our_type_qualifier=our_type_qualifier
        )

        return Stripped(f"List<{item_type}>")

    elif isinstance(type_annotation, intermediate.OptionalTypeAnnotation):
        value = generate_type(
            type_annotation=type_annotation.value, our_type_qualifier=our_type_qualifier
        )
        return Stripped(f"Optional<{value}>")

    else:
        assert_never(type_annotation)

    raise AssertionError("Should not have gotten here")


INDENT = "  "
INDENT2 = INDENT * 2
INDENT3 = INDENT * 3
INDENT4 = INDENT * 4
INDENT5 = INDENT * 5
INDENT6 = INDENT * 6


# noinspection RegExpSimplifiable
PACKAGE_IDENTIFIER_RE = re.compile(
    r"[a-z][a-z_0-9]*(\.[a-z][a-z_0-9]*)*"
)


class PackageIdentifier(str):
    """Capture a package identifier."""

    @require(lambda identifier: PACKAGE_IDENTIFIER_RE.fullmatch(identifier))
    def __new__(cls, identifier: str) -> "PackageIdentifier":
        return cast(PackageIdentifier, identifier)


WARNING = Stripped(
    """\
/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */"""
)
