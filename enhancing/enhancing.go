// Enhance instances of the model with your custom enhancements.

package enhancing

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

import (
	"fmt"
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
)

type enhanced[E any] interface {
	// Get the enhancement from the enhanced instance.
	getEnhancement() E

	// Set the enhancement of the enhanced instance.
	setEnhancement(E)
}

type enhancedExtension[E any] struct {
	instance aastypes.IExtension
	enhancement E
}

func (ee *enhancedExtension[E]) ModelType(
) aastypes.ModelType {
	return ee.instance.ModelType()
}

func (ee *enhancedExtension[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ee.instance.DescendOnce(action)
}

func (ee *enhancedExtension[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ee.instance.Descend(action)
}

func (ee *enhancedExtension[E]) SemanticID(
) aastypes.IReference {
	return ee.SemanticID()
}

func (ee *enhancedExtension[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ee.SetSemanticID(value)
}

func (ee *enhancedExtension[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ee.SupplementalSemanticIDs()
}

func (ee *enhancedExtension[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ee.SetSupplementalSemanticIDs(value)
}

func (ee *enhancedExtension[E]) Name(
) string {
	return ee.Name()
}

func (ee *enhancedExtension[E]) SetName(
	value string,
) {
	ee.SetName(value)
}

func (ee *enhancedExtension[E]) ValueType(
) *aastypes.DataTypeDefXSD {
	return ee.ValueType()
}

func (ee *enhancedExtension[E]) SetValueType(
	value *aastypes.DataTypeDefXSD,
) {
	ee.SetValueType(value)
}

func (ee *enhancedExtension[E]) Value(
) *string {
	return ee.Value()
}

func (ee *enhancedExtension[E]) SetValue(
	value *string,
) {
	ee.SetValue(value)
}

func (ee *enhancedExtension[E]) RefersTo(
) []aastypes.IReference {
	return ee.RefersTo()
}

func (ee *enhancedExtension[E]) SetRefersTo(
	value []aastypes.IReference,
) {
	ee.SetRefersTo(value)
}

func (e *enhancedExtension[E]) ValueTypeOrDefault() aastypes.DataTypeDefXSD {
	return e.instance.ValueTypeOrDefault()
}

func wrapExtension[E any](
	that aastypes.IExtension,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IExtension) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedExtension[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theRefersTo := that.RefersTo()
	if theRefersTo != nil {
		for i, v := range theRefersTo {
			theRefersTo[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	return
}

type enhancedAdministrativeInformation[E any] struct {
	instance aastypes.IAdministrativeInformation
	enhancement E
}

func (eai *enhancedAdministrativeInformation[E]) ModelType(
) aastypes.ModelType {
	return eai.instance.ModelType()
}

func (eai *enhancedAdministrativeInformation[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eai.instance.DescendOnce(action)
}

func (eai *enhancedAdministrativeInformation[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eai.instance.Descend(action)
}

func (eai *enhancedAdministrativeInformation[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return eai.EmbeddedDataSpecifications()
}

func (eai *enhancedAdministrativeInformation[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	eai.SetEmbeddedDataSpecifications(value)
}

func (eai *enhancedAdministrativeInformation[E]) Version(
) *string {
	return eai.Version()
}

func (eai *enhancedAdministrativeInformation[E]) SetVersion(
	value *string,
) {
	eai.SetVersion(value)
}

func (eai *enhancedAdministrativeInformation[E]) Revision(
) *string {
	return eai.Revision()
}

func (eai *enhancedAdministrativeInformation[E]) SetRevision(
	value *string,
) {
	eai.SetRevision(value)
}

func (eai *enhancedAdministrativeInformation[E]) Creator(
) aastypes.IReference {
	return eai.Creator()
}

func (eai *enhancedAdministrativeInformation[E]) SetCreator(
	value aastypes.IReference,
) {
	eai.SetCreator(value)
}

func (eai *enhancedAdministrativeInformation[E]) TemplateID(
) *string {
	return eai.TemplateID()
}

func (eai *enhancedAdministrativeInformation[E]) SetTemplateID(
	value *string,
) {
	eai.SetTemplateID(value)
}

func wrapAdministrativeInformation[E any](
	that aastypes.IAdministrativeInformation,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IAdministrativeInformation) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedAdministrativeInformation[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theCreator := that.Creator()
	if theCreator != nil {
		that.SetCreator(
			Wrap[E](
				theCreator,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedQualifier[E any] struct {
	instance aastypes.IQualifier
	enhancement E
}

func (eq *enhancedQualifier[E]) ModelType(
) aastypes.ModelType {
	return eq.instance.ModelType()
}

func (eq *enhancedQualifier[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eq.instance.DescendOnce(action)
}

func (eq *enhancedQualifier[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eq.instance.Descend(action)
}

func (eq *enhancedQualifier[E]) SemanticID(
) aastypes.IReference {
	return eq.SemanticID()
}

func (eq *enhancedQualifier[E]) SetSemanticID(
	value aastypes.IReference,
) {
	eq.SetSemanticID(value)
}

func (eq *enhancedQualifier[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return eq.SupplementalSemanticIDs()
}

func (eq *enhancedQualifier[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	eq.SetSupplementalSemanticIDs(value)
}

func (eq *enhancedQualifier[E]) Kind(
) *aastypes.QualifierKind {
	return eq.Kind()
}

func (eq *enhancedQualifier[E]) SetKind(
	value *aastypes.QualifierKind,
) {
	eq.SetKind(value)
}

func (eq *enhancedQualifier[E]) Type(
) string {
	return eq.Type()
}

func (eq *enhancedQualifier[E]) SetType(
	value string,
) {
	eq.SetType(value)
}

func (eq *enhancedQualifier[E]) ValueType(
) aastypes.DataTypeDefXSD {
	return eq.ValueType()
}

func (eq *enhancedQualifier[E]) SetValueType(
	value aastypes.DataTypeDefXSD,
) {
	eq.SetValueType(value)
}

func (eq *enhancedQualifier[E]) Value(
) *string {
	return eq.Value()
}

func (eq *enhancedQualifier[E]) SetValue(
	value *string,
) {
	eq.SetValue(value)
}

func (eq *enhancedQualifier[E]) ValueID(
) aastypes.IReference {
	return eq.ValueID()
}

func (eq *enhancedQualifier[E]) SetValueID(
	value aastypes.IReference,
) {
	eq.SetValueID(value)
}

func (q *enhancedQualifier[E]) KindOrDefault() aastypes.QualifierKind {
	return q.instance.KindOrDefault()
}

func wrapQualifier[E any](
	that aastypes.IQualifier,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IQualifier) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedQualifier[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theValueID := that.ValueID()
	if theValueID != nil {
		that.SetValueID(
			Wrap[E](
				theValueID,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedAssetAdministrationShell[E any] struct {
	instance aastypes.IAssetAdministrationShell
	enhancement E
}

func (eaas *enhancedAssetAdministrationShell[E]) ModelType(
) aastypes.ModelType {
	return eaas.instance.ModelType()
}

func (eaas *enhancedAssetAdministrationShell[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eaas.instance.DescendOnce(action)
}

func (eaas *enhancedAssetAdministrationShell[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eaas.instance.Descend(action)
}

func (eaas *enhancedAssetAdministrationShell[E]) Extensions(
) []aastypes.IExtension {
	return eaas.Extensions()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	eaas.SetExtensions(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) Category(
) *string {
	return eaas.Category()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetCategory(
	value *string,
) {
	eaas.SetCategory(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) IDShort(
) *string {
	return eaas.IDShort()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetIDShort(
	value *string,
) {
	eaas.SetIDShort(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return eaas.DisplayName()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	eaas.SetDisplayName(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) Description(
) []aastypes.ILangStringTextType {
	return eaas.Description()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	eaas.SetDescription(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) Administration(
) aastypes.IAdministrativeInformation {
	return eaas.Administration()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetAdministration(
	value aastypes.IAdministrativeInformation,
) {
	eaas.SetAdministration(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) ID(
) string {
	return eaas.ID()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetID(
	value string,
) {
	eaas.SetID(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return eaas.EmbeddedDataSpecifications()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	eaas.SetEmbeddedDataSpecifications(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) DerivedFrom(
) aastypes.IReference {
	return eaas.DerivedFrom()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetDerivedFrom(
	value aastypes.IReference,
) {
	eaas.SetDerivedFrom(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) AssetInformation(
) aastypes.IAssetInformation {
	return eaas.AssetInformation()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetAssetInformation(
	value aastypes.IAssetInformation,
) {
	eaas.SetAssetInformation(value)
}

func (eaas *enhancedAssetAdministrationShell[E]) Submodels(
) []aastypes.IReference {
	return eaas.Submodels()
}

func (eaas *enhancedAssetAdministrationShell[E]) SetSubmodels(
	value []aastypes.IReference,
) {
	eaas.SetSubmodels(value)
}

func wrapAssetAdministrationShell[E any](
	that aastypes.IAssetAdministrationShell,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IAssetAdministrationShell) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedAssetAdministrationShell[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theAdministration := that.Administration()
	if theAdministration != nil {
		that.SetAdministration(
			Wrap[E](
				theAdministration,
				factory,
			).(aastypes.IAdministrativeInformation),
		)
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theDerivedFrom := that.DerivedFrom()
	if theDerivedFrom != nil {
		that.SetDerivedFrom(
			Wrap[E](
				theDerivedFrom,
				factory,
			).(aastypes.IReference),
		)
	}

	theAssetInformation := that.AssetInformation()
	that.SetAssetInformation(
		Wrap[E](
			theAssetInformation,
			factory,
		).(aastypes.IAssetInformation),
	)

	theSubmodels := that.Submodels()
	if theSubmodels != nil {
		for i, v := range theSubmodels {
			theSubmodels[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	return
}

type enhancedAssetInformation[E any] struct {
	instance aastypes.IAssetInformation
	enhancement E
}

func (eai *enhancedAssetInformation[E]) ModelType(
) aastypes.ModelType {
	return eai.instance.ModelType()
}

func (eai *enhancedAssetInformation[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eai.instance.DescendOnce(action)
}

func (eai *enhancedAssetInformation[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eai.instance.Descend(action)
}

func (eai *enhancedAssetInformation[E]) AssetKind(
) aastypes.AssetKind {
	return eai.AssetKind()
}

func (eai *enhancedAssetInformation[E]) SetAssetKind(
	value aastypes.AssetKind,
) {
	eai.SetAssetKind(value)
}

func (eai *enhancedAssetInformation[E]) GlobalAssetID(
) *string {
	return eai.GlobalAssetID()
}

func (eai *enhancedAssetInformation[E]) SetGlobalAssetID(
	value *string,
) {
	eai.SetGlobalAssetID(value)
}

func (eai *enhancedAssetInformation[E]) SpecificAssetIDs(
) []aastypes.ISpecificAssetID {
	return eai.SpecificAssetIDs()
}

func (eai *enhancedAssetInformation[E]) SetSpecificAssetIDs(
	value []aastypes.ISpecificAssetID,
) {
	eai.SetSpecificAssetIDs(value)
}

func (eai *enhancedAssetInformation[E]) AssetType(
) *string {
	return eai.AssetType()
}

func (eai *enhancedAssetInformation[E]) SetAssetType(
	value *string,
) {
	eai.SetAssetType(value)
}

func (eai *enhancedAssetInformation[E]) DefaultThumbnail(
) aastypes.IResource {
	return eai.DefaultThumbnail()
}

func (eai *enhancedAssetInformation[E]) SetDefaultThumbnail(
	value aastypes.IResource,
) {
	eai.SetDefaultThumbnail(value)
}

func wrapAssetInformation[E any](
	that aastypes.IAssetInformation,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IAssetInformation) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedAssetInformation[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theSpecificAssetIDs := that.SpecificAssetIDs()
	if theSpecificAssetIDs != nil {
		for i, v := range theSpecificAssetIDs {
			theSpecificAssetIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISpecificAssetID)
		}
	}

	theDefaultThumbnail := that.DefaultThumbnail()
	if theDefaultThumbnail != nil {
		that.SetDefaultThumbnail(
			Wrap[E](
				theDefaultThumbnail,
				factory,
			).(aastypes.IResource),
		)
	}

	return
}

type enhancedResource[E any] struct {
	instance aastypes.IResource
	enhancement E
}

func (er *enhancedResource[E]) ModelType(
) aastypes.ModelType {
	return er.instance.ModelType()
}

func (er *enhancedResource[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return er.instance.DescendOnce(action)
}

func (er *enhancedResource[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return er.instance.Descend(action)
}

func (er *enhancedResource[E]) Path(
) string {
	return er.Path()
}

func (er *enhancedResource[E]) SetPath(
	value string,
) {
	er.SetPath(value)
}

func (er *enhancedResource[E]) ContentType(
) *string {
	return er.ContentType()
}

func (er *enhancedResource[E]) SetContentType(
	value *string,
) {
	er.SetContentType(value)
}

func wrapResource[E any](
	that aastypes.IResource,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IResource) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedResource[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedSpecificAssetID[E any] struct {
	instance aastypes.ISpecificAssetID
	enhancement E
}

func (esai *enhancedSpecificAssetID[E]) ModelType(
) aastypes.ModelType {
	return esai.instance.ModelType()
}

func (esai *enhancedSpecificAssetID[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return esai.instance.DescendOnce(action)
}

func (esai *enhancedSpecificAssetID[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return esai.instance.Descend(action)
}

func (esai *enhancedSpecificAssetID[E]) SemanticID(
) aastypes.IReference {
	return esai.SemanticID()
}

func (esai *enhancedSpecificAssetID[E]) SetSemanticID(
	value aastypes.IReference,
) {
	esai.SetSemanticID(value)
}

func (esai *enhancedSpecificAssetID[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return esai.SupplementalSemanticIDs()
}

func (esai *enhancedSpecificAssetID[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	esai.SetSupplementalSemanticIDs(value)
}

func (esai *enhancedSpecificAssetID[E]) Name(
) string {
	return esai.Name()
}

func (esai *enhancedSpecificAssetID[E]) SetName(
	value string,
) {
	esai.SetName(value)
}

func (esai *enhancedSpecificAssetID[E]) Value(
) string {
	return esai.Value()
}

func (esai *enhancedSpecificAssetID[E]) SetValue(
	value string,
) {
	esai.SetValue(value)
}

func (esai *enhancedSpecificAssetID[E]) ExternalSubjectID(
) aastypes.IReference {
	return esai.ExternalSubjectID()
}

func (esai *enhancedSpecificAssetID[E]) SetExternalSubjectID(
	value aastypes.IReference,
) {
	esai.SetExternalSubjectID(value)
}

func wrapSpecificAssetID[E any](
	that aastypes.ISpecificAssetID,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ISpecificAssetID) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedSpecificAssetID[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theExternalSubjectID := that.ExternalSubjectID()
	if theExternalSubjectID != nil {
		that.SetExternalSubjectID(
			Wrap[E](
				theExternalSubjectID,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedSubmodel[E any] struct {
	instance aastypes.ISubmodel
	enhancement E
}

func (es *enhancedSubmodel[E]) ModelType(
) aastypes.ModelType {
	return es.instance.ModelType()
}

func (es *enhancedSubmodel[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return es.instance.DescendOnce(action)
}

func (es *enhancedSubmodel[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return es.instance.Descend(action)
}

func (es *enhancedSubmodel[E]) Extensions(
) []aastypes.IExtension {
	return es.Extensions()
}

func (es *enhancedSubmodel[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	es.SetExtensions(value)
}

func (es *enhancedSubmodel[E]) Category(
) *string {
	return es.Category()
}

func (es *enhancedSubmodel[E]) SetCategory(
	value *string,
) {
	es.SetCategory(value)
}

func (es *enhancedSubmodel[E]) IDShort(
) *string {
	return es.IDShort()
}

func (es *enhancedSubmodel[E]) SetIDShort(
	value *string,
) {
	es.SetIDShort(value)
}

func (es *enhancedSubmodel[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return es.DisplayName()
}

func (es *enhancedSubmodel[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	es.SetDisplayName(value)
}

func (es *enhancedSubmodel[E]) Description(
) []aastypes.ILangStringTextType {
	return es.Description()
}

func (es *enhancedSubmodel[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	es.SetDescription(value)
}

func (es *enhancedSubmodel[E]) Administration(
) aastypes.IAdministrativeInformation {
	return es.Administration()
}

func (es *enhancedSubmodel[E]) SetAdministration(
	value aastypes.IAdministrativeInformation,
) {
	es.SetAdministration(value)
}

func (es *enhancedSubmodel[E]) ID(
) string {
	return es.ID()
}

func (es *enhancedSubmodel[E]) SetID(
	value string,
) {
	es.SetID(value)
}

func (es *enhancedSubmodel[E]) Kind(
) *aastypes.ModellingKind {
	return es.Kind()
}

func (es *enhancedSubmodel[E]) SetKind(
	value *aastypes.ModellingKind,
) {
	es.SetKind(value)
}

func (es *enhancedSubmodel[E]) SemanticID(
) aastypes.IReference {
	return es.SemanticID()
}

func (es *enhancedSubmodel[E]) SetSemanticID(
	value aastypes.IReference,
) {
	es.SetSemanticID(value)
}

func (es *enhancedSubmodel[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return es.SupplementalSemanticIDs()
}

func (es *enhancedSubmodel[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	es.SetSupplementalSemanticIDs(value)
}

func (es *enhancedSubmodel[E]) Qualifiers(
) []aastypes.IQualifier {
	return es.Qualifiers()
}

func (es *enhancedSubmodel[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	es.SetQualifiers(value)
}

func (es *enhancedSubmodel[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return es.EmbeddedDataSpecifications()
}

func (es *enhancedSubmodel[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	es.SetEmbeddedDataSpecifications(value)
}

func (es *enhancedSubmodel[E]) SubmodelElements(
) []aastypes.ISubmodelElement {
	return es.SubmodelElements()
}

func (es *enhancedSubmodel[E]) SetSubmodelElements(
	value []aastypes.ISubmodelElement,
) {
	es.SetSubmodelElements(value)
}

func (s *enhancedSubmodel[E]) KindOrDefault() aastypes.ModellingKind {
	return s.instance.KindOrDefault()
}

func wrapSubmodel[E any](
	that aastypes.ISubmodel,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ISubmodel) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedSubmodel[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theAdministration := that.Administration()
	if theAdministration != nil {
		that.SetAdministration(
			Wrap[E](
				theAdministration,
				factory,
			).(aastypes.IAdministrativeInformation),
		)
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theSubmodelElements := that.SubmodelElements()
	if theSubmodelElements != nil {
		for i, v := range theSubmodelElements {
			theSubmodelElements[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISubmodelElement)
		}
	}

	return
}

type enhancedRelationshipElement[E any] struct {
	instance aastypes.IRelationshipElement
	enhancement E
}

func (ere *enhancedRelationshipElement[E]) ModelType(
) aastypes.ModelType {
	return ere.instance.ModelType()
}

func (ere *enhancedRelationshipElement[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ere.instance.DescendOnce(action)
}

func (ere *enhancedRelationshipElement[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ere.instance.Descend(action)
}

func (ere *enhancedRelationshipElement[E]) Extensions(
) []aastypes.IExtension {
	return ere.Extensions()
}

func (ere *enhancedRelationshipElement[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ere.SetExtensions(value)
}

func (ere *enhancedRelationshipElement[E]) Category(
) *string {
	return ere.Category()
}

func (ere *enhancedRelationshipElement[E]) SetCategory(
	value *string,
) {
	ere.SetCategory(value)
}

func (ere *enhancedRelationshipElement[E]) IDShort(
) *string {
	return ere.IDShort()
}

func (ere *enhancedRelationshipElement[E]) SetIDShort(
	value *string,
) {
	ere.SetIDShort(value)
}

func (ere *enhancedRelationshipElement[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ere.DisplayName()
}

func (ere *enhancedRelationshipElement[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ere.SetDisplayName(value)
}

func (ere *enhancedRelationshipElement[E]) Description(
) []aastypes.ILangStringTextType {
	return ere.Description()
}

func (ere *enhancedRelationshipElement[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ere.SetDescription(value)
}

func (ere *enhancedRelationshipElement[E]) SemanticID(
) aastypes.IReference {
	return ere.SemanticID()
}

func (ere *enhancedRelationshipElement[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ere.SetSemanticID(value)
}

func (ere *enhancedRelationshipElement[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ere.SupplementalSemanticIDs()
}

func (ere *enhancedRelationshipElement[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ere.SetSupplementalSemanticIDs(value)
}

func (ere *enhancedRelationshipElement[E]) Qualifiers(
) []aastypes.IQualifier {
	return ere.Qualifiers()
}

func (ere *enhancedRelationshipElement[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ere.SetQualifiers(value)
}

func (ere *enhancedRelationshipElement[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ere.EmbeddedDataSpecifications()
}

func (ere *enhancedRelationshipElement[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ere.SetEmbeddedDataSpecifications(value)
}

func (ere *enhancedRelationshipElement[E]) First(
) aastypes.IReference {
	return ere.First()
}

func (ere *enhancedRelationshipElement[E]) SetFirst(
	value aastypes.IReference,
) {
	ere.SetFirst(value)
}

func (ere *enhancedRelationshipElement[E]) Second(
) aastypes.IReference {
	return ere.Second()
}

func (ere *enhancedRelationshipElement[E]) SetSecond(
	value aastypes.IReference,
) {
	ere.SetSecond(value)
}

func wrapRelationshipElement[E any](
	that aastypes.IRelationshipElement,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IRelationshipElement) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedRelationshipElement[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theFirst := that.First()
	that.SetFirst(
		Wrap[E](
			theFirst,
			factory,
		).(aastypes.IReference),
	)

	theSecond := that.Second()
	that.SetSecond(
		Wrap[E](
			theSecond,
			factory,
		).(aastypes.IReference),
	)

	return
}

type enhancedSubmodelElementList[E any] struct {
	instance aastypes.ISubmodelElementList
	enhancement E
}

func (esel *enhancedSubmodelElementList[E]) ModelType(
) aastypes.ModelType {
	return esel.instance.ModelType()
}

func (esel *enhancedSubmodelElementList[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return esel.instance.DescendOnce(action)
}

func (esel *enhancedSubmodelElementList[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return esel.instance.Descend(action)
}

func (esel *enhancedSubmodelElementList[E]) Extensions(
) []aastypes.IExtension {
	return esel.Extensions()
}

func (esel *enhancedSubmodelElementList[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	esel.SetExtensions(value)
}

func (esel *enhancedSubmodelElementList[E]) Category(
) *string {
	return esel.Category()
}

func (esel *enhancedSubmodelElementList[E]) SetCategory(
	value *string,
) {
	esel.SetCategory(value)
}

func (esel *enhancedSubmodelElementList[E]) IDShort(
) *string {
	return esel.IDShort()
}

func (esel *enhancedSubmodelElementList[E]) SetIDShort(
	value *string,
) {
	esel.SetIDShort(value)
}

func (esel *enhancedSubmodelElementList[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return esel.DisplayName()
}

func (esel *enhancedSubmodelElementList[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	esel.SetDisplayName(value)
}

func (esel *enhancedSubmodelElementList[E]) Description(
) []aastypes.ILangStringTextType {
	return esel.Description()
}

func (esel *enhancedSubmodelElementList[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	esel.SetDescription(value)
}

func (esel *enhancedSubmodelElementList[E]) SemanticID(
) aastypes.IReference {
	return esel.SemanticID()
}

func (esel *enhancedSubmodelElementList[E]) SetSemanticID(
	value aastypes.IReference,
) {
	esel.SetSemanticID(value)
}

func (esel *enhancedSubmodelElementList[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return esel.SupplementalSemanticIDs()
}

func (esel *enhancedSubmodelElementList[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	esel.SetSupplementalSemanticIDs(value)
}

func (esel *enhancedSubmodelElementList[E]) Qualifiers(
) []aastypes.IQualifier {
	return esel.Qualifiers()
}

func (esel *enhancedSubmodelElementList[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	esel.SetQualifiers(value)
}

func (esel *enhancedSubmodelElementList[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return esel.EmbeddedDataSpecifications()
}

func (esel *enhancedSubmodelElementList[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	esel.SetEmbeddedDataSpecifications(value)
}

func (esel *enhancedSubmodelElementList[E]) OrderRelevant(
) *bool {
	return esel.OrderRelevant()
}

func (esel *enhancedSubmodelElementList[E]) SetOrderRelevant(
	value *bool,
) {
	esel.SetOrderRelevant(value)
}

func (esel *enhancedSubmodelElementList[E]) SemanticIDListElement(
) aastypes.IReference {
	return esel.SemanticIDListElement()
}

func (esel *enhancedSubmodelElementList[E]) SetSemanticIDListElement(
	value aastypes.IReference,
) {
	esel.SetSemanticIDListElement(value)
}

func (esel *enhancedSubmodelElementList[E]) TypeValueListElement(
) aastypes.AASSubmodelElements {
	return esel.TypeValueListElement()
}

func (esel *enhancedSubmodelElementList[E]) SetTypeValueListElement(
	value aastypes.AASSubmodelElements,
) {
	esel.SetTypeValueListElement(value)
}

func (esel *enhancedSubmodelElementList[E]) ValueTypeListElement(
) *aastypes.DataTypeDefXSD {
	return esel.ValueTypeListElement()
}

func (esel *enhancedSubmodelElementList[E]) SetValueTypeListElement(
	value *aastypes.DataTypeDefXSD,
) {
	esel.SetValueTypeListElement(value)
}

func (esel *enhancedSubmodelElementList[E]) Value(
) []aastypes.ISubmodelElement {
	return esel.Value()
}

func (esel *enhancedSubmodelElementList[E]) SetValue(
	value []aastypes.ISubmodelElement,
) {
	esel.SetValue(value)
}

func (sel *enhancedSubmodelElementList[E]) OrderRelevantOrDefault() bool {
	return sel.instance.OrderRelevantOrDefault()
}

func wrapSubmodelElementList[E any](
	that aastypes.ISubmodelElementList,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ISubmodelElementList) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedSubmodelElementList[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theSemanticIDListElement := that.SemanticIDListElement()
	if theSemanticIDListElement != nil {
		that.SetSemanticIDListElement(
			Wrap[E](
				theSemanticIDListElement,
				factory,
			).(aastypes.IReference),
		)
	}

	theValue := that.Value()
	if theValue != nil {
		for i, v := range theValue {
			theValue[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISubmodelElement)
		}
	}

	return
}

type enhancedSubmodelElementCollection[E any] struct {
	instance aastypes.ISubmodelElementCollection
	enhancement E
}

func (esec *enhancedSubmodelElementCollection[E]) ModelType(
) aastypes.ModelType {
	return esec.instance.ModelType()
}

func (esec *enhancedSubmodelElementCollection[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return esec.instance.DescendOnce(action)
}

func (esec *enhancedSubmodelElementCollection[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return esec.instance.Descend(action)
}

func (esec *enhancedSubmodelElementCollection[E]) Extensions(
) []aastypes.IExtension {
	return esec.Extensions()
}

func (esec *enhancedSubmodelElementCollection[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	esec.SetExtensions(value)
}

func (esec *enhancedSubmodelElementCollection[E]) Category(
) *string {
	return esec.Category()
}

func (esec *enhancedSubmodelElementCollection[E]) SetCategory(
	value *string,
) {
	esec.SetCategory(value)
}

func (esec *enhancedSubmodelElementCollection[E]) IDShort(
) *string {
	return esec.IDShort()
}

func (esec *enhancedSubmodelElementCollection[E]) SetIDShort(
	value *string,
) {
	esec.SetIDShort(value)
}

func (esec *enhancedSubmodelElementCollection[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return esec.DisplayName()
}

func (esec *enhancedSubmodelElementCollection[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	esec.SetDisplayName(value)
}

func (esec *enhancedSubmodelElementCollection[E]) Description(
) []aastypes.ILangStringTextType {
	return esec.Description()
}

func (esec *enhancedSubmodelElementCollection[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	esec.SetDescription(value)
}

func (esec *enhancedSubmodelElementCollection[E]) SemanticID(
) aastypes.IReference {
	return esec.SemanticID()
}

func (esec *enhancedSubmodelElementCollection[E]) SetSemanticID(
	value aastypes.IReference,
) {
	esec.SetSemanticID(value)
}

func (esec *enhancedSubmodelElementCollection[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return esec.SupplementalSemanticIDs()
}

func (esec *enhancedSubmodelElementCollection[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	esec.SetSupplementalSemanticIDs(value)
}

func (esec *enhancedSubmodelElementCollection[E]) Qualifiers(
) []aastypes.IQualifier {
	return esec.Qualifiers()
}

func (esec *enhancedSubmodelElementCollection[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	esec.SetQualifiers(value)
}

func (esec *enhancedSubmodelElementCollection[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return esec.EmbeddedDataSpecifications()
}

func (esec *enhancedSubmodelElementCollection[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	esec.SetEmbeddedDataSpecifications(value)
}

func (esec *enhancedSubmodelElementCollection[E]) Value(
) []aastypes.ISubmodelElement {
	return esec.Value()
}

func (esec *enhancedSubmodelElementCollection[E]) SetValue(
	value []aastypes.ISubmodelElement,
) {
	esec.SetValue(value)
}

func wrapSubmodelElementCollection[E any](
	that aastypes.ISubmodelElementCollection,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ISubmodelElementCollection) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedSubmodelElementCollection[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theValue := that.Value()
	if theValue != nil {
		for i, v := range theValue {
			theValue[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISubmodelElement)
		}
	}

	return
}

type enhancedProperty[E any] struct {
	instance aastypes.IProperty
	enhancement E
}

func (ep *enhancedProperty[E]) ModelType(
) aastypes.ModelType {
	return ep.instance.ModelType()
}

func (ep *enhancedProperty[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ep.instance.DescendOnce(action)
}

func (ep *enhancedProperty[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ep.instance.Descend(action)
}

func (ep *enhancedProperty[E]) Extensions(
) []aastypes.IExtension {
	return ep.Extensions()
}

func (ep *enhancedProperty[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ep.SetExtensions(value)
}

func (ep *enhancedProperty[E]) Category(
) *string {
	return ep.Category()
}

func (ep *enhancedProperty[E]) SetCategory(
	value *string,
) {
	ep.SetCategory(value)
}

func (ep *enhancedProperty[E]) IDShort(
) *string {
	return ep.IDShort()
}

func (ep *enhancedProperty[E]) SetIDShort(
	value *string,
) {
	ep.SetIDShort(value)
}

func (ep *enhancedProperty[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ep.DisplayName()
}

func (ep *enhancedProperty[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ep.SetDisplayName(value)
}

func (ep *enhancedProperty[E]) Description(
) []aastypes.ILangStringTextType {
	return ep.Description()
}

func (ep *enhancedProperty[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ep.SetDescription(value)
}

func (ep *enhancedProperty[E]) SemanticID(
) aastypes.IReference {
	return ep.SemanticID()
}

func (ep *enhancedProperty[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ep.SetSemanticID(value)
}

func (ep *enhancedProperty[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ep.SupplementalSemanticIDs()
}

func (ep *enhancedProperty[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ep.SetSupplementalSemanticIDs(value)
}

func (ep *enhancedProperty[E]) Qualifiers(
) []aastypes.IQualifier {
	return ep.Qualifiers()
}

func (ep *enhancedProperty[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ep.SetQualifiers(value)
}

func (ep *enhancedProperty[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ep.EmbeddedDataSpecifications()
}

func (ep *enhancedProperty[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ep.SetEmbeddedDataSpecifications(value)
}

func (ep *enhancedProperty[E]) ValueType(
) aastypes.DataTypeDefXSD {
	return ep.ValueType()
}

func (ep *enhancedProperty[E]) SetValueType(
	value aastypes.DataTypeDefXSD,
) {
	ep.SetValueType(value)
}

func (ep *enhancedProperty[E]) Value(
) *string {
	return ep.Value()
}

func (ep *enhancedProperty[E]) SetValue(
	value *string,
) {
	ep.SetValue(value)
}

func (ep *enhancedProperty[E]) ValueID(
) aastypes.IReference {
	return ep.ValueID()
}

func (ep *enhancedProperty[E]) SetValueID(
	value aastypes.IReference,
) {
	ep.SetValueID(value)
}

func (p *enhancedProperty[E]) CategoryOrDefault() string {
	return p.instance.CategoryOrDefault()
}

func wrapProperty[E any](
	that aastypes.IProperty,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IProperty) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedProperty[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theValueID := that.ValueID()
	if theValueID != nil {
		that.SetValueID(
			Wrap[E](
				theValueID,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedMultiLanguageProperty[E any] struct {
	instance aastypes.IMultiLanguageProperty
	enhancement E
}

func (emlp *enhancedMultiLanguageProperty[E]) ModelType(
) aastypes.ModelType {
	return emlp.instance.ModelType()
}

func (emlp *enhancedMultiLanguageProperty[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return emlp.instance.DescendOnce(action)
}

func (emlp *enhancedMultiLanguageProperty[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return emlp.instance.Descend(action)
}

func (emlp *enhancedMultiLanguageProperty[E]) Extensions(
) []aastypes.IExtension {
	return emlp.Extensions()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	emlp.SetExtensions(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) Category(
) *string {
	return emlp.Category()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetCategory(
	value *string,
) {
	emlp.SetCategory(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) IDShort(
) *string {
	return emlp.IDShort()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetIDShort(
	value *string,
) {
	emlp.SetIDShort(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return emlp.DisplayName()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	emlp.SetDisplayName(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) Description(
) []aastypes.ILangStringTextType {
	return emlp.Description()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	emlp.SetDescription(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) SemanticID(
) aastypes.IReference {
	return emlp.SemanticID()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetSemanticID(
	value aastypes.IReference,
) {
	emlp.SetSemanticID(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return emlp.SupplementalSemanticIDs()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	emlp.SetSupplementalSemanticIDs(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) Qualifiers(
) []aastypes.IQualifier {
	return emlp.Qualifiers()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	emlp.SetQualifiers(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return emlp.EmbeddedDataSpecifications()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	emlp.SetEmbeddedDataSpecifications(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) Value(
) []aastypes.ILangStringTextType {
	return emlp.Value()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetValue(
	value []aastypes.ILangStringTextType,
) {
	emlp.SetValue(value)
}

func (emlp *enhancedMultiLanguageProperty[E]) ValueID(
) aastypes.IReference {
	return emlp.ValueID()
}

func (emlp *enhancedMultiLanguageProperty[E]) SetValueID(
	value aastypes.IReference,
) {
	emlp.SetValueID(value)
}

func (mlp *enhancedMultiLanguageProperty[E]) CategoryOrDefault() string {
	return mlp.instance.CategoryOrDefault()
}

func wrapMultiLanguageProperty[E any](
	that aastypes.IMultiLanguageProperty,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IMultiLanguageProperty) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedMultiLanguageProperty[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theValue := that.Value()
	if theValue != nil {
		for i, v := range theValue {
			theValue[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theValueID := that.ValueID()
	if theValueID != nil {
		that.SetValueID(
			Wrap[E](
				theValueID,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedRange[E any] struct {
	instance aastypes.IRange
	enhancement E
}

func (er *enhancedRange[E]) ModelType(
) aastypes.ModelType {
	return er.instance.ModelType()
}

func (er *enhancedRange[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return er.instance.DescendOnce(action)
}

func (er *enhancedRange[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return er.instance.Descend(action)
}

func (er *enhancedRange[E]) Extensions(
) []aastypes.IExtension {
	return er.Extensions()
}

func (er *enhancedRange[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	er.SetExtensions(value)
}

func (er *enhancedRange[E]) Category(
) *string {
	return er.Category()
}

func (er *enhancedRange[E]) SetCategory(
	value *string,
) {
	er.SetCategory(value)
}

func (er *enhancedRange[E]) IDShort(
) *string {
	return er.IDShort()
}

func (er *enhancedRange[E]) SetIDShort(
	value *string,
) {
	er.SetIDShort(value)
}

func (er *enhancedRange[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return er.DisplayName()
}

func (er *enhancedRange[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	er.SetDisplayName(value)
}

func (er *enhancedRange[E]) Description(
) []aastypes.ILangStringTextType {
	return er.Description()
}

func (er *enhancedRange[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	er.SetDescription(value)
}

func (er *enhancedRange[E]) SemanticID(
) aastypes.IReference {
	return er.SemanticID()
}

func (er *enhancedRange[E]) SetSemanticID(
	value aastypes.IReference,
) {
	er.SetSemanticID(value)
}

func (er *enhancedRange[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return er.SupplementalSemanticIDs()
}

func (er *enhancedRange[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	er.SetSupplementalSemanticIDs(value)
}

func (er *enhancedRange[E]) Qualifiers(
) []aastypes.IQualifier {
	return er.Qualifiers()
}

func (er *enhancedRange[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	er.SetQualifiers(value)
}

func (er *enhancedRange[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return er.EmbeddedDataSpecifications()
}

func (er *enhancedRange[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	er.SetEmbeddedDataSpecifications(value)
}

func (er *enhancedRange[E]) ValueType(
) aastypes.DataTypeDefXSD {
	return er.ValueType()
}

func (er *enhancedRange[E]) SetValueType(
	value aastypes.DataTypeDefXSD,
) {
	er.SetValueType(value)
}

func (er *enhancedRange[E]) Min(
) *string {
	return er.Min()
}

func (er *enhancedRange[E]) SetMin(
	value *string,
) {
	er.SetMin(value)
}

func (er *enhancedRange[E]) Max(
) *string {
	return er.Max()
}

func (er *enhancedRange[E]) SetMax(
	value *string,
) {
	er.SetMax(value)
}

func (r *enhancedRange[E]) CategoryOrDefault() string {
	return r.instance.CategoryOrDefault()
}

func wrapRange[E any](
	that aastypes.IRange,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IRange) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedRange[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	return
}

type enhancedReferenceElement[E any] struct {
	instance aastypes.IReferenceElement
	enhancement E
}

func (ere *enhancedReferenceElement[E]) ModelType(
) aastypes.ModelType {
	return ere.instance.ModelType()
}

func (ere *enhancedReferenceElement[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ere.instance.DescendOnce(action)
}

func (ere *enhancedReferenceElement[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ere.instance.Descend(action)
}

func (ere *enhancedReferenceElement[E]) Extensions(
) []aastypes.IExtension {
	return ere.Extensions()
}

func (ere *enhancedReferenceElement[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ere.SetExtensions(value)
}

func (ere *enhancedReferenceElement[E]) Category(
) *string {
	return ere.Category()
}

func (ere *enhancedReferenceElement[E]) SetCategory(
	value *string,
) {
	ere.SetCategory(value)
}

func (ere *enhancedReferenceElement[E]) IDShort(
) *string {
	return ere.IDShort()
}

func (ere *enhancedReferenceElement[E]) SetIDShort(
	value *string,
) {
	ere.SetIDShort(value)
}

func (ere *enhancedReferenceElement[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ere.DisplayName()
}

func (ere *enhancedReferenceElement[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ere.SetDisplayName(value)
}

func (ere *enhancedReferenceElement[E]) Description(
) []aastypes.ILangStringTextType {
	return ere.Description()
}

func (ere *enhancedReferenceElement[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ere.SetDescription(value)
}

func (ere *enhancedReferenceElement[E]) SemanticID(
) aastypes.IReference {
	return ere.SemanticID()
}

func (ere *enhancedReferenceElement[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ere.SetSemanticID(value)
}

func (ere *enhancedReferenceElement[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ere.SupplementalSemanticIDs()
}

func (ere *enhancedReferenceElement[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ere.SetSupplementalSemanticIDs(value)
}

func (ere *enhancedReferenceElement[E]) Qualifiers(
) []aastypes.IQualifier {
	return ere.Qualifiers()
}

func (ere *enhancedReferenceElement[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ere.SetQualifiers(value)
}

func (ere *enhancedReferenceElement[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ere.EmbeddedDataSpecifications()
}

func (ere *enhancedReferenceElement[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ere.SetEmbeddedDataSpecifications(value)
}

func (ere *enhancedReferenceElement[E]) Value(
) aastypes.IReference {
	return ere.Value()
}

func (ere *enhancedReferenceElement[E]) SetValue(
	value aastypes.IReference,
) {
	ere.SetValue(value)
}

func (re *enhancedReferenceElement[E]) CategoryOrDefault() string {
	return re.instance.CategoryOrDefault()
}

func wrapReferenceElement[E any](
	that aastypes.IReferenceElement,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IReferenceElement) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedReferenceElement[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theValue := that.Value()
	if theValue != nil {
		that.SetValue(
			Wrap[E](
				theValue,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedBlob[E any] struct {
	instance aastypes.IBlob
	enhancement E
}

func (eb *enhancedBlob[E]) ModelType(
) aastypes.ModelType {
	return eb.instance.ModelType()
}

func (eb *enhancedBlob[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eb.instance.DescendOnce(action)
}

func (eb *enhancedBlob[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eb.instance.Descend(action)
}

func (eb *enhancedBlob[E]) Extensions(
) []aastypes.IExtension {
	return eb.Extensions()
}

func (eb *enhancedBlob[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	eb.SetExtensions(value)
}

func (eb *enhancedBlob[E]) Category(
) *string {
	return eb.Category()
}

func (eb *enhancedBlob[E]) SetCategory(
	value *string,
) {
	eb.SetCategory(value)
}

func (eb *enhancedBlob[E]) IDShort(
) *string {
	return eb.IDShort()
}

func (eb *enhancedBlob[E]) SetIDShort(
	value *string,
) {
	eb.SetIDShort(value)
}

func (eb *enhancedBlob[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return eb.DisplayName()
}

func (eb *enhancedBlob[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	eb.SetDisplayName(value)
}

func (eb *enhancedBlob[E]) Description(
) []aastypes.ILangStringTextType {
	return eb.Description()
}

func (eb *enhancedBlob[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	eb.SetDescription(value)
}

func (eb *enhancedBlob[E]) SemanticID(
) aastypes.IReference {
	return eb.SemanticID()
}

func (eb *enhancedBlob[E]) SetSemanticID(
	value aastypes.IReference,
) {
	eb.SetSemanticID(value)
}

func (eb *enhancedBlob[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return eb.SupplementalSemanticIDs()
}

func (eb *enhancedBlob[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	eb.SetSupplementalSemanticIDs(value)
}

func (eb *enhancedBlob[E]) Qualifiers(
) []aastypes.IQualifier {
	return eb.Qualifiers()
}

func (eb *enhancedBlob[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	eb.SetQualifiers(value)
}

func (eb *enhancedBlob[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return eb.EmbeddedDataSpecifications()
}

func (eb *enhancedBlob[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	eb.SetEmbeddedDataSpecifications(value)
}

func (eb *enhancedBlob[E]) Value(
) []byte {
	return eb.Value()
}

func (eb *enhancedBlob[E]) SetValue(
	value []byte,
) {
	eb.SetValue(value)
}

func (eb *enhancedBlob[E]) ContentType(
) string {
	return eb.ContentType()
}

func (eb *enhancedBlob[E]) SetContentType(
	value string,
) {
	eb.SetContentType(value)
}

func (b *enhancedBlob[E]) CategoryOrDefault() string {
	return b.instance.CategoryOrDefault()
}

func wrapBlob[E any](
	that aastypes.IBlob,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IBlob) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedBlob[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	return
}

type enhancedFile[E any] struct {
	instance aastypes.IFile
	enhancement E
}

func (ef *enhancedFile[E]) ModelType(
) aastypes.ModelType {
	return ef.instance.ModelType()
}

func (ef *enhancedFile[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ef.instance.DescendOnce(action)
}

func (ef *enhancedFile[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ef.instance.Descend(action)
}

func (ef *enhancedFile[E]) Extensions(
) []aastypes.IExtension {
	return ef.Extensions()
}

func (ef *enhancedFile[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ef.SetExtensions(value)
}

func (ef *enhancedFile[E]) Category(
) *string {
	return ef.Category()
}

func (ef *enhancedFile[E]) SetCategory(
	value *string,
) {
	ef.SetCategory(value)
}

func (ef *enhancedFile[E]) IDShort(
) *string {
	return ef.IDShort()
}

func (ef *enhancedFile[E]) SetIDShort(
	value *string,
) {
	ef.SetIDShort(value)
}

func (ef *enhancedFile[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ef.DisplayName()
}

func (ef *enhancedFile[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ef.SetDisplayName(value)
}

func (ef *enhancedFile[E]) Description(
) []aastypes.ILangStringTextType {
	return ef.Description()
}

func (ef *enhancedFile[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ef.SetDescription(value)
}

func (ef *enhancedFile[E]) SemanticID(
) aastypes.IReference {
	return ef.SemanticID()
}

func (ef *enhancedFile[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ef.SetSemanticID(value)
}

func (ef *enhancedFile[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ef.SupplementalSemanticIDs()
}

func (ef *enhancedFile[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ef.SetSupplementalSemanticIDs(value)
}

func (ef *enhancedFile[E]) Qualifiers(
) []aastypes.IQualifier {
	return ef.Qualifiers()
}

func (ef *enhancedFile[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ef.SetQualifiers(value)
}

func (ef *enhancedFile[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ef.EmbeddedDataSpecifications()
}

func (ef *enhancedFile[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ef.SetEmbeddedDataSpecifications(value)
}

func (ef *enhancedFile[E]) Value(
) *string {
	return ef.Value()
}

func (ef *enhancedFile[E]) SetValue(
	value *string,
) {
	ef.SetValue(value)
}

func (ef *enhancedFile[E]) ContentType(
) string {
	return ef.ContentType()
}

func (ef *enhancedFile[E]) SetContentType(
	value string,
) {
	ef.SetContentType(value)
}

func (f *enhancedFile[E]) CategoryOrDefault() string {
	return f.instance.CategoryOrDefault()
}

func wrapFile[E any](
	that aastypes.IFile,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IFile) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedFile[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	return
}

type enhancedAnnotatedRelationshipElement[E any] struct {
	instance aastypes.IAnnotatedRelationshipElement
	enhancement E
}

func (eare *enhancedAnnotatedRelationshipElement[E]) ModelType(
) aastypes.ModelType {
	return eare.instance.ModelType()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eare.instance.DescendOnce(action)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eare.instance.Descend(action)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Extensions(
) []aastypes.IExtension {
	return eare.Extensions()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	eare.SetExtensions(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Category(
) *string {
	return eare.Category()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetCategory(
	value *string,
) {
	eare.SetCategory(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) IDShort(
) *string {
	return eare.IDShort()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetIDShort(
	value *string,
) {
	eare.SetIDShort(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return eare.DisplayName()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	eare.SetDisplayName(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Description(
) []aastypes.ILangStringTextType {
	return eare.Description()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	eare.SetDescription(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SemanticID(
) aastypes.IReference {
	return eare.SemanticID()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetSemanticID(
	value aastypes.IReference,
) {
	eare.SetSemanticID(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return eare.SupplementalSemanticIDs()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	eare.SetSupplementalSemanticIDs(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Qualifiers(
) []aastypes.IQualifier {
	return eare.Qualifiers()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	eare.SetQualifiers(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return eare.EmbeddedDataSpecifications()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	eare.SetEmbeddedDataSpecifications(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) First(
) aastypes.IReference {
	return eare.First()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetFirst(
	value aastypes.IReference,
) {
	eare.SetFirst(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Second(
) aastypes.IReference {
	return eare.Second()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetSecond(
	value aastypes.IReference,
) {
	eare.SetSecond(value)
}

func (eare *enhancedAnnotatedRelationshipElement[E]) Annotations(
) []aastypes.IDataElement {
	return eare.Annotations()
}

func (eare *enhancedAnnotatedRelationshipElement[E]) SetAnnotations(
	value []aastypes.IDataElement,
) {
	eare.SetAnnotations(value)
}

func wrapAnnotatedRelationshipElement[E any](
	that aastypes.IAnnotatedRelationshipElement,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IAnnotatedRelationshipElement) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedAnnotatedRelationshipElement[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theFirst := that.First()
	that.SetFirst(
		Wrap[E](
			theFirst,
			factory,
		).(aastypes.IReference),
	)

	theSecond := that.Second()
	that.SetSecond(
		Wrap[E](
			theSecond,
			factory,
		).(aastypes.IReference),
	)

	theAnnotations := that.Annotations()
	if theAnnotations != nil {
		for i, v := range theAnnotations {
			theAnnotations[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IDataElement)
		}
	}

	return
}

type enhancedEntity[E any] struct {
	instance aastypes.IEntity
	enhancement E
}

func (ee *enhancedEntity[E]) ModelType(
) aastypes.ModelType {
	return ee.instance.ModelType()
}

func (ee *enhancedEntity[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ee.instance.DescendOnce(action)
}

func (ee *enhancedEntity[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ee.instance.Descend(action)
}

func (ee *enhancedEntity[E]) Extensions(
) []aastypes.IExtension {
	return ee.Extensions()
}

func (ee *enhancedEntity[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ee.SetExtensions(value)
}

func (ee *enhancedEntity[E]) Category(
) *string {
	return ee.Category()
}

func (ee *enhancedEntity[E]) SetCategory(
	value *string,
) {
	ee.SetCategory(value)
}

func (ee *enhancedEntity[E]) IDShort(
) *string {
	return ee.IDShort()
}

func (ee *enhancedEntity[E]) SetIDShort(
	value *string,
) {
	ee.SetIDShort(value)
}

func (ee *enhancedEntity[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ee.DisplayName()
}

func (ee *enhancedEntity[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ee.SetDisplayName(value)
}

func (ee *enhancedEntity[E]) Description(
) []aastypes.ILangStringTextType {
	return ee.Description()
}

func (ee *enhancedEntity[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ee.SetDescription(value)
}

func (ee *enhancedEntity[E]) SemanticID(
) aastypes.IReference {
	return ee.SemanticID()
}

func (ee *enhancedEntity[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ee.SetSemanticID(value)
}

func (ee *enhancedEntity[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ee.SupplementalSemanticIDs()
}

func (ee *enhancedEntity[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ee.SetSupplementalSemanticIDs(value)
}

func (ee *enhancedEntity[E]) Qualifiers(
) []aastypes.IQualifier {
	return ee.Qualifiers()
}

func (ee *enhancedEntity[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ee.SetQualifiers(value)
}

func (ee *enhancedEntity[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ee.EmbeddedDataSpecifications()
}

func (ee *enhancedEntity[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ee.SetEmbeddedDataSpecifications(value)
}

func (ee *enhancedEntity[E]) Statements(
) []aastypes.ISubmodelElement {
	return ee.Statements()
}

func (ee *enhancedEntity[E]) SetStatements(
	value []aastypes.ISubmodelElement,
) {
	ee.SetStatements(value)
}

func (ee *enhancedEntity[E]) EntityType(
) aastypes.EntityType {
	return ee.EntityType()
}

func (ee *enhancedEntity[E]) SetEntityType(
	value aastypes.EntityType,
) {
	ee.SetEntityType(value)
}

func (ee *enhancedEntity[E]) GlobalAssetID(
) *string {
	return ee.GlobalAssetID()
}

func (ee *enhancedEntity[E]) SetGlobalAssetID(
	value *string,
) {
	ee.SetGlobalAssetID(value)
}

func (ee *enhancedEntity[E]) SpecificAssetIDs(
) []aastypes.ISpecificAssetID {
	return ee.SpecificAssetIDs()
}

func (ee *enhancedEntity[E]) SetSpecificAssetIDs(
	value []aastypes.ISpecificAssetID,
) {
	ee.SetSpecificAssetIDs(value)
}

func wrapEntity[E any](
	that aastypes.IEntity,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IEntity) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedEntity[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theStatements := that.Statements()
	if theStatements != nil {
		for i, v := range theStatements {
			theStatements[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISubmodelElement)
		}
	}

	theSpecificAssetIDs := that.SpecificAssetIDs()
	if theSpecificAssetIDs != nil {
		for i, v := range theSpecificAssetIDs {
			theSpecificAssetIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISpecificAssetID)
		}
	}

	return
}

type enhancedEventPayload[E any] struct {
	instance aastypes.IEventPayload
	enhancement E
}

func (eep *enhancedEventPayload[E]) ModelType(
) aastypes.ModelType {
	return eep.instance.ModelType()
}

func (eep *enhancedEventPayload[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eep.instance.DescendOnce(action)
}

func (eep *enhancedEventPayload[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eep.instance.Descend(action)
}

func (eep *enhancedEventPayload[E]) Source(
) aastypes.IReference {
	return eep.Source()
}

func (eep *enhancedEventPayload[E]) SetSource(
	value aastypes.IReference,
) {
	eep.SetSource(value)
}

func (eep *enhancedEventPayload[E]) SourceSemanticID(
) aastypes.IReference {
	return eep.SourceSemanticID()
}

func (eep *enhancedEventPayload[E]) SetSourceSemanticID(
	value aastypes.IReference,
) {
	eep.SetSourceSemanticID(value)
}

func (eep *enhancedEventPayload[E]) ObservableReference(
) aastypes.IReference {
	return eep.ObservableReference()
}

func (eep *enhancedEventPayload[E]) SetObservableReference(
	value aastypes.IReference,
) {
	eep.SetObservableReference(value)
}

func (eep *enhancedEventPayload[E]) ObservableSemanticID(
) aastypes.IReference {
	return eep.ObservableSemanticID()
}

func (eep *enhancedEventPayload[E]) SetObservableSemanticID(
	value aastypes.IReference,
) {
	eep.SetObservableSemanticID(value)
}

func (eep *enhancedEventPayload[E]) Topic(
) *string {
	return eep.Topic()
}

func (eep *enhancedEventPayload[E]) SetTopic(
	value *string,
) {
	eep.SetTopic(value)
}

func (eep *enhancedEventPayload[E]) SubjectID(
) aastypes.IReference {
	return eep.SubjectID()
}

func (eep *enhancedEventPayload[E]) SetSubjectID(
	value aastypes.IReference,
) {
	eep.SetSubjectID(value)
}

func (eep *enhancedEventPayload[E]) TimeStamp(
) string {
	return eep.TimeStamp()
}

func (eep *enhancedEventPayload[E]) SetTimeStamp(
	value string,
) {
	eep.SetTimeStamp(value)
}

func (eep *enhancedEventPayload[E]) Payload(
) []byte {
	return eep.Payload()
}

func (eep *enhancedEventPayload[E]) SetPayload(
	value []byte,
) {
	eep.SetPayload(value)
}

func wrapEventPayload[E any](
	that aastypes.IEventPayload,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IEventPayload) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedEventPayload[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theSource := that.Source()
	that.SetSource(
		Wrap[E](
			theSource,
			factory,
		).(aastypes.IReference),
	)

	theSourceSemanticID := that.SourceSemanticID()
	if theSourceSemanticID != nil {
		that.SetSourceSemanticID(
			Wrap[E](
				theSourceSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theObservableReference := that.ObservableReference()
	that.SetObservableReference(
		Wrap[E](
			theObservableReference,
			factory,
		).(aastypes.IReference),
	)

	theObservableSemanticID := that.ObservableSemanticID()
	if theObservableSemanticID != nil {
		that.SetObservableSemanticID(
			Wrap[E](
				theObservableSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSubjectID := that.SubjectID()
	if theSubjectID != nil {
		that.SetSubjectID(
			Wrap[E](
				theSubjectID,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedBasicEventElement[E any] struct {
	instance aastypes.IBasicEventElement
	enhancement E
}

func (ebee *enhancedBasicEventElement[E]) ModelType(
) aastypes.ModelType {
	return ebee.instance.ModelType()
}

func (ebee *enhancedBasicEventElement[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ebee.instance.DescendOnce(action)
}

func (ebee *enhancedBasicEventElement[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ebee.instance.Descend(action)
}

func (ebee *enhancedBasicEventElement[E]) Extensions(
) []aastypes.IExtension {
	return ebee.Extensions()
}

func (ebee *enhancedBasicEventElement[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ebee.SetExtensions(value)
}

func (ebee *enhancedBasicEventElement[E]) Category(
) *string {
	return ebee.Category()
}

func (ebee *enhancedBasicEventElement[E]) SetCategory(
	value *string,
) {
	ebee.SetCategory(value)
}

func (ebee *enhancedBasicEventElement[E]) IDShort(
) *string {
	return ebee.IDShort()
}

func (ebee *enhancedBasicEventElement[E]) SetIDShort(
	value *string,
) {
	ebee.SetIDShort(value)
}

func (ebee *enhancedBasicEventElement[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ebee.DisplayName()
}

func (ebee *enhancedBasicEventElement[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ebee.SetDisplayName(value)
}

func (ebee *enhancedBasicEventElement[E]) Description(
) []aastypes.ILangStringTextType {
	return ebee.Description()
}

func (ebee *enhancedBasicEventElement[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ebee.SetDescription(value)
}

func (ebee *enhancedBasicEventElement[E]) SemanticID(
) aastypes.IReference {
	return ebee.SemanticID()
}

func (ebee *enhancedBasicEventElement[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ebee.SetSemanticID(value)
}

func (ebee *enhancedBasicEventElement[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ebee.SupplementalSemanticIDs()
}

func (ebee *enhancedBasicEventElement[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ebee.SetSupplementalSemanticIDs(value)
}

func (ebee *enhancedBasicEventElement[E]) Qualifiers(
) []aastypes.IQualifier {
	return ebee.Qualifiers()
}

func (ebee *enhancedBasicEventElement[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ebee.SetQualifiers(value)
}

func (ebee *enhancedBasicEventElement[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ebee.EmbeddedDataSpecifications()
}

func (ebee *enhancedBasicEventElement[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ebee.SetEmbeddedDataSpecifications(value)
}

func (ebee *enhancedBasicEventElement[E]) Observed(
) aastypes.IReference {
	return ebee.Observed()
}

func (ebee *enhancedBasicEventElement[E]) SetObserved(
	value aastypes.IReference,
) {
	ebee.SetObserved(value)
}

func (ebee *enhancedBasicEventElement[E]) Direction(
) aastypes.Direction {
	return ebee.Direction()
}

func (ebee *enhancedBasicEventElement[E]) SetDirection(
	value aastypes.Direction,
) {
	ebee.SetDirection(value)
}

func (ebee *enhancedBasicEventElement[E]) State(
) aastypes.StateOfEvent {
	return ebee.State()
}

func (ebee *enhancedBasicEventElement[E]) SetState(
	value aastypes.StateOfEvent,
) {
	ebee.SetState(value)
}

func (ebee *enhancedBasicEventElement[E]) MessageTopic(
) *string {
	return ebee.MessageTopic()
}

func (ebee *enhancedBasicEventElement[E]) SetMessageTopic(
	value *string,
) {
	ebee.SetMessageTopic(value)
}

func (ebee *enhancedBasicEventElement[E]) MessageBroker(
) aastypes.IReference {
	return ebee.MessageBroker()
}

func (ebee *enhancedBasicEventElement[E]) SetMessageBroker(
	value aastypes.IReference,
) {
	ebee.SetMessageBroker(value)
}

func (ebee *enhancedBasicEventElement[E]) LastUpdate(
) *string {
	return ebee.LastUpdate()
}

func (ebee *enhancedBasicEventElement[E]) SetLastUpdate(
	value *string,
) {
	ebee.SetLastUpdate(value)
}

func (ebee *enhancedBasicEventElement[E]) MinInterval(
) *string {
	return ebee.MinInterval()
}

func (ebee *enhancedBasicEventElement[E]) SetMinInterval(
	value *string,
) {
	ebee.SetMinInterval(value)
}

func (ebee *enhancedBasicEventElement[E]) MaxInterval(
) *string {
	return ebee.MaxInterval()
}

func (ebee *enhancedBasicEventElement[E]) SetMaxInterval(
	value *string,
) {
	ebee.SetMaxInterval(value)
}

func wrapBasicEventElement[E any](
	that aastypes.IBasicEventElement,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IBasicEventElement) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedBasicEventElement[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theObserved := that.Observed()
	that.SetObserved(
		Wrap[E](
			theObserved,
			factory,
		).(aastypes.IReference),
	)

	theMessageBroker := that.MessageBroker()
	if theMessageBroker != nil {
		that.SetMessageBroker(
			Wrap[E](
				theMessageBroker,
				factory,
			).(aastypes.IReference),
		)
	}

	return
}

type enhancedOperation[E any] struct {
	instance aastypes.IOperation
	enhancement E
}

func (eo *enhancedOperation[E]) ModelType(
) aastypes.ModelType {
	return eo.instance.ModelType()
}

func (eo *enhancedOperation[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eo.instance.DescendOnce(action)
}

func (eo *enhancedOperation[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eo.instance.Descend(action)
}

func (eo *enhancedOperation[E]) Extensions(
) []aastypes.IExtension {
	return eo.Extensions()
}

func (eo *enhancedOperation[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	eo.SetExtensions(value)
}

func (eo *enhancedOperation[E]) Category(
) *string {
	return eo.Category()
}

func (eo *enhancedOperation[E]) SetCategory(
	value *string,
) {
	eo.SetCategory(value)
}

func (eo *enhancedOperation[E]) IDShort(
) *string {
	return eo.IDShort()
}

func (eo *enhancedOperation[E]) SetIDShort(
	value *string,
) {
	eo.SetIDShort(value)
}

func (eo *enhancedOperation[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return eo.DisplayName()
}

func (eo *enhancedOperation[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	eo.SetDisplayName(value)
}

func (eo *enhancedOperation[E]) Description(
) []aastypes.ILangStringTextType {
	return eo.Description()
}

func (eo *enhancedOperation[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	eo.SetDescription(value)
}

func (eo *enhancedOperation[E]) SemanticID(
) aastypes.IReference {
	return eo.SemanticID()
}

func (eo *enhancedOperation[E]) SetSemanticID(
	value aastypes.IReference,
) {
	eo.SetSemanticID(value)
}

func (eo *enhancedOperation[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return eo.SupplementalSemanticIDs()
}

func (eo *enhancedOperation[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	eo.SetSupplementalSemanticIDs(value)
}

func (eo *enhancedOperation[E]) Qualifiers(
) []aastypes.IQualifier {
	return eo.Qualifiers()
}

func (eo *enhancedOperation[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	eo.SetQualifiers(value)
}

func (eo *enhancedOperation[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return eo.EmbeddedDataSpecifications()
}

func (eo *enhancedOperation[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	eo.SetEmbeddedDataSpecifications(value)
}

func (eo *enhancedOperation[E]) InputVariables(
) []aastypes.IOperationVariable {
	return eo.InputVariables()
}

func (eo *enhancedOperation[E]) SetInputVariables(
	value []aastypes.IOperationVariable,
) {
	eo.SetInputVariables(value)
}

func (eo *enhancedOperation[E]) OutputVariables(
) []aastypes.IOperationVariable {
	return eo.OutputVariables()
}

func (eo *enhancedOperation[E]) SetOutputVariables(
	value []aastypes.IOperationVariable,
) {
	eo.SetOutputVariables(value)
}

func (eo *enhancedOperation[E]) InoutputVariables(
) []aastypes.IOperationVariable {
	return eo.InoutputVariables()
}

func (eo *enhancedOperation[E]) SetInoutputVariables(
	value []aastypes.IOperationVariable,
) {
	eo.SetInoutputVariables(value)
}

func wrapOperation[E any](
	that aastypes.IOperation,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IOperation) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedOperation[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theInputVariables := that.InputVariables()
	if theInputVariables != nil {
		for i, v := range theInputVariables {
			theInputVariables[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IOperationVariable)
		}
	}

	theOutputVariables := that.OutputVariables()
	if theOutputVariables != nil {
		for i, v := range theOutputVariables {
			theOutputVariables[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IOperationVariable)
		}
	}

	theInoutputVariables := that.InoutputVariables()
	if theInoutputVariables != nil {
		for i, v := range theInoutputVariables {
			theInoutputVariables[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IOperationVariable)
		}
	}

	return
}

type enhancedOperationVariable[E any] struct {
	instance aastypes.IOperationVariable
	enhancement E
}

func (eov *enhancedOperationVariable[E]) ModelType(
) aastypes.ModelType {
	return eov.instance.ModelType()
}

func (eov *enhancedOperationVariable[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eov.instance.DescendOnce(action)
}

func (eov *enhancedOperationVariable[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eov.instance.Descend(action)
}

func (eov *enhancedOperationVariable[E]) Value(
) aastypes.ISubmodelElement {
	return eov.Value()
}

func (eov *enhancedOperationVariable[E]) SetValue(
	value aastypes.ISubmodelElement,
) {
	eov.SetValue(value)
}

func wrapOperationVariable[E any](
	that aastypes.IOperationVariable,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IOperationVariable) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedOperationVariable[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theValue := that.Value()
	that.SetValue(
		Wrap[E](
			theValue,
			factory,
		).(aastypes.ISubmodelElement),
	)

	return
}

type enhancedCapability[E any] struct {
	instance aastypes.ICapability
	enhancement E
}

func (ec *enhancedCapability[E]) ModelType(
) aastypes.ModelType {
	return ec.instance.ModelType()
}

func (ec *enhancedCapability[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ec.instance.DescendOnce(action)
}

func (ec *enhancedCapability[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ec.instance.Descend(action)
}

func (ec *enhancedCapability[E]) Extensions(
) []aastypes.IExtension {
	return ec.Extensions()
}

func (ec *enhancedCapability[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ec.SetExtensions(value)
}

func (ec *enhancedCapability[E]) Category(
) *string {
	return ec.Category()
}

func (ec *enhancedCapability[E]) SetCategory(
	value *string,
) {
	ec.SetCategory(value)
}

func (ec *enhancedCapability[E]) IDShort(
) *string {
	return ec.IDShort()
}

func (ec *enhancedCapability[E]) SetIDShort(
	value *string,
) {
	ec.SetIDShort(value)
}

func (ec *enhancedCapability[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ec.DisplayName()
}

func (ec *enhancedCapability[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ec.SetDisplayName(value)
}

func (ec *enhancedCapability[E]) Description(
) []aastypes.ILangStringTextType {
	return ec.Description()
}

func (ec *enhancedCapability[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ec.SetDescription(value)
}

func (ec *enhancedCapability[E]) SemanticID(
) aastypes.IReference {
	return ec.SemanticID()
}

func (ec *enhancedCapability[E]) SetSemanticID(
	value aastypes.IReference,
) {
	ec.SetSemanticID(value)
}

func (ec *enhancedCapability[E]) SupplementalSemanticIDs(
) []aastypes.IReference {
	return ec.SupplementalSemanticIDs()
}

func (ec *enhancedCapability[E]) SetSupplementalSemanticIDs(
	value []aastypes.IReference,
) {
	ec.SetSupplementalSemanticIDs(value)
}

func (ec *enhancedCapability[E]) Qualifiers(
) []aastypes.IQualifier {
	return ec.Qualifiers()
}

func (ec *enhancedCapability[E]) SetQualifiers(
	value []aastypes.IQualifier,
) {
	ec.SetQualifiers(value)
}

func (ec *enhancedCapability[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ec.EmbeddedDataSpecifications()
}

func (ec *enhancedCapability[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ec.SetEmbeddedDataSpecifications(value)
}

func wrapCapability[E any](
	that aastypes.ICapability,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ICapability) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedCapability[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theSemanticID := that.SemanticID()
	if theSemanticID != nil {
		that.SetSemanticID(
			Wrap[E](
				theSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	if theSupplementalSemanticIDs != nil {
		for i, v := range theSupplementalSemanticIDs {
			theSupplementalSemanticIDs[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	theQualifiers := that.Qualifiers()
	if theQualifiers != nil {
		for i, v := range theQualifiers {
			theQualifiers[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IQualifier)
		}
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	return
}

type enhancedConceptDescription[E any] struct {
	instance aastypes.IConceptDescription
	enhancement E
}

func (ecd *enhancedConceptDescription[E]) ModelType(
) aastypes.ModelType {
	return ecd.instance.ModelType()
}

func (ecd *enhancedConceptDescription[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ecd.instance.DescendOnce(action)
}

func (ecd *enhancedConceptDescription[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ecd.instance.Descend(action)
}

func (ecd *enhancedConceptDescription[E]) Extensions(
) []aastypes.IExtension {
	return ecd.Extensions()
}

func (ecd *enhancedConceptDescription[E]) SetExtensions(
	value []aastypes.IExtension,
) {
	ecd.SetExtensions(value)
}

func (ecd *enhancedConceptDescription[E]) Category(
) *string {
	return ecd.Category()
}

func (ecd *enhancedConceptDescription[E]) SetCategory(
	value *string,
) {
	ecd.SetCategory(value)
}

func (ecd *enhancedConceptDescription[E]) IDShort(
) *string {
	return ecd.IDShort()
}

func (ecd *enhancedConceptDescription[E]) SetIDShort(
	value *string,
) {
	ecd.SetIDShort(value)
}

func (ecd *enhancedConceptDescription[E]) DisplayName(
) []aastypes.ILangStringNameType {
	return ecd.DisplayName()
}

func (ecd *enhancedConceptDescription[E]) SetDisplayName(
	value []aastypes.ILangStringNameType,
) {
	ecd.SetDisplayName(value)
}

func (ecd *enhancedConceptDescription[E]) Description(
) []aastypes.ILangStringTextType {
	return ecd.Description()
}

func (ecd *enhancedConceptDescription[E]) SetDescription(
	value []aastypes.ILangStringTextType,
) {
	ecd.SetDescription(value)
}

func (ecd *enhancedConceptDescription[E]) Administration(
) aastypes.IAdministrativeInformation {
	return ecd.Administration()
}

func (ecd *enhancedConceptDescription[E]) SetAdministration(
	value aastypes.IAdministrativeInformation,
) {
	ecd.SetAdministration(value)
}

func (ecd *enhancedConceptDescription[E]) ID(
) string {
	return ecd.ID()
}

func (ecd *enhancedConceptDescription[E]) SetID(
	value string,
) {
	ecd.SetID(value)
}

func (ecd *enhancedConceptDescription[E]) EmbeddedDataSpecifications(
) []aastypes.IEmbeddedDataSpecification {
	return ecd.EmbeddedDataSpecifications()
}

func (ecd *enhancedConceptDescription[E]) SetEmbeddedDataSpecifications(
	value []aastypes.IEmbeddedDataSpecification,
) {
	ecd.SetEmbeddedDataSpecifications(value)
}

func (ecd *enhancedConceptDescription[E]) IsCaseOf(
) []aastypes.IReference {
	return ecd.IsCaseOf()
}

func (ecd *enhancedConceptDescription[E]) SetIsCaseOf(
	value []aastypes.IReference,
) {
	ecd.SetIsCaseOf(value)
}

func wrapConceptDescription[E any](
	that aastypes.IConceptDescription,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IConceptDescription) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedConceptDescription[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theExtensions := that.Extensions()
	if theExtensions != nil {
		for i, v := range theExtensions {
			theExtensions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IExtension)
		}
	}

	theDisplayName := that.DisplayName()
	if theDisplayName != nil {
		for i, v := range theDisplayName {
			theDisplayName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringNameType)
		}
	}

	theDescription := that.Description()
	if theDescription != nil {
		for i, v := range theDescription {
			theDescription[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringTextType)
		}
	}

	theAdministration := that.Administration()
	if theAdministration != nil {
		that.SetAdministration(
			Wrap[E](
				theAdministration,
				factory,
			).(aastypes.IAdministrativeInformation),
		)
	}

	theEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	if theEmbeddedDataSpecifications != nil {
		for i, v := range theEmbeddedDataSpecifications {
			theEmbeddedDataSpecifications[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IEmbeddedDataSpecification)
		}
	}

	theIsCaseOf := that.IsCaseOf()
	if theIsCaseOf != nil {
		for i, v := range theIsCaseOf {
			theIsCaseOf[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IReference)
		}
	}

	return
}

type enhancedReference[E any] struct {
	instance aastypes.IReference
	enhancement E
}

func (er *enhancedReference[E]) ModelType(
) aastypes.ModelType {
	return er.instance.ModelType()
}

func (er *enhancedReference[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return er.instance.DescendOnce(action)
}

func (er *enhancedReference[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return er.instance.Descend(action)
}

func (er *enhancedReference[E]) Type(
) aastypes.ReferenceTypes {
	return er.Type()
}

func (er *enhancedReference[E]) SetType(
	value aastypes.ReferenceTypes,
) {
	er.SetType(value)
}

func (er *enhancedReference[E]) ReferredSemanticID(
) aastypes.IReference {
	return er.ReferredSemanticID()
}

func (er *enhancedReference[E]) SetReferredSemanticID(
	value aastypes.IReference,
) {
	er.SetReferredSemanticID(value)
}

func (er *enhancedReference[E]) Keys(
) []aastypes.IKey {
	return er.Keys()
}

func (er *enhancedReference[E]) SetKeys(
	value []aastypes.IKey,
) {
	er.SetKeys(value)
}

func wrapReference[E any](
	that aastypes.IReference,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IReference) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedReference[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theReferredSemanticID := that.ReferredSemanticID()
	if theReferredSemanticID != nil {
		that.SetReferredSemanticID(
			Wrap[E](
				theReferredSemanticID,
				factory,
			).(aastypes.IReference),
		)
	}

	theKeys := that.Keys()
	for i, v := range theKeys {
		theKeys[i] = Wrap[E](
			v,
			factory,
		).(aastypes.IKey)
	}

	return
}

type enhancedKey[E any] struct {
	instance aastypes.IKey
	enhancement E
}

func (ek *enhancedKey[E]) ModelType(
) aastypes.ModelType {
	return ek.instance.ModelType()
}

func (ek *enhancedKey[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ek.instance.DescendOnce(action)
}

func (ek *enhancedKey[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ek.instance.Descend(action)
}

func (ek *enhancedKey[E]) Type(
) aastypes.KeyTypes {
	return ek.Type()
}

func (ek *enhancedKey[E]) SetType(
	value aastypes.KeyTypes,
) {
	ek.SetType(value)
}

func (ek *enhancedKey[E]) Value(
) string {
	return ek.Value()
}

func (ek *enhancedKey[E]) SetValue(
	value string,
) {
	ek.SetValue(value)
}

func wrapKey[E any](
	that aastypes.IKey,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IKey) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedKey[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedLangStringNameType[E any] struct {
	instance aastypes.ILangStringNameType
	enhancement E
}

func (elsnt *enhancedLangStringNameType[E]) ModelType(
) aastypes.ModelType {
	return elsnt.instance.ModelType()
}

func (elsnt *enhancedLangStringNameType[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elsnt.instance.DescendOnce(action)
}

func (elsnt *enhancedLangStringNameType[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elsnt.instance.Descend(action)
}

func (elsnt *enhancedLangStringNameType[E]) Language(
) string {
	return elsnt.Language()
}

func (elsnt *enhancedLangStringNameType[E]) SetLanguage(
	value string,
) {
	elsnt.SetLanguage(value)
}

func (elsnt *enhancedLangStringNameType[E]) Text(
) string {
	return elsnt.Text()
}

func (elsnt *enhancedLangStringNameType[E]) SetText(
	value string,
) {
	elsnt.SetText(value)
}

func wrapLangStringNameType[E any](
	that aastypes.ILangStringNameType,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILangStringNameType) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLangStringNameType[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedLangStringTextType[E any] struct {
	instance aastypes.ILangStringTextType
	enhancement E
}

func (elstt *enhancedLangStringTextType[E]) ModelType(
) aastypes.ModelType {
	return elstt.instance.ModelType()
}

func (elstt *enhancedLangStringTextType[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elstt.instance.DescendOnce(action)
}

func (elstt *enhancedLangStringTextType[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elstt.instance.Descend(action)
}

func (elstt *enhancedLangStringTextType[E]) Language(
) string {
	return elstt.Language()
}

func (elstt *enhancedLangStringTextType[E]) SetLanguage(
	value string,
) {
	elstt.SetLanguage(value)
}

func (elstt *enhancedLangStringTextType[E]) Text(
) string {
	return elstt.Text()
}

func (elstt *enhancedLangStringTextType[E]) SetText(
	value string,
) {
	elstt.SetText(value)
}

func wrapLangStringTextType[E any](
	that aastypes.ILangStringTextType,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILangStringTextType) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLangStringTextType[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedEnvironment[E any] struct {
	instance aastypes.IEnvironment
	enhancement E
}

func (ee *enhancedEnvironment[E]) ModelType(
) aastypes.ModelType {
	return ee.instance.ModelType()
}

func (ee *enhancedEnvironment[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return ee.instance.DescendOnce(action)
}

func (ee *enhancedEnvironment[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return ee.instance.Descend(action)
}

func (ee *enhancedEnvironment[E]) AssetAdministrationShells(
) []aastypes.IAssetAdministrationShell {
	return ee.AssetAdministrationShells()
}

func (ee *enhancedEnvironment[E]) SetAssetAdministrationShells(
	value []aastypes.IAssetAdministrationShell,
) {
	ee.SetAssetAdministrationShells(value)
}

func (ee *enhancedEnvironment[E]) Submodels(
) []aastypes.ISubmodel {
	return ee.Submodels()
}

func (ee *enhancedEnvironment[E]) SetSubmodels(
	value []aastypes.ISubmodel,
) {
	ee.SetSubmodels(value)
}

func (ee *enhancedEnvironment[E]) ConceptDescriptions(
) []aastypes.IConceptDescription {
	return ee.ConceptDescriptions()
}

func (ee *enhancedEnvironment[E]) SetConceptDescriptions(
	value []aastypes.IConceptDescription,
) {
	ee.SetConceptDescriptions(value)
}

func wrapEnvironment[E any](
	that aastypes.IEnvironment,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IEnvironment) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedEnvironment[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theAssetAdministrationShells := that.AssetAdministrationShells()
	if theAssetAdministrationShells != nil {
		for i, v := range theAssetAdministrationShells {
			theAssetAdministrationShells[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IAssetAdministrationShell)
		}
	}

	theSubmodels := that.Submodels()
	if theSubmodels != nil {
		for i, v := range theSubmodels {
			theSubmodels[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ISubmodel)
		}
	}

	theConceptDescriptions := that.ConceptDescriptions()
	if theConceptDescriptions != nil {
		for i, v := range theConceptDescriptions {
			theConceptDescriptions[i] = Wrap[E](
				v,
				factory,
			).(aastypes.IConceptDescription)
		}
	}

	return
}

type enhancedEmbeddedDataSpecification[E any] struct {
	instance aastypes.IEmbeddedDataSpecification
	enhancement E
}

func (eeds *enhancedEmbeddedDataSpecification[E]) ModelType(
) aastypes.ModelType {
	return eeds.instance.ModelType()
}

func (eeds *enhancedEmbeddedDataSpecification[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return eeds.instance.DescendOnce(action)
}

func (eeds *enhancedEmbeddedDataSpecification[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return eeds.instance.Descend(action)
}

func (eeds *enhancedEmbeddedDataSpecification[E]) DataSpecification(
) aastypes.IReference {
	return eeds.DataSpecification()
}

func (eeds *enhancedEmbeddedDataSpecification[E]) SetDataSpecification(
	value aastypes.IReference,
) {
	eeds.SetDataSpecification(value)
}

func (eeds *enhancedEmbeddedDataSpecification[E]) DataSpecificationContent(
) aastypes.IDataSpecificationContent {
	return eeds.DataSpecificationContent()
}

func (eeds *enhancedEmbeddedDataSpecification[E]) SetDataSpecificationContent(
	value aastypes.IDataSpecificationContent,
) {
	eeds.SetDataSpecificationContent(value)
}

func wrapEmbeddedDataSpecification[E any](
	that aastypes.IEmbeddedDataSpecification,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IEmbeddedDataSpecification) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedEmbeddedDataSpecification[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theDataSpecification := that.DataSpecification()
	that.SetDataSpecification(
		Wrap[E](
			theDataSpecification,
			factory,
		).(aastypes.IReference),
	)

	theDataSpecificationContent := that.DataSpecificationContent()
	that.SetDataSpecificationContent(
		Wrap[E](
			theDataSpecificationContent,
			factory,
		).(aastypes.IDataSpecificationContent),
	)

	return
}

type enhancedLevelType[E any] struct {
	instance aastypes.ILevelType
	enhancement E
}

func (elt *enhancedLevelType[E]) ModelType(
) aastypes.ModelType {
	return elt.instance.ModelType()
}

func (elt *enhancedLevelType[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elt.instance.DescendOnce(action)
}

func (elt *enhancedLevelType[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elt.instance.Descend(action)
}

func (elt *enhancedLevelType[E]) Min(
) bool {
	return elt.Min()
}

func (elt *enhancedLevelType[E]) SetMin(
	value bool,
) {
	elt.SetMin(value)
}

func (elt *enhancedLevelType[E]) Nom(
) bool {
	return elt.Nom()
}

func (elt *enhancedLevelType[E]) SetNom(
	value bool,
) {
	elt.SetNom(value)
}

func (elt *enhancedLevelType[E]) Typ(
) bool {
	return elt.Typ()
}

func (elt *enhancedLevelType[E]) SetTyp(
	value bool,
) {
	elt.SetTyp(value)
}

func (elt *enhancedLevelType[E]) Max(
) bool {
	return elt.Max()
}

func (elt *enhancedLevelType[E]) SetMax(
	value bool,
) {
	elt.SetMax(value)
}

func wrapLevelType[E any](
	that aastypes.ILevelType,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILevelType) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLevelType[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedValueReferencePair[E any] struct {
	instance aastypes.IValueReferencePair
	enhancement E
}

func (evrp *enhancedValueReferencePair[E]) ModelType(
) aastypes.ModelType {
	return evrp.instance.ModelType()
}

func (evrp *enhancedValueReferencePair[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return evrp.instance.DescendOnce(action)
}

func (evrp *enhancedValueReferencePair[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return evrp.instance.Descend(action)
}

func (evrp *enhancedValueReferencePair[E]) Value(
) string {
	return evrp.Value()
}

func (evrp *enhancedValueReferencePair[E]) SetValue(
	value string,
) {
	evrp.SetValue(value)
}

func (evrp *enhancedValueReferencePair[E]) ValueID(
) aastypes.IReference {
	return evrp.ValueID()
}

func (evrp *enhancedValueReferencePair[E]) SetValueID(
	value aastypes.IReference,
) {
	evrp.SetValueID(value)
}

func wrapValueReferencePair[E any](
	that aastypes.IValueReferencePair,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IValueReferencePair) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedValueReferencePair[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theValueID := that.ValueID()
	that.SetValueID(
		Wrap[E](
			theValueID,
			factory,
		).(aastypes.IReference),
	)

	return
}

type enhancedValueList[E any] struct {
	instance aastypes.IValueList
	enhancement E
}

func (evl *enhancedValueList[E]) ModelType(
) aastypes.ModelType {
	return evl.instance.ModelType()
}

func (evl *enhancedValueList[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return evl.instance.DescendOnce(action)
}

func (evl *enhancedValueList[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return evl.instance.Descend(action)
}

func (evl *enhancedValueList[E]) ValueReferencePairs(
) []aastypes.IValueReferencePair {
	return evl.ValueReferencePairs()
}

func (evl *enhancedValueList[E]) SetValueReferencePairs(
	value []aastypes.IValueReferencePair,
) {
	evl.SetValueReferencePairs(value)
}

func wrapValueList[E any](
	that aastypes.IValueList,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IValueList) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedValueList[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	theValueReferencePairs := that.ValueReferencePairs()
	for i, v := range theValueReferencePairs {
		theValueReferencePairs[i] = Wrap[E](
			v,
			factory,
		).(aastypes.IValueReferencePair)
	}

	return
}

type enhancedLangStringPreferredNameTypeIEC61360[E any] struct {
	instance aastypes.ILangStringPreferredNameTypeIEC61360
	enhancement E
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) ModelType(
) aastypes.ModelType {
	return elspnti6.instance.ModelType()
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elspnti6.instance.DescendOnce(action)
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elspnti6.instance.Descend(action)
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) Language(
) string {
	return elspnti6.Language()
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) SetLanguage(
	value string,
) {
	elspnti6.SetLanguage(value)
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) Text(
) string {
	return elspnti6.Text()
}

func (elspnti6 *enhancedLangStringPreferredNameTypeIEC61360[E]) SetText(
	value string,
) {
	elspnti6.SetText(value)
}

func wrapLangStringPreferredNameTypeIEC61360[E any](
	that aastypes.ILangStringPreferredNameTypeIEC61360,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILangStringPreferredNameTypeIEC61360) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLangStringPreferredNameTypeIEC61360[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedLangStringShortNameTypeIEC61360[E any] struct {
	instance aastypes.ILangStringShortNameTypeIEC61360
	enhancement E
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) ModelType(
) aastypes.ModelType {
	return elssnti6.instance.ModelType()
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elssnti6.instance.DescendOnce(action)
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elssnti6.instance.Descend(action)
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) Language(
) string {
	return elssnti6.Language()
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) SetLanguage(
	value string,
) {
	elssnti6.SetLanguage(value)
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) Text(
) string {
	return elssnti6.Text()
}

func (elssnti6 *enhancedLangStringShortNameTypeIEC61360[E]) SetText(
	value string,
) {
	elssnti6.SetText(value)
}

func wrapLangStringShortNameTypeIEC61360[E any](
	that aastypes.ILangStringShortNameTypeIEC61360,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILangStringShortNameTypeIEC61360) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLangStringShortNameTypeIEC61360[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedLangStringDefinitionTypeIEC61360[E any] struct {
	instance aastypes.ILangStringDefinitionTypeIEC61360
	enhancement E
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) ModelType(
) aastypes.ModelType {
	return elsdti6.instance.ModelType()
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return elsdti6.instance.DescendOnce(action)
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return elsdti6.instance.Descend(action)
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) Language(
) string {
	return elsdti6.Language()
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) SetLanguage(
	value string,
) {
	elsdti6.SetLanguage(value)
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) Text(
) string {
	return elsdti6.Text()
}

func (elsdti6 *enhancedLangStringDefinitionTypeIEC61360[E]) SetText(
	value string,
) {
	elsdti6.SetText(value)
}

func wrapLangStringDefinitionTypeIEC61360[E any](
	that aastypes.ILangStringDefinitionTypeIEC61360,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.ILangStringDefinitionTypeIEC61360) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedLangStringDefinitionTypeIEC61360[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	return
}

type enhancedDataSpecificationIEC61360[E any] struct {
	instance aastypes.IDataSpecificationIEC61360
	enhancement E
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) ModelType(
) aastypes.ModelType {
	return edsi6.instance.ModelType()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) DescendOnce(
	action func(aastypes.IClass)bool,
) bool {
	return edsi6.instance.DescendOnce(action)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) Descend(
	action func(aastypes.IClass) bool,
) bool {
	return edsi6.instance.Descend(action)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) PreferredName(
) []aastypes.ILangStringPreferredNameTypeIEC61360 {
	return edsi6.PreferredName()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetPreferredName(
	value []aastypes.ILangStringPreferredNameTypeIEC61360,
) {
	edsi6.SetPreferredName(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) ShortName(
) []aastypes.ILangStringShortNameTypeIEC61360 {
	return edsi6.ShortName()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetShortName(
	value []aastypes.ILangStringShortNameTypeIEC61360,
) {
	edsi6.SetShortName(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) Unit(
) *string {
	return edsi6.Unit()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetUnit(
	value *string,
) {
	edsi6.SetUnit(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) UnitID(
) aastypes.IReference {
	return edsi6.UnitID()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetUnitID(
	value aastypes.IReference,
) {
	edsi6.SetUnitID(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SourceOfDefinition(
) *string {
	return edsi6.SourceOfDefinition()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetSourceOfDefinition(
	value *string,
) {
	edsi6.SetSourceOfDefinition(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) Symbol(
) *string {
	return edsi6.Symbol()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetSymbol(
	value *string,
) {
	edsi6.SetSymbol(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) DataType(
) *aastypes.DataTypeIEC61360 {
	return edsi6.DataType()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetDataType(
	value *aastypes.DataTypeIEC61360,
) {
	edsi6.SetDataType(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) Definition(
) []aastypes.ILangStringDefinitionTypeIEC61360 {
	return edsi6.Definition()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetDefinition(
	value []aastypes.ILangStringDefinitionTypeIEC61360,
) {
	edsi6.SetDefinition(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) ValueFormat(
) *string {
	return edsi6.ValueFormat()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetValueFormat(
	value *string,
) {
	edsi6.SetValueFormat(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) ValueList(
) aastypes.IValueList {
	return edsi6.ValueList()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetValueList(
	value aastypes.IValueList,
) {
	edsi6.SetValueList(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) Value(
) *string {
	return edsi6.Value()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetValue(
	value *string,
) {
	edsi6.SetValue(value)
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) LevelType(
) aastypes.ILevelType {
	return edsi6.LevelType()
}

func (edsi6 *enhancedDataSpecificationIEC61360[E]) SetLevelType(
	value aastypes.ILevelType,
) {
	edsi6.SetLevelType(value)
}

func wrapDataSpecificationIEC61360[E any](
	that aastypes.IDataSpecificationIEC61360,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IDataSpecificationIEC61360) {
	// We assume that we already checked whether `that` has been enhanced
	// in the caller.

	e, shouldEnhance := factory(that)
	if shouldEnhance {
		result = &enhancedDataSpecificationIEC61360[E]{
			instance: that,
			enhancement: e,
		}
	} else {
		result = that
	}

	thePreferredName := that.PreferredName()
	for i, v := range thePreferredName {
		thePreferredName[i] = Wrap[E](
			v,
			factory,
		).(aastypes.ILangStringPreferredNameTypeIEC61360)
	}

	theShortName := that.ShortName()
	if theShortName != nil {
		for i, v := range theShortName {
			theShortName[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringShortNameTypeIEC61360)
		}
	}

	theUnitID := that.UnitID()
	if theUnitID != nil {
		that.SetUnitID(
			Wrap[E](
				theUnitID,
				factory,
			).(aastypes.IReference),
		)
	}

	theDefinition := that.Definition()
	if theDefinition != nil {
		for i, v := range theDefinition {
			theDefinition[i] = Wrap[E](
				v,
				factory,
			).(aastypes.ILangStringDefinitionTypeIEC61360)
		}
	}

	theValueList := that.ValueList()
	if theValueList != nil {
		that.SetValueList(
			Wrap[E](
				theValueList,
				factory,
			).(aastypes.IValueList),
		)
	}

	theLevelType := that.LevelType()
	if theLevelType != nil {
		that.SetLevelType(
			Wrap[E](
				theLevelType,
				factory,
			).(aastypes.ILevelType),
		)
	}

	return
}

// Wrap `that` instance recursively with the enhancement produced by the `factory`.
//
// The factory returns the enhancement, and a boolean "should-enhance". If
// the "should-enhance" is false, `that` instance is not enhance, and we simply
// return it. However, we will still continue to enhance the instances referenced 
// by `that` instance recursively.
//
// If `that` instance has been already wrapped, panic. 
func Wrap[E any](
	that aastypes.IClass,
	factory func(aastypes.IClass) (E, bool),
) (result aastypes.IClass) {
	_, ok := that.(enhanced[E])
	if ok {
		panic(
			fmt.Sprintf(
				"An instance of %T has been already wrapped: %v",
				that, that,
			),
		)
	}

	switch that.ModelType() {
	case aastypes.ModelTypeExtension:
		result = wrapExtension[E](
			that.(aastypes.IExtension),
			factory,
		)
	case aastypes.ModelTypeAdministrativeInformation:
		result = wrapAdministrativeInformation[E](
			that.(aastypes.IAdministrativeInformation),
			factory,
		)
	case aastypes.ModelTypeQualifier:
		result = wrapQualifier[E](
			that.(aastypes.IQualifier),
			factory,
		)
	case aastypes.ModelTypeAssetAdministrationShell:
		result = wrapAssetAdministrationShell[E](
			that.(aastypes.IAssetAdministrationShell),
			factory,
		)
	case aastypes.ModelTypeAssetInformation:
		result = wrapAssetInformation[E](
			that.(aastypes.IAssetInformation),
			factory,
		)
	case aastypes.ModelTypeResource:
		result = wrapResource[E](
			that.(aastypes.IResource),
			factory,
		)
	case aastypes.ModelTypeSpecificAssetID:
		result = wrapSpecificAssetID[E](
			that.(aastypes.ISpecificAssetID),
			factory,
		)
	case aastypes.ModelTypeSubmodel:
		result = wrapSubmodel[E](
			that.(aastypes.ISubmodel),
			factory,
		)
	case aastypes.ModelTypeRelationshipElement:
		result = wrapRelationshipElement[E](
			that.(aastypes.IRelationshipElement),
			factory,
		)
	case aastypes.ModelTypeSubmodelElementList:
		result = wrapSubmodelElementList[E](
			that.(aastypes.ISubmodelElementList),
			factory,
		)
	case aastypes.ModelTypeSubmodelElementCollection:
		result = wrapSubmodelElementCollection[E](
			that.(aastypes.ISubmodelElementCollection),
			factory,
		)
	case aastypes.ModelTypeProperty:
		result = wrapProperty[E](
			that.(aastypes.IProperty),
			factory,
		)
	case aastypes.ModelTypeMultiLanguageProperty:
		result = wrapMultiLanguageProperty[E](
			that.(aastypes.IMultiLanguageProperty),
			factory,
		)
	case aastypes.ModelTypeRange:
		result = wrapRange[E](
			that.(aastypes.IRange),
			factory,
		)
	case aastypes.ModelTypeReferenceElement:
		result = wrapReferenceElement[E](
			that.(aastypes.IReferenceElement),
			factory,
		)
	case aastypes.ModelTypeBlob:
		result = wrapBlob[E](
			that.(aastypes.IBlob),
			factory,
		)
	case aastypes.ModelTypeFile:
		result = wrapFile[E](
			that.(aastypes.IFile),
			factory,
		)
	case aastypes.ModelTypeAnnotatedRelationshipElement:
		result = wrapAnnotatedRelationshipElement[E](
			that.(aastypes.IAnnotatedRelationshipElement),
			factory,
		)
	case aastypes.ModelTypeEntity:
		result = wrapEntity[E](
			that.(aastypes.IEntity),
			factory,
		)
	case aastypes.ModelTypeEventPayload:
		result = wrapEventPayload[E](
			that.(aastypes.IEventPayload),
			factory,
		)
	case aastypes.ModelTypeBasicEventElement:
		result = wrapBasicEventElement[E](
			that.(aastypes.IBasicEventElement),
			factory,
		)
	case aastypes.ModelTypeOperation:
		result = wrapOperation[E](
			that.(aastypes.IOperation),
			factory,
		)
	case aastypes.ModelTypeOperationVariable:
		result = wrapOperationVariable[E](
			that.(aastypes.IOperationVariable),
			factory,
		)
	case aastypes.ModelTypeCapability:
		result = wrapCapability[E](
			that.(aastypes.ICapability),
			factory,
		)
	case aastypes.ModelTypeConceptDescription:
		result = wrapConceptDescription[E](
			that.(aastypes.IConceptDescription),
			factory,
		)
	case aastypes.ModelTypeReference:
		result = wrapReference[E](
			that.(aastypes.IReference),
			factory,
		)
	case aastypes.ModelTypeKey:
		result = wrapKey[E](
			that.(aastypes.IKey),
			factory,
		)
	case aastypes.ModelTypeLangStringNameType:
		result = wrapLangStringNameType[E](
			that.(aastypes.ILangStringNameType),
			factory,
		)
	case aastypes.ModelTypeLangStringTextType:
		result = wrapLangStringTextType[E](
			that.(aastypes.ILangStringTextType),
			factory,
		)
	case aastypes.ModelTypeEnvironment:
		result = wrapEnvironment[E](
			that.(aastypes.IEnvironment),
			factory,
		)
	case aastypes.ModelTypeEmbeddedDataSpecification:
		result = wrapEmbeddedDataSpecification[E](
			that.(aastypes.IEmbeddedDataSpecification),
			factory,
		)
	case aastypes.ModelTypeLevelType:
		result = wrapLevelType[E](
			that.(aastypes.ILevelType),
			factory,
		)
	case aastypes.ModelTypeValueReferencePair:
		result = wrapValueReferencePair[E](
			that.(aastypes.IValueReferencePair),
			factory,
		)
	case aastypes.ModelTypeValueList:
		result = wrapValueList[E](
			that.(aastypes.IValueList),
			factory,
		)
	case aastypes.ModelTypeLangStringPreferredNameTypeIEC61360:
		result = wrapLangStringPreferredNameTypeIEC61360[E](
			that.(aastypes.ILangStringPreferredNameTypeIEC61360),
			factory,
		)
	case aastypes.ModelTypeLangStringShortNameTypeIEC61360:
		result = wrapLangStringShortNameTypeIEC61360[E](
			that.(aastypes.ILangStringShortNameTypeIEC61360),
			factory,
		)
	case aastypes.ModelTypeLangStringDefinitionTypeIEC61360:
		result = wrapLangStringDefinitionTypeIEC61360[E](
			that.(aastypes.ILangStringDefinitionTypeIEC61360),
			factory,
		)
	case aastypes.ModelTypeDataSpecificationIEC61360:
		result = wrapDataSpecificationIEC61360[E](
			that.(aastypes.IDataSpecificationIEC61360),
			factory,
		)
	default:
		panic(
			fmt.Sprintf(
				"Unexpected model type: %v",
				that.ModelType(),
			),
		)
	}

	return
}

// Retrieve the enhancement from `that` instance.
//
// Return the enhancement, or `ok` false, if `that` instance has not been
// enhanced.
func Unwrap[E any](that aastypes.IClass) (enhancement E, ok bool) {
	var enh enhanced[E]
	enh, ok = that.(enhanced[E])
	if !ok {
		return
	}
	enhancement = enh.getEnhancement()
	return
}

// Retrieve the enhancement from `that` instance.
//
// If `that` instance has not been enhanced yet, panic.
func MustUnwrap[E any](that aastypes.IClass) (enhancement E) {
	var ok bool
	enhancement, ok = Unwrap[E](that)
	if !ok {
		panic(
			fmt.Sprintf(
				"An instance of %T has not been wrapped: %v",
				that, that,
			),
		)
	}
	return
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
