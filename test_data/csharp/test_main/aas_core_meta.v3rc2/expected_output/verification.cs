/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Regex = System.Text.RegularExpressions.Regex;
using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias

using Aas = AasCore.Aas3;
using Reporting = AasCore.Aas3.Reporting;
using Visitation = AasCore.Aas3.Visitation;

namespace AasCore.Aas3
{
    /// <summary>
    /// Verify that the instances of the meta-model satisfy the invariants.
    /// </summary>
    /// <example>
    /// Here is an example how to verify an instance of Resource:
    /// <code>
    /// var anInstance = new Aas.Resource(
    ///     // ... some constructor arguments ...
    /// );
    /// foreach (var error in Verification.Verify(anInstance))
    /// {
    ///     System.Console.Writeln(
    ///         $"{error.Cause} at: " +
    ///         Reporting.GenerateJsonPath(error.PathSegments));
    /// }
    /// </code>
    /// </example>
    public static class Verification
    {
        private static Regex _constructMatchesXsDateTimeStampUtc()
        {
            var digit = "[0-9]";
            var yearFrag = $"-?(([1-9]{digit}{digit}{digit}+)|(0{digit}{digit}{digit}))";
            var monthFrag = $"((0[1-9])|(1[0-2]))";
            var dayFrag = $"((0[1-9])|([12]{digit})|(3[01]))";
            var hourFrag = $"(([01]{digit})|(2[0-3]))";
            var minuteFrag = $"[0-5]{digit}";
            var secondFrag = $"([0-5]{digit})(\\.{digit}+)?";
            var endOfDayFrag = "24:00:00(\\.0+)?";
            var timezoneFrag = "Z";
            var dateTimeStampLexicalRep = $"{yearFrag}-{monthFrag}-{dayFrag}T(({hourFrag}:{minuteFrag}:{secondFrag})|{endOfDayFrag}){timezoneFrag}";
            var pattern = $"^{dateTimeStampLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDateTimeStampUtc = _constructMatchesXsDateTimeStampUtc();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:dateTimeStamp</c>.
        /// </summary>
        /// <remarks>
        /// The time zone must be fixed to UTC. We verify only that the <c>text</c> matches
        /// a pre-defined pattern. We <em>do not</em> verify that the day of month is
        /// correct nor do we check for leap seconds.
        ///
        /// See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDateTimeStampUtc(string text)
        {
            return _regexMatchesXsDateTimeStampUtc.IsMatch(text);
        }

        public static bool IsXsDateTimeStampUtc(
            string text
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        private static Regex _constructMatchesMimeType()
        {
            var tchar = "[!#$%&'*+\\-.^_`|~0-9a-zA-Z]";
            var token = $"({tchar})+";
            var type = $"{token}";
            var subtype = $"{token}";
            var ows = "[ \t]*";
            var obsText = "[\\x80-\\xff]";
            var qdText = $"([\t !#-\\[\\]-~]|{obsText})";
            var quotedPair = $"\\\\([\t !-~]|{obsText})";
            var quotedString = $"\"({qdText}|{quotedPair})*\"";
            var parameter = $"{token}=({token}|{quotedString})";
            var mediaType = $"^{type}/{subtype}({ows};{ows}{parameter})*$";

            return new Regex(mediaType);
        }

        private static readonly Regex _regexMatchesMimeType = _constructMatchesMimeType();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of MIME type.
        /// </summary>
        /// <remarks>
        /// The definition has been taken from:
        /// https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1,
        /// https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and
        /// https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6.
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesMimeType(string text)
        {
            return _regexMatchesMimeType.IsMatch(text);
        }

        private static Regex _constructMatchesRfc8089Path()
        {
            var h16 = "[0-9A-Fa-f]{1,4}";
            var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
            var ipv4address = $"{decOctet}\\.{decOctet}\\.{decOctet}\\.{decOctet}";
            var ls32 = $"({h16}:{h16}|{ipv4address})";
            var ipv6address = $"(({h16}:){{6}}{ls32}|::({h16}:){{5}}{ls32}|({h16})?::({h16}:){{4}}{ls32}|(({h16}:)?{h16})?::({h16}:){{3}}{ls32}|(({h16}:){{2}}{h16})?::({h16}:){{2}}{ls32}|(({h16}:){{3}}{h16})?::{h16}:{ls32}|(({h16}:){{4}}{h16})?::{ls32}|(({h16}:){{5}}{h16})?::{h16}|(({h16}:){{6}}{h16})?::)";
            var unreserved = "[a-zA-Z0-9\\-._~]";
            var subDelims = "[!$&'()*+,;=]";
            var ipvfuture = $"[vV][0-9A-Fa-f]+\\.({unreserved}|{subDelims}|:)+";
            var ipLiteral = $"\\[({ipv6address}|{ipvfuture})\\]";
            var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
            var regName = $"({unreserved}|{pctEncoded}|{subDelims})*";
            var host = $"({ipLiteral}|{ipv4address}|{regName})";
            var fileAuth = $"(localhost|{host})";
            var pchar = $"({unreserved}|{pctEncoded}|{subDelims}|[:@])";
            var segmentNz = $"({pchar})+";
            var segment = $"({pchar})*";
            var pathAbsolute = $"/({segmentNz}(/{segment})*)?";
            var authPath = $"({fileAuth})?{pathAbsolute}";
            var localPath = $"{pathAbsolute}";
            var fileHierPart = $"(//{authPath}|{localPath})";
            var fileScheme = "file";
            var fileUri = $"{fileScheme}:{fileHierPart}";
            var pattern = $"^{fileUri}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesRfc8089Path = _constructMatchesRfc8089Path();

        /// <summary>
        /// Check that <paramref name="text" /> is a path conforming to the pattern of RFC 8089.
        /// </summary>
        /// <remarks>
        /// The definition has been taken from:
        /// https://datatracker.ietf.org/doc/html/rfc8089
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesRfc8089Path(string text)
        {
            return _regexMatchesRfc8089Path.IsMatch(text);
        }

        private static Regex _constructMatchesBcp47()
        {
            var alphanum = "[a-zA-Z0-9]";
            var singleton = "[0-9A-WY-Za-wy-z]";
            var extension = $"{singleton}(-({alphanum}){{2,8}})+";
            var extlang = "[a-zA-Z]{3}(-[a-zA-Z]{3}){2}";
            var irregular = "(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)";
            var regular = "(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)";
            var grandfathered = $"({irregular}|{regular})";
            var language = $"([a-zA-Z]{{2,3}}(-{extlang})?|[a-zA-Z]{{4}}|[a-zA-Z]{{5,8}})";
            var script = "[a-zA-Z]{4}";
            var region = "([a-zA-Z]{2}|[0-9]{3})";
            var variant = $"(({alphanum}){{5,8}}|[0-9]({alphanum}){{3}})";
            var privateuse = $"[xX](-({alphanum}){{1,8}})+";
            var langtag = $"{language}(-{script})?(-{region})?(-{variant})*(-{extension})*(-{privateuse})?";
            var languageTag = $"({langtag}|{privateuse}|{grandfathered})";
            var pattern = $"^{languageTag}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesBcp47 = _constructMatchesBcp47();

        /// <summary>
        /// Check that <paramref name="text" /> is a valid BCP 47 language tag.
        /// </summary>
        /// <remarks>
        /// See: https://en.wikipedia.org/wiki/IETF_language_tag
        /// </remarks>
        public static bool MatchesBcp47(string text)
        {
            return _regexMatchesBcp47.IsMatch(text);
        }

        public static bool LangStringsHaveUniqueLanguages(
            IEnumerable<Aas.LangString> langStrings
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool QualifierTypesAreUnique(
            IEnumerable<Aas.Qualifier> qualifiers
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        private static Regex _constructMatchesXsAnyUri()
        {
            var scheme = "[a-zA-Z][a-zA-Z0-9+\\-.]*";
            var ucschar = "[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd]";
            var iunreserved = $"([a-zA-Z0-9\\-._~]|{ucschar})";
            var pctEncoded = "%[0-9A-Fa-f][0-9A-Fa-f]";
            var subDelims = "[!$&'()*+,;=]";
            var iuserinfo = $"({iunreserved}|{pctEncoded}|{subDelims}|:)*";
            var h16 = "[0-9A-Fa-f]{1,4}";
            var decOctet = "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])";
            var ipv4address = $"{decOctet}\\.{decOctet}\\.{decOctet}\\.{decOctet}";
            var ls32 = $"({h16}:{h16}|{ipv4address})";
            var ipv6address = $"(({h16}:){{6}}{ls32}|::({h16}:){{5}}{ls32}|({h16})?::({h16}:){{4}}{ls32}|(({h16}:)?{h16})?::({h16}:){{3}}{ls32}|(({h16}:){{2}}{h16})?::({h16}:){{2}}{ls32}|(({h16}:){{3}}{h16})?::{h16}:{ls32}|(({h16}:){{4}}{h16})?::{ls32}|(({h16}:){{5}}{h16})?::{h16}|(({h16}:){{6}}{h16})?::)";
            var unreserved = "[a-zA-Z0-9\\-._~]";
            var ipvfuture = $"[vV][0-9A-Fa-f]+\\.({unreserved}|{subDelims}|:)+";
            var ipLiteral = $"\\[({ipv6address}|{ipvfuture})\\]";
            var iregName = $"({iunreserved}|{pctEncoded}|{subDelims})*";
            var ihost = $"({ipLiteral}|{ipv4address}|{iregName})";
            var port = "[0-9]*";
            var iauthority = $"({iuserinfo}@)?{ihost}(:{port})?";
            var ipchar = $"({iunreserved}|{pctEncoded}|{subDelims}|[:@])";
            var isegment = $"({ipchar})*";
            var ipathAbempty = $"(/{isegment})*";
            var isegmentNz = $"({ipchar})+";
            var ipathAbsolute = $"/({isegmentNz}(/{isegment})*)?";
            var ipathRootless = $"{isegmentNz}(/{isegment})*";
            var ipathEmpty = $"({ipchar}){{0}}";
            var ihierPart = $"(//{iauthority}{ipathAbempty}|{ipathAbsolute}|{ipathRootless}|{ipathEmpty})";
            var iprivate = "[\\ue000-\\uf8ff\\uf0000-\\uffffd\\u100000-\\u10fffd]";
            var iquery = $"({ipchar}|{iprivate}|[/?])*";
            var ifragment = $"({ipchar}|[/?])*";
            var isegmentNzNc = $"({iunreserved}|{pctEncoded}|{subDelims}|@)+";
            var ipathNoscheme = $"{isegmentNzNc}(/{isegment})*";
            var irelativePart = $"(//{iauthority}{ipathAbempty}|{ipathAbsolute}|{ipathNoscheme}|{ipathEmpty})";
            var irelativeRef = $"{irelativePart}(\\?{iquery})?(\\#{ifragment})?";
            var iri = $"{scheme}:{ihierPart}(\\?{iquery})?(\\#{ifragment})?";
            var iriReference = $"({iri}|{irelativeRef})";
            var pattern = $"^{iriReference}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsAnyUri = _constructMatchesXsAnyUri();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:anyURI</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#anyURI and
        /// https://datatracker.ietf.org/doc/html/rfc3987
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsAnyUri(string text)
        {
            return _regexMatchesXsAnyUri.IsMatch(text);
        }

        private static Regex _constructMatchesXsBase64Binary()
        {
            var b04Char = "[AQgw]";
            var b04 = $"{b04Char}\\x20?";
            var b16Char = "[AEIMQUYcgkosw048]";
            var b16 = $"{b16Char}\\x20?";
            var b64Char = "[A-Za-z0-9+/]";
            var b64 = $"{b64Char}\\x20?";
            var b64quad = $"({b64}{b64}{b64}{b64})";
            var b64FinalQuad = $"({b64}{b64}{b64}{b64Char})";
            var padded8 = $"{b64}{b04}= ?=";
            var padded16 = $"{b64}{b64}{b16}=";
            var b64final = $"({b64FinalQuad}|{padded16}|{padded8})";
            var base64Binary = $"({b64quad}*{b64final})?";
            var pattern = $"^{base64Binary}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsBase64Binary = _constructMatchesXsBase64Binary();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:base64Binary</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#base64Binary
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsBase64Binary(string text)
        {
            return _regexMatchesXsBase64Binary.IsMatch(text);
        }

        private static Regex _constructMatchesXsBoolean()
        {
            var pattern = "^(true|false|1|0)$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsBoolean = _constructMatchesXsBoolean();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:boolean</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#boolean
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsBoolean(string text)
        {
            return _regexMatchesXsBoolean.IsMatch(text);
        }

        private static Regex _constructMatchesXsDate()
        {
            var digit = "[0-9]";
            var yearFrag = $"-?(([1-9]{digit}{digit}{digit}+)|(0{digit}{digit}{digit}))";
            var monthFrag = $"((0[1-9])|(1[0-2]))";
            var dayFrag = $"((0[1-9])|([12]{digit})|(3[01]))";
            var minuteFrag = $"[0-5]{digit}";
            var timezoneFrag = $"(Z|(\\+|-)(0{digit}|1[0-3]):{minuteFrag}|14:00)";
            var dateLexicalRep = $"{yearFrag}-{monthFrag}-{dayFrag}{timezoneFrag}?";
            var pattern = $"^{dateLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDate = _constructMatchesXsDate();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:date</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#date
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDate(string text)
        {
            return _regexMatchesXsDate.IsMatch(text);
        }

        private static Regex _constructMatchesXsDateTime()
        {
            var digit = "[0-9]";
            var yearFrag = $"-?(([1-9]{digit}{digit}{digit}+)|(0{digit}{digit}{digit}))";
            var monthFrag = $"((0[1-9])|(1[0-2]))";
            var dayFrag = $"((0[1-9])|([12]{digit})|(3[01]))";
            var hourFrag = $"(([01]{digit})|(2[0-3]))";
            var minuteFrag = $"[0-5]{digit}";
            var secondFrag = $"([0-5]{digit})(\\.{digit}+)?";
            var endOfDayFrag = "24:00:00(\\.0+)?";
            var timezoneFrag = $"(Z|(\\+|-)(0{digit}|1[0-3]):{minuteFrag}|14:00)";
            var dateTimeLexicalRep = $"{yearFrag}-{monthFrag}-{dayFrag}T(({hourFrag}:{minuteFrag}:{secondFrag})|{endOfDayFrag}){timezoneFrag}?";
            var pattern = $"^{dateTimeLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDateTime = _constructMatchesXsDateTime();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:dateTime</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#dateTime
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDateTime(string text)
        {
            return _regexMatchesXsDateTime.IsMatch(text);
        }

        private static Regex _constructMatchesXsDateTimeStamp()
        {
            var digit = "[0-9]";
            var yearFrag = $"-?(([1-9]{digit}{digit}{digit}+)|(0{digit}{digit}{digit}))";
            var monthFrag = $"((0[1-9])|(1[0-2]))";
            var dayFrag = $"((0[1-9])|([12]{digit})|(3[01]))";
            var hourFrag = $"(([01]{digit})|(2[0-3]))";
            var minuteFrag = $"[0-5]{digit}";
            var secondFrag = $"([0-5]{digit})(\\.{digit}+)?";
            var endOfDayFrag = "24:00:00(\\.0+)?";
            var timezoneFrag = $"(Z|(\\+|-)(0{digit}|1[0-3]):{minuteFrag}|14:00)";
            var dateTimeStampLexicalRep = $"{yearFrag}-{monthFrag}-{dayFrag}T(({hourFrag}:{minuteFrag}:{secondFrag})|{endOfDayFrag}){timezoneFrag}";
            var pattern = $"^{dateTimeStampLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDateTimeStamp = _constructMatchesXsDateTimeStamp();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:dateTimeStamp</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDateTimeStamp(string text)
        {
            return _regexMatchesXsDateTimeStamp.IsMatch(text);
        }

        private static Regex _constructMatchesXsDecimal()
        {
            var digit = "[0-9]";
            var unsignedNoDecimalPtNumeral = $"{digit}+";
            var noDecimalPtNumeral = $"(\\+|-)?{unsignedNoDecimalPtNumeral}";
            var fracFrag = $"{digit}+";
            var unsignedDecimalPtNumeral = $"({unsignedNoDecimalPtNumeral}\\.{fracFrag}|\\.{fracFrag})";
            var decimalPtNumeral = $"(\\+|-)?{unsignedDecimalPtNumeral}";
            var decimalLexicalRep = $"({decimalPtNumeral}|{noDecimalPtNumeral})";
            var pattern = $"^{decimalLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDecimal = _constructMatchesXsDecimal();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:decimal</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#decimal
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDecimal(string text)
        {
            return _regexMatchesXsDecimal.IsMatch(text);
        }

        private static Regex _constructMatchesXsDouble()
        {
            var doubleRep = "(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN";
            var pattern = $"^{doubleRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDouble = _constructMatchesXsDouble();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:double</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#double
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDouble(string text)
        {
            return _regexMatchesXsDouble.IsMatch(text);
        }

        private static Regex _constructMatchesXsDuration()
        {
            var durationRep = "-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))";
            var pattern = $"^{durationRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDuration = _constructMatchesXsDuration();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:duration</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#duration
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDuration(string text)
        {
            return _regexMatchesXsDuration.IsMatch(text);
        }

        private static Regex _constructMatchesXsFloat()
        {
            var floatRep = "(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN";
            var pattern = $"^{floatRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsFloat = _constructMatchesXsFloat();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:float</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#float
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsFloat(string text)
        {
            return _regexMatchesXsFloat.IsMatch(text);
        }

        private static Regex _constructMatchesXsGDay()
        {
            var gDayLexicalRep = "---(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{gDayLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsGDay = _constructMatchesXsGDay();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:gDay</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#gDay
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsGDay(string text)
        {
            return _regexMatchesXsGDay.IsMatch(text);
        }

        private static Regex _constructMatchesXsGMonth()
        {
            var gMonthLexicalRep = "--(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{gMonthLexicalRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsGMonth = _constructMatchesXsGMonth();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:gMonth</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#gMonth
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsGMonth(string text)
        {
            return _regexMatchesXsGMonth.IsMatch(text);
        }

        private static Regex _constructMatchesXsGMonthDay()
        {
            var gMonthDayRep = "--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{gMonthDayRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsGMonthDay = _constructMatchesXsGMonthDay();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:gMonthDay</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#gMonthDay
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsGMonthDay(string text)
        {
            return _regexMatchesXsGMonthDay.IsMatch(text);
        }

        private static Regex _constructMatchesXsGYear()
        {
            var gYearRep = "-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{gYearRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsGYear = _constructMatchesXsGYear();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:gYear</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#gYear
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsGYear(string text)
        {
            return _regexMatchesXsGYear.IsMatch(text);
        }

        private static Regex _constructMatchesXsGYearMonth()
        {
            var gYearMonthRep = "-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{gYearMonthRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsGYearMonth = _constructMatchesXsGYearMonth();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:gYearMonth</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#gYearMonth
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsGYearMonth(string text)
        {
            return _regexMatchesXsGYearMonth.IsMatch(text);
        }

        private static Regex _constructMatchesXsHexBinary()
        {
            var hexBinary = "([0-9a-fA-F]{2})*";
            var pattern = $"^{hexBinary}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsHexBinary = _constructMatchesXsHexBinary();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:hexBinary</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#hexBinary
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsHexBinary(string text)
        {
            return _regexMatchesXsHexBinary.IsMatch(text);
        }

        private static Regex _constructMatchesXsTime()
        {
            var timeRep = "(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?";
            var pattern = $"^{timeRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsTime = _constructMatchesXsTime();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:time</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#time
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsTime(string text)
        {
            return _regexMatchesXsTime.IsMatch(text);
        }

        private static Regex _constructMatchesXsDayTimeDuration()
        {
            var dayTimeDurationRep = "-?P((([0-9]+D)(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))";
            var pattern = $"^{dayTimeDurationRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsDayTimeDuration = _constructMatchesXsDayTimeDuration();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:dayTimeDuration</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#dayTimeDuration
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsDayTimeDuration(string text)
        {
            return _regexMatchesXsDayTimeDuration.IsMatch(text);
        }

        private static Regex _constructMatchesXsYearMonthDuration()
        {
            var yearMonthDurationRep = "-?P((([0-9]+Y)([0-9]+M)?)|([0-9]+M))";
            var pattern = $"^{yearMonthDurationRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsYearMonthDuration = _constructMatchesXsYearMonthDuration();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:yearMonthDuration</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#yearMonthDuration
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsYearMonthDuration(string text)
        {
            return _regexMatchesXsYearMonthDuration.IsMatch(text);
        }

        private static Regex _constructMatchesXsInteger()
        {
            var integerRep = "[\\-+]?[0-9]+";
            var pattern = $"^{integerRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsInteger = _constructMatchesXsInteger();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:integer</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#integer
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsInteger(string text)
        {
            return _regexMatchesXsInteger.IsMatch(text);
        }

        private static Regex _constructMatchesXsLong()
        {
            var longRep = "[\\-+]?[0-9]+";
            var pattern = $"^{longRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsLong = _constructMatchesXsLong();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:long</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#long
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsLong(string text)
        {
            return _regexMatchesXsLong.IsMatch(text);
        }

        private static Regex _constructMatchesXsInt()
        {
            var intRep = "[\\-+]?[0-9]+";
            var pattern = $"^{intRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsInt = _constructMatchesXsInt();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:int</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#int
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsInt(string text)
        {
            return _regexMatchesXsInt.IsMatch(text);
        }

        private static Regex _constructMatchesXsShort()
        {
            var shortRep = "[\\-+]?[0-9]+";
            var pattern = $"^{shortRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsShort = _constructMatchesXsShort();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:short</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#short
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsShort(string text)
        {
            return _regexMatchesXsShort.IsMatch(text);
        }

        private static Regex _constructMatchesXsByte()
        {
            var byteRep = "[\\-+]?[0-9]+";
            var pattern = $"^{byteRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsByte = _constructMatchesXsByte();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:byte</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#byte
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsByte(string text)
        {
            return _regexMatchesXsByte.IsMatch(text);
        }

        private static Regex _constructMatchesXsNonNegativeInteger()
        {
            var nonNegativeIntegerRep = "(-0|\\+?[0-9]+)";
            var pattern = $"^{nonNegativeIntegerRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsNonNegativeInteger = _constructMatchesXsNonNegativeInteger();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:nonNegativeInteger</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsNonNegativeInteger(string text)
        {
            return _regexMatchesXsNonNegativeInteger.IsMatch(text);
        }

        private static Regex _constructMatchesXsPositiveInteger()
        {
            var positiveIntegerRep = "\\+?0*[1-9][0-9]*";
            var pattern = $"^{positiveIntegerRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsPositiveInteger = _constructMatchesXsPositiveInteger();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:positiveInteger</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#positiveInteger
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsPositiveInteger(string text)
        {
            return _regexMatchesXsPositiveInteger.IsMatch(text);
        }

        private static Regex _constructMatchesXsUnsignedLong()
        {
            var unsignedLongRep = "(-0|\\+?[0-9]+)";
            var pattern = $"^{unsignedLongRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsUnsignedLong = _constructMatchesXsUnsignedLong();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:unsignedLong</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#unsignedLong
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsUnsignedLong(string text)
        {
            return _regexMatchesXsUnsignedLong.IsMatch(text);
        }

        private static Regex _constructMatchesXsUnsignedInt()
        {
            var unsignedIntRep = "(-0|\\+?[0-9]+)";
            var pattern = $"^{unsignedIntRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsUnsignedInt = _constructMatchesXsUnsignedInt();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:unsignedInt</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#unsignedInt
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsUnsignedInt(string text)
        {
            return _regexMatchesXsUnsignedInt.IsMatch(text);
        }

        private static Regex _constructMatchesXsUnsignedShort()
        {
            var unsignedShortRep = "(-0|\\+?[0-9]+)";
            var pattern = $"^{unsignedShortRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsUnsignedShort = _constructMatchesXsUnsignedShort();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:unsignedShort</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#unsignedShort
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsUnsignedShort(string text)
        {
            return _regexMatchesXsUnsignedShort.IsMatch(text);
        }

        private static Regex _constructMatchesXsUnsignedByte()
        {
            var unsignedByteRep = "(-0|\\+?[0-9]+)";
            var pattern = $"^{unsignedByteRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsUnsignedByte = _constructMatchesXsUnsignedByte();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:unsignedByte</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#unsignedByte
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsUnsignedByte(string text)
        {
            return _regexMatchesXsUnsignedByte.IsMatch(text);
        }

        private static Regex _constructMatchesXsNonPositiveInteger()
        {
            var nonPositiveIntegerRep = "(\\+0|0|-[0-9]+)";
            var pattern = $"^{nonPositiveIntegerRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsNonPositiveInteger = _constructMatchesXsNonPositiveInteger();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:nonPositiveInteger</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#nonPositiveInteger
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsNonPositiveInteger(string text)
        {
            return _regexMatchesXsNonPositiveInteger.IsMatch(text);
        }

        private static Regex _constructMatchesXsNegativeInteger()
        {
            var negativeIntegerRep = "(-0*[1-9][0-9]*)";
            var pattern = $"^{negativeIntegerRep}$";

            return new Regex(pattern);
        }

        private static readonly Regex _regexMatchesXsNegativeInteger = _constructMatchesXsNegativeInteger();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of an <c>xs:negativeInteger</c>.
        /// </summary>
        /// <remarks>
        /// See: https://www.w3.org/TR/xmlschema11-2/#negativeInteger
        /// </remarks>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool MatchesXsNegativeInteger(string text)
        {
            return _regexMatchesXsNegativeInteger.IsMatch(text);
        }

        public static bool ValueConsistentWithXsdType(
            string value,
            Aas.DataTypeDefXsd valueType
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool IsModelReferenceTo(
            Aas.ModelReference reference,
            Aas.KeyElements expected_type
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool IdShortsAreUnique(
            IEnumerable<Aas.IReferable> referables
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool ExtensionNamesAreUnique(
            IEnumerable<Aas.Extension> extensions
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool SubmodelElementsHaveIdenticalSemanticIds(
            IEnumerable<Aas.ISubmodelElement> elements
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool SubmodelElementIsOfType(
            Aas.ISubmodelElement element,
            Aas.SubmodelElementElements elementType
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        public static bool PropertiesOrRangesHaveValueType(
            IEnumerable<Aas.ISubmodelElement> elements,
            Aas.DataTypeDefXsd? valueType
        )
        {
            // NOTE (mristin, 2022-04-07):
            // We have to use nullable valueType since the compiler does not really handle
            // nullable C# value types.
            //
            // See: https://endjin.com/blog/2022/02/csharp-10-generics-nullable-references-improvements-allownull

            throw new System.NotImplementedException("TODO");
        }

        private static readonly HashSet<string> ConceptDescriptionCategories = new HashSet<string>
        {
            "some-category"
        };

        public static bool ConceptDescriptionCategoryIsValid(
            string category
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        /// <summary>
        /// Hash allowed enum values for efficient validation of enums.
        /// </summary>
        internal static class EnumValueSet
        {
            internal static HashSet<int> ForModelingKind = new HashSet<int>
            {
                (int)Aas.ModelingKind.Template,
                (int)Aas.ModelingKind.Instance
            };

            internal static HashSet<int> ForAssetKind = new HashSet<int>
            {
                (int)Aas.AssetKind.Type,
                (int)Aas.AssetKind.Instance
            };

            internal static HashSet<int> ForEntityType = new HashSet<int>
            {
                (int)Aas.EntityType.CoManagedEntity,
                (int)Aas.EntityType.SelfManagedEntity
            };

            internal static HashSet<int> ForDirection = new HashSet<int>
            {
                (int)Aas.Direction.Input,
                (int)Aas.Direction.Output
            };

            internal static HashSet<int> ForStateOfEvent = new HashSet<int>
            {
                (int)Aas.StateOfEvent.On,
                (int)Aas.StateOfEvent.Off
            };

            internal static HashSet<int> ForIdentifiableElements = new HashSet<int>
            {
                (int)Aas.IdentifiableElements.AssetAdministrationShell,
                (int)Aas.IdentifiableElements.ConceptDescription,
                (int)Aas.IdentifiableElements.Submodel
            };

            internal static HashSet<int> ForSubmodelElementElements = new HashSet<int>
            {
                (int)Aas.SubmodelElementElements.AnnotatedRelationshipElement,
                (int)Aas.SubmodelElementElements.BasicEventElement,
                (int)Aas.SubmodelElementElements.Blob,
                (int)Aas.SubmodelElementElements.Capability,
                (int)Aas.SubmodelElementElements.DataElement,
                (int)Aas.SubmodelElementElements.Entity,
                (int)Aas.SubmodelElementElements.EventElement,
                (int)Aas.SubmodelElementElements.File,
                (int)Aas.SubmodelElementElements.MultiLanguageProperty,
                (int)Aas.SubmodelElementElements.Operation,
                (int)Aas.SubmodelElementElements.Property,
                (int)Aas.SubmodelElementElements.Range,
                (int)Aas.SubmodelElementElements.ReferenceElement,
                (int)Aas.SubmodelElementElements.RelationshipElement,
                (int)Aas.SubmodelElementElements.SubmodelElement,
                (int)Aas.SubmodelElementElements.SubmodelElementList,
                (int)Aas.SubmodelElementElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForReferableElements = new HashSet<int>
            {
                (int)Aas.ReferableElements.AnnotatedRelationshipElement,
                (int)Aas.ReferableElements.AssetAdministrationShell,
                (int)Aas.ReferableElements.BasicEventElement,
                (int)Aas.ReferableElements.Blob,
                (int)Aas.ReferableElements.Capability,
                (int)Aas.ReferableElements.ConceptDescription,
                (int)Aas.ReferableElements.DataElement,
                (int)Aas.ReferableElements.Entity,
                (int)Aas.ReferableElements.EventElement,
                (int)Aas.ReferableElements.File,
                (int)Aas.ReferableElements.MultiLanguageProperty,
                (int)Aas.ReferableElements.Operation,
                (int)Aas.ReferableElements.Property,
                (int)Aas.ReferableElements.Range,
                (int)Aas.ReferableElements.ReferenceElement,
                (int)Aas.ReferableElements.RelationshipElement,
                (int)Aas.ReferableElements.Submodel,
                (int)Aas.ReferableElements.SubmodelElement,
                (int)Aas.ReferableElements.SubmodelElementList,
                (int)Aas.ReferableElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForKeyElements = new HashSet<int>
            {
                (int)Aas.KeyElements.FragmentReference,
                (int)Aas.KeyElements.GlobalReference,
                (int)Aas.KeyElements.AnnotatedRelationshipElement,
                (int)Aas.KeyElements.AssetAdministrationShell,
                (int)Aas.KeyElements.BasicEventElement,
                (int)Aas.KeyElements.Blob,
                (int)Aas.KeyElements.Capability,
                (int)Aas.KeyElements.ConceptDescription,
                (int)Aas.KeyElements.DataElement,
                (int)Aas.KeyElements.Entity,
                (int)Aas.KeyElements.EventElement,
                (int)Aas.KeyElements.File,
                (int)Aas.KeyElements.MultiLanguageProperty,
                (int)Aas.KeyElements.Operation,
                (int)Aas.KeyElements.Property,
                (int)Aas.KeyElements.Range,
                (int)Aas.KeyElements.ReferenceElement,
                (int)Aas.KeyElements.RelationshipElement,
                (int)Aas.KeyElements.Submodel,
                (int)Aas.KeyElements.SubmodelElement,
                (int)Aas.KeyElements.SubmodelElementList,
                (int)Aas.KeyElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForDataTypeDefXsd = new HashSet<int>
            {
                (int)Aas.DataTypeDefXsd.AnyUri,
                (int)Aas.DataTypeDefXsd.Base64Binary,
                (int)Aas.DataTypeDefXsd.Boolean,
                (int)Aas.DataTypeDefXsd.Date,
                (int)Aas.DataTypeDefXsd.DateTime,
                (int)Aas.DataTypeDefXsd.DateTimeStamp,
                (int)Aas.DataTypeDefXsd.Decimal,
                (int)Aas.DataTypeDefXsd.Double,
                (int)Aas.DataTypeDefXsd.Duration,
                (int)Aas.DataTypeDefXsd.Float,
                (int)Aas.DataTypeDefXsd.GDay,
                (int)Aas.DataTypeDefXsd.GMonth,
                (int)Aas.DataTypeDefXsd.GMonthDay,
                (int)Aas.DataTypeDefXsd.GYear,
                (int)Aas.DataTypeDefXsd.GYearMonth,
                (int)Aas.DataTypeDefXsd.HexBinary,
                (int)Aas.DataTypeDefXsd.String,
                (int)Aas.DataTypeDefXsd.Time,
                (int)Aas.DataTypeDefXsd.DayTimeDuration,
                (int)Aas.DataTypeDefXsd.YearMonthDuration,
                (int)Aas.DataTypeDefXsd.Integer,
                (int)Aas.DataTypeDefXsd.Long,
                (int)Aas.DataTypeDefXsd.Int,
                (int)Aas.DataTypeDefXsd.Short,
                (int)Aas.DataTypeDefXsd.Byte,
                (int)Aas.DataTypeDefXsd.NonNegativeInteger,
                (int)Aas.DataTypeDefXsd.PositiveInteger,
                (int)Aas.DataTypeDefXsd.UnsignedLong,
                (int)Aas.DataTypeDefXsd.UnsignedInt,
                (int)Aas.DataTypeDefXsd.UnsignedShort,
                (int)Aas.DataTypeDefXsd.UnsignedByte,
                (int)Aas.DataTypeDefXsd.NonPositiveInteger,
                (int)Aas.DataTypeDefXsd.NegativeInteger
            };

            internal static HashSet<int> ForDataTypeDefRdf = new HashSet<int>
            {
                (int)Aas.DataTypeDefRdf.LangString
            };

            internal static HashSet<int> ForDataTypeDef = new HashSet<int>
            {
                (int)Aas.DataTypeDef.AnyUri,
                (int)Aas.DataTypeDef.Base64Binary,
                (int)Aas.DataTypeDef.Boolean,
                (int)Aas.DataTypeDef.Date,
                (int)Aas.DataTypeDef.DateTime,
                (int)Aas.DataTypeDef.DateTimeStamp,
                (int)Aas.DataTypeDef.Decimal,
                (int)Aas.DataTypeDef.Double,
                (int)Aas.DataTypeDef.Duration,
                (int)Aas.DataTypeDef.Float,
                (int)Aas.DataTypeDef.GDay,
                (int)Aas.DataTypeDef.GMonth,
                (int)Aas.DataTypeDef.GMonthDay,
                (int)Aas.DataTypeDef.GYear,
                (int)Aas.DataTypeDef.GYearMonth,
                (int)Aas.DataTypeDef.HexBinary,
                (int)Aas.DataTypeDef.String,
                (int)Aas.DataTypeDef.Time,
                (int)Aas.DataTypeDef.DayTimeDuration,
                (int)Aas.DataTypeDef.YearMonthDuration,
                (int)Aas.DataTypeDef.Integer,
                (int)Aas.DataTypeDef.Long,
                (int)Aas.DataTypeDef.Int,
                (int)Aas.DataTypeDef.Short,
                (int)Aas.DataTypeDef.Byte,
                (int)Aas.DataTypeDef.NonNegativeInteger,
                (int)Aas.DataTypeDef.PositiveInteger,
                (int)Aas.DataTypeDef.UnsignedLong,
                (int)Aas.DataTypeDef.UnsignedInt,
                (int)Aas.DataTypeDef.UnsignedShort,
                (int)Aas.DataTypeDef.UnsignedByte,
                (int)Aas.DataTypeDef.NonPositiveInteger,
                (int)Aas.DataTypeDef.NegativeInteger,
                (int)Aas.DataTypeDef.LangString
            };
        }  // internal static class EnumValueSet

        private static readonly Verification.Transformer _transformer = (
            new Verification.Transformer());

        private class Transformer
            : Visitation.AbstractTransformer<IEnumerable<Reporting.Error>>
        {
            public override IEnumerable<Reporting.Error> Transform(
                Aas.Resource that)
            {
                foreach (var error in Verification.VerifyAssetKind(that.Path))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "path"));
                    yield return error;
                }

                if (that.ContentType != null)
                {
                    foreach (var error in Verification.VerifyContentType(that.ContentType))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "contentType"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Extension that)
            {
                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Name))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "name"));
                    yield return error;
                }

                if (that.ValueType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDefXsd value = that.ValueType
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyDataTypeDefXsd(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueType"));
                        yield return error;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyValueDataType(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.RefersTo != null)
                {
                    foreach (var error in Verification.Verify(that.RefersTo))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "refersTo"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AdministrativeInformation that)
            {
                if (!(
                    !(that.Revision != null)
                    || (that.Version != null)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-005: If version is not specified than also " +
                        "revision shall be unspecified. This means, a revision " +
                        "requires a version. If there is no version there is no " +
                        "revision neither. Revision is optional.\n" +
                        "!(that.Revision != null)\n" +
                        "|| (that.Version != null)");
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Version != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Version))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "version"));
                        yield return error;
                    }
                }

                if (that.Revision != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Revision))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "revision"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Qualifier that)
            {
                if (!(
                    !(that.Value != null)
                    || Verification.ValueConsistentWithXsdType(that.Value, that.ValueType)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-020: The value shall be consistent to " +
                        "the data type as defined in value_type.\n" +
                        "!(that.Value != null)\n" +
                        "|| Verification.ValueConsistentWithXsdType(that.Value, that.ValueType)");
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyQualifierType(that.Type))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyDataTypeDefXsd(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyValueDataType(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AssetAdministrationShell that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.DerivedFrom != null)
                    || Verification.IsModelReferenceTo(
                        that.DerivedFrom,
                        KeyElements.AssetAdministrationShell)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.DerivedFrom != null)\n" +
                        "|| Verification.IsModelReferenceTo(\n" +
                        "    that.DerivedFrom,\n" +
                        "    KeyElements.AssetAdministrationShell)");
                }

                if (!(
                    !(that.Submodels != null)
                    || (
                        that.Submodels.All(
                            reference => Verification.IsModelReferenceTo(reference, KeyElements.Submodel))
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Submodels != null)\n" +
                        "|| (\n" +
                        "    that.Submodels.All(\n" +
                        "        reference => Verification.IsModelReferenceTo(reference, KeyElements.Submodel))\n" +
                        ")");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyIdentifier(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.Verify(that.AssetInformation))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetInformation"));
                    yield return error;
                }

                if (that.Submodels != null)
                {
                    int indexSubmodels = 0;
                    foreach (var item in that.Submodels)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            yield return error;
                        }
                        indexSubmodels++;
                    }
                }

                if (that.DerivedFrom != null)
                {
                    foreach (var error in Verification.Verify(that.DerivedFrom))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "derivedFrom"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AssetInformation that)
            {
                foreach (var error in Verification.VerifyAssetKind(that.AssetKind))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetKind"));
                    yield return error;
                }

                if (that.GlobalAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.GlobalAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        yield return error;
                    }
                }

                if (that.SpecificAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.SpecificAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        yield return error;
                    }
                }

                if (that.DefaultThumbnail != null)
                {
                    foreach (var error in Verification.Verify(that.DefaultThumbnail))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "defaultThumbnail"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.IdentifierKeyValuePair that)
            {
                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Key))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "key"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }

                if (that.ExternalSubjectId != null)
                {
                    foreach (var error in Verification.Verify(that.ExternalSubjectId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "externalSubjectId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Submodel that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    !(that.SubmodelElements != null)
                    || (
                        that.SubmodelElements.All(
                            element => element.IdShort != null)
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Short IDs need to be defined for all the submodel elements.\n" +
                        "!(that.SubmodelElements != null)\n" +
                        "|| (\n" +
                        "    that.SubmodelElements.All(\n" +
                        "        element => element.IdShort != null)\n" +
                        ")");
                }

                if (!(
                    !(that.SubmodelElements != null)
                    || Verification.IdShortsAreUnique(that.SubmodelElements)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.SubmodelElements != null)\n" +
                        "|| Verification.IdShortsAreUnique(that.SubmodelElements)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyIdentifier(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.SubmodelElements != null)
                {
                    int indexSubmodelElements = 0;
                    foreach (var item in that.SubmodelElements)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodelElements));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodelElements"));
                            yield return error;
                        }
                        indexSubmodelElements++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.SubmodelElementList that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    !(
                        (that.Value != null)
                        && (that.SemanticIdListElement != null)
                    )
                    || (
                        that.Value.All(
                            child => !(child.SemanticId != null)
                                || (child.SemanticId == that.SemanticIdListElement))
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-107: If a first level child element has " +
                        "a semantic ID it shall be identical to semantic ID list " +
                        "element.\n" +
                        "!(\n" +
                        "    (that.Value != null)\n" +
                        "    && (that.SemanticIdListElement != null)\n" +
                        ")\n" +
                        "|| (\n" +
                        "    that.Value.All(\n" +
                        "        child => !(child.SemanticId != null)\n" +
                        "            || (child.SemanticId == that.SemanticIdListElement))\n" +
                        ")");
                }

                if (!(
                    !(that.Value != null)
                    || Verification.SubmodelElementsHaveIdenticalSemanticIds(that.Value)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-114: If two first level child elements have " +
                        "a semantic ID then they shall be identical.\n" +
                        "!(that.Value != null)\n" +
                        "|| Verification.SubmodelElementsHaveIdenticalSemanticIds(that.Value)");
                }

                if (!(
                    !(that.Value != null)
                    || (
                        that.Value.All(
                            element => Verification.SubmodelElementIsOfType(element, that.TypeValueListElement))
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-108: All first level child elements shall " +
                        "have the same submodel element type as specified in type " +
                        "value list element.\n" +
                        "!(that.Value != null)\n" +
                        "|| (\n" +
                        "    that.Value.All(\n" +
                        "        element => Verification.SubmodelElementIsOfType(element, that.TypeValueListElement))\n" +
                        ")");
                }

                if (!(
                    !(
                        (that.Value != null)
                        && (
                            that.TypeValueListElement == SubmodelElementElements.Property
                            || that.TypeValueListElement == SubmodelElementElements.Range
                        )
                    )
                    || (
                        (that.ValueTypeListElement != null)
                        && Verification.PropertiesOrRangesHaveValueType(that.Value, that.ValueTypeListElement)
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-109: If type value list element is equal to " +
                        "Property or Range value type list element shall be set and " +
                        "all first level child elements shall have the value type as " +
                        "specified in value type list element.\n" +
                        "!(\n" +
                        "    (that.Value != null)\n" +
                        "    && (\n" +
                        "        that.TypeValueListElement == SubmodelElementElements.Property\n" +
                        "        || that.TypeValueListElement == SubmodelElementElements.Range\n" +
                        "    )\n" +
                        ")\n" +
                        "|| (\n" +
                        "    (that.ValueTypeListElement != null)\n" +
                        "    && Verification.PropertiesOrRangesHaveValueType(that.Value, that.ValueTypeListElement)\n" +
                        ")");
                }

                if (!(
                    !(that.Value != null)
                    || (
                        that.Value.All(
                            element => element.IdShort != null)
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Short IDs need to be defined for all the elements.\n" +
                        "!(that.Value != null)\n" +
                        "|| (\n" +
                        "    that.Value.All(\n" +
                        "        element => element.IdShort != null)\n" +
                        ")");
                }

                if (!(
                    !(that.Value != null)
                    || Verification.IdShortsAreUnique(that.Value)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Value != null)\n" +
                        "|| Verification.IdShortsAreUnique(that.Value)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (
                        var error in Verification.VerifySubmodelElementElements(
                            that.TypeValueListElement))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "typeValueListElement"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    int indexValue = 0;
                    foreach (var item in that.Value)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexValue));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "value"));
                            yield return error;
                        }
                        indexValue++;
                    }
                }

                if (that.SemanticIdListElement != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticIdListElement))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticIdListElement"));
                        yield return error;
                    }
                }

                if (that.ValueTypeListElement != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDefXsd value = that.ValueTypeListElement
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyDataTypeDefXsd(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueTypeListElement"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.SubmodelElementStruct that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    !(that.Value != null)
                    || (
                        that.Value.All(
                            element => element.IdShort != null)
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Short IDs need to be defined for all the elements.\n" +
                        "!(that.Value != null)\n" +
                        "|| (\n" +
                        "    that.Value.All(\n" +
                        "        element => element.IdShort != null)\n" +
                        ")");
                }

                if (!(
                    !(that.Value != null)
                    || Verification.IdShortsAreUnique(that.Value)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Value != null)\n" +
                        "|| Verification.IdShortsAreUnique(that.Value)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Value != null)
                {
                    int indexValue = 0;
                    foreach (var item in that.Value)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexValue));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "value"));
                            yield return error;
                        }
                        indexValue++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Property that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (!(
                    !(that.Value != null)
                    || Verification.ValueConsistentWithXsdType(that.Value, that.ValueType)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Value != null)\n" +
                        "|| Verification.ValueConsistentWithXsdType(that.Value, that.ValueType)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyDataTypeDefXsd(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyValueDataType(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.MultiLanguageProperty that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.Verify(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Range that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (!(
                    !(that.Max != null)
                    || Verification.ValueConsistentWithXsdType(that.Max, that.ValueType)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Max != null)\n" +
                        "|| Verification.ValueConsistentWithXsdType(that.Max, that.ValueType)");
                }

                if (!(
                    !(that.Min != null)
                    || Verification.ValueConsistentWithXsdType(that.Min, that.ValueType)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "!(that.Min != null)\n" +
                        "|| Verification.ValueConsistentWithXsdType(that.Min, that.ValueType)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyDataTypeDefXsd(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Min != null)
                {
                    foreach (var error in Verification.VerifyValueDataType(that.Min))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "min"));
                        yield return error;
                    }
                }

                if (that.Max != null)
                {
                    foreach (var error in Verification.VerifyValueDataType(that.Max))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "max"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ReferenceElement that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.Verify(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Blob that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyContentType(that.MimeType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "mimeType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyBlobType(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.File that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    that.Category == "CONSTANT"
                    || that.Category == "PARAMETER"
                    || that.Category == "VARIABLE"))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-090: For data elements category shall be " +
                        "one of the following values: CONSTANT, PARAMETER or VARIABLE\n" +
                        "that.Category == \"CONSTANT\"\n" +
                        "|| that.Category == \"PARAMETER\"\n" +
                        "|| that.Category == \"VARIABLE\"");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyContentType(that.ContentType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "contentType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyPathType(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AnnotatedRelationshipElement that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.Verify(that.First))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "first"));
                    yield return error;
                }

                foreach (var error in Verification.Verify(that.Second))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "second"));
                    yield return error;
                }

                if (that.Annotation != null)
                {
                    int indexAnnotation = 0;
                    foreach (var item in that.Annotation)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexAnnotation));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "annotation"));
                            yield return error;
                        }
                        indexAnnotation++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Entity that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (!(
                    (
                        that.EntityType == EntityType.SelfManagedEntity
                        && (
                            (
                                (that.GlobalAssetId != null)
                                && (that.GlobalAssetId == null)
                            )
                            || (
                                (that.GlobalAssetId == null)
                                && (that.GlobalAssetId != null)
                            )
                        )
                    )
                    || (
                        (that.GlobalAssetId == null)
                        && (that.SpecificAssetId == null)
                    )))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-014: Either the attribute global asset ID " +
                        "or specific asset ID must be set if entity type is set to " +
                        "'SelfManagedEntity'. They are not existing otherwise.\n" +
                        "(\n" +
                        "    that.EntityType == EntityType.SelfManagedEntity\n" +
                        "    && (\n" +
                        "        (\n" +
                        "            (that.GlobalAssetId != null)\n" +
                        "            && (that.GlobalAssetId == null)\n" +
                        "        )\n" +
                        "        || (\n" +
                        "            (that.GlobalAssetId == null)\n" +
                        "            && (that.GlobalAssetId != null)\n" +
                        "        )\n" +
                        "    )\n" +
                        ")\n" +
                        "|| (\n" +
                        "    (that.GlobalAssetId == null)\n" +
                        "    && (that.SpecificAssetId == null)\n" +
                        ")");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyEntityType(that.EntityType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "entityType"));
                    yield return error;
                }

                if (that.Statements != null)
                {
                    int indexStatements = 0;
                    foreach (var item in that.Statements)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexStatements));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "statements"));
                            yield return error;
                        }
                        indexStatements++;
                    }
                }

                if (that.GlobalAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.GlobalAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        yield return error;
                    }
                }

                if (that.SpecificAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.SpecificAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.EventPayload that)
            {
                foreach (var error in Verification.Verify(that.Source))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "source"));
                    yield return error;
                }

                if (that.SourceSemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SourceSemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "sourceSemanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.Verify(that.ObservableReference))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "observableReference"));
                    yield return error;
                }

                if (that.ObservableSemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.ObservableSemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "observableSemanticId"));
                        yield return error;
                    }
                }

                if (that.Topic != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Topic))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "topic"));
                        yield return error;
                    }
                }

                if (that.SubjectId != null)
                {
                    foreach (var error in Verification.Verify(that.SubjectId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "subjectId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyDateTimeStampUtc(that.TimeStamp))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "timeStamp"));
                    yield return error;
                }

                if (that.Payload != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Payload))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "payload"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.BasicEventElement that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.Verify(that.Observed))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "observed"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyDirection(that.Direction))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "direction"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyStateOfEvent(that.State))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "state"));
                    yield return error;
                }

                if (that.MessageTopic != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.MessageTopic))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "messageTopic"));
                        yield return error;
                    }
                }

                if (that.MessageBroker != null)
                {
                    foreach (var error in Verification.Verify(that.MessageBroker))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "messageBroker"));
                        yield return error;
                    }
                }

                if (that.LastUpdate != null)
                {
                    foreach (var error in Verification.VerifyDateTimeStampUtc(that.LastUpdate))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "lastUpdate"));
                        yield return error;
                    }
                }

                if (that.MinInterval != null)
                {
                    foreach (var error in Verification.VerifyDateTimeStampUtc(that.MinInterval))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "minInterval"));
                        yield return error;
                    }
                }

                if (that.MaxInterval != null)
                {
                    foreach (var error in Verification.VerifyDateTimeStampUtc(that.MaxInterval))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "maxInterval"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Operation that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.InputVariables != null)
                {
                    int indexInputVariables = 0;
                    foreach (var item in that.InputVariables)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexInputVariables));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "inputVariables"));
                            yield return error;
                        }
                        indexInputVariables++;
                    }
                }

                if (that.OutputVariables != null)
                {
                    int indexOutputVariables = 0;
                    foreach (var item in that.OutputVariables)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexOutputVariables));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "outputVariables"));
                            yield return error;
                        }
                        indexOutputVariables++;
                    }
                }

                if (that.InoutputVariables != null)
                {
                    int indexInoutputVariables = 0;
                    foreach (var item in that.InoutputVariables)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexInoutputVariables));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "inoutputVariables"));
                            yield return error;
                        }
                        indexInoutputVariables++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.OperationVariable that)
            {
                foreach (var error in Verification.Verify(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Capability that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Qualifiers != null)
                    || Verification.QualifierTypesAreUnique(that.Qualifiers)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-021: Every qualifiable can only have one " +
                        "qualifier with the same type.\n" +
                        "!(that.Qualifiers != null)\n" +
                        "|| Verification.QualifierTypesAreUnique(that.Qualifiers)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.Qualifiers != null)
                {
                    int indexQualifiers = 0;
                    foreach (var item in that.Qualifiers)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexQualifiers));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "qualifiers"));
                            yield return error;
                        }
                        indexQualifiers++;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ConceptDescription that)
            {
                if (!(
                    !(that.Extensions != null)
                    || Verification.ExtensionNamesAreUnique(that.Extensions)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-077: The name of an extension within " +
                        "Has_extensions needs to be unique.\n" +
                        "!(that.Extensions != null)\n" +
                        "|| Verification.ExtensionNamesAreUnique(that.Extensions)");
                }

                if (!(
                    !(that.IdShort != null)
                    || (that.IdShort.Length <= 128)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-027: ID-short shall have a maximum length " +
                        "of 128 characters.\n" +
                        "!(that.IdShort != null)\n" +
                        "|| (that.IdShort.Length <= 128)");
                }

                if (!(
                    !(that.Category != null)
                    || Verification.ConceptDescriptionCategoryIsValid(that.Category)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-051: A concept description shall have one " +
                        "of the following categories: 'VALUE', 'PROPERTY', " +
                        "'REFERENCE', 'DOCUMENT', 'CAPABILITY',; 'RELATIONSHIP', " +
                        "'COLLECTION', 'FUNCTION', 'EVENT', 'ENTITY', " +
                        "'APPLICATION_CLASS', 'QUALIFIER', 'VIEW'.\n" +
                        "!(that.Category != null)\n" +
                        "|| Verification.ConceptDescriptionCategoryIsValid(that.Category)");
                }

                if (that.Extensions != null)
                {
                    int indexExtensions = 0;
                    foreach (var item in that.Extensions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexExtensions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "extensions"));
                            yield return error;
                        }
                        indexExtensions++;
                    }
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Checksum != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Checksum))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "checksum"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyIdentifier(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.IsCaseOf != null)
                {
                    int indexIsCaseOf = 0;
                    foreach (var item in that.IsCaseOf)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexIsCaseOf));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "isCaseOf"));
                            yield return error;
                        }
                        indexIsCaseOf++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.GlobalReference that)
            {
                foreach (var error in Verification.VerifyIdentifier(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ModelReference that)
            {
                if (!(that.Keys.Count >= 1))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "that.Keys.Count >= 1");
                }

                int indexKeys = 0;
                foreach (var item in that.Keys)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexKeys));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "keys"));
                        yield return error;
                    }
                    indexKeys++;
                }

                if (that.ReferredSemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.ReferredSemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "referredSemanticId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Key that)
            {
                foreach (var error in Verification.VerifyKeyElements(that.Type))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.LangString that)
            {
                foreach (var error in Verification.VerifyBcp47LanguageTag(that.Language))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "language"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.LangStringSet that)
            {
                if (!(that.LangStrings.Count >= 1))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "that.LangStrings.Count >= 1");
                }

                if (!(
                    Verification.LangStringsHaveUniqueLanguages(that.LangStrings)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Verification.LangStringsHaveUniqueLanguages(that.LangStrings)");
                }

                int indexLangStrings = 0;
                foreach (var item in that.LangStrings)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexLangStrings));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "langStrings"));
                        yield return error;
                    }
                    indexLangStrings++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Environment that)
            {
                if (that.AssetAdministrationShells != null)
                {
                    int indexAssetAdministrationShells = 0;
                    foreach (var item in that.AssetAdministrationShells)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexAssetAdministrationShells));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "assetAdministrationShells"));
                            yield return error;
                        }
                        indexAssetAdministrationShells++;
                    }
                }

                if (that.Submodels != null)
                {
                    int indexSubmodels = 0;
                    foreach (var item in that.Submodels)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            yield return error;
                        }
                        indexSubmodels++;
                    }
                }

                if (that.ConceptDescriptions != null)
                {
                    int indexConceptDescriptions = 0;
                    foreach (var item in that.ConceptDescriptions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexConceptDescriptions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "conceptDescriptions"));
                            yield return error;
                        }
                        indexConceptDescriptions++;
                    }
                }
            }
        }  // private class Transformer

        /// <summary>
        /// Verify the constraints of <paramref name="that" /> recursively.
        /// </summary>
        /// <param name="that">
        /// The instance of the meta-model to be verified
        /// </param>
        public static IEnumerable<Reporting.Error> Verify(Aas.IClass that)
        {
            foreach (var error in _transformer.Transform(that))
            {
                yield return error;
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyNonEmptyString (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDateTimeStampUtc (
            string that)
        {
            if (!Verification.MatchesXsDateTimeStampUtc(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.MatchesXsDateTimeStampUtc(that)");
            }

            if (!Verification.IsXsDateTimeStampUtc(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.IsXsDateTimeStampUtc(that)");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyBlobType (
            byte[] that)
        {
            // There is no verification specified.
            yield break;
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyIdentifier (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyBcp47LanguageTag (
            string that)
        {
            if (!Verification.MatchesBcp47(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.MatchesBcp47(that)");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyContentType (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }

            if (!Verification.MatchesMimeType(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.MatchesMimeType(that)");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyPathType (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }

            if (!Verification.MatchesRfc8089Path(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.MatchesRfc8089Path(that)");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyQualifierType (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyValueDataType (
            string that)
        {
            // There is no verification specified.
            yield break;
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyModelingKind(
            Aas.ModelingKind that)
        {
            if (!EnumValueSet.ForModelingKind.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid ModelingKind: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyAssetKind(
            Aas.AssetKind that)
        {
            if (!EnumValueSet.ForAssetKind.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid AssetKind: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyEntityType(
            Aas.EntityType that)
        {
            if (!EnumValueSet.ForEntityType.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid EntityType: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDirection(
            Aas.Direction that)
        {
            if (!EnumValueSet.ForDirection.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid Direction: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyStateOfEvent(
            Aas.StateOfEvent that)
        {
            if (!EnumValueSet.ForStateOfEvent.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid StateOfEvent: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyIdentifiableElements(
            Aas.IdentifiableElements that)
        {
            if (!EnumValueSet.ForIdentifiableElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid IdentifiableElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifySubmodelElementElements(
            Aas.SubmodelElementElements that)
        {
            if (!EnumValueSet.ForSubmodelElementElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid SubmodelElementElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyReferableElements(
            Aas.ReferableElements that)
        {
            if (!EnumValueSet.ForReferableElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid ReferableElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyKeyElements(
            Aas.KeyElements that)
        {
            if (!EnumValueSet.ForKeyElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid KeyElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDataTypeDefXsd(
            Aas.DataTypeDefXsd that)
        {
            if (!EnumValueSet.ForDataTypeDefXsd.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DataTypeDefXsd: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDataTypeDefRdf(
            Aas.DataTypeDefRdf that)
        {
            if (!EnumValueSet.ForDataTypeDefRdf.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DataTypeDefRdf: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDataTypeDef(
            Aas.DataTypeDef that)
        {
            if (!EnumValueSet.ForDataTypeDef.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DataTypeDef: {that}");
            }
        }
    }  // public static class Verification
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
