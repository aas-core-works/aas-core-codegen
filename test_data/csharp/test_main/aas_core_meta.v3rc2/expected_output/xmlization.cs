/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Xml = System.Xml;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    /// <summary>
    /// Provide de/serialization of meta-model classes to/from XML.
    /// </summary>
    public static class Xmlization
    {
        /// <summary>
        /// Implement the deserialization of meta-model classes from XML.
        /// </summary>
        /// <remarks>
        /// The implementation propagates an <see cref="Error" /> instead of relying
        /// on exceptions. Under the assumption that incorrect data is much less
        /// frequent than correct data, this makes the deserialization more
        /// efficient.
        ///
        /// However, we do not want to force the client to deal with
        /// the <see cref="Error" /> class as this is not intuitive. Therefore
        /// we distinguish the implementation, realized in
        /// <see cref="DeserializeImplementation" />, and the facade given in
        /// <see cref="Deserialize" /> class.
        internal static class DeserializeImplementation
        {
            internal static void SkipWhitespaceAndComments(
                Xml.XmlReader reader)
            {
                while (
                    !reader.EOF
                    && reader.NodeType == Xml.XmlNodeType.Whitespace
                    && reader.NodeType == Xml.XmlNodeType.Comment)
                {
                    reader.Read();
                }
            }

            /// <summary>
            /// Read the whole content of an element into memory.
            /// </summary>
            private static byte[] ReadWholeContentAsBase64(
                Xml.XmlReader reader)
            {
                // The capacity of 1024 bytes is an arbitrary,
                // but plausible default capacity.
                byte[] buffer = new byte[1024];
                using System.IO.MemoryStream stream = (
                    new System.IO.MemoryStream(1024));
                int readBytes;
                while ((readBytes = reader.ReadContentAsBase64(buffer, 0, 1024)) > 0)
                {
                    stream.Write(buffer, 0, readBytes);
                }
                return stream.ToArray();
            }

            /// <summary>
            /// Deserialize an instance of class Resource from a sequence of XML elements.
            /// </summary>
            internal static Aas.Resource? ResourceFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                AssetKind? thePath = null;
                string? theContentType = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Resource, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "path":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Path of an instance of class Resource, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textPath;
                            try
                            {
                                textPath = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Path of an instance of class Resource " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "path"));
                                return null;
                            }

                            thePath = Stringification.AssetKindFromString(
                                textPath);

                            if (thePath == null)
                            {
                                error = new Reporting.Error(
                                    "The property Path of an instance of class Resource " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textPath);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "path"));
                                return null;
                            }
                            break;
                        }
                        case "contentType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ContentType of an instance of class Resource, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theContentType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ContentType of an instance of class Resource " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "contentType"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Resource, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Resource " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Resource " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Resource " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (thePath == null)
                {
                    error = new Reporting.Error(
                        "The required property Path has not been given " +
                        "in the XML representation of an instance of class Resource");
                    return null;
                }

                return new Aas.Resource(
                    thePath
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theContentType);
            }  // internal static Aas.Resource? ResourceFromSequence

            /// <summary>
            /// Deserialize an instance of class Resource from an XML element.
            /// </summary>
            internal static Aas.Resource? ResourceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Resource, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Resource, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "resource")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Resource " +
                        $"with element name resource, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Resource? result = (
                    ResourceFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Resource, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Resource, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Resource? ResourceFromElement

            /// <summary>
            /// Deserialize an instance of class IHasSemantics from an XML element.
            /// </summary>
            internal static Aas.IHasSemantics? IHasSemanticsFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "extension":
                    return ExtensionFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "identifierKeyValuePair":
                    return IdentifierKeyValuePairFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "qualifier":
                    return QualifierFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IHasSemantics? IHasSemanticsFromElement

            /// <summary>
            /// Deserialize an instance of class Extension from a sequence of XML elements.
            /// </summary>
            internal static Aas.Extension? ExtensionFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                GlobalReference? theSemanticId = null;
                string? theName = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                ModelReference? theRefersTo = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Extension, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Extension, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "name":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Name of an instance of class Extension, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theName = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Name of an instance of class Extension " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "name"));
                                return null;
                            }
                            break;
                        }
                        case "valueType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueType of an instance of class Extension, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textValueType;
                            try
                            {
                                textValueType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Extension " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }

                            theValueType = Stringification.DataTypeDefXsdFromString(
                                textValueType);

                            if (theValueType == null)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Extension " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textValueType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class Extension, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class Extension " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        case "refersTo":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property RefersTo of an instance of class Extension, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theRefersTo = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "refersTo"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Extension, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Extension " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Extension " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Extension " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theName == null)
                {
                    error = new Reporting.Error(
                        "The required property Name has not been given " +
                        "in the XML representation of an instance of class Extension");
                    return null;
                }

                return new Aas.Extension(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theValueType,
                    theValue,
                    theRefersTo);
            }  // internal static Aas.Extension? ExtensionFromSequence

            /// <summary>
            /// Deserialize an instance of class Extension from an XML element.
            /// </summary>
            internal static Aas.Extension? ExtensionFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Extension, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Extension, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "extension")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Extension " +
                        $"with element name extension, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Extension? result = (
                    ExtensionFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Extension, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Extension, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Extension? ExtensionFromElement

            /// <summary>
            /// Deserialize an instance of class IHasExtensions from an XML element.
            /// </summary>
            internal static Aas.IHasExtensions? IHasExtensionsFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "assetAdministrationShell":
                    return AssetAdministrationShellFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "conceptDescription":
                    return ConceptDescriptionFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IHasExtensions? IHasExtensionsFromElement

            /// <summary>
            /// Deserialize an instance of class IReferable from an XML element.
            /// </summary>
            internal static Aas.IReferable? IReferableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "assetAdministrationShell":
                    return AssetAdministrationShellFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "conceptDescription":
                    return ConceptDescriptionFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IReferable? IReferableFromElement

            /// <summary>
            /// Deserialize an instance of class IIdentifiable from an XML element.
            /// </summary>
            internal static Aas.IIdentifiable? IIdentifiableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "assetAdministrationShell":
                    return AssetAdministrationShellFromElement(
                        reader,
                        out error);
                case "conceptDescription":
                    return ConceptDescriptionFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IIdentifiable? IIdentifiableFromElement

            /// <summary>
            /// Deserialize an instance of class IHasKind from an XML element.
            /// </summary>
            internal static Aas.IHasKind? IHasKindFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IHasKind? IHasKindFromElement

            /// <summary>
            /// Deserialize an instance of class IHasDataSpecification from an XML element.
            /// </summary>
            internal static Aas.IHasDataSpecification? IHasDataSpecificationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "administrativeInformation":
                    return AdministrativeInformationFromElement(
                        reader,
                        out error);
                case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "assetAdministrationShell":
                    return AssetAdministrationShellFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "conceptDescription":
                    return ConceptDescriptionFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IHasDataSpecification? IHasDataSpecificationFromElement

            /// <summary>
            /// Deserialize an instance of class AdministrativeInformation from a sequence of XML elements.
            /// </summary>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<GlobalReference>? theDataSpecifications = null;
                string? theVersion = null;
                string? theRevision = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class AdministrativeInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class AdministrativeInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "version":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Version of an instance of class AdministrativeInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theVersion = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Version of an instance of class AdministrativeInformation " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "version"));
                                return null;
                            }
                            break;
                        }
                        case "revision":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Revision of an instance of class AdministrativeInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theRevision = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Revision of an instance of class AdministrativeInformation " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "revision"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class AdministrativeInformation, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AdministrativeInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AdministrativeInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AdministrativeInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.AdministrativeInformation(
                    theDataSpecifications,
                    theVersion,
                    theRevision);
            }  // internal static Aas.AdministrativeInformation? AdministrativeInformationFromSequence

            /// <summary>
            /// Deserialize an instance of class AdministrativeInformation from an XML element.
            /// </summary>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AdministrativeInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class AdministrativeInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "administrativeInformation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AdministrativeInformation " +
                        $"with element name administrativeInformation, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.AdministrativeInformation? result = (
                    AdministrativeInformationFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class AdministrativeInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class AdministrativeInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.AdministrativeInformation? AdministrativeInformationFromElement

            /// <summary>
            /// Deserialize an instance of class IQualifiable from an XML element.
            /// </summary>
            internal static Aas.IQualifiable? IQualifiableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodel":
                    return SubmodelFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IQualifiable? IQualifiableFromElement

            /// <summary>
            /// Deserialize an instance of class Qualifier from a sequence of XML elements.
            /// </summary>
            internal static Aas.Qualifier? QualifierFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                GlobalReference? theSemanticId = null;
                string? theType = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                GlobalReference? theValueId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Qualifier, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Qualifier, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "type":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Type of an instance of class Qualifier, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Type of an instance of class Qualifier " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "type"));
                                return null;
                            }
                            break;
                        }
                        case "valueType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueType of an instance of class Qualifier, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textValueType;
                            try
                            {
                                textValueType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Qualifier " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }

                            theValueType = Stringification.DataTypeDefXsdFromString(
                                textValueType);

                            if (theValueType == null)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Qualifier " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textValueType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class Qualifier, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class Qualifier " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        case "valueId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueId of an instance of class Qualifier, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValueId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Qualifier, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Qualifier " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Qualifier " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Qualifier " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "The required property Type has not been given " +
                        "in the XML representation of an instance of class Qualifier");
                    return null;
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Qualifier");
                    return null;
                }

                return new Aas.Qualifier(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theValue,
                    theValueId);
            }  // internal static Aas.Qualifier? QualifierFromSequence

            /// <summary>
            /// Deserialize an instance of class Qualifier from an XML element.
            /// </summary>
            internal static Aas.Qualifier? QualifierFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Qualifier, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Qualifier, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "qualifier")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Qualifier " +
                        $"with element name qualifier, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Qualifier? result = (
                    QualifierFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Qualifier, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Qualifier, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Qualifier? QualifierFromElement

            /// <summary>
            /// Deserialize an instance of class AssetAdministrationShell from a sequence of XML elements.
            /// </summary>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                string? theId = null;
                AdministrativeInformation? theAdministration = null;
                List<GlobalReference>? theDataSpecifications = null;
                AssetInformation? theAssetInformation = null;
                List<ModelReference>? theSubmodels = null;
                ModelReference? theDerivedFrom = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class AssetAdministrationShell, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class AssetAdministrationShell " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class AssetAdministrationShell " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class AssetAdministrationShell " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "id":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Id of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theId = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Id of an instance of class AssetAdministrationShell " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "id"));
                                return null;
                            }
                            break;
                        }
                        case "administration":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Administration of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theAdministration = AdministrativeInformationFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "administration"));
                                return null;
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "assetInformation":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property AssetInformation of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theAssetInformation = AssetInformationFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "assetInformation"));
                                return null;
                            }
                            break;
                        }
                        case "submodels":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Submodels of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theSubmodels = new List<ModelReference>();

                            int indexSubmodels = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ModelReference? item = ModelReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexSubmodels));
                                    return null;
                                }

                                theSubmodels.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexSubmodels++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "derivedFrom":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DerivedFrom of an instance of class AssetAdministrationShell, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDerivedFrom = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "derivedFrom"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class AssetAdministrationShell, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetAdministrationShell " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class AssetAdministrationShell");
                    return null;
                }

                if (theAssetInformation == null)
                {
                    error = new Reporting.Error(
                        "The required property AssetInformation has not been given " +
                        "in the XML representation of an instance of class AssetAdministrationShell");
                    return null;
                }

                return new Aas.AssetAdministrationShell(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theAssetInformation
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theDataSpecifications,
                    theSubmodels,
                    theDerivedFrom);
            }  // internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromSequence

            /// <summary>
            /// Deserialize an instance of class AssetAdministrationShell from an XML element.
            /// </summary>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetAdministrationShell, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class AssetAdministrationShell, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "assetAdministrationShell")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AssetAdministrationShell " +
                        $"with element name assetAdministrationShell, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.AssetAdministrationShell? result = (
                    AssetAdministrationShellFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class AssetAdministrationShell, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class AssetAdministrationShell, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.AssetAdministrationShell? AssetAdministrationShellFromElement

            /// <summary>
            /// Deserialize an instance of class AssetInformation from a sequence of XML elements.
            /// </summary>
            internal static Aas.AssetInformation? AssetInformationFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                AssetKind? theAssetKind = null;
                GlobalReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                Resource? theDefaultThumbnail = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class AssetInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "assetKind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property AssetKind of an instance of class AssetInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textAssetKind;
                            try
                            {
                                textAssetKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property AssetKind of an instance of class AssetInformation " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "assetKind"));
                                return null;
                            }

                            theAssetKind = Stringification.AssetKindFromString(
                                textAssetKind);

                            if (theAssetKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property AssetKind of an instance of class AssetInformation " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textAssetKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "assetKind"));
                                return null;
                            }
                            break;
                        }
                        case "globalAssetId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property GlobalAssetId of an instance of class AssetInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theGlobalAssetId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "globalAssetId"));
                                return null;
                            }
                            break;
                        }
                        case "specificAssetId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SpecificAssetId of an instance of class AssetInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSpecificAssetId = IdentifierKeyValuePairFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "specificAssetId"));
                                return null;
                            }
                            break;
                        }
                        case "defaultThumbnail":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DefaultThumbnail of an instance of class AssetInformation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDefaultThumbnail = ResourceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "defaultThumbnail"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class AssetInformation, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AssetInformation " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theAssetKind == null)
                {
                    error = new Reporting.Error(
                        "The required property AssetKind has not been given " +
                        "in the XML representation of an instance of class AssetInformation");
                    return null;
                }

                return new Aas.AssetInformation(
                    theAssetKind
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theGlobalAssetId,
                    theSpecificAssetId,
                    theDefaultThumbnail);
            }  // internal static Aas.AssetInformation? AssetInformationFromSequence

            /// <summary>
            /// Deserialize an instance of class AssetInformation from an XML element.
            /// </summary>
            internal static Aas.AssetInformation? AssetInformationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AssetInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class AssetInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "assetInformation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AssetInformation " +
                        $"with element name assetInformation, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.AssetInformation? result = (
                    AssetInformationFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class AssetInformation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class AssetInformation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.AssetInformation? AssetInformationFromElement

            /// <summary>
            /// Deserialize an instance of class IdentifierKeyValuePair from a sequence of XML elements.
            /// </summary>
            internal static Aas.IdentifierKeyValuePair? IdentifierKeyValuePairFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                GlobalReference? theSemanticId = null;
                string? theKey = null;
                string? theValue = null;
                GlobalReference? theExternalSubjectId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class IdentifierKeyValuePair, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class IdentifierKeyValuePair, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "key":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Key of an instance of class IdentifierKeyValuePair, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theKey = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Key of an instance of class IdentifierKeyValuePair " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "key"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class IdentifierKeyValuePair, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class IdentifierKeyValuePair " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        case "externalSubjectId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ExternalSubjectId of an instance of class IdentifierKeyValuePair, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theExternalSubjectId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "externalSubjectId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class IdentifierKeyValuePair, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class IdentifierKeyValuePair " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class IdentifierKeyValuePair " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class IdentifierKeyValuePair " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theKey == null)
                {
                    error = new Reporting.Error(
                        "The required property Key has not been given " +
                        "in the XML representation of an instance of class IdentifierKeyValuePair");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class IdentifierKeyValuePair");
                    return null;
                }

                return new Aas.IdentifierKeyValuePair(
                    theKey
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theExternalSubjectId);
            }  // internal static Aas.IdentifierKeyValuePair? IdentifierKeyValuePairFromSequence

            /// <summary>
            /// Deserialize an instance of class IdentifierKeyValuePair from an XML element.
            /// </summary>
            internal static Aas.IdentifierKeyValuePair? IdentifierKeyValuePairFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class IdentifierKeyValuePair, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class IdentifierKeyValuePair, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "identifierKeyValuePair")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class IdentifierKeyValuePair " +
                        $"with element name identifierKeyValuePair, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.IdentifierKeyValuePair? result = (
                    IdentifierKeyValuePairFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class IdentifierKeyValuePair, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class IdentifierKeyValuePair, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.IdentifierKeyValuePair? IdentifierKeyValuePairFromElement

            /// <summary>
            /// Deserialize an instance of class Submodel from a sequence of XML elements.
            /// </summary>
            internal static Aas.Submodel? SubmodelFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                string? theId = null;
                AdministrativeInformation? theAdministration = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                List<ISubmodelElement>? theSubmodelElements = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Submodel, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Submodel " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Submodel " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Submodel " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "id":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Id of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theId = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Id of an instance of class Submodel " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "id"));
                                return null;
                            }
                            break;
                        }
                        case "administration":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Administration of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theAdministration = AdministrativeInformationFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "administration"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Submodel " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Submodel " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "submodelElements":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SubmodelElements of an instance of class Submodel, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theSubmodelElements = new List<ISubmodelElement>();

                            int indexSubmodelElements = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ISubmodelElement? item = ISubmodelElementFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexSubmodelElements));
                                    return null;
                                }

                                theSubmodelElements.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexSubmodelElements++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Submodel, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Submodel " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Submodel " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Submodel " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class Submodel");
                    return null;
                }

                return new Aas.Submodel(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theSubmodelElements);
            }  // internal static Aas.Submodel? SubmodelFromSequence

            /// <summary>
            /// Deserialize an instance of class Submodel from an XML element.
            /// </summary>
            internal static Aas.Submodel? SubmodelFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Submodel, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Submodel, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "submodel")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Submodel " +
                        $"with element name submodel, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Submodel? result = (
                    SubmodelFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Submodel, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Submodel, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Submodel? SubmodelFromElement

            /// <summary>
            /// Deserialize an instance of class ISubmodelElement from an XML element.
            /// </summary>
            internal static Aas.ISubmodelElement? ISubmodelElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "capability":
                    return CapabilityFromElement(
                        reader,
                        out error);
                case "entity":
                    return EntityFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "operation":
                    return OperationFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                case "submodelElementList":
                    return SubmodelElementListFromElement(
                        reader,
                        out error);
                case "submodelElementStruct":
                    return SubmodelElementStructFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.ISubmodelElement? ISubmodelElementFromElement

            /// <summary>
            /// Deserialize an instance of class IRelationshipElement from an XML element.
            /// </summary>
            internal static Aas.IRelationshipElement? IRelationshipElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "annotatedRelationshipElement":
                    return AnnotatedRelationshipElementFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IRelationshipElement? IRelationshipElementFromElement

            /// <summary>
            /// Deserialize an instance of class SubmodelElementList from a sequence of XML elements.
            /// </summary>
            internal static Aas.SubmodelElementList? SubmodelElementListFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                SubmodelElementElements? theTypeValueListElement = null;
                bool? theOrderRelevant = null;
                List<ISubmodelElement>? theValue = null;
                GlobalReference? theSemanticIdListElement = null;
                DataTypeDefXsd? theValueTypeListElement = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class SubmodelElementList, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class SubmodelElementList " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "typeValueListElement":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property TypeValueListElement of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textTypeValueListElement;
                            try
                            {
                                textTypeValueListElement = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property TypeValueListElement of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "typeValueListElement"));
                                return null;
                            }

                            theTypeValueListElement = Stringification.SubmodelElementElementsFromString(
                                textTypeValueListElement);

                            if (theTypeValueListElement == null)
                            {
                                error = new Reporting.Error(
                                    "The property TypeValueListElement of an instance of class SubmodelElementList " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textTypeValueListElement);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "typeValueListElement"));
                                return null;
                            }
                            break;
                        }
                        case "orderRelevant":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property OrderRelevant of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theOrderRelevant = reader.ReadContentAsBoolean();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property OrderRelevant of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "orderRelevant"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theValue = new List<ISubmodelElement>();

                            int indexValue = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ISubmodelElement? item = ISubmodelElementFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexValue));
                                    return null;
                                }

                                theValue.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexValue++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "semanticIdListElement":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticIdListElement of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticIdListElement = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticIdListElement"));
                                return null;
                            }
                            break;
                        }
                        case "valueTypeListElement":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueTypeListElement of an instance of class SubmodelElementList, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textValueTypeListElement;
                            try
                            {
                                textValueTypeListElement = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ValueTypeListElement of an instance of class SubmodelElementList " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueTypeListElement"));
                                return null;
                            }

                            theValueTypeListElement = Stringification.DataTypeDefXsdFromString(
                                textValueTypeListElement);

                            if (theValueTypeListElement == null)
                            {
                                error = new Reporting.Error(
                                    "The property ValueTypeListElement of an instance of class SubmodelElementList " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textValueTypeListElement);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueTypeListElement"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class SubmodelElementList, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementList " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementList " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementList " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theTypeValueListElement == null)
                {
                    error = new Reporting.Error(
                        "The required property TypeValueListElement has not been given " +
                        "in the XML representation of an instance of class SubmodelElementList");
                    return null;
                }

                return new Aas.SubmodelElementList(
                    theTypeValueListElement
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theOrderRelevant,
                    theValue,
                    theSemanticIdListElement,
                    theValueTypeListElement);
            }  // internal static Aas.SubmodelElementList? SubmodelElementListFromSequence

            /// <summary>
            /// Deserialize an instance of class SubmodelElementList from an XML element.
            /// </summary>
            internal static Aas.SubmodelElementList? SubmodelElementListFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementList, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class SubmodelElementList, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "submodelElementList")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class SubmodelElementList " +
                        $"with element name submodelElementList, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.SubmodelElementList? result = (
                    SubmodelElementListFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class SubmodelElementList, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class SubmodelElementList, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.SubmodelElementList? SubmodelElementListFromElement

            /// <summary>
            /// Deserialize an instance of class SubmodelElementStruct from a sequence of XML elements.
            /// </summary>
            internal static Aas.SubmodelElementStruct? SubmodelElementStructFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                List<ISubmodelElement>? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class SubmodelElementStruct, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class SubmodelElementStruct " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class SubmodelElementStruct " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class SubmodelElementStruct " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class SubmodelElementStruct " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class SubmodelElementStruct " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class SubmodelElementStruct, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theValue = new List<ISubmodelElement>();

                            int indexValue = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ISubmodelElement? item = ISubmodelElementFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexValue));
                                    return null;
                                }

                                theValue.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexValue++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class SubmodelElementStruct, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementStruct " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementStruct " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class SubmodelElementStruct " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.SubmodelElementStruct(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // internal static Aas.SubmodelElementStruct? SubmodelElementStructFromSequence

            /// <summary>
            /// Deserialize an instance of class SubmodelElementStruct from an XML element.
            /// </summary>
            internal static Aas.SubmodelElementStruct? SubmodelElementStructFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class SubmodelElementStruct, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class SubmodelElementStruct, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "submodelElementStruct")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class SubmodelElementStruct " +
                        $"with element name submodelElementStruct, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.SubmodelElementStruct? result = (
                    SubmodelElementStructFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class SubmodelElementStruct, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class SubmodelElementStruct, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.SubmodelElementStruct? SubmodelElementStructFromElement

            /// <summary>
            /// Deserialize an instance of class IDataElement from an XML element.
            /// </summary>
            internal static Aas.IDataElement? IDataElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "blob":
                    return BlobFromElement(
                        reader,
                        out error);
                case "file":
                    return FileFromElement(
                        reader,
                        out error);
                case "multiLanguageProperty":
                    return MultiLanguagePropertyFromElement(
                        reader,
                        out error);
                case "property":
                    return PropertyFromElement(
                        reader,
                        out error);
                case "range":
                    return RangeFromElement(
                        reader,
                        out error);
                case "referenceElement":
                    return ReferenceElementFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IDataElement? IDataElementFromElement

            /// <summary>
            /// Deserialize an instance of class Property from a sequence of XML elements.
            /// </summary>
            internal static Aas.Property? PropertyFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                DataTypeDefXsd? theValueType = null;
                string? theValue = null;
                GlobalReference? theValueId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Property, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Property " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Property " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Property " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Property " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Property " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "valueType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueType of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textValueType;
                            try
                            {
                                textValueType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Property " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }

                            theValueType = Stringification.DataTypeDefXsdFromString(
                                textValueType);

                            if (theValueType == null)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Property " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textValueType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class Property " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        case "valueId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueId of an instance of class Property, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValueId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Property, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Property " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Property " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Property " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Property");
                    return null;
                }

                return new Aas.Property(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static Aas.Property? PropertyFromSequence

            /// <summary>
            /// Deserialize an instance of class Property from an XML element.
            /// </summary>
            internal static Aas.Property? PropertyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Property, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Property, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "property")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Property " +
                        $"with element name property, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Property? result = (
                    PropertyFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Property, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Property, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Property? PropertyFromElement

            /// <summary>
            /// Deserialize an instance of class MultiLanguageProperty from a sequence of XML elements.
            /// </summary>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                LangStringSet? theValue = null;
                GlobalReference? theValueId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class MultiLanguageProperty, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class MultiLanguageProperty " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class MultiLanguageProperty " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class MultiLanguageProperty " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class MultiLanguageProperty " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class MultiLanguageProperty " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValue = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        case "valueId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueId of an instance of class MultiLanguageProperty, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValueId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class MultiLanguageProperty, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class MultiLanguageProperty " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.MultiLanguageProperty(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromSequence

            /// <summary>
            /// Deserialize an instance of class MultiLanguageProperty from an XML element.
            /// </summary>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class MultiLanguageProperty, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class MultiLanguageProperty, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "multiLanguageProperty")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class MultiLanguageProperty " +
                        $"with element name multiLanguageProperty, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.MultiLanguageProperty? result = (
                    MultiLanguagePropertyFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class MultiLanguageProperty, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class MultiLanguageProperty, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFromElement

            /// <summary>
            /// Deserialize an instance of class Range from a sequence of XML elements.
            /// </summary>
            internal static Aas.Range? RangeFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                DataTypeDefXsd? theValueType = null;
                string? theMin = null;
                string? theMax = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Range, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Range " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Range " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Range " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Range " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Range " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "valueType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ValueType of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textValueType;
                            try
                            {
                                textValueType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Range " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }

                            theValueType = Stringification.DataTypeDefXsdFromString(
                                textValueType);

                            if (theValueType == null)
                            {
                                error = new Reporting.Error(
                                    "The property ValueType of an instance of class Range " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textValueType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "valueType"));
                                return null;
                            }
                            break;
                        }
                        case "min":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Min of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMin = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Min of an instance of class Range " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "min"));
                                return null;
                            }
                            break;
                        }
                        case "max":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Max of an instance of class Range, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMax = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Max of an instance of class Range " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "max"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Range, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Range " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Range " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Range " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theValueType == null)
                {
                    error = new Reporting.Error(
                        "The required property ValueType has not been given " +
                        "in the XML representation of an instance of class Range");
                    return null;
                }

                return new Aas.Range(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theMin,
                    theMax);
            }  // internal static Aas.Range? RangeFromSequence

            /// <summary>
            /// Deserialize an instance of class Range from an XML element.
            /// </summary>
            internal static Aas.Range? RangeFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Range, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Range, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "range")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Range " +
                        $"with element name range, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Range? result = (
                    RangeFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Range, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Range, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Range? RangeFromElement

            /// <summary>
            /// Deserialize an instance of class ReferenceElement from a sequence of XML elements.
            /// </summary>
            internal static Aas.ReferenceElement? ReferenceElementFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                IReference? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class ReferenceElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class ReferenceElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class ReferenceElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class ReferenceElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class ReferenceElement " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class ReferenceElement " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class ReferenceElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValue = IReferenceFromElement(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class ReferenceElement, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ReferenceElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ReferenceElement " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ReferenceElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.ReferenceElement(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // internal static Aas.ReferenceElement? ReferenceElementFromSequence

            /// <summary>
            /// Deserialize an instance of class ReferenceElement from an XML element.
            /// </summary>
            internal static Aas.ReferenceElement? ReferenceElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ReferenceElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class ReferenceElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "referenceElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ReferenceElement " +
                        $"with element name referenceElement, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.ReferenceElement? result = (
                    ReferenceElementFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class ReferenceElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class ReferenceElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.ReferenceElement? ReferenceElementFromElement

            /// <summary>
            /// Deserialize an instance of class Blob from a sequence of XML elements.
            /// </summary>
            internal static Aas.Blob? BlobFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                string? theMimeType = null;
                byte[]? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Blob, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Blob " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Blob " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Blob " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Blob " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Blob " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "mimeType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property MimeType of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMimeType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property MimeType of an instance of class Blob " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "mimeType"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class Blob, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = DeserializeImplementation.ReadWholeContentAsBase64(
                                    reader);
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class Blob " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Blob, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Blob " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Blob " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Blob " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theMimeType == null)
                {
                    error = new Reporting.Error(
                        "The required property MimeType has not been given " +
                        "in the XML representation of an instance of class Blob");
                    return null;
                }

                return new Aas.Blob(
                    theMimeType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // internal static Aas.Blob? BlobFromSequence

            /// <summary>
            /// Deserialize an instance of class Blob from an XML element.
            /// </summary>
            internal static Aas.Blob? BlobFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Blob, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Blob, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "blob")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Blob " +
                        $"with element name blob, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Blob? result = (
                    BlobFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Blob, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Blob, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Blob? BlobFromElement

            /// <summary>
            /// Deserialize an instance of class File from a sequence of XML elements.
            /// </summary>
            internal static Aas.File? FileFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                string? theContentType = null;
                string? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class File, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class File " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class File " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class File " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class File " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class File " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "contentType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ContentType of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theContentType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property ContentType of an instance of class File " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "contentType"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class File, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class File " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class File, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class File " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class File " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class File " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theContentType == null)
                {
                    error = new Reporting.Error(
                        "The required property ContentType has not been given " +
                        "in the XML representation of an instance of class File");
                    return null;
                }

                return new Aas.File(
                    theContentType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // internal static Aas.File? FileFromSequence

            /// <summary>
            /// Deserialize an instance of class File from an XML element.
            /// </summary>
            internal static Aas.File? FileFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class File, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class File, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "file")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class File " +
                        $"with element name file, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.File? result = (
                    FileFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class File, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class File, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.File? FileFromElement

            /// <summary>
            /// Deserialize an instance of class AnnotatedRelationshipElement from a sequence of XML elements.
            /// </summary>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<IDataElement>? theAnnotation = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class AnnotatedRelationshipElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class AnnotatedRelationshipElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class AnnotatedRelationshipElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class AnnotatedRelationshipElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class AnnotatedRelationshipElement " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class AnnotatedRelationshipElement " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "first":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property First of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theFirst = IReferenceFromElement(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "first"));
                                return null;
                            }
                            break;
                        }
                        case "second":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Second of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSecond = IReferenceFromElement(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "second"));
                                return null;
                            }
                            break;
                        }
                        case "annotation":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Annotation of an instance of class AnnotatedRelationshipElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theAnnotation = new List<IDataElement>();

                            int indexAnnotation = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                IDataElement? item = IDataElementFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexAnnotation));
                                    return null;
                                }

                                theAnnotation.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexAnnotation++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class AnnotatedRelationshipElement, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class AnnotatedRelationshipElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theFirst == null)
                {
                    error = new Reporting.Error(
                        "The required property First has not been given " +
                        "in the XML representation of an instance of class AnnotatedRelationshipElement");
                    return null;
                }

                if (theSecond == null)
                {
                    error = new Reporting.Error(
                        "The required property Second has not been given " +
                        "in the XML representation of an instance of class AnnotatedRelationshipElement");
                    return null;
                }

                return new Aas.AnnotatedRelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theAnnotation);
            }  // internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromSequence

            /// <summary>
            /// Deserialize an instance of class AnnotatedRelationshipElement from an XML element.
            /// </summary>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class AnnotatedRelationshipElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class AnnotatedRelationshipElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "annotatedRelationshipElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class AnnotatedRelationshipElement " +
                        $"with element name annotatedRelationshipElement, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.AnnotatedRelationshipElement? result = (
                    AnnotatedRelationshipElementFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class AnnotatedRelationshipElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class AnnotatedRelationshipElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFromElement

            /// <summary>
            /// Deserialize an instance of class Entity from a sequence of XML elements.
            /// </summary>
            internal static Aas.Entity? EntityFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Entity, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Entity " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Entity " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Entity " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Entity " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Entity " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "entityType":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property EntityType of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textEntityType;
                            try
                            {
                                textEntityType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property EntityType of an instance of class Entity " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "entityType"));
                                return null;
                            }

                            theEntityType = Stringification.EntityTypeFromString(
                                textEntityType);

                            if (theEntityType == null)
                            {
                                error = new Reporting.Error(
                                    "The property EntityType of an instance of class Entity " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textEntityType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "entityType"));
                                return null;
                            }
                            break;
                        }
                        case "statements":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Statements of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theStatements = new List<ISubmodelElement>();

                            int indexStatements = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ISubmodelElement? item = ISubmodelElementFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexStatements));
                                    return null;
                                }

                                theStatements.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexStatements++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "globalAssetId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property GlobalAssetId of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theGlobalAssetId = IReferenceFromElement(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "globalAssetId"));
                                return null;
                            }
                            break;
                        }
                        case "specificAssetId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SpecificAssetId of an instance of class Entity, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSpecificAssetId = IdentifierKeyValuePairFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "specificAssetId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Entity, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Entity " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Entity " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Entity " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theEntityType == null)
                {
                    error = new Reporting.Error(
                        "The required property EntityType has not been given " +
                        "in the XML representation of an instance of class Entity");
                    return null;
                }

                return new Aas.Entity(
                    theEntityType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theStatements,
                    theGlobalAssetId,
                    theSpecificAssetId);
            }  // internal static Aas.Entity? EntityFromSequence

            /// <summary>
            /// Deserialize an instance of class Entity from an XML element.
            /// </summary>
            internal static Aas.Entity? EntityFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Entity, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Entity, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "entity")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Entity " +
                        $"with element name entity, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Entity? result = (
                    EntityFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Entity, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Entity, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Entity? EntityFromElement

            /// <summary>
            /// Deserialize an instance of class EventPayload from a sequence of XML elements.
            /// </summary>
            internal static Aas.EventPayload? EventPayloadFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                ModelReference? theSource = null;
                GlobalReference? theSourceSemanticId = null;
                ModelReference? theObservableReference = null;
                GlobalReference? theObservableSemanticId = null;
                string? theTopic = null;
                GlobalReference? theSubjectId = null;
                string? theTimeStamp = null;
                string? thePayload = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class EventPayload, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "source":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Source of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSource = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "source"));
                                return null;
                            }
                            break;
                        }
                        case "sourceSemanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SourceSemanticId of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSourceSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "sourceSemanticId"));
                                return null;
                            }
                            break;
                        }
                        case "observableReference":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ObservableReference of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theObservableReference = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "observableReference"));
                                return null;
                            }
                            break;
                        }
                        case "observableSemanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ObservableSemanticId of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theObservableSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "observableSemanticId"));
                                return null;
                            }
                            break;
                        }
                        case "topic":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Topic of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theTopic = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Topic of an instance of class EventPayload " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "topic"));
                                return null;
                            }
                            break;
                        }
                        case "subjectId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SubjectId of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSubjectId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "subjectId"));
                                return null;
                            }
                            break;
                        }
                        case "timeStamp":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property TimeStamp of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theTimeStamp = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property TimeStamp of an instance of class EventPayload " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "timeStamp"));
                                return null;
                            }
                            break;
                        }
                        case "payload":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Payload of an instance of class EventPayload, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                thePayload = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Payload of an instance of class EventPayload " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "payload"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class EventPayload, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class EventPayload " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class EventPayload " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class EventPayload " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theSource == null)
                {
                    error = new Reporting.Error(
                        "The required property Source has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                if (theObservableReference == null)
                {
                    error = new Reporting.Error(
                        "The required property ObservableReference has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                if (theTimeStamp == null)
                {
                    error = new Reporting.Error(
                        "The required property TimeStamp has not been given " +
                        "in the XML representation of an instance of class EventPayload");
                    return null;
                }

                return new Aas.EventPayload(
                    theSource
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theObservableReference
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theTimeStamp
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSourceSemanticId,
                    theObservableSemanticId,
                    theTopic,
                    theSubjectId,
                    thePayload);
            }  // internal static Aas.EventPayload? EventPayloadFromSequence

            /// <summary>
            /// Deserialize an instance of class EventPayload from an XML element.
            /// </summary>
            internal static Aas.EventPayload? EventPayloadFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class EventPayload, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class EventPayload, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "eventPayload")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class EventPayload " +
                        $"with element name eventPayload, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.EventPayload? result = (
                    EventPayloadFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class EventPayload, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class EventPayload, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.EventPayload? EventPayloadFromElement

            /// <summary>
            /// Deserialize an instance of class IEventElement from an XML element.
            /// </summary>
            internal static Aas.IEventElement? IEventElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "basicEventElement":
                    return BasicEventElementFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IEventElement? IEventElementFromElement

            /// <summary>
            /// Deserialize an instance of class BasicEventElement from a sequence of XML elements.
            /// </summary>
            internal static Aas.BasicEventElement? BasicEventElementFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                ModelReference? theObserved = null;
                Direction? theDirection = null;
                StateOfEvent? theState = null;
                string? theMessageTopic = null;
                ModelReference? theMessageBroker = null;
                string? theLastUpdate = null;
                string? theMinInterval = null;
                string? theMaxInterval = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class BasicEventElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class BasicEventElement " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class BasicEventElement " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "observed":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Observed of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theObserved = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "observed"));
                                return null;
                            }
                            break;
                        }
                        case "direction":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Direction of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textDirection;
                            try
                            {
                                textDirection = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Direction of an instance of class BasicEventElement " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "direction"));
                                return null;
                            }

                            theDirection = Stringification.DirectionFromString(
                                textDirection);

                            if (theDirection == null)
                            {
                                error = new Reporting.Error(
                                    "The property Direction of an instance of class BasicEventElement " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textDirection);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "direction"));
                                return null;
                            }
                            break;
                        }
                        case "state":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property State of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textState;
                            try
                            {
                                textState = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property State of an instance of class BasicEventElement " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "state"));
                                return null;
                            }

                            theState = Stringification.StateOfEventFromString(
                                textState);

                            if (theState == null)
                            {
                                error = new Reporting.Error(
                                    "The property State of an instance of class BasicEventElement " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textState);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "state"));
                                return null;
                            }
                            break;
                        }
                        case "messageTopic":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property MessageTopic of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMessageTopic = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property MessageTopic of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "messageTopic"));
                                return null;
                            }
                            break;
                        }
                        case "messageBroker":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property MessageBroker of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theMessageBroker = ModelReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "messageBroker"));
                                return null;
                            }
                            break;
                        }
                        case "lastUpdate":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property LastUpdate of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theLastUpdate = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property LastUpdate of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "lastUpdate"));
                                return null;
                            }
                            break;
                        }
                        case "minInterval":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property MinInterval of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMinInterval = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property MinInterval of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "minInterval"));
                                return null;
                            }
                            break;
                        }
                        case "maxInterval":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property MaxInterval of an instance of class BasicEventElement, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theMaxInterval = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property MaxInterval of an instance of class BasicEventElement " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "maxInterval"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class BasicEventElement, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class BasicEventElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class BasicEventElement " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class BasicEventElement " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theObserved == null)
                {
                    error = new Reporting.Error(
                        "The required property Observed has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                if (theDirection == null)
                {
                    error = new Reporting.Error(
                        "The required property Direction has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                if (theState == null)
                {
                    error = new Reporting.Error(
                        "The required property State has not been given " +
                        "in the XML representation of an instance of class BasicEventElement");
                    return null;
                }

                return new Aas.BasicEventElement(
                    theObserved
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDirection
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theState
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theMessageTopic,
                    theMessageBroker,
                    theLastUpdate,
                    theMinInterval,
                    theMaxInterval);
            }  // internal static Aas.BasicEventElement? BasicEventElementFromSequence

            /// <summary>
            /// Deserialize an instance of class BasicEventElement from an XML element.
            /// </summary>
            internal static Aas.BasicEventElement? BasicEventElementFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class BasicEventElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class BasicEventElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "basicEventElement")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class BasicEventElement " +
                        $"with element name basicEventElement, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.BasicEventElement? result = (
                    BasicEventElementFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class BasicEventElement, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class BasicEventElement, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.BasicEventElement? BasicEventElementFromElement

            /// <summary>
            /// Deserialize an instance of class Operation from a sequence of XML elements.
            /// </summary>
            internal static Aas.Operation? OperationFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Operation, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Operation " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Operation " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Operation " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Operation " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Operation " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "inputVariables":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property InputVariables of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theInputVariables = new List<OperationVariable>();

                            int indexInputVariables = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                OperationVariable? item = OperationVariableFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexInputVariables));
                                    return null;
                                }

                                theInputVariables.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexInputVariables++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "outputVariables":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property OutputVariables of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theOutputVariables = new List<OperationVariable>();

                            int indexOutputVariables = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                OperationVariable? item = OperationVariableFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexOutputVariables));
                                    return null;
                                }

                                theOutputVariables.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexOutputVariables++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "inoutputVariables":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property InoutputVariables of an instance of class Operation, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theInoutputVariables = new List<OperationVariable>();

                            int indexInoutputVariables = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                OperationVariable? item = OperationVariableFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexInoutputVariables));
                                    return null;
                                }

                                theInoutputVariables.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexInoutputVariables++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Operation, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Operation " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Operation " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Operation " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.Operation(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theInputVariables,
                    theOutputVariables,
                    theInoutputVariables);
            }  // internal static Aas.Operation? OperationFromSequence

            /// <summary>
            /// Deserialize an instance of class Operation from an XML element.
            /// </summary>
            internal static Aas.Operation? OperationFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Operation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Operation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "operation")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Operation " +
                        $"with element name operation, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Operation? result = (
                    OperationFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Operation, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Operation, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Operation? OperationFromElement

            /// <summary>
            /// Deserialize an instance of class OperationVariable from a sequence of XML elements.
            /// </summary>
            internal static Aas.OperationVariable? OperationVariableFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                ISubmodelElement? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class OperationVariable, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class OperationVariable, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theValue = ISubmodelElementFromElement(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class OperationVariable, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class OperationVariable " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class OperationVariable " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class OperationVariable " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class OperationVariable");
                    return null;
                }

                return new Aas.OperationVariable(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.OperationVariable? OperationVariableFromSequence

            /// <summary>
            /// Deserialize an instance of class OperationVariable from an XML element.
            /// </summary>
            internal static Aas.OperationVariable? OperationVariableFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class OperationVariable, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class OperationVariable, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "operationVariable")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class OperationVariable " +
                        $"with element name operationVariable, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.OperationVariable? result = (
                    OperationVariableFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class OperationVariable, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class OperationVariable, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.OperationVariable? OperationVariableFromElement

            /// <summary>
            /// Deserialize an instance of class Capability from a sequence of XML elements.
            /// </summary>
            internal static Aas.Capability? CapabilityFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                ModelingKind? theKind = null;
                GlobalReference? theSemanticId = null;
                List<Qualifier>? theQualifiers = null;
                List<GlobalReference>? theDataSpecifications = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Capability, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class Capability " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class Capability " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class Capability " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "kind":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Kind of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textKind;
                            try
                            {
                                textKind = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Capability " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }

                            theKind = Stringification.ModelingKindFromString(
                                textKind);

                            if (theKind == null)
                            {
                                error = new Reporting.Error(
                                    "The property Kind of an instance of class Capability " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textKind);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "kind"));
                                return null;
                            }
                            break;
                        }
                        case "semanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property SemanticId of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "semanticId"));
                                return null;
                            }
                            break;
                        }
                        case "qualifiers":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Qualifiers of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theQualifiers = new List<Qualifier>();

                            int indexQualifiers = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Qualifier? item = QualifierFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexQualifiers));
                                    return null;
                                }

                                theQualifiers.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexQualifiers++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class Capability, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Capability, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Capability " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Capability " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Capability " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.Capability(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications);
            }  // internal static Aas.Capability? CapabilityFromSequence

            /// <summary>
            /// Deserialize an instance of class Capability from an XML element.
            /// </summary>
            internal static Aas.Capability? CapabilityFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Capability, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Capability, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "capability")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Capability " +
                        $"with element name capability, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Capability? result = (
                    CapabilityFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Capability, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Capability, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Capability? CapabilityFromElement

            /// <summary>
            /// Deserialize an instance of class ConceptDescription from a sequence of XML elements.
            /// </summary>
            internal static Aas.ConceptDescription? ConceptDescriptionFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                string? theChecksum = null;
                string? theId = null;
                AdministrativeInformation? theAdministration = null;
                List<GlobalReference>? theDataSpecifications = null;
                List<GlobalReference>? theIsCaseOf = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class ConceptDescription, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "extensions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Extensions of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theExtensions = new List<Extension>();

                            int indexExtensions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Extension? item = ExtensionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexExtensions));
                                    return null;
                                }

                                theExtensions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexExtensions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "idShort":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IdShort of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theIdShort = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property IdShort of an instance of class ConceptDescription " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "idShort"));
                                return null;
                            }
                            break;
                        }
                        case "displayName":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DisplayName of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDisplayName = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "displayName"));
                                return null;
                            }
                            break;
                        }
                        case "category":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Category of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theCategory = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Category of an instance of class ConceptDescription " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "category"));
                                return null;
                            }
                            break;
                        }
                        case "description":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Description of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theDescription = LangStringSetFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "description"));
                                return null;
                            }
                            break;
                        }
                        case "checksum":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Checksum of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theChecksum = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Checksum of an instance of class ConceptDescription " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "checksum"));
                                return null;
                            }
                            break;
                        }
                        case "id":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Id of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theId = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Id of an instance of class ConceptDescription " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "id"));
                                return null;
                            }
                            break;
                        }
                        case "administration":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Administration of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theAdministration = AdministrativeInformationFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "administration"));
                                return null;
                            }
                            break;
                        }
                        case "dataSpecifications":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property DataSpecifications of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theDataSpecifications = new List<GlobalReference>();

                            int indexDataSpecifications = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexDataSpecifications));
                                    return null;
                                }

                                theDataSpecifications.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexDataSpecifications++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "isCaseOf":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property IsCaseOf of an instance of class ConceptDescription, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theIsCaseOf = new List<GlobalReference>();

                            int indexIsCaseOf = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                GlobalReference? item = GlobalReferenceFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexIsCaseOf));
                                    return null;
                                }

                                theIsCaseOf.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexIsCaseOf++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class ConceptDescription, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ConceptDescription " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ConceptDescription " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ConceptDescription " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theId == null)
                {
                    error = new Reporting.Error(
                        "The required property Id has not been given " +
                        "in the XML representation of an instance of class ConceptDescription");
                    return null;
                }

                return new Aas.ConceptDescription(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theChecksum,
                    theAdministration,
                    theDataSpecifications,
                    theIsCaseOf);
            }  // internal static Aas.ConceptDescription? ConceptDescriptionFromSequence

            /// <summary>
            /// Deserialize an instance of class ConceptDescription from an XML element.
            /// </summary>
            internal static Aas.ConceptDescription? ConceptDescriptionFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ConceptDescription, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class ConceptDescription, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "conceptDescription")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ConceptDescription " +
                        $"with element name conceptDescription, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.ConceptDescription? result = (
                    ConceptDescriptionFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class ConceptDescription, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class ConceptDescription, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.ConceptDescription? ConceptDescriptionFromElement

            /// <summary>
            /// Deserialize an instance of class IReference from an XML element.
            /// </summary>
            internal static Aas.IReference? IReferenceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element, but reached end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                switch (reader.Name)
                {
                        case "globalReference":
                    return GlobalReferenceFromElement(
                        reader,
                        out error);
                case "modelReference":
                    return ModelReferenceFromElement(
                        reader,
                        out error);
                default:
                    error = new Reporting.Error(
                        $"Unexpected element with the name {reader.Name}");
                    return null;
                }
            }  // internal static Aas.IReference? IReferenceFromElement

            /// <summary>
            /// Deserialize an instance of class GlobalReference from a sequence of XML elements.
            /// </summary>
            internal static Aas.GlobalReference? GlobalReferenceFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                string? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class GlobalReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class GlobalReference, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class GlobalReference " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class GlobalReference, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class GlobalReference " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class GlobalReference " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class GlobalReference " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class GlobalReference");
                    return null;
                }

                return new Aas.GlobalReference(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.GlobalReference? GlobalReferenceFromSequence

            /// <summary>
            /// Deserialize an instance of class GlobalReference from an XML element.
            /// </summary>
            internal static Aas.GlobalReference? GlobalReferenceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class GlobalReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class GlobalReference, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "globalReference")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class GlobalReference " +
                        $"with element name globalReference, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.GlobalReference? result = (
                    GlobalReferenceFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class GlobalReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class GlobalReference, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.GlobalReference? GlobalReferenceFromElement

            /// <summary>
            /// Deserialize an instance of class ModelReference from a sequence of XML elements.
            /// </summary>
            internal static Aas.ModelReference? ModelReferenceFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<Key>? theKeys = null;
                GlobalReference? theReferredSemanticId = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class ModelReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "keys":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Keys of an instance of class ModelReference, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theKeys = new List<Key>();

                            int indexKeys = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Key? item = KeyFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexKeys));
                                    return null;
                                }

                                theKeys.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexKeys++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "referredSemanticId":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ReferredSemanticId of an instance of class ModelReference, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            theReferredSemanticId = GlobalReferenceFromSequence(
                                reader,
                                out error);

                            if (error != null)
                            {
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "referredSemanticId"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class ModelReference, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ModelReference " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ModelReference " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class ModelReference " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theKeys == null)
                {
                    error = new Reporting.Error(
                        "The required property Keys has not been given " +
                        "in the XML representation of an instance of class ModelReference");
                    return null;
                }

                return new Aas.ModelReference(
                    theKeys
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theReferredSemanticId);
            }  // internal static Aas.ModelReference? ModelReferenceFromSequence

            /// <summary>
            /// Deserialize an instance of class ModelReference from an XML element.
            /// </summary>
            internal static Aas.ModelReference? ModelReferenceFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class ModelReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class ModelReference, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "modelReference")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class ModelReference " +
                        $"with element name modelReference, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.ModelReference? result = (
                    ModelReferenceFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class ModelReference, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class ModelReference, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.ModelReference? ModelReferenceFromElement

            /// <summary>
            /// Deserialize an instance of class Key from a sequence of XML elements.
            /// </summary>
            internal static Aas.Key? KeyFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                KeyElements? theType = null;
                string? theValue = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Key, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "type":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Type of an instance of class Key, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            string textType;
                            try
                            {
                                textType = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Type of an instance of class Key " +
                                    $"could not be de-serialized as a string: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "type"));
                                return null;
                            }

                            theType = Stringification.KeyElementsFromString(
                                textType);

                            if (theType == null)
                            {
                                error = new Reporting.Error(
                                    "The property Type of an instance of class Key " +
                                    "could not be de-serialized from an unexpected enumeration literal: " +
                                    textType);
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "type"));
                                return null;
                            }
                            break;
                        }
                        case "value":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Value of an instance of class Key, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theValue = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Value of an instance of class Key " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "value"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Key, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Key " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Key " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Key " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theType == null)
                {
                    error = new Reporting.Error(
                        "The required property Type has not been given " +
                        "in the XML representation of an instance of class Key");
                    return null;
                }

                if (theValue == null)
                {
                    error = new Reporting.Error(
                        "The required property Value has not been given " +
                        "in the XML representation of an instance of class Key");
                    return null;
                }

                return new Aas.Key(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.Key? KeyFromSequence

            /// <summary>
            /// Deserialize an instance of class Key from an XML element.
            /// </summary>
            internal static Aas.Key? KeyFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Key, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Key, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "key")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Key " +
                        $"with element name key, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Key? result = (
                    KeyFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Key, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Key, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Key? KeyFromElement

            /// <summary>
            /// Deserialize an instance of class LangString from a sequence of XML elements.
            /// </summary>
            internal static Aas.LangString? LangStringFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                string? theLanguage = null;
                string? theText = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class LangString, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "language":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Language of an instance of class LangString, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theLanguage = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Language of an instance of class LangString " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "language"));
                                return null;
                            }
                            break;
                        }
                        case "text":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Text of an instance of class LangString, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            try
                            {
                                theText = reader.ReadContentAsString();
                            }
                            catch (System.FormatException exception)
                            {
                                error = new Reporting.Error(
                                    "The property Text of an instance of class LangString " +
                                    $"could not be de-serialized: {exception}");
                                error._pathSegments.AddFirst(
                                    new Reporting.NameSegment(
                                        "text"));
                                return null;
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class LangString, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangString " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangString " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangString " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theLanguage == null)
                {
                    error = new Reporting.Error(
                        "The required property Language has not been given " +
                        "in the XML representation of an instance of class LangString");
                    return null;
                }

                if (theText == null)
                {
                    error = new Reporting.Error(
                        "The required property Text has not been given " +
                        "in the XML representation of an instance of class LangString");
                    return null;
                }

                return new Aas.LangString(
                    theLanguage
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theText
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangString? LangStringFromSequence

            /// <summary>
            /// Deserialize an instance of class LangString from an XML element.
            /// </summary>
            internal static Aas.LangString? LangStringFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangString, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class LangString, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "langString")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangString " +
                        $"with element name langString, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangString? result = (
                    LangStringFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class LangString, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class LangString, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.LangString? LangStringFromElement

            /// <summary>
            /// Deserialize an instance of class LangStringSet from a sequence of XML elements.
            /// </summary>
            internal static Aas.LangStringSet? LangStringSetFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<LangString>? theLangStrings = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class LangStringSet, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "langStrings":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property LangStrings of an instance of class LangStringSet, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theLangStrings = new List<LangString>();

                            int indexLangStrings = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                LangString? item = LangStringFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexLangStrings));
                                    return null;
                                }

                                theLangStrings.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexLangStrings++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class LangStringSet, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangStringSet " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangStringSet " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class LangStringSet " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                if (theLangStrings == null)
                {
                    error = new Reporting.Error(
                        "The required property LangStrings has not been given " +
                        "in the XML representation of an instance of class LangStringSet");
                    return null;
                }

                return new Aas.LangStringSet(
                    theLangStrings
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static Aas.LangStringSet? LangStringSetFromSequence

            /// <summary>
            /// Deserialize an instance of class LangStringSet from an XML element.
            /// </summary>
            internal static Aas.LangStringSet? LangStringSetFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class LangStringSet, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class LangStringSet, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "langStringSet")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class LangStringSet " +
                        $"with element name langStringSet, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.LangStringSet? result = (
                    LangStringSetFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class LangStringSet, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class LangStringSet, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.LangStringSet? LangStringSetFromElement

            /// <summary>
            /// Deserialize an instance of class Environment from a sequence of XML elements.
            /// </summary>
            internal static Aas.Environment? EnvironmentFromSequence(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                List<AssetAdministrationShell>? theAssetAdministrationShells = null;
                List<Submodel>? theSubmodels = null;
                List<ConceptDescription>? theConceptDescriptions = null;

                SkipWhitespaceAndComments(reader);
                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing " +
                        "a property of an instance of class Environment, " +
                        "but reached the end-of-file");
                    return null;
                }

                while (reader.NodeType == Xml.XmlNodeType.Element)
                {
                    string elementName = reader.Name;
                    // Skip the expected start node
                    reader.Read();
                    switch (elementName)
                    {
                        case "assetAdministrationShells":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property AssetAdministrationShells of an instance of class Environment, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theAssetAdministrationShells = new List<AssetAdministrationShell>();

                            int indexAssetAdministrationShells = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                AssetAdministrationShell? item = AssetAdministrationShellFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexAssetAdministrationShells));
                                    return null;
                                }

                                theAssetAdministrationShells.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexAssetAdministrationShells++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "submodels":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property Submodels of an instance of class Environment, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theSubmodels = new List<Submodel>();

                            int indexSubmodels = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                Submodel? item = SubmodelFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexSubmodels));
                                    return null;
                                }

                                theSubmodels.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexSubmodels++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        case "conceptDescriptions":
                        {
                            if (reader.EOF)
                            {
                                error = new Reporting.Error(
                                    "Expected an XML content representing " +
                                    "the property ConceptDescriptions of an instance of class Environment, " +
                                    "but reached the end-of-file");
                                return null;
                            }

                            SkipWhitespaceAndComments(reader);
                            theConceptDescriptions = new List<ConceptDescription>();

                            int indexConceptDescriptions = 0;
                            while (reader.NodeType == Xml.XmlNodeType.Element)
                            {
                                ConceptDescription? item = ConceptDescriptionFromElement(
                                    reader,
                                    out error);

                                if (error != null)
                                {
                                    error._pathSegments.AddFirst(
                                        new Reporting.IndexSegment(
                                            indexConceptDescriptions));
                                    return null;
                                }

                                theConceptDescriptions.Add(
                                    item
                                        ?? throw new System.InvalidOperationException(
                                            "Unexpected item null when error null"));

                                indexConceptDescriptions++;
                                SkipWhitespaceAndComments(reader);
                            }
                            break;
                        }
                        default:
                            error = new Reporting.Error(
                                "We expected properties of the class Environment, " +
                                "but got an unexpected element " +
                                $"with the name {reader.Name}");
                            return null;
                    }
                    SkipWhitespaceAndComments(reader);
                    if (reader.EOF)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Environment " +
                            $"with the element name {elementName}, " +
                            $"but got the end-of-file.");
                    }
                    if (reader.NodeType != Xml.XmlNodeType.EndElement)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Environment " +
                            $"with the element name {elementName}, " +
                            $"but got the node of type {reader.NodeType} " +
                            $"with the value {reader.Value}");
                    }
                    if (reader.Name != elementName)
                    {
                        error = new Reporting.Error(
                            $"Expected an XML end element to conclude a property of class Environment " +
                            $"with the element name {elementName}, " +
                            $"but got the end element with the name {reader.Name}");
                    }
                    // Skip the expected end element
                    reader.Read();
                    if (reader.EOF)
                    {
                        break;
                    }
                    SkipWhitespaceAndComments(reader);
                }

                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions);
            }  // internal static Aas.Environment? EnvironmentFromSequence

            /// <summary>
            /// Deserialize an instance of class Environment from an XML element.
            /// </summary>
            internal static Aas.Environment? EnvironmentFromElement(
                Xml.XmlReader reader,
                out Reporting.Error? error)
            {
                error = null;

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML element representing an instance of class Environment, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.Element)
                {
                    error = new Reporting.Error(
                        $"Expected an XML element representing an instance of class Environment, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                if (reader.Name != "environment")
                {
                    error = new Reporting.Error(
                        "Expected an element representing an instance of class Environment " +
                        $"with element name environment, but got: {reader.Name}");
                    return null;
                }

                // Skip the element node and go to the content
                reader.Read();

                Aas.Environment? result = (
                    EnvironmentFromSequence(
                        reader,
                        out error));
                if (error != null)
                {
                    return null;
                }

                SkipWhitespaceAndComments(reader);

                if (reader.EOF)
                {
                    error = new Reporting.Error(
                        "Expected an XML end element concluding an instance of class Environment, " +
                        "but reached the end-of-file");
                    return null;
                }

                if (reader.NodeType != Xml.XmlNodeType.EndElement)
                {
                    error = new Reporting.Error(
                        $"Expected an XML end element concluding an instance of class Environment, " +
                        $"but got a node of type {reader.NodeType} " +
                        $"with value {reader.Value}");
                    return null;
                }

                return result;
            }  // internal static Aas.Environment? EnvironmentFromElement
        }  // internal static class DeserializeImplementation

        /// <summary>
        /// Represent a critical error during the deserialization.
        /// </summary>
        public class Exception : System.Exception
        {
            public readonly string Path;
            public readonly string Cause;
            public Exception(string path, string cause)
                : base($"{cause} at: {path}")
            {
                Path = path;
                Cause = cause;
            }
        }

        /// <summary>
        /// Deserialize instances of meta-model classes from XML.
        /// </summary>
        /// <example>
        /// Here is an example how to parse an instance of class Resource:
        /// <code>
        /// var reader = new System.Xml.XmlReader(/* some arguments */);
        /// Aas.Resource anInstance = Deserialize.ResourceFrom(
        ///     reader);
        /// </code>
        /// </example>
        public static class Deserialize
        {
            /// <summary>
            /// Deserialize an instance of class Resource from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Resource.
            /// </exception>
            public static Aas.Resource ResourceFrom(
                Xml.XmlReader reader)
            {
                Aas.Resource? result = (
                    DeserializeImplementation.ResourceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IHasSemantics from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IHasSemantics.
            /// </exception>
            public static Aas.IHasSemantics IHasSemanticsFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasSemantics? result = (
                    DeserializeImplementation.IHasSemanticsFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Extension from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Extension.
            /// </exception>
            public static Aas.Extension ExtensionFrom(
                Xml.XmlReader reader)
            {
                Aas.Extension? result = (
                    DeserializeImplementation.ExtensionFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IHasExtensions from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IHasExtensions.
            /// </exception>
            public static Aas.IHasExtensions IHasExtensionsFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasExtensions? result = (
                    DeserializeImplementation.IHasExtensionsFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IReferable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IReferable.
            /// </exception>
            public static Aas.IReferable IReferableFrom(
                Xml.XmlReader reader)
            {
                Aas.IReferable? result = (
                    DeserializeImplementation.IReferableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IIdentifiable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IIdentifiable.
            /// </exception>
            public static Aas.IIdentifiable IIdentifiableFrom(
                Xml.XmlReader reader)
            {
                Aas.IIdentifiable? result = (
                    DeserializeImplementation.IIdentifiableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IHasKind from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IHasKind.
            /// </exception>
            public static Aas.IHasKind IHasKindFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasKind? result = (
                    DeserializeImplementation.IHasKindFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IHasDataSpecification from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IHasDataSpecification.
            /// </exception>
            public static Aas.IHasDataSpecification IHasDataSpecificationFrom(
                Xml.XmlReader reader)
            {
                Aas.IHasDataSpecification? result = (
                    DeserializeImplementation.IHasDataSpecificationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class AdministrativeInformation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of AdministrativeInformation.
            /// </exception>
            public static Aas.AdministrativeInformation AdministrativeInformationFrom(
                Xml.XmlReader reader)
            {
                Aas.AdministrativeInformation? result = (
                    DeserializeImplementation.AdministrativeInformationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IQualifiable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IQualifiable.
            /// </exception>
            public static Aas.IQualifiable IQualifiableFrom(
                Xml.XmlReader reader)
            {
                Aas.IQualifiable? result = (
                    DeserializeImplementation.IQualifiableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Qualifier from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Qualifier.
            /// </exception>
            public static Aas.Qualifier QualifierFrom(
                Xml.XmlReader reader)
            {
                Aas.Qualifier? result = (
                    DeserializeImplementation.QualifierFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class AssetAdministrationShell from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of AssetAdministrationShell.
            /// </exception>
            public static Aas.AssetAdministrationShell AssetAdministrationShellFrom(
                Xml.XmlReader reader)
            {
                Aas.AssetAdministrationShell? result = (
                    DeserializeImplementation.AssetAdministrationShellFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class AssetInformation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of AssetInformation.
            /// </exception>
            public static Aas.AssetInformation AssetInformationFrom(
                Xml.XmlReader reader)
            {
                Aas.AssetInformation? result = (
                    DeserializeImplementation.AssetInformationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IdentifierKeyValuePair from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IdentifierKeyValuePair.
            /// </exception>
            public static Aas.IdentifierKeyValuePair IdentifierKeyValuePairFrom(
                Xml.XmlReader reader)
            {
                Aas.IdentifierKeyValuePair? result = (
                    DeserializeImplementation.IdentifierKeyValuePairFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Submodel from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Submodel.
            /// </exception>
            public static Aas.Submodel SubmodelFrom(
                Xml.XmlReader reader)
            {
                Aas.Submodel? result = (
                    DeserializeImplementation.SubmodelFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class ISubmodelElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of ISubmodelElement.
            /// </exception>
            public static Aas.ISubmodelElement ISubmodelElementFrom(
                Xml.XmlReader reader)
            {
                Aas.ISubmodelElement? result = (
                    DeserializeImplementation.ISubmodelElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IRelationshipElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IRelationshipElement.
            /// </exception>
            public static Aas.IRelationshipElement IRelationshipElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IRelationshipElement? result = (
                    DeserializeImplementation.IRelationshipElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class SubmodelElementList from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of SubmodelElementList.
            /// </exception>
            public static Aas.SubmodelElementList SubmodelElementListFrom(
                Xml.XmlReader reader)
            {
                Aas.SubmodelElementList? result = (
                    DeserializeImplementation.SubmodelElementListFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class SubmodelElementStruct from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of SubmodelElementStruct.
            /// </exception>
            public static Aas.SubmodelElementStruct SubmodelElementStructFrom(
                Xml.XmlReader reader)
            {
                Aas.SubmodelElementStruct? result = (
                    DeserializeImplementation.SubmodelElementStructFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IDataElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IDataElement.
            /// </exception>
            public static Aas.IDataElement IDataElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IDataElement? result = (
                    DeserializeImplementation.IDataElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Property from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Property.
            /// </exception>
            public static Aas.Property PropertyFrom(
                Xml.XmlReader reader)
            {
                Aas.Property? result = (
                    DeserializeImplementation.PropertyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class MultiLanguageProperty from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of MultiLanguageProperty.
            /// </exception>
            public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom(
                Xml.XmlReader reader)
            {
                Aas.MultiLanguageProperty? result = (
                    DeserializeImplementation.MultiLanguagePropertyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Range from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Range.
            /// </exception>
            public static Aas.Range RangeFrom(
                Xml.XmlReader reader)
            {
                Aas.Range? result = (
                    DeserializeImplementation.RangeFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class ReferenceElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of ReferenceElement.
            /// </exception>
            public static Aas.ReferenceElement ReferenceElementFrom(
                Xml.XmlReader reader)
            {
                Aas.ReferenceElement? result = (
                    DeserializeImplementation.ReferenceElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Blob from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Blob.
            /// </exception>
            public static Aas.Blob BlobFrom(
                Xml.XmlReader reader)
            {
                Aas.Blob? result = (
                    DeserializeImplementation.BlobFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class File from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of File.
            /// </exception>
            public static Aas.File FileFrom(
                Xml.XmlReader reader)
            {
                Aas.File? result = (
                    DeserializeImplementation.FileFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class AnnotatedRelationshipElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of AnnotatedRelationshipElement.
            /// </exception>
            public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(
                Xml.XmlReader reader)
            {
                Aas.AnnotatedRelationshipElement? result = (
                    DeserializeImplementation.AnnotatedRelationshipElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Entity from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Entity.
            /// </exception>
            public static Aas.Entity EntityFrom(
                Xml.XmlReader reader)
            {
                Aas.Entity? result = (
                    DeserializeImplementation.EntityFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class EventPayload from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of EventPayload.
            /// </exception>
            public static Aas.EventPayload EventPayloadFrom(
                Xml.XmlReader reader)
            {
                Aas.EventPayload? result = (
                    DeserializeImplementation.EventPayloadFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IEventElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IEventElement.
            /// </exception>
            public static Aas.IEventElement IEventElementFrom(
                Xml.XmlReader reader)
            {
                Aas.IEventElement? result = (
                    DeserializeImplementation.IEventElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class BasicEventElement from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of BasicEventElement.
            /// </exception>
            public static Aas.BasicEventElement BasicEventElementFrom(
                Xml.XmlReader reader)
            {
                Aas.BasicEventElement? result = (
                    DeserializeImplementation.BasicEventElementFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Operation from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Operation.
            /// </exception>
            public static Aas.Operation OperationFrom(
                Xml.XmlReader reader)
            {
                Aas.Operation? result = (
                    DeserializeImplementation.OperationFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class OperationVariable from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of OperationVariable.
            /// </exception>
            public static Aas.OperationVariable OperationVariableFrom(
                Xml.XmlReader reader)
            {
                Aas.OperationVariable? result = (
                    DeserializeImplementation.OperationVariableFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Capability from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Capability.
            /// </exception>
            public static Aas.Capability CapabilityFrom(
                Xml.XmlReader reader)
            {
                Aas.Capability? result = (
                    DeserializeImplementation.CapabilityFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class ConceptDescription from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of ConceptDescription.
            /// </exception>
            public static Aas.ConceptDescription ConceptDescriptionFrom(
                Xml.XmlReader reader)
            {
                Aas.ConceptDescription? result = (
                    DeserializeImplementation.ConceptDescriptionFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class IReference from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of IReference.
            /// </exception>
            public static Aas.IReference IReferenceFrom(
                Xml.XmlReader reader)
            {
                Aas.IReference? result = (
                    DeserializeImplementation.IReferenceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class GlobalReference from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of GlobalReference.
            /// </exception>
            public static Aas.GlobalReference GlobalReferenceFrom(
                Xml.XmlReader reader)
            {
                Aas.GlobalReference? result = (
                    DeserializeImplementation.GlobalReferenceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class ModelReference from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of ModelReference.
            /// </exception>
            public static Aas.ModelReference ModelReferenceFrom(
                Xml.XmlReader reader)
            {
                Aas.ModelReference? result = (
                    DeserializeImplementation.ModelReferenceFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Key from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Key.
            /// </exception>
            public static Aas.Key KeyFrom(
                Xml.XmlReader reader)
            {
                Aas.Key? result = (
                    DeserializeImplementation.KeyFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class LangString from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of LangString.
            /// </exception>
            public static Aas.LangString LangStringFrom(
                Xml.XmlReader reader)
            {
                Aas.LangString? result = (
                    DeserializeImplementation.LangStringFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class LangStringSet from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of LangStringSet.
            /// </exception>
            public static Aas.LangStringSet LangStringSetFrom(
                Xml.XmlReader reader)
            {
                Aas.LangStringSet? result = (
                    DeserializeImplementation.LangStringSetFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of class Environment from <paramref name="reader" />.
            /// </summary>
            /// <param name="reader">Initialized XML reader with cursor set to the element</param>
            /// <exception cref="Xmlization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid XML
            /// representation of Environment.
            /// </exception>
            public static Aas.Environment EnvironmentFrom(
                Xml.XmlReader reader)
            {
                Aas.Environment? result = (
                    DeserializeImplementation.EnvironmentFromElement(
                        reader,
                        out Reporting.Error? error));
                if (error != null)
                {
                    throw new Xmlization.Exception(
                        Reporting.GenerateRelativeXPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }
        }  // public static class Deserialize

        /// <summary>
        /// Serialize recursively the instances as XML elements.
        /// </summary>
        internal class VisitorWithWriter
            : Visitation.AbstractVisitorWithContext<Xml.XmlWriter>
        {
            private void ResourceToSequence(
                Resource that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "path");
                string? textPath = Stringification.ToString(
                    that.Path);
                writer.WriteValue(
                    textPath
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration AssetKind: " +
                            that.Path.ToString()));
                writer.WriteEndElement();

                if (that.ContentType != null)
                {
                    writer.WriteStartElement(
                        "contentType");
                    writer.WriteValue(
                        that.ContentType);
                    writer.WriteEndElement();
                }
            }  // private void ResourceToSequence

            public override void Visit(
                Aas.Resource that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "resource");
                this.ResourceToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ExtensionToSequence(
                Extension that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "name");
                writer.WriteValue(
                    that.Name);
                writer.WriteEndElement();

                if (that.ValueType != null)
                {
                    writer.WriteStartElement(
                        "valueType");
                    string? textValueType = Stringification.ToString(
                        that.ValueType);
                    writer.WriteValue(
                        textValueType
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration DataTypeDefXsd: " +
                                that.ValueType.ToString()));
                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    writer.WriteValue(
                        that.Value);
                    writer.WriteEndElement();
                }

                if (that.RefersTo != null)
                {
                    writer.WriteStartElement(
                        "refersTo");
                    this.ModelReferenceToSequence(
                        that.RefersTo,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void ExtensionToSequence

            public override void Visit(
                Aas.Extension that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "extension");
                this.ExtensionToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AdministrativeInformationToSequence(
                AdministrativeInformation that,
                Xml.XmlWriter writer)
            {
                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.Version != null)
                {
                    writer.WriteStartElement(
                        "version");
                    writer.WriteValue(
                        that.Version);
                    writer.WriteEndElement();
                }

                if (that.Revision != null)
                {
                    writer.WriteStartElement(
                        "revision");
                    writer.WriteValue(
                        that.Revision);
                    writer.WriteEndElement();
                }
            }  // private void AdministrativeInformationToSequence

            public override void Visit(
                Aas.AdministrativeInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "administrativeInformation");
                this.AdministrativeInformationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void QualifierToSequence(
                Qualifier that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "type");
                writer.WriteValue(
                    that.Type);
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "valueType");
                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));
                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    writer.WriteValue(
                        that.Value);
                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId");
                    this.GlobalReferenceToSequence(
                        that.ValueId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void QualifierToSequence

            public override void Visit(
                Aas.Qualifier that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "qualifier");
                this.QualifierToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AssetAdministrationShellToSequence(
                AssetAdministrationShell that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id");
                writer.WriteValue(
                    that.Id);
                writer.WriteEndElement();

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration");
                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "assetInformation");
                this.AssetInformationToSequence(
                    that.AssetInformation,
                    writer);
                writer.WriteEndElement();

                if (that.Submodels != null)
                {
                    writer.WriteStartElement(
                        "submodels");
                    foreach (var item in that.Submodels)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DerivedFrom != null)
                {
                    writer.WriteStartElement(
                        "derivedFrom");
                    this.ModelReferenceToSequence(
                        that.DerivedFrom,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void AssetAdministrationShellToSequence

            public override void Visit(
                Aas.AssetAdministrationShell that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetAdministrationShell");
                this.AssetAdministrationShellToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AssetInformationToSequence(
                AssetInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetKind");
                string? textAssetKind = Stringification.ToString(
                    that.AssetKind);
                writer.WriteValue(
                    textAssetKind
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration AssetKind: " +
                            that.AssetKind.ToString()));
                writer.WriteEndElement();

                if (that.GlobalAssetId != null)
                {
                    writer.WriteStartElement(
                        "globalAssetId");
                    this.GlobalReferenceToSequence(
                        that.GlobalAssetId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.SpecificAssetId != null)
                {
                    writer.WriteStartElement(
                        "specificAssetId");
                    this.IdentifierKeyValuePairToSequence(
                        that.SpecificAssetId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.DefaultThumbnail != null)
                {
                    writer.WriteStartElement(
                        "defaultThumbnail");
                    this.ResourceToSequence(
                        that.DefaultThumbnail,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void AssetInformationToSequence

            public override void Visit(
                Aas.AssetInformation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "assetInformation");
                this.AssetInformationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void IdentifierKeyValuePairToSequence(
                IdentifierKeyValuePair that,
                Xml.XmlWriter writer)
            {
                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "key");
                writer.WriteValue(
                    that.Key);
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "value");
                writer.WriteValue(
                    that.Value);
                writer.WriteEndElement();

                if (that.ExternalSubjectId != null)
                {
                    writer.WriteStartElement(
                        "externalSubjectId");
                    this.GlobalReferenceToSequence(
                        that.ExternalSubjectId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void IdentifierKeyValuePairToSequence

            public override void Visit(
                Aas.IdentifierKeyValuePair that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "identifierKeyValuePair");
                this.IdentifierKeyValuePairToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelToSequence(
                Submodel that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id");
                writer.WriteValue(
                    that.Id);
                writer.WriteEndElement();

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration");
                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.SubmodelElements != null)
                {
                    writer.WriteStartElement(
                        "submodelElements");
                    foreach (var item in that.SubmodelElements)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void SubmodelToSequence

            public override void Visit(
                Aas.Submodel that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodel");
                this.SubmodelToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelElementListToSequence(
                SubmodelElementList that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "typeValueListElement");
                string? textTypeValueListElement = Stringification.ToString(
                    that.TypeValueListElement);
                writer.WriteValue(
                    textTypeValueListElement
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration SubmodelElementElements: " +
                            that.TypeValueListElement.ToString()));
                writer.WriteEndElement();

                if (that.OrderRelevant != null)
                {
                    writer.WriteStartElement(
                        "orderRelevant");
                    writer.WriteValue(
                        that.OrderRelevant);
                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    foreach (var item in that.Value)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.SemanticIdListElement != null)
                {
                    writer.WriteStartElement(
                        "semanticIdListElement");
                    this.GlobalReferenceToSequence(
                        that.SemanticIdListElement,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.ValueTypeListElement != null)
                {
                    writer.WriteStartElement(
                        "valueTypeListElement");
                    string? textValueTypeListElement = Stringification.ToString(
                        that.ValueTypeListElement);
                    writer.WriteValue(
                        textValueTypeListElement
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration DataTypeDefXsd: " +
                                that.ValueTypeListElement.ToString()));
                    writer.WriteEndElement();
                }
            }  // private void SubmodelElementListToSequence

            public override void Visit(
                Aas.SubmodelElementList that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodelElementList");
                this.SubmodelElementListToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void SubmodelElementStructToSequence(
                SubmodelElementStruct that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    foreach (var item in that.Value)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void SubmodelElementStructToSequence

            public override void Visit(
                Aas.SubmodelElementStruct that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "submodelElementStruct");
                this.SubmodelElementStructToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void PropertyToSequence(
                Property that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "valueType");
                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));
                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    writer.WriteValue(
                        that.Value);
                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId");
                    this.GlobalReferenceToSequence(
                        that.ValueId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void PropertyToSequence

            public override void Visit(
                Aas.Property that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "property");
                this.PropertyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void MultiLanguagePropertyToSequence(
                MultiLanguageProperty that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    this.LangStringSetToSequence(
                        that.Value,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.ValueId != null)
                {
                    writer.WriteStartElement(
                        "valueId");
                    this.GlobalReferenceToSequence(
                        that.ValueId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void MultiLanguagePropertyToSequence

            public override void Visit(
                Aas.MultiLanguageProperty that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "multiLanguageProperty");
                this.MultiLanguagePropertyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void RangeToSequence(
                Range that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "valueType");
                string? textValueType = Stringification.ToString(
                    that.ValueType);
                writer.WriteValue(
                    textValueType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration DataTypeDefXsd: " +
                            that.ValueType.ToString()));
                writer.WriteEndElement();

                if (that.Min != null)
                {
                    writer.WriteStartElement(
                        "min");
                    writer.WriteValue(
                        that.Min);
                    writer.WriteEndElement();
                }

                if (that.Max != null)
                {
                    writer.WriteStartElement(
                        "max");
                    writer.WriteValue(
                        that.Max);
                    writer.WriteEndElement();
                }
            }  // private void RangeToSequence

            public override void Visit(
                Aas.Range that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "range");
                this.RangeToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ReferenceElementToSequence(
                ReferenceElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    this.Visit(
                        that.Value,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void ReferenceElementToSequence

            public override void Visit(
                Aas.ReferenceElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "referenceElement");
                this.ReferenceElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void BlobToSequence(
                Blob that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "mimeType");
                writer.WriteValue(
                    that.MimeType);
                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    using var streamValue = new System.IO.MemoryStream(
                        that.Value);
                    using var readerValue = new System.IO.BinaryReader(
                        streamValue);
                    writer.WriteValue(
                        streamValue);
                    writer.WriteEndElement();
                }
            }  // private void BlobToSequence

            public override void Visit(
                Aas.Blob that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "blob");
                this.BlobToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void FileToSequence(
                File that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "contentType");
                writer.WriteValue(
                    that.ContentType);
                writer.WriteEndElement();

                if (that.Value != null)
                {
                    writer.WriteStartElement(
                        "value");
                    writer.WriteValue(
                        that.Value);
                    writer.WriteEndElement();
                }
            }  // private void FileToSequence

            public override void Visit(
                Aas.File that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "file");
                this.FileToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void AnnotatedRelationshipElementToSequence(
                AnnotatedRelationshipElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "first");
                this.Visit(
                    that.First,
                    writer);
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "second");
                this.Visit(
                    that.Second,
                    writer);
                writer.WriteEndElement();

                if (that.Annotation != null)
                {
                    writer.WriteStartElement(
                        "annotation");
                    foreach (var item in that.Annotation)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void AnnotatedRelationshipElementToSequence

            public override void Visit(
                Aas.AnnotatedRelationshipElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "annotatedRelationshipElement");
                this.AnnotatedRelationshipElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EntityToSequence(
                Entity that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "entityType");
                string? textEntityType = Stringification.ToString(
                    that.EntityType);
                writer.WriteValue(
                    textEntityType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration EntityType: " +
                            that.EntityType.ToString()));
                writer.WriteEndElement();

                if (that.Statements != null)
                {
                    writer.WriteStartElement(
                        "statements");
                    foreach (var item in that.Statements)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.GlobalAssetId != null)
                {
                    writer.WriteStartElement(
                        "globalAssetId");
                    this.Visit(
                        that.GlobalAssetId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.SpecificAssetId != null)
                {
                    writer.WriteStartElement(
                        "specificAssetId");
                    this.IdentifierKeyValuePairToSequence(
                        that.SpecificAssetId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void EntityToSequence

            public override void Visit(
                Aas.Entity that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "entity");
                this.EntityToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EventPayloadToSequence(
                EventPayload that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "source");
                this.ModelReferenceToSequence(
                    that.Source,
                    writer);
                writer.WriteEndElement();

                if (that.SourceSemanticId != null)
                {
                    writer.WriteStartElement(
                        "sourceSemanticId");
                    this.GlobalReferenceToSequence(
                        that.SourceSemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "observableReference");
                this.ModelReferenceToSequence(
                    that.ObservableReference,
                    writer);
                writer.WriteEndElement();

                if (that.ObservableSemanticId != null)
                {
                    writer.WriteStartElement(
                        "observableSemanticId");
                    this.GlobalReferenceToSequence(
                        that.ObservableSemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Topic != null)
                {
                    writer.WriteStartElement(
                        "topic");
                    writer.WriteValue(
                        that.Topic);
                    writer.WriteEndElement();
                }

                if (that.SubjectId != null)
                {
                    writer.WriteStartElement(
                        "subjectId");
                    this.GlobalReferenceToSequence(
                        that.SubjectId,
                        writer);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "timeStamp");
                writer.WriteValue(
                    that.TimeStamp);
                writer.WriteEndElement();

                if (that.Payload != null)
                {
                    writer.WriteStartElement(
                        "payload");
                    writer.WriteValue(
                        that.Payload);
                    writer.WriteEndElement();
                }
            }  // private void EventPayloadToSequence

            public override void Visit(
                Aas.EventPayload that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "eventPayload");
                this.EventPayloadToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void BasicEventElementToSequence(
                BasicEventElement that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "observed");
                this.ModelReferenceToSequence(
                    that.Observed,
                    writer);
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "direction");
                string? textDirection = Stringification.ToString(
                    that.Direction);
                writer.WriteValue(
                    textDirection
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration Direction: " +
                            that.Direction.ToString()));
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "state");
                string? textState = Stringification.ToString(
                    that.State);
                writer.WriteValue(
                    textState
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration StateOfEvent: " +
                            that.State.ToString()));
                writer.WriteEndElement();

                if (that.MessageTopic != null)
                {
                    writer.WriteStartElement(
                        "messageTopic");
                    writer.WriteValue(
                        that.MessageTopic);
                    writer.WriteEndElement();
                }

                if (that.MessageBroker != null)
                {
                    writer.WriteStartElement(
                        "messageBroker");
                    this.ModelReferenceToSequence(
                        that.MessageBroker,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.LastUpdate != null)
                {
                    writer.WriteStartElement(
                        "lastUpdate");
                    writer.WriteValue(
                        that.LastUpdate);
                    writer.WriteEndElement();
                }

                if (that.MinInterval != null)
                {
                    writer.WriteStartElement(
                        "minInterval");
                    writer.WriteValue(
                        that.MinInterval);
                    writer.WriteEndElement();
                }

                if (that.MaxInterval != null)
                {
                    writer.WriteStartElement(
                        "maxInterval");
                    writer.WriteValue(
                        that.MaxInterval);
                    writer.WriteEndElement();
                }
            }  // private void BasicEventElementToSequence

            public override void Visit(
                Aas.BasicEventElement that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "basicEventElement");
                this.BasicEventElementToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void OperationToSequence(
                Operation that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.InputVariables != null)
                {
                    writer.WriteStartElement(
                        "inputVariables");
                    foreach (var item in that.InputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.OutputVariables != null)
                {
                    writer.WriteStartElement(
                        "outputVariables");
                    foreach (var item in that.OutputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.InoutputVariables != null)
                {
                    writer.WriteStartElement(
                        "inoutputVariables");
                    foreach (var item in that.InoutputVariables)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void OperationToSequence

            public override void Visit(
                Aas.Operation that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "operation");
                this.OperationToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void OperationVariableToSequence(
                OperationVariable that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "value");
                this.Visit(
                    that.Value,
                    writer);
                writer.WriteEndElement();
            }  // private void OperationVariableToSequence

            public override void Visit(
                Aas.OperationVariable that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "operationVariable");
                this.OperationVariableToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void CapabilityToSequence(
                Capability that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                if (that.Kind != null)
                {
                    writer.WriteStartElement(
                        "kind");
                    string? textKind = Stringification.ToString(
                        that.Kind);
                    writer.WriteValue(
                        textKind
                            ?? throw new System.ArgumentException(
                                "Invalid literal for the enumeration ModelingKind: " +
                                that.Kind.ToString()));
                    writer.WriteEndElement();
                }

                if (that.SemanticId != null)
                {
                    writer.WriteStartElement(
                        "semanticId");
                    this.GlobalReferenceToSequence(
                        that.SemanticId,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Qualifiers != null)
                {
                    writer.WriteStartElement(
                        "qualifiers");
                    foreach (var item in that.Qualifiers)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void CapabilityToSequence

            public override void Visit(
                Aas.Capability that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "capability");
                this.CapabilityToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ConceptDescriptionToSequence(
                ConceptDescription that,
                Xml.XmlWriter writer)
            {
                if (that.Extensions != null)
                {
                    writer.WriteStartElement(
                        "extensions");
                    foreach (var item in that.Extensions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IdShort != null)
                {
                    writer.WriteStartElement(
                        "idShort");
                    writer.WriteValue(
                        that.IdShort);
                    writer.WriteEndElement();
                }

                if (that.DisplayName != null)
                {
                    writer.WriteStartElement(
                        "displayName");
                    this.LangStringSetToSequence(
                        that.DisplayName,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Category != null)
                {
                    writer.WriteStartElement(
                        "category");
                    writer.WriteValue(
                        that.Category);
                    writer.WriteEndElement();
                }

                if (that.Description != null)
                {
                    writer.WriteStartElement(
                        "description");
                    this.LangStringSetToSequence(
                        that.Description,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.Checksum != null)
                {
                    writer.WriteStartElement(
                        "checksum");
                    writer.WriteValue(
                        that.Checksum);
                    writer.WriteEndElement();
                }

                writer.WriteStartElement(
                    "id");
                writer.WriteValue(
                    that.Id);
                writer.WriteEndElement();

                if (that.Administration != null)
                {
                    writer.WriteStartElement(
                        "administration");
                    this.AdministrativeInformationToSequence(
                        that.Administration,
                        writer);
                    writer.WriteEndElement();
                }

                if (that.DataSpecifications != null)
                {
                    writer.WriteStartElement(
                        "dataSpecifications");
                    foreach (var item in that.DataSpecifications)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.IsCaseOf != null)
                {
                    writer.WriteStartElement(
                        "isCaseOf");
                    foreach (var item in that.IsCaseOf)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void ConceptDescriptionToSequence

            public override void Visit(
                Aas.ConceptDescription that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "conceptDescription");
                this.ConceptDescriptionToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void GlobalReferenceToSequence(
                GlobalReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "value");
                writer.WriteValue(
                    that.Value);
                writer.WriteEndElement();
            }  // private void GlobalReferenceToSequence

            public override void Visit(
                Aas.GlobalReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "globalReference");
                this.GlobalReferenceToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void ModelReferenceToSequence(
                ModelReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "keys");
                foreach (var item in that.Keys)
                {
                    this.Visit(
                        item,
                        writer);
                }
                writer.WriteEndElement();

                if (that.ReferredSemanticId != null)
                {
                    writer.WriteStartElement(
                        "referredSemanticId");
                    this.GlobalReferenceToSequence(
                        that.ReferredSemanticId,
                        writer);
                    writer.WriteEndElement();
                }
            }  // private void ModelReferenceToSequence

            public override void Visit(
                Aas.ModelReference that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "modelReference");
                this.ModelReferenceToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void KeyToSequence(
                Key that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "type");
                string? textType = Stringification.ToString(
                    that.Type);
                writer.WriteValue(
                    textType
                        ?? throw new System.ArgumentException(
                            "Invalid literal for the enumeration KeyElements: " +
                            that.Type.ToString()));
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "value");
                writer.WriteValue(
                    that.Value);
                writer.WriteEndElement();
            }  // private void KeyToSequence

            public override void Visit(
                Aas.Key that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "key");
                this.KeyToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringToSequence(
                LangString that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "language");
                writer.WriteValue(
                    that.Language);
                writer.WriteEndElement();

                writer.WriteStartElement(
                    "text");
                writer.WriteValue(
                    that.Text);
                writer.WriteEndElement();
            }  // private void LangStringToSequence

            public override void Visit(
                Aas.LangString that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langString");
                this.LangStringToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void LangStringSetToSequence(
                LangStringSet that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStrings");
                foreach (var item in that.LangStrings)
                {
                    this.Visit(
                        item,
                        writer);
                }
                writer.WriteEndElement();
            }  // private void LangStringSetToSequence

            public override void Visit(
                Aas.LangStringSet that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "langStringSet");
                this.LangStringSetToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }

            private void EnvironmentToSequence(
                Environment that,
                Xml.XmlWriter writer)
            {
                if (that.AssetAdministrationShells != null)
                {
                    writer.WriteStartElement(
                        "assetAdministrationShells");
                    foreach (var item in that.AssetAdministrationShells)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.Submodels != null)
                {
                    writer.WriteStartElement(
                        "submodels");
                    foreach (var item in that.Submodels)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }

                if (that.ConceptDescriptions != null)
                {
                    writer.WriteStartElement(
                        "conceptDescriptions");
                    foreach (var item in that.ConceptDescriptions)
                    {
                        this.Visit(
                            item,
                            writer);
                    }
                    writer.WriteEndElement();
                }
            }  // private void EnvironmentToSequence

            public override void Visit(
                Aas.Environment that,
                Xml.XmlWriter writer)
            {
                writer.WriteStartElement(
                    "environment");
                this.EnvironmentToSequence(
                    that,
                    writer);
                writer.WriteEndElement();
            }
        }  // internal class VisitorWithWriter

        /// <summary>
        /// Serialize instances of meta-model classes to XML.
        /// </summary>
        /// <example>
        /// Here is an example how to serialize an instance of Resource:
        /// <code>
        /// var anInstance = new Aas.Resource(
        ///     /* ... some constructor arguments ... */
        /// );
        /// var writer = new System.Xml.XmlWriter( /* some arguments */ );
        /// Serialize.To(
        ///     anInstance,
        ///     writer);
        /// </code>
        /// </example>
        public static class Serialize
        {
            private static VisitorWithWriter _visitorWithWriter = (
                new VisitorWithWriter());

            /// <summary>
            /// Serialize an instance of the meta-model to XML.
            /// </summary>
            public static void To(
                Aas.IClass that,
                Xml.XmlWriter writer)
            {
                Serialize._visitorWithWriter.Visit(that, writer);
            }
        }  // public static class Serialize
    }  // public static class Xmlization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
