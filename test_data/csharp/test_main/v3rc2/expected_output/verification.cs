/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Regex = System.Text.RegularExpressions.Regex;
using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias

using Aas = AasCore.Aas3;
using Reporting = AasCore.Aas3.Reporting;
using Visitation = AasCore.Aas3.Visitation;

namespace AasCore.Aas3
{
    /// <summary>
    /// Verify that the instances of the meta-model satisfy the invariants.
    /// </summary>
    /// <example>
    /// Here is an example how to verify an instance of IHasSemantics:
    /// <code>
    /// var anInstance = new Aas.IHasSemantics(
    ///     // ... some constructor arguments ...
    /// );
    /// foreach (var error in Verification.Verify(anInstance))
    /// {
    ///     System.Console.Writeln(
    ///         $"{error.Cause} at: " +
    ///         Reporting.GenerateJsonPath(error.PathSegments));
    /// }
    /// </code>
    /// </example>
    public static class Verification
    {
        private static Regex _constructIsMimeType()
        {
            var tchar = "[!#$%&'*+\\-.^_`|~0-9a-zA-Z]";
            var token = $"({tchar})+";
            var type = $"{token}";
            var subtype = $"{token}";
            var ows = "[ \t]*";
            var obsText = "[\\x80-\\xff]";
            var qdText = $"([\t !#-\\[\\]-~]|{obsText})";
            var quotedPair = $"\\\\([\t !-~]|{obsText})";
            var quotedString = $"\"({qdText}|{quotedPair})*\"";
            var parameter = $"{token}=({token}|{quotedString})";
            var mediaType = $"{type}/{subtype}({ows};{ows}{parameter})*";

            return new Regex(mediaType);
        }

        private static readonly Regex _regexIsMimeType = _constructIsMimeType();

        /// <summary>
        /// Check that <paramref name="text" /> conforms to the pattern of MIME type.
        /// </summary>
        /// <param name="text">
        /// Text to be checked
        /// </param>
        /// <returns>
        /// True if the <paramref name="text" /> conforms to the pattern
        /// </returns>
        public static bool IsMimeType(string text)
        {
            return _regexIsMimeType.IsMatch(text);
        }

        public static bool IsModelReferenceTo(
            Aas.ModelReference reference,
            Aas.KeyElements expected_type
        )
        {
            throw new System.NotImplementedException("TODO");
        }

        /// <summary>
        /// Hash allowed enum values for efficient validation of enums.
        /// </summary>
        internal static class EnumValueSet
        {
            internal static HashSet<int> ForModelingKind = new HashSet<int>
            {
                (int)Aas.ModelingKind.Template,
                (int)Aas.ModelingKind.Instance
            };

            internal static HashSet<int> ForAssetKind = new HashSet<int>
            {
                (int)Aas.AssetKind.Type,
                (int)Aas.AssetKind.Instance
            };

            internal static HashSet<int> ForEntityType = new HashSet<int>
            {
                (int)Aas.EntityType.CoManagedEntity,
                (int)Aas.EntityType.SelfManagedEntity
            };

            internal static HashSet<int> ForIdentifiableElements = new HashSet<int>
            {
                (int)Aas.IdentifiableElements.AssetAdministrationShell,
                (int)Aas.IdentifiableElements.ConceptDescription,
                (int)Aas.IdentifiableElements.Submodel
            };

            internal static HashSet<int> ForReferableElements = new HashSet<int>
            {
                (int)Aas.ReferableElements.AccessPermissionRule,
                (int)Aas.ReferableElements.AnnotatedRelationshipElement,
                (int)Aas.ReferableElements.Asset,
                (int)Aas.ReferableElements.AssetAdministrationShell,
                (int)Aas.ReferableElements.BasicEvent,
                (int)Aas.ReferableElements.Blob,
                (int)Aas.ReferableElements.Capability,
                (int)Aas.ReferableElements.ConceptDescription,
                (int)Aas.ReferableElements.DataElement,
                (int)Aas.ReferableElements.Entity,
                (int)Aas.ReferableElements.Event,
                (int)Aas.ReferableElements.File,
                (int)Aas.ReferableElements.MultiLanguageProperty,
                (int)Aas.ReferableElements.Operation,
                (int)Aas.ReferableElements.Property,
                (int)Aas.ReferableElements.Range,
                (int)Aas.ReferableElements.ReferenceElement,
                (int)Aas.ReferableElements.RelationshipElement,
                (int)Aas.ReferableElements.Submodel,
                (int)Aas.ReferableElements.SubmodelElement,
                (int)Aas.ReferableElements.SubmodelElementList,
                (int)Aas.ReferableElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForKeyElements = new HashSet<int>
            {
                (int)Aas.KeyElements.FragmentReference,
                (int)Aas.KeyElements.AccessPermissionRule,
                (int)Aas.KeyElements.AnnotatedRelationshipElement,
                (int)Aas.KeyElements.Asset,
                (int)Aas.KeyElements.AssetAdministrationShell,
                (int)Aas.KeyElements.BasicEvent,
                (int)Aas.KeyElements.Blob,
                (int)Aas.KeyElements.Capability,
                (int)Aas.KeyElements.ConceptDescription,
                (int)Aas.KeyElements.DataElement,
                (int)Aas.KeyElements.Entity,
                (int)Aas.KeyElements.Event,
                (int)Aas.KeyElements.File,
                (int)Aas.KeyElements.MultiLanguageProperty,
                (int)Aas.KeyElements.Operation,
                (int)Aas.KeyElements.Property,
                (int)Aas.KeyElements.Range,
                (int)Aas.KeyElements.GlobalReference,
                (int)Aas.KeyElements.ReferenceElement,
                (int)Aas.KeyElements.RelationshipElement,
                (int)Aas.KeyElements.Submodel,
                (int)Aas.KeyElements.SubmodelElement,
                (int)Aas.KeyElements.SubmodelElementList,
                (int)Aas.KeyElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForSubmodelElements = new HashSet<int>
            {
                (int)Aas.SubmodelElements.AnnotatedRelationshipElement,
                (int)Aas.SubmodelElements.Asset,
                (int)Aas.SubmodelElements.AssetAdministrationShell,
                (int)Aas.SubmodelElements.BasicEvent,
                (int)Aas.SubmodelElements.Blob,
                (int)Aas.SubmodelElements.Capability,
                (int)Aas.SubmodelElements.ConceptDescription,
                (int)Aas.SubmodelElements.DataElement,
                (int)Aas.SubmodelElements.Entity,
                (int)Aas.SubmodelElements.Event,
                (int)Aas.SubmodelElements.File,
                (int)Aas.SubmodelElements.MultiLanguageProperty,
                (int)Aas.SubmodelElements.Operation,
                (int)Aas.SubmodelElements.Property,
                (int)Aas.SubmodelElements.Range,
                (int)Aas.SubmodelElements.ReferenceElement,
                (int)Aas.SubmodelElements.RelationshipElement,
                (int)Aas.SubmodelElements.Submodel,
                (int)Aas.SubmodelElements.SubmodelElement,
                (int)Aas.SubmodelElements.SubmodelElementList,
                (int)Aas.SubmodelElements.SubmodelElementStruct
            };

            internal static HashSet<int> ForBuildInListTypes = new HashSet<int>
            {
                (int)Aas.BuildInListTypes.Entities,
                (int)Aas.BuildInListTypes.IdRefs,
                (int)Aas.BuildInListTypes.NMTokens
            };

            internal static HashSet<int> ForDecimalBuildInTypes = new HashSet<int>
            {
                (int)Aas.DecimalBuildInTypes.Integer,
                (int)Aas.DecimalBuildInTypes.Long,
                (int)Aas.DecimalBuildInTypes.Int,
                (int)Aas.DecimalBuildInTypes.Short,
                (int)Aas.DecimalBuildInTypes.Byte,
                (int)Aas.DecimalBuildInTypes.NonNegativeInteger,
                (int)Aas.DecimalBuildInTypes.PositiveInteger,
                (int)Aas.DecimalBuildInTypes.UnsignedInteger,
                (int)Aas.DecimalBuildInTypes.UnsignedLong,
                (int)Aas.DecimalBuildInTypes.UnsignedInt,
                (int)Aas.DecimalBuildInTypes.UnsignedShort,
                (int)Aas.DecimalBuildInTypes.UnsignedByte,
                (int)Aas.DecimalBuildInTypes.NonPositiveInteger,
                (int)Aas.DecimalBuildInTypes.NegativeInteger
            };

            internal static HashSet<int> ForDurationBuildInTypes = new HashSet<int>
            {
                (int)Aas.DurationBuildInTypes.DayTimeDuration,
                (int)Aas.DurationBuildInTypes.YearMonthDuration
            };

            internal static HashSet<int> ForPrimitiveTypes = new HashSet<int>
            {
                (int)Aas.PrimitiveTypes.AnyUri,
                (int)Aas.PrimitiveTypes.Base64Binary,
                (int)Aas.PrimitiveTypes.Boolean,
                (int)Aas.PrimitiveTypes.Date,
                (int)Aas.PrimitiveTypes.DateTime,
                (int)Aas.PrimitiveTypes.Decimal,
                (int)Aas.PrimitiveTypes.Double,
                (int)Aas.PrimitiveTypes.Duration,
                (int)Aas.PrimitiveTypes.Float,
                (int)Aas.PrimitiveTypes.GDay,
                (int)Aas.PrimitiveTypes.GMonth,
                (int)Aas.PrimitiveTypes.GMonthDay,
                (int)Aas.PrimitiveTypes.HeyBinary,
                (int)Aas.PrimitiveTypes.Notation,
                (int)Aas.PrimitiveTypes.QName,
                (int)Aas.PrimitiveTypes.String,
                (int)Aas.PrimitiveTypes.Time
            };

            internal static HashSet<int> ForStringBuildInTypes = new HashSet<int>
            {
                (int)Aas.StringBuildInTypes.NormalizedString,
                (int)Aas.StringBuildInTypes.Token,
                (int)Aas.StringBuildInTypes.Language,
                (int)Aas.StringBuildInTypes.NCName,
                (int)Aas.StringBuildInTypes.Entity,
                (int)Aas.StringBuildInTypes.Id,
                (int)Aas.StringBuildInTypes.Idref
            };

            internal static HashSet<int> ForDataTypeDef = new HashSet<int>
            {
                (int)Aas.DataTypeDef.Entities,
                (int)Aas.DataTypeDef.IdRefs,
                (int)Aas.DataTypeDef.NMTokens,
                (int)Aas.DataTypeDef.Integer,
                (int)Aas.DataTypeDef.Long,
                (int)Aas.DataTypeDef.Int,
                (int)Aas.DataTypeDef.Short,
                (int)Aas.DataTypeDef.Byte,
                (int)Aas.DataTypeDef.NonNegativeInteger,
                (int)Aas.DataTypeDef.PositiveInteger,
                (int)Aas.DataTypeDef.UnsignedInteger,
                (int)Aas.DataTypeDef.UnsignedLong,
                (int)Aas.DataTypeDef.UnsignedInt,
                (int)Aas.DataTypeDef.UnsignedShort,
                (int)Aas.DataTypeDef.UnsignedByte,
                (int)Aas.DataTypeDef.NonPositiveInteger,
                (int)Aas.DataTypeDef.NegativeInteger,
                (int)Aas.DataTypeDef.DayTimeDuration,
                (int)Aas.DataTypeDef.YearMonthDuration,
                (int)Aas.DataTypeDef.AnyUri,
                (int)Aas.DataTypeDef.Base64Binary,
                (int)Aas.DataTypeDef.Boolean,
                (int)Aas.DataTypeDef.Date,
                (int)Aas.DataTypeDef.DateTime,
                (int)Aas.DataTypeDef.Decimal,
                (int)Aas.DataTypeDef.Double,
                (int)Aas.DataTypeDef.Duration,
                (int)Aas.DataTypeDef.Float,
                (int)Aas.DataTypeDef.GDay,
                (int)Aas.DataTypeDef.GMonth,
                (int)Aas.DataTypeDef.GMonthDay,
                (int)Aas.DataTypeDef.HeyBinary,
                (int)Aas.DataTypeDef.Notation,
                (int)Aas.DataTypeDef.QName,
                (int)Aas.DataTypeDef.String,
                (int)Aas.DataTypeDef.Time,
                (int)Aas.DataTypeDef.NormalizedString,
                (int)Aas.DataTypeDef.Token,
                (int)Aas.DataTypeDef.Language,
                (int)Aas.DataTypeDef.NCName,
                (int)Aas.DataTypeDef.Entity,
                (int)Aas.DataTypeDef.Id,
                (int)Aas.DataTypeDef.Idref
            };

            internal static HashSet<int> ForDataTypeIec61360 = new HashSet<int>
            {
                (int)Aas.DataTypeIec61360.Date,
                (int)Aas.DataTypeIec61360.String,
                (int)Aas.DataTypeIec61360.StringTranslatable,
                (int)Aas.DataTypeIec61360.IntegerMeasure,
                (int)Aas.DataTypeIec61360.IntegerCount,
                (int)Aas.DataTypeIec61360.IntegerCurrency,
                (int)Aas.DataTypeIec61360.RealMeasure,
                (int)Aas.DataTypeIec61360.RealCount,
                (int)Aas.DataTypeIec61360.RealCurrency,
                (int)Aas.DataTypeIec61360.Boolean,
                (int)Aas.DataTypeIec61360.Iri,
                (int)Aas.DataTypeIec61360.Irdi,
                (int)Aas.DataTypeIec61360.Rational,
                (int)Aas.DataTypeIec61360.RationalMeasure,
                (int)Aas.DataTypeIec61360.Time,
                (int)Aas.DataTypeIec61360.Timestamp,
                (int)Aas.DataTypeIec61360.File,
                (int)Aas.DataTypeIec61360.Html,
                (int)Aas.DataTypeIec61360.Blob
            };

            internal static HashSet<int> ForLevelType = new HashSet<int>
            {
                (int)Aas.LevelType.Min,
                (int)Aas.LevelType.Max,
                (int)Aas.LevelType.Nom,
                (int)Aas.LevelType.Type
            };
        }  // internal static class EnumValueSet

        private static readonly Verification.Transformer _transformer = (
            new Verification.Transformer());

        private class Transformer
            : Visitation.AbstractTransformer<IEnumerable<Reporting.Error>>
        {
            public override IEnumerable<Reporting.Error> Transform(
                Aas.Extension that)
            {
                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Name))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "name"));
                    yield return error;
                }

                if (that.ValueType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueType
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyDataTypeDef(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueType"));
                        yield return error;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.RefersTo != null)
                {
                    foreach (var error in Verification.Verify(that.RefersTo))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "refersTo"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AdministrativeInformation that)
            {
                if (!(
                    !(that.Revision != null)
                    || (that.Version != null)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Constraint AASd-005\n" +
                        "!(that.Revision != null)\n" +
                        "|| (that.Version != null)");
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Version != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Version))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "version"));
                        yield return error;
                    }
                }

                if (that.Revision != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Revision))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "revision"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Qualifier that)
            {
                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Type))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyDataTypeDef(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Formula that)
            {
                if (that.DependsOn != null)
                {
                    int indexDependsOn = 0;
                    foreach (var item in that.DependsOn)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDependsOn));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dependsOn"));
                            yield return error;
                        }
                        indexDependsOn++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AssetAdministrationShell that)
            {
                if (!(
                    !(that.DerivedFrom != null)
                    || Verification.IsModelReferenceTo(that.DerivedFrom, KeyElements.Submodel)))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "derived_from points to an Asset Administration Shell\n" +
                        "!(that.DerivedFrom != null)\n" +
                        "|| Verification.IsModelReferenceTo(that.DerivedFrom, KeyElements.Submodel)");
                }

                if (!(
                    !(that.Submodels != null)
                    || (that.Submodels.All(
                        submodel => Verification.IsModelReferenceTo(submodel, KeyElements.Submodel)))))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Submodel references point to a submodel\n" +
                        "!(that.Submodels != null)\n" +
                        "|| (that.Submodels.All(\n" +
                        "    submodel => Verification.IsModelReferenceTo(submodel, KeyElements.Submodel)))");
                }

                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.DerivedFrom != null)
                {
                    foreach (var error in Verification.Verify(that.DerivedFrom))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "derivedFrom"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.Verify(that.AssetInformation))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetInformation"));
                    yield return error;
                }

                if (that.Submodels != null)
                {
                    int indexSubmodels = 0;
                    foreach (var item in that.Submodels)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            yield return error;
                        }
                        indexSubmodels++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AssetInformation that)
            {
                foreach (var error in Verification.VerifyAssetKind(that.AssetKind))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetKind"));
                    yield return error;
                }

                if (that.GlobalAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.GlobalAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        yield return error;
                    }
                }

                if (that.SpecificAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.SpecificAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        yield return error;
                    }
                }

                if (that.DefaultThumbnail != null)
                {
                    foreach (var error in Verification.Verify(that.DefaultThumbnail))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "defaultThumbnail"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.IdentifierKeyValuePair that)
            {
                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Key))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "key"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }

                if (that.ExternalSubjectId != null)
                {
                    foreach (var error in Verification.Verify(that.ExternalSubjectId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "externalSubjectId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Submodel that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                int indexSubmodelElements = 0;
                foreach (var item in that.SubmodelElements)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexSubmodelElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "submodelElements"));
                        yield return error;
                    }
                    indexSubmodelElements++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.SubmodelElementList that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (
                        var error in Verification.VerifySubmodelElements(
                            that.SubmodelElementTypeValues))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "submodelElementTypeValues"));
                    yield return error;
                }

                int indexValues = 0;
                foreach (var item in that.Values)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        yield return error;
                    }
                    indexValues++;
                }

                if (that.SemanticIdValues != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticIdValues))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticIdValues"));
                        yield return error;
                    }
                }

                if (that.ValueTypeValues != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueTypeValues
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyDataTypeDef(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueTypeValues"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.SubmodelElementStruct that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                int indexValues = 0;
                foreach (var item in that.Values)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        yield return error;
                    }
                    indexValues++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Property that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyDataTypeDef(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.MultiLanguageProperty that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.Verify(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Range that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyDataTypeDef(that.ValueType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    yield return error;
                }

                if (that.Min != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Min))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "min"));
                        yield return error;
                    }
                }

                if (that.Max != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Max))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "max"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ReferenceElement that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.Verify(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Blob that)
            {
                if (!Verification.IsMimeType(that.MimeType))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Verification.IsMimeType(that.MimeType)");
                }

                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyMimeTyped(that.MimeType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "mimeType"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.File that)
            {
                if (!Verification.IsMimeType(that.MimeType))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "Verification.IsMimeType(that.MimeType)");
                }

                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyMimeTyped(that.MimeType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "mimeType"));
                    yield return error;
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.AnnotatedRelationshipElement that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.Verify(that.First))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "first"));
                    yield return error;
                }

                foreach (var error in Verification.Verify(that.Second))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "second"));
                    yield return error;
                }

                int indexAnnotation = 0;
                foreach (var item in that.Annotation)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexAnnotation));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "annotation"));
                        yield return error;
                    }
                    indexAnnotation++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Entity that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.VerifyEntityType(that.EntityType))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "entityType"));
                    yield return error;
                }

                int indexStatements = 0;
                foreach (var item in that.Statements)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexStatements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "statements"));
                        yield return error;
                    }
                    indexStatements++;
                }

                if (that.GlobalAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.GlobalAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        yield return error;
                    }
                }

                if (that.SpecificAssetId != null)
                {
                    foreach (var error in Verification.Verify(that.SpecificAssetId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.BasicEvent that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                foreach (var error in Verification.Verify(that.Observed))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "observed"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Operation that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                int indexInputVariables = 0;
                foreach (var item in that.InputVariables)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inputVariables"));
                        yield return error;
                    }
                    indexInputVariables++;
                }

                int indexOutputVariables = 0;
                foreach (var item in that.OutputVariables)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexOutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "outputVariables"));
                        yield return error;
                    }
                    indexOutputVariables++;
                }

                int indexInoutputVariables = 0;
                foreach (var item in that.InoutputVariables)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInoutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inoutputVariables"));
                        yield return error;
                    }
                    indexInoutputVariables++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.OperationVariable that)
            {
                foreach (var error in Verification.Verify(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Capability that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyModelingKind(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                int indexQualifiers = 0;
                foreach (var item in that.Qualifiers)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        yield return error;
                    }
                    indexQualifiers++;
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ConceptDescription that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Id))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    yield return error;
                }

                if (that.Administration != null)
                {
                    foreach (var error in Verification.Verify(that.Administration))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        yield return error;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                int indexIsCaseOf = 0;
                foreach (var item in that.IsCaseOf)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexIsCaseOf));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "isCaseOf"));
                        yield return error;
                    }
                    indexIsCaseOf++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.View that)
            {
                int indexExtensions = 0;
                foreach (var item in that.Extensions)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        yield return error;
                    }
                    indexExtensions++;
                }

                if (that.IdShort != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.IdShort))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        yield return error;
                    }
                }

                if (that.DisplayName != null)
                {
                    foreach (var error in Verification.Verify(that.DisplayName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        yield return error;
                    }
                }

                if (that.Category != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Category))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        yield return error;
                    }
                }

                if (that.Description != null)
                {
                    foreach (var error in Verification.Verify(that.Description))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        yield return error;
                    }
                }

                if (that.SemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.SemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        yield return error;
                    }
                }

                if (that.DataSpecifications != null)
                {
                    int indexDataSpecifications = 0;
                    foreach (var item in that.DataSpecifications)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            yield return error;
                        }
                        indexDataSpecifications++;
                    }
                }

                int indexContainedElements = 0;
                foreach (var item in that.ContainedElements)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexContainedElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "containedElements"));
                        yield return error;
                    }
                    indexContainedElements++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.GlobalReference that)
            {
                if (!(that.Values.Count >= 1))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "that.Values.Count >= 1");
                }

                int indexValues = 0;
                foreach (var item in that.Values)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        yield return error;
                    }
                    indexValues++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ModelReference that)
            {
                if (!(that.Keys.Count >= 1))
                {
                    yield return new Reporting.Error(
                        "Invariant violated:\n" +
                        "that.Keys.Count >= 1");
                }

                int indexKeys = 0;
                foreach (var item in that.Keys)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexKeys));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "keys"));
                        yield return error;
                    }
                    indexKeys++;
                }

                if (that.ReferredSemanticId != null)
                {
                    foreach (var error in Verification.Verify(that.ReferredSemanticId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "referredSemanticId"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Key that)
            {
                foreach (var error in Verification.VerifyKeyElements(that.Type))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    yield return error;
                }

                foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.LangStringSet that)
            {
                throw new System.NotImplementedException("TODO");
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ValueReferencePair that)
            {
                foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    yield return error;
                }

                foreach (var error in Verification.Verify(that.ValueId))
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueId"));
                    yield return error;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.ValueList that)
            {
                int indexValueReferencePairs = 0;
                foreach (var item in that.ValueReferencePairs)
                {
                    foreach (var error in Verification.Verify(item))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValueReferencePairs));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueReferencePairs"));
                        yield return error;
                    }
                    indexValueReferencePairs++;
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.DataSpecificationIec61360 that)
            {
                if (that.PreferredName != null)
                {
                    foreach (var error in Verification.Verify(that.PreferredName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "preferredName"));
                        yield return error;
                    }
                }

                if (that.ShortName != null)
                {
                    foreach (var error in Verification.Verify(that.ShortName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "shortName"));
                        yield return error;
                    }
                }

                if (that.Unit != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Unit))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unit"));
                        yield return error;
                    }
                }

                if (that.UnitId != null)
                {
                    foreach (var error in Verification.Verify(that.UnitId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitId"));
                        yield return error;
                    }
                }

                if (that.SourceOfDefinition != null)
                {
                    foreach (
                            var error in Verification.VerifyNonEmptyString(
                                that.SourceOfDefinition))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "sourceOfDefinition"));
                        yield return error;
                    }
                }

                if (that.Symbol != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Symbol))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "symbol"));
                        yield return error;
                    }
                }

                if (that.DataType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeIec61360 value = that.DataType
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyDataTypeIec61360(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataType"));
                        yield return error;
                    }
                }

                if (that.Definition != null)
                {
                    foreach (var error in Verification.Verify(that.Definition))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "definition"));
                        yield return error;
                    }
                }

                if (that.ValueFormat != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.ValueFormat))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueFormat"));
                        yield return error;
                    }
                }

                if (that.ValueList != null)
                {
                    foreach (var error in Verification.Verify(that.ValueList))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueList"));
                        yield return error;
                    }
                }

                if (that.Value != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        yield return error;
                    }
                }

                if (that.ValueId != null)
                {
                    foreach (var error in Verification.Verify(that.ValueId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        yield return error;
                    }
                }

                if (that.LevelType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.LevelType value = that.LevelType
                        ?? throw new System.InvalidOperationException();
                    foreach (var error in Verification.VerifyLevelType(value))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "levelType"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.DataSpecificationPhysicalUnit that)
            {
                if (that.UnitName != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.UnitName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitName"));
                        yield return error;
                    }
                }

                if (that.UnitSymbol != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.UnitSymbol))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitSymbol"));
                        yield return error;
                    }
                }

                if (that.Definition != null)
                {
                    foreach (var error in Verification.Verify(that.Definition))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "definition"));
                        yield return error;
                    }
                }

                if (that.SiNotation != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.SiNotation))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "siNotation"));
                        yield return error;
                    }
                }

                if (that.DinNotation != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.DinNotation))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dinNotation"));
                        yield return error;
                    }
                }

                if (that.EceName != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.EceName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "eceName"));
                        yield return error;
                    }
                }

                if (that.EceCode != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.EceCode))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "eceCode"));
                        yield return error;
                    }
                }

                if (that.NistName != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.NistName))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "nistName"));
                        yield return error;
                    }
                }

                if (that.SourceOfDefinition != null)
                {
                    foreach (
                            var error in Verification.VerifyNonEmptyString(
                                that.SourceOfDefinition))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "sourceOfDefinition"));
                        yield return error;
                    }
                }

                if (that.ConversionFactor != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.ConversionFactor))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "conversionFactor"));
                        yield return error;
                    }
                }

                if (that.RegistrationAuthorityId != null)
                {
                    foreach (
                            var error in Verification.VerifyNonEmptyString(
                                that.RegistrationAuthorityId))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "registrationAuthorityId"));
                        yield return error;
                    }
                }

                if (that.Supplier != null)
                {
                    foreach (var error in Verification.VerifyNonEmptyString(that.Supplier))
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "supplier"));
                        yield return error;
                    }
                }
            }

            public override IEnumerable<Reporting.Error> Transform(
                Aas.Environment that)
            {
                if (that.AssetAdministrationShells != null)
                {
                    int indexAssetAdministrationShells = 0;
                    foreach (var item in that.AssetAdministrationShells)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexAssetAdministrationShells));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "assetAdministrationShells"));
                            yield return error;
                        }
                        indexAssetAdministrationShells++;
                    }
                }

                if (that.Submodels != null)
                {
                    int indexSubmodels = 0;
                    foreach (var item in that.Submodels)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            yield return error;
                        }
                        indexSubmodels++;
                    }
                }

                if (that.ConceptDescriptions != null)
                {
                    int indexConceptDescriptions = 0;
                    foreach (var item in that.ConceptDescriptions)
                    {
                        foreach (var error in Verification.Verify(item))
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexConceptDescriptions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "conceptDescriptions"));
                            yield return error;
                        }
                        indexConceptDescriptions++;
                    }
                }
            }
        }  // private class Transformer

        /// <summary>
        /// Verify the constraints of <paramref name="that" /> recursively.
        /// </summary>
        /// <param name="that">
        /// The instance of the meta-model to be verified
        /// </param>
        public static IEnumerable<Reporting.Error> Verify(Aas.IClass that)
        {
            foreach (var error in _transformer.Transform(that))
            {
                yield return error;
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyNonEmptyString (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }
        }

        /// <summary>
        /// Verify the constraints of <paramref name="that" />.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyMimeTyped (
            string that)
        {
            if (!(that.Length >= 1))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "that.Length >= 1");
            }

            if (!Verification.IsMimeType(that))
            {
                yield return new Reporting.Error(
                    "Invariant violated:\n" +
                    "Verification.IsMimeType(that)");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyModelingKind(
            Aas.ModelingKind that)
        {
            if (!EnumValueSet.ForModelingKind.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid ModelingKind: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyAssetKind(
            Aas.AssetKind that)
        {
            if (!EnumValueSet.ForAssetKind.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid AssetKind: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyEntityType(
            Aas.EntityType that)
        {
            if (!EnumValueSet.ForEntityType.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid EntityType: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyIdentifiableElements(
            Aas.IdentifiableElements that)
        {
            if (!EnumValueSet.ForIdentifiableElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid IdentifiableElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyReferableElements(
            Aas.ReferableElements that)
        {
            if (!EnumValueSet.ForReferableElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid ReferableElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyKeyElements(
            Aas.KeyElements that)
        {
            if (!EnumValueSet.ForKeyElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid KeyElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifySubmodelElements(
            Aas.SubmodelElements that)
        {
            if (!EnumValueSet.ForSubmodelElements.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid SubmodelElements: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyBuildInListTypes(
            Aas.BuildInListTypes that)
        {
            if (!EnumValueSet.ForBuildInListTypes.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid BuildInListTypes: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDecimalBuildInTypes(
            Aas.DecimalBuildInTypes that)
        {
            if (!EnumValueSet.ForDecimalBuildInTypes.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DecimalBuildInTypes: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDurationBuildInTypes(
            Aas.DurationBuildInTypes that)
        {
            if (!EnumValueSet.ForDurationBuildInTypes.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DurationBuildInTypes: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyPrimitiveTypes(
            Aas.PrimitiveTypes that)
        {
            if (!EnumValueSet.ForPrimitiveTypes.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid PrimitiveTypes: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyStringBuildInTypes(
            Aas.StringBuildInTypes that)
        {
            if (!EnumValueSet.ForStringBuildInTypes.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid StringBuildInTypes: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDataTypeDef(
            Aas.DataTypeDef that)
        {
            if (!EnumValueSet.ForDataTypeDef.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DataTypeDef: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyDataTypeIec61360(
            Aas.DataTypeIec61360 that)
        {
            if (!EnumValueSet.ForDataTypeIec61360.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid DataTypeIec61360: {that}");
            }
        }

        /// <summary>
        /// Verify that <paramref name="that" /> is a valid enumeration value.
        /// </summary>
        public static IEnumerable<Reporting.Error> VerifyLevelType(
            Aas.LevelType that)
        {
            if (!EnumValueSet.ForLevelType.Contains(
                (int)that))
            {
                yield return new Reporting.Error(
                    $"Invalid LevelType: {that}");
            }
        }
    }  // public static class Verification
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
