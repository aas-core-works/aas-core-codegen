/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Stringification
    {
        private static readonly Dictionary<Aas.DataTypeDefRdf, string> _dataTypeDefRdfToString = (
            new Dictionary<Aas.DataTypeDefRdf, string>()
            {
                { Aas.DataTypeDefRdf.LangString, "rdf:langString" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeDefRdf that)
        {
            if (_dataTypeDefRdfToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeDefRdf> _dataTypeDefRdfFromString = (
            new Dictionary<string, Aas.DataTypeDefRdf>()
            {
                { "rdf:langString", Aas.DataTypeDefRdf.LangString }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeDefRdf" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeDefRdf" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeDefRdf? DataTypeDefRdfFromString(string text)
        {
            if (_dataTypeDefRdfFromString.TryGetValue(text, out DataTypeDefRdf value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DecimalBuildInTypes, string> _decimalBuildInTypesToString = (
            new Dictionary<Aas.DecimalBuildInTypes, string>()
            {
                { Aas.DecimalBuildInTypes.Integer, "xs:integer" },
                { Aas.DecimalBuildInTypes.Long, "xs:long" },
                { Aas.DecimalBuildInTypes.Int, "xs:int" },
                { Aas.DecimalBuildInTypes.Short, "xs:short" },
                { Aas.DecimalBuildInTypes.Byte, "xs:byte" },
                { Aas.DecimalBuildInTypes.NonNegativeInteger, "xs:NonNegativeInteger" },
                { Aas.DecimalBuildInTypes.PositiveInteger, "xs:positiveInteger" },
                { Aas.DecimalBuildInTypes.UnsignedLong, "xs:unsignedLong" },
                { Aas.DecimalBuildInTypes.UnsignedInt, "xs:unsignedInt" },
                { Aas.DecimalBuildInTypes.UnsignedShort, "xs:unsignedShort" },
                { Aas.DecimalBuildInTypes.UnsignedByte, "xs:unsignedByte" },
                { Aas.DecimalBuildInTypes.NonPositiveInteger, "xs:nonPositiveInteger" },
                { Aas.DecimalBuildInTypes.NegativeInteger, "xs:negativeInteger" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DecimalBuildInTypes that)
        {
            if (_decimalBuildInTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DecimalBuildInTypes> _decimalBuildInTypesFromString = (
            new Dictionary<string, Aas.DecimalBuildInTypes>()
            {
                { "xs:integer", Aas.DecimalBuildInTypes.Integer },
                { "xs:long", Aas.DecimalBuildInTypes.Long },
                { "xs:int", Aas.DecimalBuildInTypes.Int },
                { "xs:short", Aas.DecimalBuildInTypes.Short },
                { "xs:byte", Aas.DecimalBuildInTypes.Byte },
                { "xs:NonNegativeInteger", Aas.DecimalBuildInTypes.NonNegativeInteger },
                { "xs:positiveInteger", Aas.DecimalBuildInTypes.PositiveInteger },
                { "xs:unsignedLong", Aas.DecimalBuildInTypes.UnsignedLong },
                { "xs:unsignedInt", Aas.DecimalBuildInTypes.UnsignedInt },
                { "xs:unsignedShort", Aas.DecimalBuildInTypes.UnsignedShort },
                { "xs:unsignedByte", Aas.DecimalBuildInTypes.UnsignedByte },
                { "xs:nonPositiveInteger", Aas.DecimalBuildInTypes.NonPositiveInteger },
                { "xs:negativeInteger", Aas.DecimalBuildInTypes.NegativeInteger }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DecimalBuildInTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DecimalBuildInTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DecimalBuildInTypes? DecimalBuildInTypesFromString(string text)
        {
            if (_decimalBuildInTypesFromString.TryGetValue(text, out DecimalBuildInTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DurationBuildInTypes, string> _durationBuildInTypesToString = (
            new Dictionary<Aas.DurationBuildInTypes, string>()
            {
                { Aas.DurationBuildInTypes.DayTimeDuration, "xs:dayTimeDuration" },
                { Aas.DurationBuildInTypes.YearMonthDuration, "xs:yearMonthDuration" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DurationBuildInTypes that)
        {
            if (_durationBuildInTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DurationBuildInTypes> _durationBuildInTypesFromString = (
            new Dictionary<string, Aas.DurationBuildInTypes>()
            {
                { "xs:dayTimeDuration", Aas.DurationBuildInTypes.DayTimeDuration },
                { "xs:yearMonthDuration", Aas.DurationBuildInTypes.YearMonthDuration }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DurationBuildInTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DurationBuildInTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DurationBuildInTypes? DurationBuildInTypesFromString(string text)
        {
            if (_durationBuildInTypesFromString.TryGetValue(text, out DurationBuildInTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.PrimitiveTypes, string> _primitiveTypesToString = (
            new Dictionary<Aas.PrimitiveTypes, string>()
            {
                { Aas.PrimitiveTypes.AnyUri, "xs:anyURI" },
                { Aas.PrimitiveTypes.Base64Binary, "xs:base64Binary" },
                { Aas.PrimitiveTypes.Boolean, "xs:boolean" },
                { Aas.PrimitiveTypes.Date, "xs:date" },
                { Aas.PrimitiveTypes.DateTime, "xs:dateTime" },
                { Aas.PrimitiveTypes.DateTimeStamp, "xs:dateTimeStamp" },
                { Aas.PrimitiveTypes.Decimal, "xs:decimal" },
                { Aas.PrimitiveTypes.Double, "xs:double" },
                { Aas.PrimitiveTypes.Duration, "xs:duration" },
                { Aas.PrimitiveTypes.Float, "xs:float" },
                { Aas.PrimitiveTypes.GDay, "xs:gDay" },
                { Aas.PrimitiveTypes.GMonth, "xs:gMonth" },
                { Aas.PrimitiveTypes.GMonthDay, "xs:gMonthDay" },
                { Aas.PrimitiveTypes.GYear, "xs:gYear" },
                { Aas.PrimitiveTypes.GYearMonth, "xs:gYearMonth" },
                { Aas.PrimitiveTypes.HexBinary, "xs:hexBinary" },
                { Aas.PrimitiveTypes.String, "xs:string" },
                { Aas.PrimitiveTypes.Time, "xs:time" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.PrimitiveTypes that)
        {
            if (_primitiveTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.PrimitiveTypes> _primitiveTypesFromString = (
            new Dictionary<string, Aas.PrimitiveTypes>()
            {
                { "xs:anyURI", Aas.PrimitiveTypes.AnyUri },
                { "xs:base64Binary", Aas.PrimitiveTypes.Base64Binary },
                { "xs:boolean", Aas.PrimitiveTypes.Boolean },
                { "xs:date", Aas.PrimitiveTypes.Date },
                { "xs:dateTime", Aas.PrimitiveTypes.DateTime },
                { "xs:dateTimeStamp", Aas.PrimitiveTypes.DateTimeStamp },
                { "xs:decimal", Aas.PrimitiveTypes.Decimal },
                { "xs:double", Aas.PrimitiveTypes.Double },
                { "xs:duration", Aas.PrimitiveTypes.Duration },
                { "xs:float", Aas.PrimitiveTypes.Float },
                { "xs:gDay", Aas.PrimitiveTypes.GDay },
                { "xs:gMonth", Aas.PrimitiveTypes.GMonth },
                { "xs:gMonthDay", Aas.PrimitiveTypes.GMonthDay },
                { "xs:gYear", Aas.PrimitiveTypes.GYear },
                { "xs:gYearMonth", Aas.PrimitiveTypes.GYearMonth },
                { "xs:hexBinary", Aas.PrimitiveTypes.HexBinary },
                { "xs:string", Aas.PrimitiveTypes.String },
                { "xs:time", Aas.PrimitiveTypes.Time }
            });

        /// <summary>
        /// Parse the string representation of <see cref="PrimitiveTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="PrimitiveTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.PrimitiveTypes? PrimitiveTypesFromString(string text)
        {
            if (_primitiveTypesFromString.TryGetValue(text, out PrimitiveTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DataTypeDefXsd, string> _dataTypeDefXsdToString = (
            new Dictionary<Aas.DataTypeDefXsd, string>()
            {
                { Aas.DataTypeDefXsd.AnyUri, "xs:anyURI" },
                { Aas.DataTypeDefXsd.Base64Binary, "xs:base64Binary" },
                { Aas.DataTypeDefXsd.Boolean, "xs:boolean" },
                { Aas.DataTypeDefXsd.Date, "xs:date" },
                { Aas.DataTypeDefXsd.DateTime, "xs:dateTime" },
                { Aas.DataTypeDefXsd.DateTimeStamp, "xs:dateTimeStamp" },
                { Aas.DataTypeDefXsd.Decimal, "xs:decimal" },
                { Aas.DataTypeDefXsd.Double, "xs:double" },
                { Aas.DataTypeDefXsd.Duration, "xs:duration" },
                { Aas.DataTypeDefXsd.Float, "xs:float" },
                { Aas.DataTypeDefXsd.GDay, "xs:gDay" },
                { Aas.DataTypeDefXsd.GMonth, "xs:gMonth" },
                { Aas.DataTypeDefXsd.GMonthDay, "xs:gMonthDay" },
                { Aas.DataTypeDefXsd.GYear, "xs:gYear" },
                { Aas.DataTypeDefXsd.GYearMonth, "xs:gYearMonth" },
                { Aas.DataTypeDefXsd.HexBinary, "xs:hexBinary" },
                { Aas.DataTypeDefXsd.String, "xs:string" },
                { Aas.DataTypeDefXsd.Time, "xs:time" },
                { Aas.DataTypeDefXsd.DayTimeDuration, "xs:dayTimeDuration" },
                { Aas.DataTypeDefXsd.YearMonthDuration, "xs:yearMonthDuration" },
                { Aas.DataTypeDefXsd.Integer, "xs:integer" },
                { Aas.DataTypeDefXsd.Long, "xs:long" },
                { Aas.DataTypeDefXsd.Int, "xs:int" },
                { Aas.DataTypeDefXsd.Short, "xs:short" },
                { Aas.DataTypeDefXsd.Byte, "xs:byte" },
                { Aas.DataTypeDefXsd.NonNegativeInteger, "xs:NonNegativeInteger" },
                { Aas.DataTypeDefXsd.PositiveInteger, "xs:positiveInteger" },
                { Aas.DataTypeDefXsd.UnsignedLong, "xs:unsignedLong" },
                { Aas.DataTypeDefXsd.UnsignedInt, "xs:unsignedInt" },
                { Aas.DataTypeDefXsd.UnsignedShort, "xs:unsignedShort" },
                { Aas.DataTypeDefXsd.UnsignedByte, "xs:unsignedByte" },
                { Aas.DataTypeDefXsd.NonPositiveInteger, "xs:nonPositiveInteger" },
                { Aas.DataTypeDefXsd.NegativeInteger, "xs:negativeInteger" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeDefXsd that)
        {
            if (_dataTypeDefXsdToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeDefXsd> _dataTypeDefXsdFromString = (
            new Dictionary<string, Aas.DataTypeDefXsd>()
            {
                { "xs:anyURI", Aas.DataTypeDefXsd.AnyUri },
                { "xs:base64Binary", Aas.DataTypeDefXsd.Base64Binary },
                { "xs:boolean", Aas.DataTypeDefXsd.Boolean },
                { "xs:date", Aas.DataTypeDefXsd.Date },
                { "xs:dateTime", Aas.DataTypeDefXsd.DateTime },
                { "xs:dateTimeStamp", Aas.DataTypeDefXsd.DateTimeStamp },
                { "xs:decimal", Aas.DataTypeDefXsd.Decimal },
                { "xs:double", Aas.DataTypeDefXsd.Double },
                { "xs:duration", Aas.DataTypeDefXsd.Duration },
                { "xs:float", Aas.DataTypeDefXsd.Float },
                { "xs:gDay", Aas.DataTypeDefXsd.GDay },
                { "xs:gMonth", Aas.DataTypeDefXsd.GMonth },
                { "xs:gMonthDay", Aas.DataTypeDefXsd.GMonthDay },
                { "xs:gYear", Aas.DataTypeDefXsd.GYear },
                { "xs:gYearMonth", Aas.DataTypeDefXsd.GYearMonth },
                { "xs:hexBinary", Aas.DataTypeDefXsd.HexBinary },
                { "xs:string", Aas.DataTypeDefXsd.String },
                { "xs:time", Aas.DataTypeDefXsd.Time },
                { "xs:dayTimeDuration", Aas.DataTypeDefXsd.DayTimeDuration },
                { "xs:yearMonthDuration", Aas.DataTypeDefXsd.YearMonthDuration },
                { "xs:integer", Aas.DataTypeDefXsd.Integer },
                { "xs:long", Aas.DataTypeDefXsd.Long },
                { "xs:int", Aas.DataTypeDefXsd.Int },
                { "xs:short", Aas.DataTypeDefXsd.Short },
                { "xs:byte", Aas.DataTypeDefXsd.Byte },
                { "xs:NonNegativeInteger", Aas.DataTypeDefXsd.NonNegativeInteger },
                { "xs:positiveInteger", Aas.DataTypeDefXsd.PositiveInteger },
                { "xs:unsignedLong", Aas.DataTypeDefXsd.UnsignedLong },
                { "xs:unsignedInt", Aas.DataTypeDefXsd.UnsignedInt },
                { "xs:unsignedShort", Aas.DataTypeDefXsd.UnsignedShort },
                { "xs:unsignedByte", Aas.DataTypeDefXsd.UnsignedByte },
                { "xs:nonPositiveInteger", Aas.DataTypeDefXsd.NonPositiveInteger },
                { "xs:negativeInteger", Aas.DataTypeDefXsd.NegativeInteger }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeDefXsd" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeDefXsd" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeDefXsd? DataTypeDefXsdFromString(string text)
        {
            if (_dataTypeDefXsdFromString.TryGetValue(text, out DataTypeDefXsd value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DataTypeDef, string> _dataTypeDefToString = (
            new Dictionary<Aas.DataTypeDef, string>()
            {
                { Aas.DataTypeDef.AnyUri, "xs:anyURI" },
                { Aas.DataTypeDef.Base64Binary, "xs:base64Binary" },
                { Aas.DataTypeDef.Boolean, "xs:boolean" },
                { Aas.DataTypeDef.Date, "xs:date" },
                { Aas.DataTypeDef.DateTime, "xs:dateTime" },
                { Aas.DataTypeDef.DateTimeStamp, "xs:dateTimeStamp" },
                { Aas.DataTypeDef.Decimal, "xs:decimal" },
                { Aas.DataTypeDef.Double, "xs:double" },
                { Aas.DataTypeDef.Duration, "xs:duration" },
                { Aas.DataTypeDef.Float, "xs:float" },
                { Aas.DataTypeDef.GDay, "xs:gDay" },
                { Aas.DataTypeDef.GMonth, "xs:gMonth" },
                { Aas.DataTypeDef.GMonthDay, "xs:gMonthDay" },
                { Aas.DataTypeDef.GYear, "xs:gYear" },
                { Aas.DataTypeDef.GYearMonth, "xs:gYearMonth" },
                { Aas.DataTypeDef.HexBinary, "xs:hexBinary" },
                { Aas.DataTypeDef.String, "xs:string" },
                { Aas.DataTypeDef.Time, "xs:time" },
                { Aas.DataTypeDef.DayTimeDuration, "xs:dayTimeDuration" },
                { Aas.DataTypeDef.YearMonthDuration, "xs:yearMonthDuration" },
                { Aas.DataTypeDef.Integer, "xs:integer" },
                { Aas.DataTypeDef.Long, "xs:long" },
                { Aas.DataTypeDef.Int, "xs:int" },
                { Aas.DataTypeDef.Short, "xs:short" },
                { Aas.DataTypeDef.Byte, "xs:byte" },
                { Aas.DataTypeDef.NonNegativeInteger, "xs:NonNegativeInteger" },
                { Aas.DataTypeDef.PositiveInteger, "xs:positiveInteger" },
                { Aas.DataTypeDef.UnsignedLong, "xs:unsignedLong" },
                { Aas.DataTypeDef.UnsignedInt, "xs:unsignedInt" },
                { Aas.DataTypeDef.UnsignedShort, "xs:unsignedShort" },
                { Aas.DataTypeDef.UnsignedByte, "xs:unsignedByte" },
                { Aas.DataTypeDef.NonPositiveInteger, "xs:nonPositiveInteger" },
                { Aas.DataTypeDef.NegativeInteger, "xs:negativeInteger" },
                { Aas.DataTypeDef.LangString, "rdf:langString" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeDef that)
        {
            if (_dataTypeDefToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeDef> _dataTypeDefFromString = (
            new Dictionary<string, Aas.DataTypeDef>()
            {
                { "xs:anyURI", Aas.DataTypeDef.AnyUri },
                { "xs:base64Binary", Aas.DataTypeDef.Base64Binary },
                { "xs:boolean", Aas.DataTypeDef.Boolean },
                { "xs:date", Aas.DataTypeDef.Date },
                { "xs:dateTime", Aas.DataTypeDef.DateTime },
                { "xs:dateTimeStamp", Aas.DataTypeDef.DateTimeStamp },
                { "xs:decimal", Aas.DataTypeDef.Decimal },
                { "xs:double", Aas.DataTypeDef.Double },
                { "xs:duration", Aas.DataTypeDef.Duration },
                { "xs:float", Aas.DataTypeDef.Float },
                { "xs:gDay", Aas.DataTypeDef.GDay },
                { "xs:gMonth", Aas.DataTypeDef.GMonth },
                { "xs:gMonthDay", Aas.DataTypeDef.GMonthDay },
                { "xs:gYear", Aas.DataTypeDef.GYear },
                { "xs:gYearMonth", Aas.DataTypeDef.GYearMonth },
                { "xs:hexBinary", Aas.DataTypeDef.HexBinary },
                { "xs:string", Aas.DataTypeDef.String },
                { "xs:time", Aas.DataTypeDef.Time },
                { "xs:dayTimeDuration", Aas.DataTypeDef.DayTimeDuration },
                { "xs:yearMonthDuration", Aas.DataTypeDef.YearMonthDuration },
                { "xs:integer", Aas.DataTypeDef.Integer },
                { "xs:long", Aas.DataTypeDef.Long },
                { "xs:int", Aas.DataTypeDef.Int },
                { "xs:short", Aas.DataTypeDef.Short },
                { "xs:byte", Aas.DataTypeDef.Byte },
                { "xs:NonNegativeInteger", Aas.DataTypeDef.NonNegativeInteger },
                { "xs:positiveInteger", Aas.DataTypeDef.PositiveInteger },
                { "xs:unsignedLong", Aas.DataTypeDef.UnsignedLong },
                { "xs:unsignedInt", Aas.DataTypeDef.UnsignedInt },
                { "xs:unsignedShort", Aas.DataTypeDef.UnsignedShort },
                { "xs:unsignedByte", Aas.DataTypeDef.UnsignedByte },
                { "xs:nonPositiveInteger", Aas.DataTypeDef.NonPositiveInteger },
                { "xs:negativeInteger", Aas.DataTypeDef.NegativeInteger },
                { "rdf:langString", Aas.DataTypeDef.LangString }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeDef" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeDef" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeDef? DataTypeDefFromString(string text)
        {
            if (_dataTypeDefFromString.TryGetValue(text, out DataTypeDef value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.ValueDataType, string> _valueDataTypeToString = (
            new Dictionary<Aas.ValueDataType, string>()
            {
                { Aas.ValueDataType.AnyUri, "xs:anyURI" },
                { Aas.ValueDataType.Base64Binary, "xs:base64Binary" },
                { Aas.ValueDataType.Boolean, "xs:boolean" },
                { Aas.ValueDataType.Date, "xs:date" },
                { Aas.ValueDataType.DateTime, "xs:dateTime" },
                { Aas.ValueDataType.DateTimeStamp, "xs:dateTimeStamp" },
                { Aas.ValueDataType.Decimal, "xs:decimal" },
                { Aas.ValueDataType.Double, "xs:double" },
                { Aas.ValueDataType.Duration, "xs:duration" },
                { Aas.ValueDataType.Float, "xs:float" },
                { Aas.ValueDataType.GDay, "xs:gDay" },
                { Aas.ValueDataType.GMonth, "xs:gMonth" },
                { Aas.ValueDataType.GMonthDay, "xs:gMonthDay" },
                { Aas.ValueDataType.GYear, "xs:gYear" },
                { Aas.ValueDataType.GYearMonth, "xs:gYearMonth" },
                { Aas.ValueDataType.HexBinary, "xs:hexBinary" },
                { Aas.ValueDataType.String, "xs:string" },
                { Aas.ValueDataType.Time, "xs:time" },
                { Aas.ValueDataType.DayTimeDuration, "xs:dayTimeDuration" },
                { Aas.ValueDataType.YearMonthDuration, "xs:yearMonthDuration" },
                { Aas.ValueDataType.Integer, "xs:integer" },
                { Aas.ValueDataType.Long, "xs:long" },
                { Aas.ValueDataType.Int, "xs:int" },
                { Aas.ValueDataType.Short, "xs:short" },
                { Aas.ValueDataType.Byte, "xs:byte" },
                { Aas.ValueDataType.NonNegativeInteger, "xs:NonNegativeInteger" },
                { Aas.ValueDataType.PositiveInteger, "xs:positiveInteger" },
                { Aas.ValueDataType.UnsignedLong, "xs:unsignedLong" },
                { Aas.ValueDataType.UnsignedInt, "xs:unsignedInt" },
                { Aas.ValueDataType.UnsignedShort, "xs:unsignedShort" },
                { Aas.ValueDataType.UnsignedByte, "xs:unsignedByte" },
                { Aas.ValueDataType.NonPositiveInteger, "xs:nonPositiveInteger" },
                { Aas.ValueDataType.NegativeInteger, "xs:negativeInteger" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.ValueDataType that)
        {
            if (_valueDataTypeToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.ValueDataType> _valueDataTypeFromString = (
            new Dictionary<string, Aas.ValueDataType>()
            {
                { "xs:anyURI", Aas.ValueDataType.AnyUri },
                { "xs:base64Binary", Aas.ValueDataType.Base64Binary },
                { "xs:boolean", Aas.ValueDataType.Boolean },
                { "xs:date", Aas.ValueDataType.Date },
                { "xs:dateTime", Aas.ValueDataType.DateTime },
                { "xs:dateTimeStamp", Aas.ValueDataType.DateTimeStamp },
                { "xs:decimal", Aas.ValueDataType.Decimal },
                { "xs:double", Aas.ValueDataType.Double },
                { "xs:duration", Aas.ValueDataType.Duration },
                { "xs:float", Aas.ValueDataType.Float },
                { "xs:gDay", Aas.ValueDataType.GDay },
                { "xs:gMonth", Aas.ValueDataType.GMonth },
                { "xs:gMonthDay", Aas.ValueDataType.GMonthDay },
                { "xs:gYear", Aas.ValueDataType.GYear },
                { "xs:gYearMonth", Aas.ValueDataType.GYearMonth },
                { "xs:hexBinary", Aas.ValueDataType.HexBinary },
                { "xs:string", Aas.ValueDataType.String },
                { "xs:time", Aas.ValueDataType.Time },
                { "xs:dayTimeDuration", Aas.ValueDataType.DayTimeDuration },
                { "xs:yearMonthDuration", Aas.ValueDataType.YearMonthDuration },
                { "xs:integer", Aas.ValueDataType.Integer },
                { "xs:long", Aas.ValueDataType.Long },
                { "xs:int", Aas.ValueDataType.Int },
                { "xs:short", Aas.ValueDataType.Short },
                { "xs:byte", Aas.ValueDataType.Byte },
                { "xs:NonNegativeInteger", Aas.ValueDataType.NonNegativeInteger },
                { "xs:positiveInteger", Aas.ValueDataType.PositiveInteger },
                { "xs:unsignedLong", Aas.ValueDataType.UnsignedLong },
                { "xs:unsignedInt", Aas.ValueDataType.UnsignedInt },
                { "xs:unsignedShort", Aas.ValueDataType.UnsignedShort },
                { "xs:unsignedByte", Aas.ValueDataType.UnsignedByte },
                { "xs:nonPositiveInteger", Aas.ValueDataType.NonPositiveInteger },
                { "xs:negativeInteger", Aas.ValueDataType.NegativeInteger }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ValueDataType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="ValueDataType" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.ValueDataType? ValueDataTypeFromString(string text)
        {
            if (_valueDataTypeFromString.TryGetValue(text, out ValueDataType value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.ModelingKind, string> _modelingKindToString = (
            new Dictionary<Aas.ModelingKind, string>()
            {
                { Aas.ModelingKind.Template, "TEMPLATE" },
                { Aas.ModelingKind.Instance, "INSTANCE" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.ModelingKind that)
        {
            if (_modelingKindToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.ModelingKind> _modelingKindFromString = (
            new Dictionary<string, Aas.ModelingKind>()
            {
                { "TEMPLATE", Aas.ModelingKind.Template },
                { "INSTANCE", Aas.ModelingKind.Instance }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ModelingKind" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="ModelingKind" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.ModelingKind? ModelingKindFromString(string text)
        {
            if (_modelingKindFromString.TryGetValue(text, out ModelingKind value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.AssetKind, string> _assetKindToString = (
            new Dictionary<Aas.AssetKind, string>()
            {
                { Aas.AssetKind.Type, "Type" },
                { Aas.AssetKind.Instance, "Instance" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.AssetKind that)
        {
            if (_assetKindToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.AssetKind> _assetKindFromString = (
            new Dictionary<string, Aas.AssetKind>()
            {
                { "Type", Aas.AssetKind.Type },
                { "Instance", Aas.AssetKind.Instance }
            });

        /// <summary>
        /// Parse the string representation of <see cref="AssetKind" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="AssetKind" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.AssetKind? AssetKindFromString(string text)
        {
            if (_assetKindFromString.TryGetValue(text, out AssetKind value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.Direction, string> _directionToString = (
            new Dictionary<Aas.Direction, string>()
            {
                { Aas.Direction.Input, "INPUT" },
                { Aas.Direction.Output, "OUTPUT" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.Direction that)
        {
            if (_directionToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.Direction> _directionFromString = (
            new Dictionary<string, Aas.Direction>()
            {
                { "INPUT", Aas.Direction.Input },
                { "OUTPUT", Aas.Direction.Output }
            });

        /// <summary>
        /// Parse the string representation of <see cref="Direction" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="Direction" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.Direction? DirectionFromString(string text)
        {
            if (_directionFromString.TryGetValue(text, out Direction value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.StateOfEvent, string> _stateOfEventToString = (
            new Dictionary<Aas.StateOfEvent, string>()
            {
                { Aas.StateOfEvent.On, "ON" },
                { Aas.StateOfEvent.Off, "OFF" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.StateOfEvent that)
        {
            if (_stateOfEventToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.StateOfEvent> _stateOfEventFromString = (
            new Dictionary<string, Aas.StateOfEvent>()
            {
                { "ON", Aas.StateOfEvent.On },
                { "OFF", Aas.StateOfEvent.Off }
            });

        /// <summary>
        /// Parse the string representation of <see cref="StateOfEvent" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="StateOfEvent" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.StateOfEvent? StateOfEventFromString(string text)
        {
            if (_stateOfEventFromString.TryGetValue(text, out StateOfEvent value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.EntityType, string> _entityTypeToString = (
            new Dictionary<Aas.EntityType, string>()
            {
                { Aas.EntityType.CoManagedEntity, "COMANAGEDENTITY" },
                { Aas.EntityType.SelfManagedEntity, "SELFMANAGEDENTITY" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.EntityType that)
        {
            if (_entityTypeToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.EntityType> _entityTypeFromString = (
            new Dictionary<string, Aas.EntityType>()
            {
                { "COMANAGEDENTITY", Aas.EntityType.CoManagedEntity },
                { "SELFMANAGEDENTITY", Aas.EntityType.SelfManagedEntity }
            });

        /// <summary>
        /// Parse the string representation of <see cref="EntityType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="EntityType" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.EntityType? EntityTypeFromString(string text)
        {
            if (_entityTypeFromString.TryGetValue(text, out EntityType value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.IdentifiableElements, string> _identifiableElementsToString = (
            new Dictionary<Aas.IdentifiableElements, string>()
            {
                { Aas.IdentifiableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.IdentifiableElements.ConceptDescription, "ConceptDescription" },
                { Aas.IdentifiableElements.Submodel, "Submodel" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.IdentifiableElements that)
        {
            if (_identifiableElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.IdentifiableElements> _identifiableElementsFromString = (
            new Dictionary<string, Aas.IdentifiableElements>()
            {
                { "AssetAdministrationShell", Aas.IdentifiableElements.AssetAdministrationShell },
                { "ConceptDescription", Aas.IdentifiableElements.ConceptDescription },
                { "Submodel", Aas.IdentifiableElements.Submodel }
            });

        /// <summary>
        /// Parse the string representation of <see cref="IdentifiableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="IdentifiableElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.IdentifiableElements? IdentifiableElementsFromString(string text)
        {
            if (_identifiableElementsFromString.TryGetValue(text, out IdentifiableElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.SubmodelElementElements, string> _submodelElementElementsToString = (
            new Dictionary<Aas.SubmodelElementElements, string>()
            {
                { Aas.SubmodelElementElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.SubmodelElementElements.BasicEventElement, "BasicEventElement" },
                { Aas.SubmodelElementElements.Blob, "Blob" },
                { Aas.SubmodelElementElements.Capability, "Capability" },
                { Aas.SubmodelElementElements.DataElement, "DataElement" },
                { Aas.SubmodelElementElements.Entity, "Entity" },
                { Aas.SubmodelElementElements.EventElement, "EventElement" },
                { Aas.SubmodelElementElements.File, "File" },
                { Aas.SubmodelElementElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.SubmodelElementElements.Operation, "Operation" },
                { Aas.SubmodelElementElements.Property, "Property" },
                { Aas.SubmodelElementElements.Range, "Range" },
                { Aas.SubmodelElementElements.ReferenceElement, "ReferenceElement" },
                { Aas.SubmodelElementElements.RelationshipElement, "RelationshipElement" },
                { Aas.SubmodelElementElements.SubmodelElement, "SubmodelElement" },
                { Aas.SubmodelElementElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.SubmodelElementElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.SubmodelElementElements that)
        {
            if (_submodelElementElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.SubmodelElementElements> _submodelElementElementsFromString = (
            new Dictionary<string, Aas.SubmodelElementElements>()
            {
                { "AnnotatedRelationshipElement", Aas.SubmodelElementElements.AnnotatedRelationshipElement },
                { "BasicEventElement", Aas.SubmodelElementElements.BasicEventElement },
                { "Blob", Aas.SubmodelElementElements.Blob },
                { "Capability", Aas.SubmodelElementElements.Capability },
                { "DataElement", Aas.SubmodelElementElements.DataElement },
                { "Entity", Aas.SubmodelElementElements.Entity },
                { "EventElement", Aas.SubmodelElementElements.EventElement },
                { "File", Aas.SubmodelElementElements.File },
                { "MultiLanguageProperty", Aas.SubmodelElementElements.MultiLanguageProperty },
                { "Operation", Aas.SubmodelElementElements.Operation },
                { "Property", Aas.SubmodelElementElements.Property },
                { "Range", Aas.SubmodelElementElements.Range },
                { "ReferenceElement", Aas.SubmodelElementElements.ReferenceElement },
                { "RelationshipElement", Aas.SubmodelElementElements.RelationshipElement },
                { "SubmodelElement", Aas.SubmodelElementElements.SubmodelElement },
                { "SubmodelElementList", Aas.SubmodelElementElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.SubmodelElementElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="SubmodelElementElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="SubmodelElementElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.SubmodelElementElements? SubmodelElementElementsFromString(string text)
        {
            if (_submodelElementElementsFromString.TryGetValue(text, out SubmodelElementElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.ReferableElements, string> _referableElementsToString = (
            new Dictionary<Aas.ReferableElements, string>()
            {
                { Aas.ReferableElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.ReferableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.ReferableElements.BasicEventElement, "BasicEventElement" },
                { Aas.ReferableElements.Blob, "Blob" },
                { Aas.ReferableElements.Capability, "Capability" },
                { Aas.ReferableElements.ConceptDescription, "ConceptDescription" },
                { Aas.ReferableElements.DataElement, "DataElement" },
                { Aas.ReferableElements.Entity, "Entity" },
                { Aas.ReferableElements.EventElement, "EventElement" },
                { Aas.ReferableElements.File, "File" },
                { Aas.ReferableElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.ReferableElements.Operation, "Operation" },
                { Aas.ReferableElements.Property, "Property" },
                { Aas.ReferableElements.Range, "Range" },
                { Aas.ReferableElements.ReferenceElement, "ReferenceElement" },
                { Aas.ReferableElements.RelationshipElement, "RelationshipElement" },
                { Aas.ReferableElements.Submodel, "Submodel" },
                { Aas.ReferableElements.SubmodelElement, "SubmodelElement" },
                { Aas.ReferableElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.ReferableElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.ReferableElements that)
        {
            if (_referableElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.ReferableElements> _referableElementsFromString = (
            new Dictionary<string, Aas.ReferableElements>()
            {
                { "AnnotatedRelationshipElement", Aas.ReferableElements.AnnotatedRelationshipElement },
                { "AssetAdministrationShell", Aas.ReferableElements.AssetAdministrationShell },
                { "BasicEventElement", Aas.ReferableElements.BasicEventElement },
                { "Blob", Aas.ReferableElements.Blob },
                { "Capability", Aas.ReferableElements.Capability },
                { "ConceptDescription", Aas.ReferableElements.ConceptDescription },
                { "DataElement", Aas.ReferableElements.DataElement },
                { "Entity", Aas.ReferableElements.Entity },
                { "EventElement", Aas.ReferableElements.EventElement },
                { "File", Aas.ReferableElements.File },
                { "MultiLanguageProperty", Aas.ReferableElements.MultiLanguageProperty },
                { "Operation", Aas.ReferableElements.Operation },
                { "Property", Aas.ReferableElements.Property },
                { "Range", Aas.ReferableElements.Range },
                { "ReferenceElement", Aas.ReferableElements.ReferenceElement },
                { "RelationshipElement", Aas.ReferableElements.RelationshipElement },
                { "Submodel", Aas.ReferableElements.Submodel },
                { "SubmodelElement", Aas.ReferableElements.SubmodelElement },
                { "SubmodelElementList", Aas.ReferableElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.ReferableElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ReferableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="ReferableElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.ReferableElements? ReferableElementsFromString(string text)
        {
            if (_referableElementsFromString.TryGetValue(text, out ReferableElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.KeyElements, string> _keyElementsToString = (
            new Dictionary<Aas.KeyElements, string>()
            {
                { Aas.KeyElements.FragmentReference, "FragmentReference" },
                { Aas.KeyElements.GlobalReference, "GlobalReference" },
                { Aas.KeyElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.KeyElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.KeyElements.BasicEventElement, "BasicEventElement" },
                { Aas.KeyElements.Blob, "Blob" },
                { Aas.KeyElements.Capability, "Capability" },
                { Aas.KeyElements.ConceptDescription, "ConceptDescription" },
                { Aas.KeyElements.DataElement, "DataElement" },
                { Aas.KeyElements.Entity, "Entity" },
                { Aas.KeyElements.EventElement, "EventElement" },
                { Aas.KeyElements.File, "File" },
                { Aas.KeyElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.KeyElements.Operation, "Operation" },
                { Aas.KeyElements.Property, "Property" },
                { Aas.KeyElements.Range, "Range" },
                { Aas.KeyElements.ReferenceElement, "ReferenceElement" },
                { Aas.KeyElements.RelationshipElement, "RelationshipElement" },
                { Aas.KeyElements.Submodel, "Submodel" },
                { Aas.KeyElements.SubmodelElement, "SubmodelElement" },
                { Aas.KeyElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.KeyElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.KeyElements that)
        {
            if (_keyElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.KeyElements> _keyElementsFromString = (
            new Dictionary<string, Aas.KeyElements>()
            {
                { "FragmentReference", Aas.KeyElements.FragmentReference },
                { "GlobalReference", Aas.KeyElements.GlobalReference },
                { "AnnotatedRelationshipElement", Aas.KeyElements.AnnotatedRelationshipElement },
                { "AssetAdministrationShell", Aas.KeyElements.AssetAdministrationShell },
                { "BasicEventElement", Aas.KeyElements.BasicEventElement },
                { "Blob", Aas.KeyElements.Blob },
                { "Capability", Aas.KeyElements.Capability },
                { "ConceptDescription", Aas.KeyElements.ConceptDescription },
                { "DataElement", Aas.KeyElements.DataElement },
                { "Entity", Aas.KeyElements.Entity },
                { "EventElement", Aas.KeyElements.EventElement },
                { "File", Aas.KeyElements.File },
                { "MultiLanguageProperty", Aas.KeyElements.MultiLanguageProperty },
                { "Operation", Aas.KeyElements.Operation },
                { "Property", Aas.KeyElements.Property },
                { "Range", Aas.KeyElements.Range },
                { "ReferenceElement", Aas.KeyElements.ReferenceElement },
                { "RelationshipElement", Aas.KeyElements.RelationshipElement },
                { "Submodel", Aas.KeyElements.Submodel },
                { "SubmodelElement", Aas.KeyElements.SubmodelElement },
                { "SubmodelElementList", Aas.KeyElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.KeyElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="KeyElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="KeyElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.KeyElements? KeyElementsFromString(string text)
        {
            if (_keyElementsFromString.TryGetValue(text, out KeyElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DataTypeIec61360, string> _dataTypeIec61360ToString = (
            new Dictionary<Aas.DataTypeIec61360, string>()
            {
                { Aas.DataTypeIec61360.Date, "DATE" },
                { Aas.DataTypeIec61360.String, "STRING" },
                { Aas.DataTypeIec61360.StringTranslatable, "STRING_TRANSLATABLE" },
                { Aas.DataTypeIec61360.IntegerMeasure, "INTEGER_MEASURE" },
                { Aas.DataTypeIec61360.IntegerCount, "INTEGER_COUNT" },
                { Aas.DataTypeIec61360.IntegerCurrency, "INTEGER_CURRENCY" },
                { Aas.DataTypeIec61360.RealMeasure, "REAL_MEASURE" },
                { Aas.DataTypeIec61360.RealCount, "REAL_COUNT" },
                { Aas.DataTypeIec61360.RealCurrency, "REAL_CURRENCY" },
                { Aas.DataTypeIec61360.Boolean, "BOOLEAN" },
                { Aas.DataTypeIec61360.Iri, "IRI" },
                { Aas.DataTypeIec61360.Irdi, "IRDI" },
                { Aas.DataTypeIec61360.Rational, "RATIONAL" },
                { Aas.DataTypeIec61360.RationalMeasure, "RATIONAL_MEASURE" },
                { Aas.DataTypeIec61360.Time, "TIME" },
                { Aas.DataTypeIec61360.Timestamp, "TIMESTAMP" },
                { Aas.DataTypeIec61360.File, "FILE" },
                { Aas.DataTypeIec61360.Html, "HTML" },
                { Aas.DataTypeIec61360.Blob, "BLOB" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeIec61360 that)
        {
            if (_dataTypeIec61360ToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeIec61360> _dataTypeIec61360FromString = (
            new Dictionary<string, Aas.DataTypeIec61360>()
            {
                { "DATE", Aas.DataTypeIec61360.Date },
                { "STRING", Aas.DataTypeIec61360.String },
                { "STRING_TRANSLATABLE", Aas.DataTypeIec61360.StringTranslatable },
                { "INTEGER_MEASURE", Aas.DataTypeIec61360.IntegerMeasure },
                { "INTEGER_COUNT", Aas.DataTypeIec61360.IntegerCount },
                { "INTEGER_CURRENCY", Aas.DataTypeIec61360.IntegerCurrency },
                { "REAL_MEASURE", Aas.DataTypeIec61360.RealMeasure },
                { "REAL_COUNT", Aas.DataTypeIec61360.RealCount },
                { "REAL_CURRENCY", Aas.DataTypeIec61360.RealCurrency },
                { "BOOLEAN", Aas.DataTypeIec61360.Boolean },
                { "IRI", Aas.DataTypeIec61360.Iri },
                { "IRDI", Aas.DataTypeIec61360.Irdi },
                { "RATIONAL", Aas.DataTypeIec61360.Rational },
                { "RATIONAL_MEASURE", Aas.DataTypeIec61360.RationalMeasure },
                { "TIME", Aas.DataTypeIec61360.Time },
                { "TIMESTAMP", Aas.DataTypeIec61360.Timestamp },
                { "FILE", Aas.DataTypeIec61360.File },
                { "HTML", Aas.DataTypeIec61360.Html },
                { "BLOB", Aas.DataTypeIec61360.Blob }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeIec61360" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeIec61360" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeIec61360? DataTypeIec61360FromString(string text)
        {
            if (_dataTypeIec61360FromString.TryGetValue(text, out DataTypeIec61360 value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.LevelType, string> _levelTypeToString = (
            new Dictionary<Aas.LevelType, string>()
            {
                { Aas.LevelType.Min, "Min" },
                { Aas.LevelType.Max, "Max" },
                { Aas.LevelType.Nom, "Nom" },
                { Aas.LevelType.Type, "Type" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.LevelType that)
        {
            if (_levelTypeToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.LevelType> _levelTypeFromString = (
            new Dictionary<string, Aas.LevelType>()
            {
                { "Min", Aas.LevelType.Min },
                { "Max", Aas.LevelType.Max },
                { "Nom", Aas.LevelType.Nom },
                { "Type", Aas.LevelType.Type }
            });

        /// <summary>
        /// Parse the string representation of <see cref="LevelType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="LevelType" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.LevelType? LevelTypeFromString(string text)
        {
            if (_levelTypeFromString.TryGetValue(text, out LevelType value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }
    }  // public static class Stringification
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
