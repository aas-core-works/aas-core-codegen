/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Nodes = System.Text.Json.Nodes;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    /// <summary>
    /// Provide de/serialization of meta-model entities to/from JSON.
    /// </summary>
    /// <remarks>
    /// We can not use one-pass deserialization for JSON since the object
    /// properties do not have fixed order, and hence we can not read
    /// <c>modelType</c> property ahead of the remaining properties.
    /// </remarks>
    public static class Jsonization
    {
        /// <summary>
        /// Implement the deserialization of meta-model classes from JSON nodes.
        /// </summary>
        /// <remarks>
        /// The implementation propagates an <see cref="Error" /> instead of relying
        /// on exceptions. Under the assumption that incorrect data is much less
        /// frequent than correct data, this makes the deserialization more
        /// efficient.
        ///
        /// However, we do not want to force the client to deal with
        /// the <see cref="Error" /> class as this is not intuitive. Therefore
        /// we distinguish the implementation, realized in
        /// <see cref="DeserializeImplementation" />, and the facade given in
        /// <see cref="Deserialize" /> class.
        internal static class DeserializeImplementation
        {
            /// <summary>Convert <paramref name="node" /> to a boolean.</summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static bool? BoolFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<bool>(out bool result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        $"Expected a boolean, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a long 64-bit integer.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static long? LongFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<long>(out long result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        $"Expected a 64-bit long integer, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a double-precision 64-bit float.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static double? DoubleFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<double>(out double result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        "Expected a 64-bit double-precision float, " +
                        "but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a string.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static string? StringFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<string>(out string? result);
                if (!ok)
                {
                    error = new Reporting.Error(
                        $"Expected a string, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, but got a null");
                    return null;
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to bytes.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static byte[]? BytesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonValue, but got {node.GetType()}");
                    return null;
                }
                bool ok = value.TryGetValue<string>(out string? text);
                if (!ok)
                {
                    error = new Reporting.Error(
                        $"Expected a string, but the conversion failed " +
                        $"from {value.ToJsonString()}");
                    return null;
                }
                if (text == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, but got a null");
                    return null;
                }
                try
                {
                    return System.Convert.FromBase64String(text);
                }
                catch (System.FormatException exception)
                {
                    error = new Reporting.Error(
                        "Expected Base-64 encoded bytes, but the conversion failed " +
                        $"because: {exception}");
                    return null;
                }
            }

            /// <summary>
            /// Deserialize an instance of IHasSemantics by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IHasSemantics? IHasSemanticsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "Extension":
                    return ExtensionFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "IdentifierKeyValuePair":
                    return IdentifierKeyValuePairFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Qualifier":
                    return QualifierFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                case "View":
                    return ViewFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasSemantics: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasSemantics IHasSemanticsFrom

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Extension? ExtensionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeName = obj["name"];
                if (nodeName == null)
                {
                    error = new Reporting.Error(
                        "Required property \"name\" is missing ");
                    return null;
                }
                string? theName = DeserializeImplementation.StringFrom(
                    nodeName,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "name"));
                    return null;
                }
                if (theName == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theName null when error is also null");
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                Aas.DataTypeDef? theValueType = null;
                if (nodeValueType != null)
                {
                    theValueType = DeserializeImplementation.DataTypeDefFrom(
                        nodeValueType,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueType"));
                        return null;
                    }
                    if (theValueType == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueType null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.StringFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeRefersTo = obj["refersTo"];
                Aas.IReference? theRefersTo = null;
                if (nodeRefersTo != null)
                {
                    theRefersTo = DeserializeImplementation.IReferenceFrom(
                        nodeRefersTo,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "refersTo"));
                        return null;
                    }
                    if (theRefersTo == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theRefersTo null when error is also null");
                    }
                }

                return new Aas.Extension(
                    theName
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticId,
                    theValueType,
                    theValue,
                    theRefersTo);
            }  // internal static ExtensionFrom

            /// <summary>
            /// Deserialize an instance of IHasExtensions by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IHasExtensions? IHasExtensionsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                case "View":
                    return ViewFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasExtensions: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasExtensions IHasExtensionsFrom

            /// <summary>
            /// Deserialize an instance of IReferable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IReferable? IReferableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                case "View":
                    return ViewFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IReferable: {modelType}");
                        return null;
                }
            }  // public static Aas.IReferable IReferableFrom

            /// <summary>
            /// Deserialize an instance of IIdentifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IIdentifiable? IIdentifiableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, out error);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IIdentifiable: {modelType}");
                        return null;
                }
            }  // public static Aas.IIdentifiable IIdentifiableFrom

            /// <summary>
            /// Deserialize the enumeration ModelingKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ModelingKind? ModelingKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.ModelingKind? result = Stringification.ModelingKindFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of ModelingKind ");
                }
                return result;
            }  // internal static ModelingKindFrom

            /// <summary>
            /// Deserialize an instance of IHasKind by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IHasKind? IHasKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasKind: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasKind IHasKindFrom

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IHasDataSpecification? IHasDataSpecificationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AdministrativeInformation":
                    return AdministrativeInformationFrom(
                        node, out error);
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                case "View":
                    return ViewFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IHasDataSpecification: {modelType}");
                        return null;
                }
            }  // public static Aas.IHasDataSpecification IHasDataSpecificationFrom

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AdministrativeInformation? AdministrativeInformationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeVersion = obj["version"];
                string? theVersion = null;
                if (nodeVersion != null)
                {
                    theVersion = DeserializeImplementation.StringFrom(
                        nodeVersion,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "version"));
                        return null;
                    }
                    if (theVersion == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theVersion null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeRevision = obj["revision"];
                string? theRevision = null;
                if (nodeRevision != null)
                {
                    theRevision = DeserializeImplementation.StringFrom(
                        nodeRevision,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "revision"));
                        return null;
                    }
                    if (theRevision == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theRevision null when error is also null");
                    }
                }

                return new Aas.AdministrativeInformation(
                    theVersion,
                    theRevision,
                    theDataSpecifications);
            }  // internal static AdministrativeInformationFrom

            /// <summary>
            /// Deserialize an instance of IConstraint by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IConstraint? IConstraintFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "Formula":
                    return FormulaFrom(
                        node, out error);
                case "Qualifier":
                    return QualifierFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IConstraint: {modelType}");
                        return null;
                }
            }  // public static Aas.IConstraint IConstraintFrom

            /// <summary>
            /// Deserialize an instance of IQualifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IQualifiable? IQualifiableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "Submodel":
                    return SubmodelFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IQualifiable: {modelType}");
                        return null;
                }
            }  // public static Aas.IQualifiable IQualifiableFrom

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Qualifier? QualifierFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeType = obj["type"];
                if (nodeType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"type\" is missing ");
                    return null;
                }
                string? theType = DeserializeImplementation.StringFrom(
                    nodeType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    return null;
                }
                if (theType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theType null when error is also null");
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing ");
                    return null;
                }
                Aas.DataTypeDef? theValueType = DeserializeImplementation.DataTypeDefFrom(
                    nodeValueType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    return null;
                }
                if (theValueType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValueType null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.StringFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = DeserializeImplementation.IReferenceFrom(
                        nodeValueId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        return null;
                    }
                    if (theValueId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueId null when error is also null");
                    }
                }

                return new Aas.Qualifier(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue,
                    theValueId,
                    theSemanticId);
            }  // internal static QualifierFrom

            /// <summary>
            /// Deserialize an instance of Formula from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Formula? FormulaFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeDependsOn = obj["dependsOn"];
                List<IReference>? theDependsOn = null;
                if (nodeDependsOn != null)
                {
                    Nodes.JsonArray? arrayDependsOn = nodeDependsOn as Nodes.JsonArray;
                    if (arrayDependsOn == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDependsOn.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dependsOn"));
                        return null;
                    }
                    theDependsOn = new List<IReference>(
                        arrayDependsOn.Count);
                    int indexDependsOn = 0;
                    foreach (Nodes.JsonNode? item in arrayDependsOn)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDependsOn));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dependsOn"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDependsOn));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dependsOn"));
                            return null;
                        }
                        theDependsOn.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDependsOn++;
                    }
                }

                return new Aas.Formula(
                    theDependsOn);
            }  // internal static FormulaFrom

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetAdministrationShell? AssetAdministrationShellFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing ");
                    return null;
                }
                string? theId = DeserializeImplementation.StringFrom(
                    nodeId,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    return null;
                }
                if (theId == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theId null when error is also null");
                }

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                        nodeAdministration,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        return null;
                    }
                    if (theAdministration == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theAdministration null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeDerivedFrom = obj["derivedFrom"];
                Aas.ModelReference? theDerivedFrom = null;
                if (nodeDerivedFrom != null)
                {
                    theDerivedFrom = DeserializeImplementation.ModelReferenceFrom(
                        nodeDerivedFrom,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "derivedFrom"));
                        return null;
                    }
                    if (theDerivedFrom == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDerivedFrom null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeAssetInformation = obj["assetInformation"];
                if (nodeAssetInformation == null)
                {
                    error = new Reporting.Error(
                        "Required property \"assetInformation\" is missing ");
                    return null;
                }
                Aas.AssetInformation? theAssetInformation = DeserializeImplementation.AssetInformationFrom(
                    nodeAssetInformation,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetInformation"));
                    return null;
                }
                if (theAssetInformation == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theAssetInformation null when error is also null");
                }

                Nodes.JsonNode? nodeSubmodels = obj["submodels"];
                List<ModelReference>? theSubmodels = null;
                if (nodeSubmodels != null)
                {
                    Nodes.JsonArray? arraySubmodels = nodeSubmodels as Nodes.JsonArray;
                    if (arraySubmodels == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeSubmodels.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "submodels"));
                        return null;
                    }
                    theSubmodels = new List<ModelReference>(
                        arraySubmodels.Count);
                    int indexSubmodels = 0;
                    foreach (Nodes.JsonNode? item in arraySubmodels)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                        }
                        ModelReference? parsedItem = DeserializeImplementation.ModelReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            return null;
                        }
                        theSubmodels.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexSubmodels++;
                    }
                }

                return new Aas.AssetAdministrationShell(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theAssetInformation
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theDataSpecifications,
                    theDerivedFrom,
                    theSubmodels);
            }  // internal static AssetAdministrationShellFrom

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetInformation? AssetInformationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeAssetKind = obj["assetKind"];
                if (nodeAssetKind == null)
                {
                    error = new Reporting.Error(
                        "Required property \"assetKind\" is missing ");
                    return null;
                }
                Aas.AssetKind? theAssetKind = DeserializeImplementation.AssetKindFrom(
                    nodeAssetKind,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "assetKind"));
                    return null;
                }
                if (theAssetKind == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theAssetKind null when error is also null");
                }

                Nodes.JsonNode? nodeGlobalAssetId = obj["globalAssetId"];
                Aas.IReference? theGlobalAssetId = null;
                if (nodeGlobalAssetId != null)
                {
                    theGlobalAssetId = DeserializeImplementation.IReferenceFrom(
                        nodeGlobalAssetId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        return null;
                    }
                    if (theGlobalAssetId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theGlobalAssetId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSpecificAssetId = obj["specificAssetId"];
                Aas.IdentifierKeyValuePair? theSpecificAssetId = null;
                if (nodeSpecificAssetId != null)
                {
                    theSpecificAssetId = DeserializeImplementation.IdentifierKeyValuePairFrom(
                        nodeSpecificAssetId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        return null;
                    }
                    if (theSpecificAssetId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSpecificAssetId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDefaultThumbnail = obj["defaultThumbnail"];
                Aas.File? theDefaultThumbnail = null;
                if (nodeDefaultThumbnail != null)
                {
                    theDefaultThumbnail = DeserializeImplementation.FileFrom(
                        nodeDefaultThumbnail,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "defaultThumbnail"));
                        return null;
                    }
                    if (theDefaultThumbnail == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDefaultThumbnail null when error is also null");
                    }
                }

                return new Aas.AssetInformation(
                    theAssetKind
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theGlobalAssetId,
                    theSpecificAssetId,
                    theDefaultThumbnail);
            }  // internal static AssetInformationFrom

            /// <summary>
            /// Deserialize the enumeration AssetKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AssetKind? AssetKindFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.AssetKind? result = Stringification.AssetKindFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of AssetKind ");
                }
                return result;
            }  // internal static AssetKindFrom

            /// <summary>
            /// Deserialize an instance of IdentifierKeyValuePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.IdentifierKeyValuePair? IdentifierKeyValuePairFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKey = obj["key"];
                if (nodeKey == null)
                {
                    error = new Reporting.Error(
                        "Required property \"key\" is missing ");
                    return null;
                }
                string? theKey = DeserializeImplementation.StringFrom(
                    nodeKey,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "key"));
                    return null;
                }
                if (theKey == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theKey null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing ");
                    return null;
                }
                string? theValue = DeserializeImplementation.StringFrom(
                    nodeValue,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    return null;
                }
                if (theValue == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValue null when error is also null");
                }

                Nodes.JsonNode? nodeExternalSubjectId = obj["externalSubjectId"];
                Aas.IReference? theExternalSubjectId = null;
                if (nodeExternalSubjectId != null)
                {
                    theExternalSubjectId = DeserializeImplementation.IReferenceFrom(
                        nodeExternalSubjectId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "externalSubjectId"));
                        return null;
                    }
                    if (theExternalSubjectId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theExternalSubjectId null when error is also null");
                    }
                }

                return new Aas.IdentifierKeyValuePair(
                    theKey
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExternalSubjectId,
                    theSemanticId);
            }  // internal static IdentifierKeyValuePairFrom

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Submodel? SubmodelFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing ");
                    return null;
                }
                string? theId = DeserializeImplementation.StringFrom(
                    nodeId,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    return null;
                }
                if (theId == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theId null when error is also null");
                }

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                        nodeAdministration,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        return null;
                    }
                    if (theAdministration == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theAdministration null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeSubmodelElements = obj["submodelElements"];
                if (nodeSubmodelElements == null)
                {
                    error = new Reporting.Error(
                        "Required property \"submodelElements\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arraySubmodelElements = nodeSubmodelElements as Nodes.JsonArray;
                if (arraySubmodelElements == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeSubmodelElements.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "submodelElements"));
                    return null;
                }
                var theSubmodelElements = new List<ISubmodelElement>(
                    arraySubmodelElements.Count);
                int indexSubmodelElements = 0;
                foreach (Nodes.JsonNode? item in arraySubmodelElements)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexSubmodelElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "submodelElements"));
                    }
                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexSubmodelElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "submodelElements"));
                        return null;
                    }
                    theSubmodelElements.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexSubmodelElements++;
                }

                return new Aas.Submodel(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theSubmodelElements
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications);
            }  // internal static SubmodelFrom

            /// <summary>
            /// Deserialize an instance of ISubmodelElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.ISubmodelElement? ISubmodelElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "Capability":
                    return CapabilityFrom(
                        node, out error);
                case "Entity":
                    return EntityFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Operation":
                    return OperationFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, out error);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for ISubmodelElement: {modelType}");
                        return null;
                }
            }  // public static Aas.ISubmodelElement ISubmodelElementFrom

            /// <summary>
            /// Deserialize an instance of IRelationshipElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IRelationshipElement? IRelationshipElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IRelationshipElement: {modelType}");
                        return null;
                }
            }  // public static Aas.IRelationshipElement IRelationshipElementFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SubmodelElementList? SubmodelElementListFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeSubmodelElementTypeValues = obj["submodelElementTypeValues"];
                if (nodeSubmodelElementTypeValues == null)
                {
                    error = new Reporting.Error(
                        "Required property \"submodelElementTypeValues\" is missing ");
                    return null;
                }
                Aas.SubmodelElements? theSubmodelElementTypeValues = DeserializeImplementation.SubmodelElementsFrom(
                    nodeSubmodelElementTypeValues,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "submodelElementTypeValues"));
                    return null;
                }
                if (theSubmodelElementTypeValues == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theSubmodelElementTypeValues null when error is also null");
                }

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    error = new Reporting.Error(
                        "Required property \"values\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeValues.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "values"));
                    return null;
                }
                var theValues = new List<ISubmodelElement>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                    }
                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        return null;
                    }
                    theValues.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexValues++;
                }

                Nodes.JsonNode? nodeSemanticIdValues = obj["semanticIdValues"];
                Aas.IReference? theSemanticIdValues = null;
                if (nodeSemanticIdValues != null)
                {
                    theSemanticIdValues = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticIdValues,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticIdValues"));
                        return null;
                    }
                    if (theSemanticIdValues == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticIdValues null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueTypeValues = obj["valueTypeValues"];
                Aas.DataTypeDef? theValueTypeValues = null;
                if (nodeValueTypeValues != null)
                {
                    theValueTypeValues = DeserializeImplementation.DataTypeDefFrom(
                        nodeValueTypeValues,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueTypeValues"));
                        return null;
                    }
                    if (theValueTypeValues == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueTypeValues null when error is also null");
                    }
                }

                return new Aas.SubmodelElementList(
                    theSubmodelElementTypeValues
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValues
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSemanticIdValues,
                    theValueTypeValues);
            }  // internal static SubmodelElementListFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementStruct from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SubmodelElementStruct? SubmodelElementStructFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    error = new Reporting.Error(
                        "Required property \"values\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeValues.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "values"));
                    return null;
                }
                var theValues = new List<ISubmodelElement>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                    }
                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        return null;
                    }
                    theValues.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexValues++;
                }

                return new Aas.SubmodelElementStruct(
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValues
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static SubmodelElementStructFrom

            /// <summary>
            /// Deserialize an instance of IDataElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IDataElement? IDataElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "Blob":
                    return BlobFrom(
                        node, out error);
                case "File":
                    return FileFrom(
                        node, out error);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, out error);
                case "Property":
                    return PropertyFrom(
                        node, out error);
                case "Range":
                    return RangeFrom(
                        node, out error);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IDataElement: {modelType}");
                        return null;
                }
            }  // public static Aas.IDataElement IDataElementFrom

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Property? PropertyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing ");
                    return null;
                }
                Aas.DataTypeDef? theValueType = DeserializeImplementation.DataTypeDefFrom(
                    nodeValueType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    return null;
                }
                if (theValueType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValueType null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.StringFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = DeserializeImplementation.IReferenceFrom(
                        nodeValueId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        return null;
                    }
                    if (theValueId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueId null when error is also null");
                    }
                }

                return new Aas.Property(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static PropertyFrom

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.MultiLanguageProperty? MultiLanguagePropertyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                Aas.LangStringSet? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.LangStringSetFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = DeserializeImplementation.IReferenceFrom(
                        nodeValueId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        return null;
                    }
                    if (theValueId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueId null when error is also null");
                    }
                }

                return new Aas.MultiLanguageProperty(
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // internal static MultiLanguagePropertyFrom

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Range? RangeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueType\" is missing ");
                    return null;
                }
                Aas.DataTypeDef? theValueType = DeserializeImplementation.DataTypeDefFrom(
                    nodeValueType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueType"));
                    return null;
                }
                if (theValueType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValueType null when error is also null");
                }

                Nodes.JsonNode? nodeMin = obj["min"];
                string? theMin = null;
                if (nodeMin != null)
                {
                    theMin = DeserializeImplementation.StringFrom(
                        nodeMin,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "min"));
                        return null;
                    }
                    if (theMin == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theMin null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeMax = obj["max"];
                string? theMax = null;
                if (nodeMax != null)
                {
                    theMax = DeserializeImplementation.StringFrom(
                        nodeMax,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "max"));
                        return null;
                    }
                    if (theMax == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theMax null when error is also null");
                    }
                }

                return new Aas.Range(
                    theValueType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theMin,
                    theMax);
            }  // internal static RangeFrom

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ReferenceElement? ReferenceElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                Aas.IReference? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.IReferenceFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                return new Aas.ReferenceElement(
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValue);
            }  // internal static ReferenceElementFrom

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Blob? BlobFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeMimeType = obj["mimeType"];
                if (nodeMimeType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"mimeType\" is missing ");
                    return null;
                }
                string? theMimeType = DeserializeImplementation.StringFrom(
                    nodeMimeType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "mimeType"));
                    return null;
                }
                if (theMimeType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theMimeType null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                byte[]? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.BytesFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                return new Aas.Blob(
                    theMimeType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValue);
            }  // internal static BlobFrom

            /// <summary>
            /// Deserialize an instance of File from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.File? FileFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeMimeType = obj["mimeType"];
                if (nodeMimeType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"mimeType\" is missing ");
                    return null;
                }
                string? theMimeType = DeserializeImplementation.StringFrom(
                    nodeMimeType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "mimeType"));
                    return null;
                }
                if (theMimeType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theMimeType null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.StringFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                return new Aas.File(
                    theMimeType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theValue);
            }  // internal static FileFrom

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.AnnotatedRelationshipElement? AnnotatedRelationshipElementFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeFirst = obj["first"];
                if (nodeFirst == null)
                {
                    error = new Reporting.Error(
                        "Required property \"first\" is missing ");
                    return null;
                }
                Aas.IReference? theFirst = DeserializeImplementation.IReferenceFrom(
                    nodeFirst,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "first"));
                    return null;
                }
                if (theFirst == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theFirst null when error is also null");
                }

                Nodes.JsonNode? nodeSecond = obj["second"];
                if (nodeSecond == null)
                {
                    error = new Reporting.Error(
                        "Required property \"second\" is missing ");
                    return null;
                }
                Aas.IReference? theSecond = DeserializeImplementation.IReferenceFrom(
                    nodeSecond,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "second"));
                    return null;
                }
                if (theSecond == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theSecond null when error is also null");
                }

                Nodes.JsonNode? nodeAnnotation = obj["annotation"];
                if (nodeAnnotation == null)
                {
                    error = new Reporting.Error(
                        "Required property \"annotation\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayAnnotation = nodeAnnotation as Nodes.JsonArray;
                if (arrayAnnotation == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeAnnotation.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "annotation"));
                    return null;
                }
                var theAnnotation = new List<IDataElement>(
                    arrayAnnotation.Count);
                int indexAnnotation = 0;
                foreach (Nodes.JsonNode? item in arrayAnnotation)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexAnnotation));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "annotation"));
                    }
                    IDataElement? parsedItem = DeserializeImplementation.IDataElementFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexAnnotation));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "annotation"));
                        return null;
                    }
                    theAnnotation.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexAnnotation++;
                }

                return new Aas.AnnotatedRelationshipElement(
                    theFirst
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theSecond
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theAnnotation
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static AnnotatedRelationshipElementFrom

            /// <summary>
            /// Deserialize the enumeration EntityType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.EntityType? EntityTypeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.EntityType? result = Stringification.EntityTypeFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of EntityType ");
                }
                return result;
            }  // internal static EntityTypeFrom

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Entity? EntityFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeEntityType = obj["entityType"];
                if (nodeEntityType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"entityType\" is missing ");
                    return null;
                }
                Aas.EntityType? theEntityType = DeserializeImplementation.EntityTypeFrom(
                    nodeEntityType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "entityType"));
                    return null;
                }
                if (theEntityType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theEntityType null when error is also null");
                }

                Nodes.JsonNode? nodeStatements = obj["statements"];
                if (nodeStatements == null)
                {
                    error = new Reporting.Error(
                        "Required property \"statements\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayStatements = nodeStatements as Nodes.JsonArray;
                if (arrayStatements == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeStatements.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "statements"));
                    return null;
                }
                var theStatements = new List<ISubmodelElement>(
                    arrayStatements.Count);
                int indexStatements = 0;
                foreach (Nodes.JsonNode? item in arrayStatements)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexStatements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "statements"));
                    }
                    ISubmodelElement? parsedItem = DeserializeImplementation.ISubmodelElementFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexStatements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "statements"));
                        return null;
                    }
                    theStatements.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexStatements++;
                }

                Nodes.JsonNode? nodeGlobalAssetId = obj["globalAssetId"];
                Aas.IReference? theGlobalAssetId = null;
                if (nodeGlobalAssetId != null)
                {
                    theGlobalAssetId = DeserializeImplementation.IReferenceFrom(
                        nodeGlobalAssetId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "globalAssetId"));
                        return null;
                    }
                    if (theGlobalAssetId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theGlobalAssetId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSpecificAssetId = obj["specificAssetId"];
                Aas.IdentifierKeyValuePair? theSpecificAssetId = null;
                if (nodeSpecificAssetId != null)
                {
                    theSpecificAssetId = DeserializeImplementation.IdentifierKeyValuePairFrom(
                        nodeSpecificAssetId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "specificAssetId"));
                        return null;
                    }
                    if (theSpecificAssetId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSpecificAssetId null when error is also null");
                    }
                }

                return new Aas.Entity(
                    theEntityType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theStatements
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theGlobalAssetId,
                    theSpecificAssetId);
            }  // internal static EntityFrom

            /// <summary>
            /// Deserialize an instance of IEvent by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IEvent? IEventFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "BasicEvent":
                    return BasicEventFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IEvent: {modelType}");
                        return null;
                }
            }  // public static Aas.IEvent IEventFrom

            /// <summary>
            /// Deserialize an instance of BasicEvent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.BasicEvent? BasicEventFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeObserved = obj["observed"];
                if (nodeObserved == null)
                {
                    error = new Reporting.Error(
                        "Required property \"observed\" is missing ");
                    return null;
                }
                Aas.IReference? theObserved = DeserializeImplementation.IReferenceFrom(
                    nodeObserved,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "observed"));
                    return null;
                }
                if (theObserved == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theObserved null when error is also null");
                }

                return new Aas.BasicEvent(
                    theObserved
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications);
            }  // internal static BasicEventFrom

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Operation? OperationFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeInputVariables = obj["inputVariables"];
                if (nodeInputVariables == null)
                {
                    error = new Reporting.Error(
                        "Required property \"inputVariables\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayInputVariables = nodeInputVariables as Nodes.JsonArray;
                if (arrayInputVariables == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeInputVariables.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "inputVariables"));
                    return null;
                }
                var theInputVariables = new List<OperationVariable>(
                    arrayInputVariables.Count);
                int indexInputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayInputVariables)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inputVariables"));
                    }
                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inputVariables"));
                        return null;
                    }
                    theInputVariables.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexInputVariables++;
                }

                Nodes.JsonNode? nodeOutputVariables = obj["outputVariables"];
                if (nodeOutputVariables == null)
                {
                    error = new Reporting.Error(
                        "Required property \"outputVariables\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayOutputVariables = nodeOutputVariables as Nodes.JsonArray;
                if (arrayOutputVariables == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeOutputVariables.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "outputVariables"));
                    return null;
                }
                var theOutputVariables = new List<OperationVariable>(
                    arrayOutputVariables.Count);
                int indexOutputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayOutputVariables)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexOutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "outputVariables"));
                    }
                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexOutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "outputVariables"));
                        return null;
                    }
                    theOutputVariables.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexOutputVariables++;
                }

                Nodes.JsonNode? nodeInoutputVariables = obj["inoutputVariables"];
                if (nodeInoutputVariables == null)
                {
                    error = new Reporting.Error(
                        "Required property \"inoutputVariables\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayInoutputVariables = nodeInoutputVariables as Nodes.JsonArray;
                if (arrayInoutputVariables == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeInoutputVariables.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "inoutputVariables"));
                    return null;
                }
                var theInoutputVariables = new List<OperationVariable>(
                    arrayInoutputVariables.Count);
                int indexInoutputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayInoutputVariables)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInoutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inoutputVariables"));
                    }
                    OperationVariable? parsedItem = DeserializeImplementation.OperationVariableFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexInoutputVariables));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "inoutputVariables"));
                        return null;
                    }
                    theInoutputVariables.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexInoutputVariables++;
                }

                return new Aas.Operation(
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications,
                    theInputVariables
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theOutputVariables
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theInoutputVariables
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static OperationFrom

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.OperationVariable? OperationVariableFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing ");
                    return null;
                }
                Aas.ISubmodelElement? theValue = DeserializeImplementation.ISubmodelElementFrom(
                    nodeValue,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    return null;
                }
                if (theValue == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValue null when error is also null");
                }

                return new Aas.OperationVariable(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static OperationVariableFrom

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Capability? CapabilityFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = DeserializeImplementation.ModelingKindFrom(
                        nodeKind,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "kind"));
                        return null;
                    }
                    if (theKind == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theKind null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    error = new Reporting.Error(
                        "Required property \"qualifiers\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "qualifiers"));
                    return null;
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                    }
                    IConstraint? parsedItem = DeserializeImplementation.IConstraintFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexQualifiers));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "qualifiers"));
                        return null;
                    }
                    theQualifiers.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                return new Aas.Capability(
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications);
            }  // internal static CapabilityFrom

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ConceptDescription? ConceptDescriptionFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"id\" is missing ");
                    return null;
                }
                string? theId = DeserializeImplementation.StringFrom(
                    nodeId,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "id"));
                    return null;
                }
                if (theId == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theId null when error is also null");
                }

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = DeserializeImplementation.AdministrativeInformationFrom(
                        nodeAdministration,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "administration"));
                        return null;
                    }
                    if (theAdministration == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theAdministration null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeIsCaseOf = obj["isCaseOf"];
                if (nodeIsCaseOf == null)
                {
                    error = new Reporting.Error(
                        "Required property \"isCaseOf\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayIsCaseOf = nodeIsCaseOf as Nodes.JsonArray;
                if (arrayIsCaseOf == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeIsCaseOf.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "isCaseOf"));
                    return null;
                }
                var theIsCaseOf = new List<IReference>(
                    arrayIsCaseOf.Count);
                int indexIsCaseOf = 0;
                foreach (Nodes.JsonNode? item in arrayIsCaseOf)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexIsCaseOf));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "isCaseOf"));
                    }
                    IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexIsCaseOf));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "isCaseOf"));
                        return null;
                    }
                    theIsCaseOf.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexIsCaseOf++;
                }

                return new Aas.ConceptDescription(
                    theId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theIsCaseOf
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theDataSpecifications);
            }  // internal static ConceptDescriptionFrom

            /// <summary>
            /// Deserialize an instance of View from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.View? ViewFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    error = new Reporting.Error(
                        "Required property \"extensions\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "extensions"));
                    return null;
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                    }
                    Extension? parsedItem = DeserializeImplementation.ExtensionFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexExtensions));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "extensions"));
                        return null;
                    }
                    theExtensions.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = DeserializeImplementation.StringFrom(
                        nodeIdShort,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "idShort"));
                        return null;
                    }
                    if (theIdShort == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theIdShort null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = DeserializeImplementation.LangStringSetFrom(
                        nodeDisplayName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "displayName"));
                        return null;
                    }
                    if (theDisplayName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDisplayName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = DeserializeImplementation.StringFrom(
                        nodeCategory,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "category"));
                        return null;
                    }
                    if (theCategory == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theCategory null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = DeserializeImplementation.LangStringSetFrom(
                        nodeDescription,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "description"));
                        return null;
                    }
                    if (theDescription == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDescription null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "semanticId"));
                        return null;
                    }
                    if (theSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSemanticId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataSpecifications"));
                        return null;
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                        }
                        IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexDataSpecifications));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "dataSpecifications"));
                            return null;
                        }
                        theDataSpecifications.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeContainedElements = obj["containedElements"];
                if (nodeContainedElements == null)
                {
                    error = new Reporting.Error(
                        "Required property \"containedElements\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayContainedElements = nodeContainedElements as Nodes.JsonArray;
                if (arrayContainedElements == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeContainedElements.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "containedElements"));
                    return null;
                }
                var theContainedElements = new List<IReference>(
                    arrayContainedElements.Count);
                int indexContainedElements = 0;
                foreach (Nodes.JsonNode? item in arrayContainedElements)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexContainedElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "containedElements"));
                    }
                    IReference? parsedItem = DeserializeImplementation.IReferenceFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexContainedElements));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "containedElements"));
                        return null;
                    }
                    theContainedElements.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexContainedElements++;
                }

                return new Aas.View(
                    theExtensions
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theSemanticId,
                    theDataSpecifications,
                    theContainedElements
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static ViewFrom

            /// <summary>
            /// Deserialize an instance of IReference by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IReference? IReferenceFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "GlobalReference":
                    return GlobalReferenceFrom(
                        node, out error);
                case "ModelReference":
                    return ModelReferenceFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IReference: {modelType}");
                        return null;
                }
            }  // public static Aas.IReference IReferenceFrom

            /// <summary>
            /// Deserialize an instance of GlobalReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.GlobalReference? GlobalReferenceFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    error = new Reporting.Error(
                        "Required property \"values\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeValues.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "values"));
                    return null;
                }
                var theValues = new List<string>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                    }
                    string? parsedItem = DeserializeImplementation.StringFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValues));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "values"));
                        return null;
                    }
                    theValues.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexValues++;
                }

                return new Aas.GlobalReference(
                    theValues
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static GlobalReferenceFrom

            /// <summary>
            /// Deserialize an instance of ModelReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ModelReference? ModelReferenceFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeKeys = obj["keys"];
                if (nodeKeys == null)
                {
                    error = new Reporting.Error(
                        "Required property \"keys\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayKeys = nodeKeys as Nodes.JsonArray;
                if (arrayKeys == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeKeys.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "keys"));
                    return null;
                }
                var theKeys = new List<Key>(
                    arrayKeys.Count);
                int indexKeys = 0;
                foreach (Nodes.JsonNode? item in arrayKeys)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexKeys));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "keys"));
                    }
                    Key? parsedItem = DeserializeImplementation.KeyFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexKeys));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "keys"));
                        return null;
                    }
                    theKeys.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexKeys++;
                }

                Nodes.JsonNode? nodeReferredSemanticId = obj["referredSemanticId"];
                Aas.IReference? theReferredSemanticId = null;
                if (nodeReferredSemanticId != null)
                {
                    theReferredSemanticId = DeserializeImplementation.IReferenceFrom(
                        nodeReferredSemanticId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "referredSemanticId"));
                        return null;
                    }
                    if (theReferredSemanticId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theReferredSemanticId null when error is also null");
                    }
                }

                return new Aas.ModelReference(
                    theKeys
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theReferredSemanticId);
            }  // internal static ModelReferenceFrom

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Key? KeyFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeType = obj["type"];
                if (nodeType == null)
                {
                    error = new Reporting.Error(
                        "Required property \"type\" is missing ");
                    return null;
                }
                Aas.KeyElements? theType = DeserializeImplementation.KeyElementsFrom(
                    nodeType,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "type"));
                    return null;
                }
                if (theType == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theType null when error is also null");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing ");
                    return null;
                }
                string? theValue = DeserializeImplementation.StringFrom(
                    nodeValue,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    return null;
                }
                if (theValue == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValue null when error is also null");
                }

                return new Aas.Key(
                    theType
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static KeyFrom

            /// <summary>
            /// Deserialize the enumeration IdentifiableElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.IdentifiableElements? IdentifiableElementsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.IdentifiableElements? result = Stringification.IdentifiableElementsFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of IdentifiableElements ");
                }
                return result;
            }  // internal static IdentifiableElementsFrom

            /// <summary>
            /// Deserialize the enumeration ReferableElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ReferableElements? ReferableElementsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.ReferableElements? result = Stringification.ReferableElementsFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of ReferableElements ");
                }
                return result;
            }  // internal static ReferableElementsFrom

            /// <summary>
            /// Deserialize the enumeration KeyElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.KeyElements? KeyElementsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.KeyElements? result = Stringification.KeyElementsFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of KeyElements ");
                }
                return result;
            }  // internal static KeyElementsFrom

            /// <summary>
            /// Deserialize the enumeration SubmodelElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.SubmodelElements? SubmodelElementsFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.SubmodelElements? result = Stringification.SubmodelElementsFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of SubmodelElements ");
                }
                return result;
            }  // internal static SubmodelElementsFrom

            /// <summary>
            /// Deserialize the enumeration BuildInListTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.BuildInListTypes? BuildInListTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.BuildInListTypes? result = Stringification.BuildInListTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of BuildInListTypes ");
                }
                return result;
            }  // internal static BuildInListTypesFrom

            /// <summary>
            /// Deserialize the enumeration DecimalBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DecimalBuildInTypes? DecimalBuildInTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DecimalBuildInTypes? result = Stringification.DecimalBuildInTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DecimalBuildInTypes ");
                }
                return result;
            }  // internal static DecimalBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration DurationBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DurationBuildInTypes? DurationBuildInTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DurationBuildInTypes? result = Stringification.DurationBuildInTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DurationBuildInTypes ");
                }
                return result;
            }  // internal static DurationBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration PrimitiveTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.PrimitiveTypes? PrimitiveTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.PrimitiveTypes? result = Stringification.PrimitiveTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of PrimitiveTypes ");
                }
                return result;
            }  // internal static PrimitiveTypesFrom

            /// <summary>
            /// Deserialize the enumeration StringBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.StringBuildInTypes? StringBuildInTypesFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.StringBuildInTypes? result = Stringification.StringBuildInTypesFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of StringBuildInTypes ");
                }
                return result;
            }  // internal static StringBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeDef from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataTypeDef? DataTypeDefFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DataTypeDef? result = Stringification.DataTypeDefFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DataTypeDef ");
                }
                return result;
            }  // internal static DataTypeDefFrom

            public static Aas.LangStringSet LangStringSetFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                throw new System.NotImplementedException("TODO");
            }

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            public static Aas.IDataSpecificationContent? IDataSpecificationContentFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        "Expected Nodes.JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    error = new Reporting.Error(
                        "Expected a model type, but none is present");
                    return null;
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    error = new Reporting.Error(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()}");
                    return null;
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    error = new Reporting.Error(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue}");
                    return null;
                }

                switch (modelType)
                {
                case "DataSpecificationIec61360":
                    return DataSpecificationIec61360From(
                        node, out error);
                case "DataSpecificationPhysicalUnit":
                    return DataSpecificationPhysicalUnitFrom(
                        node, out error);
                    default:
                        error = new Reporting.Error(
                            $"Unexpected model type for IDataSpecificationContent: {modelType}");
                        return null;
                }
            }  // public static Aas.IDataSpecificationContent IDataSpecificationContentFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeIec61360 from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataTypeIec61360? DataTypeIec61360From(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.DataTypeIec61360? result = Stringification.DataTypeIec61360FromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of DataTypeIec61360 ");
                }
                return result;
            }  // internal static DataTypeIec61360From

            /// <summary>
            /// Deserialize the enumeration LevelType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.LevelType? LevelTypeFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;
                string? text = DeserializeImplementation.StringFrom(
                    node, out error);
                if (error != null)
                {
                    return null;
                }
                if (text == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected text null if error null");
                }
                Aas.LevelType? result = Stringification.LevelTypeFromString(text);
                if (result == null)
                {
                    error = new Reporting.Error(
                        "Not a valid JSON representation of LevelType ");
                }
                return result;
            }  // internal static LevelTypeFrom

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ValueReferencePair? ValueReferencePairFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    error = new Reporting.Error(
                        "Required property \"value\" is missing ");
                    return null;
                }
                string? theValue = DeserializeImplementation.StringFrom(
                    nodeValue,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "value"));
                    return null;
                }
                if (theValue == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValue null when error is also null");
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                if (nodeValueId == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueId\" is missing ");
                    return null;
                }
                Aas.IReference? theValueId = DeserializeImplementation.IReferenceFrom(
                    nodeValueId,
                    out error);
                if (error != null)
                {
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueId"));
                    return null;
                }
                if (theValueId == null)
                {
                    throw new System.InvalidOperationException(
                        "Unexpected theValueId null when error is also null");
                }

                return new Aas.ValueReferencePair(
                    theValue
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"),
                    theValueId
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static ValueReferencePairFrom

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.ValueList? ValueListFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeValueReferencePairs = obj["valueReferencePairs"];
                if (nodeValueReferencePairs == null)
                {
                    error = new Reporting.Error(
                        "Required property \"valueReferencePairs\" is missing ");
                    return null;
                }
                Nodes.JsonArray? arrayValueReferencePairs = nodeValueReferencePairs as Nodes.JsonArray;
                if (arrayValueReferencePairs == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonArray, but got {nodeValueReferencePairs.GetType()}");
                    error._pathSegments.AddFirst(
                        new Reporting.NameSegment(
                            "valueReferencePairs"));
                    return null;
                }
                var theValueReferencePairs = new List<ValueReferencePair>(
                    arrayValueReferencePairs.Count);
                int indexValueReferencePairs = 0;
                foreach (Nodes.JsonNode? item in arrayValueReferencePairs)
                {
                    if (item == null)
                    {
                        error = new Reporting.Error(
                            "Expected a non-null item, but got a null");
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValueReferencePairs));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueReferencePairs"));
                    }
                    ValueReferencePair? parsedItem = DeserializeImplementation.ValueReferencePairFrom(
                        item ?? throw new System.InvalidOperationException(),
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.IndexSegment(
                                indexValueReferencePairs));
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueReferencePairs"));
                        return null;
                    }
                    theValueReferencePairs.Add(
                        parsedItem
                            ?? throw new System.InvalidOperationException(
                                "Unexpected result null when error is null"));
                    indexValueReferencePairs++;
                }

                return new Aas.ValueList(
                    theValueReferencePairs
                         ?? throw new System.InvalidOperationException(
                            "Unexpected null, had to be handled before"));
            }  // internal static ValueListFrom

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataSpecificationIec61360? DataSpecificationIec61360From(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodePreferredName = obj["preferredName"];
                Aas.LangStringSet? thePreferredName = null;
                if (nodePreferredName != null)
                {
                    thePreferredName = DeserializeImplementation.LangStringSetFrom(
                        nodePreferredName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "preferredName"));
                        return null;
                    }
                    if (thePreferredName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected thePreferredName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeShortName = obj["shortName"];
                Aas.LangStringSet? theShortName = null;
                if (nodeShortName != null)
                {
                    theShortName = DeserializeImplementation.LangStringSetFrom(
                        nodeShortName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "shortName"));
                        return null;
                    }
                    if (theShortName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theShortName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeUnit = obj["unit"];
                string? theUnit = null;
                if (nodeUnit != null)
                {
                    theUnit = DeserializeImplementation.StringFrom(
                        nodeUnit,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unit"));
                        return null;
                    }
                    if (theUnit == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theUnit null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeUnitId = obj["unitId"];
                Aas.IReference? theUnitId = null;
                if (nodeUnitId != null)
                {
                    theUnitId = DeserializeImplementation.IReferenceFrom(
                        nodeUnitId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitId"));
                        return null;
                    }
                    if (theUnitId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theUnitId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSourceOfDefinition = obj["sourceOfDefinition"];
                string? theSourceOfDefinition = null;
                if (nodeSourceOfDefinition != null)
                {
                    theSourceOfDefinition = DeserializeImplementation.StringFrom(
                        nodeSourceOfDefinition,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "sourceOfDefinition"));
                        return null;
                    }
                    if (theSourceOfDefinition == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSourceOfDefinition null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSymbol = obj["symbol"];
                string? theSymbol = null;
                if (nodeSymbol != null)
                {
                    theSymbol = DeserializeImplementation.StringFrom(
                        nodeSymbol,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "symbol"));
                        return null;
                    }
                    if (theSymbol == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSymbol null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDataType = obj["dataType"];
                Aas.DataTypeIec61360? theDataType = null;
                if (nodeDataType != null)
                {
                    theDataType = DeserializeImplementation.DataTypeIec61360From(
                        nodeDataType,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dataType"));
                        return null;
                    }
                    if (theDataType == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDataType null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDefinition = obj["definition"];
                Aas.LangStringSet? theDefinition = null;
                if (nodeDefinition != null)
                {
                    theDefinition = DeserializeImplementation.LangStringSetFrom(
                        nodeDefinition,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "definition"));
                        return null;
                    }
                    if (theDefinition == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDefinition null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueFormat = obj["valueFormat"];
                string? theValueFormat = null;
                if (nodeValueFormat != null)
                {
                    theValueFormat = DeserializeImplementation.StringFrom(
                        nodeValueFormat,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueFormat"));
                        return null;
                    }
                    if (theValueFormat == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueFormat null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueList = obj["valueList"];
                Aas.ValueList? theValueList = null;
                if (nodeValueList != null)
                {
                    theValueList = DeserializeImplementation.ValueListFrom(
                        nodeValueList,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueList"));
                        return null;
                    }
                    if (theValueList == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueList null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = DeserializeImplementation.StringFrom(
                        nodeValue,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "value"));
                        return null;
                    }
                    if (theValue == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValue null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = DeserializeImplementation.IReferenceFrom(
                        nodeValueId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "valueId"));
                        return null;
                    }
                    if (theValueId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theValueId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeLevelType = obj["levelType"];
                Aas.LevelType? theLevelType = null;
                if (nodeLevelType != null)
                {
                    theLevelType = DeserializeImplementation.LevelTypeFrom(
                        nodeLevelType,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "levelType"));
                        return null;
                    }
                    if (theLevelType == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theLevelType null when error is also null");
                    }
                }

                return new Aas.DataSpecificationIec61360(
                    thePreferredName,
                    theShortName,
                    theUnit,
                    theUnitId,
                    theSourceOfDefinition,
                    theSymbol,
                    theDataType,
                    theDefinition,
                    theValueFormat,
                    theValueList,
                    theValue,
                    theValueId,
                    theLevelType);
            }  // internal static DataSpecificationIec61360From

            /// <summary>
            /// Deserialize an instance of DataSpecificationPhysicalUnit from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.DataSpecificationPhysicalUnit? DataSpecificationPhysicalUnitFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeUnitName = obj["unitName"];
                string? theUnitName = null;
                if (nodeUnitName != null)
                {
                    theUnitName = DeserializeImplementation.StringFrom(
                        nodeUnitName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitName"));
                        return null;
                    }
                    if (theUnitName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theUnitName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeUnitSymbol = obj["unitSymbol"];
                string? theUnitSymbol = null;
                if (nodeUnitSymbol != null)
                {
                    theUnitSymbol = DeserializeImplementation.StringFrom(
                        nodeUnitSymbol,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "unitSymbol"));
                        return null;
                    }
                    if (theUnitSymbol == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theUnitSymbol null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDefinition = obj["definition"];
                Aas.LangStringSet? theDefinition = null;
                if (nodeDefinition != null)
                {
                    theDefinition = DeserializeImplementation.LangStringSetFrom(
                        nodeDefinition,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "definition"));
                        return null;
                    }
                    if (theDefinition == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDefinition null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSiNotation = obj["siNotation"];
                string? theSiNotation = null;
                if (nodeSiNotation != null)
                {
                    theSiNotation = DeserializeImplementation.StringFrom(
                        nodeSiNotation,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "siNotation"));
                        return null;
                    }
                    if (theSiNotation == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSiNotation null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeDinNotation = obj["dinNotation"];
                string? theDinNotation = null;
                if (nodeDinNotation != null)
                {
                    theDinNotation = DeserializeImplementation.StringFrom(
                        nodeDinNotation,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "dinNotation"));
                        return null;
                    }
                    if (theDinNotation == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theDinNotation null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeEceName = obj["eceName"];
                string? theEceName = null;
                if (nodeEceName != null)
                {
                    theEceName = DeserializeImplementation.StringFrom(
                        nodeEceName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "eceName"));
                        return null;
                    }
                    if (theEceName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theEceName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeEceCode = obj["eceCode"];
                string? theEceCode = null;
                if (nodeEceCode != null)
                {
                    theEceCode = DeserializeImplementation.StringFrom(
                        nodeEceCode,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "eceCode"));
                        return null;
                    }
                    if (theEceCode == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theEceCode null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeNistName = obj["nistName"];
                string? theNistName = null;
                if (nodeNistName != null)
                {
                    theNistName = DeserializeImplementation.StringFrom(
                        nodeNistName,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "nistName"));
                        return null;
                    }
                    if (theNistName == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theNistName null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSourceOfDefinition = obj["sourceOfDefinition"];
                string? theSourceOfDefinition = null;
                if (nodeSourceOfDefinition != null)
                {
                    theSourceOfDefinition = DeserializeImplementation.StringFrom(
                        nodeSourceOfDefinition,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "sourceOfDefinition"));
                        return null;
                    }
                    if (theSourceOfDefinition == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSourceOfDefinition null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeConversionFactor = obj["conversionFactor"];
                string? theConversionFactor = null;
                if (nodeConversionFactor != null)
                {
                    theConversionFactor = DeserializeImplementation.StringFrom(
                        nodeConversionFactor,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "conversionFactor"));
                        return null;
                    }
                    if (theConversionFactor == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theConversionFactor null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeRegistrationAuthorityId = obj["registrationAuthorityId"];
                string? theRegistrationAuthorityId = null;
                if (nodeRegistrationAuthorityId != null)
                {
                    theRegistrationAuthorityId = DeserializeImplementation.StringFrom(
                        nodeRegistrationAuthorityId,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "registrationAuthorityId"));
                        return null;
                    }
                    if (theRegistrationAuthorityId == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theRegistrationAuthorityId null when error is also null");
                    }
                }

                Nodes.JsonNode? nodeSupplier = obj["supplier"];
                string? theSupplier = null;
                if (nodeSupplier != null)
                {
                    theSupplier = DeserializeImplementation.StringFrom(
                        nodeSupplier,
                        out error);
                    if (error != null)
                    {
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "supplier"));
                        return null;
                    }
                    if (theSupplier == null)
                    {
                        throw new System.InvalidOperationException(
                            "Unexpected theSupplier null when error is also null");
                    }
                }

                return new Aas.DataSpecificationPhysicalUnit(
                    theUnitName,
                    theUnitSymbol,
                    theDefinition,
                    theSiNotation,
                    theDinNotation,
                    theEceName,
                    theEceCode,
                    theNistName,
                    theSourceOfDefinition,
                    theConversionFactor,
                    theRegistrationAuthorityId,
                    theSupplier);
            }  // internal static DataSpecificationPhysicalUnitFrom

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="error">Error, if any, during the deserialization</param>
            internal static Aas.Environment? EnvironmentFrom(
                Nodes.JsonNode node,
                out Reporting.Error? error)
            {
                error = null;

                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    error = new Reporting.Error(
                        $"Expected a JsonObject, but got {node.GetType()}");
                    return null;
                }

                Nodes.JsonNode? nodeAssetAdministrationShells = obj["assetAdministrationShells"];
                List<AssetAdministrationShell>? theAssetAdministrationShells = null;
                if (nodeAssetAdministrationShells != null)
                {
                    Nodes.JsonArray? arrayAssetAdministrationShells = nodeAssetAdministrationShells as Nodes.JsonArray;
                    if (arrayAssetAdministrationShells == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeAssetAdministrationShells.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "assetAdministrationShells"));
                        return null;
                    }
                    theAssetAdministrationShells = new List<AssetAdministrationShell>(
                        arrayAssetAdministrationShells.Count);
                    int indexAssetAdministrationShells = 0;
                    foreach (Nodes.JsonNode? item in arrayAssetAdministrationShells)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexAssetAdministrationShells));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "assetAdministrationShells"));
                        }
                        AssetAdministrationShell? parsedItem = DeserializeImplementation.AssetAdministrationShellFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexAssetAdministrationShells));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "assetAdministrationShells"));
                            return null;
                        }
                        theAssetAdministrationShells.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexAssetAdministrationShells++;
                    }
                }

                Nodes.JsonNode? nodeSubmodels = obj["submodels"];
                List<Submodel>? theSubmodels = null;
                if (nodeSubmodels != null)
                {
                    Nodes.JsonArray? arraySubmodels = nodeSubmodels as Nodes.JsonArray;
                    if (arraySubmodels == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeSubmodels.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "submodels"));
                        return null;
                    }
                    theSubmodels = new List<Submodel>(
                        arraySubmodels.Count);
                    int indexSubmodels = 0;
                    foreach (Nodes.JsonNode? item in arraySubmodels)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                        }
                        Submodel? parsedItem = DeserializeImplementation.SubmodelFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexSubmodels));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "submodels"));
                            return null;
                        }
                        theSubmodels.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexSubmodels++;
                    }
                }

                Nodes.JsonNode? nodeConceptDescriptions = obj["conceptDescriptions"];
                List<ConceptDescription>? theConceptDescriptions = null;
                if (nodeConceptDescriptions != null)
                {
                    Nodes.JsonArray? arrayConceptDescriptions = nodeConceptDescriptions as Nodes.JsonArray;
                    if (arrayConceptDescriptions == null)
                    {
                        error = new Reporting.Error(
                            $"Expected a JsonArray, but got {nodeConceptDescriptions.GetType()}");
                        error._pathSegments.AddFirst(
                            new Reporting.NameSegment(
                                "conceptDescriptions"));
                        return null;
                    }
                    theConceptDescriptions = new List<ConceptDescription>(
                        arrayConceptDescriptions.Count);
                    int indexConceptDescriptions = 0;
                    foreach (Nodes.JsonNode? item in arrayConceptDescriptions)
                    {
                        if (item == null)
                        {
                            error = new Reporting.Error(
                                "Expected a non-null item, but got a null");
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexConceptDescriptions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "conceptDescriptions"));
                        }
                        ConceptDescription? parsedItem = DeserializeImplementation.ConceptDescriptionFrom(
                            item ?? throw new System.InvalidOperationException(),
                            out error);
                        if (error != null)
                        {
                            error._pathSegments.AddFirst(
                                new Reporting.IndexSegment(
                                    indexConceptDescriptions));
                            error._pathSegments.AddFirst(
                                new Reporting.NameSegment(
                                    "conceptDescriptions"));
                            return null;
                        }
                        theConceptDescriptions.Add(
                            parsedItem
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected result null when error is null"));
                        indexConceptDescriptions++;
                    }
                }

                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions);
            }  // internal static EnvironmentFrom
        }  // public static class DeserializeImplementation

        /// <summary>
        /// Represent a critical error during the deserialization.
        /// </summary>
        public class Exception : System.Exception
        {
            public readonly string Path;
            public readonly string Cause;
            public Exception(string path, string cause)
                : base($"{cause} at: {path}")
            {
                Path = path;
                Cause = cause;
            }
        }

        /// <summary>
        /// Deserialize instances of meta-model classes from JSON nodes.
        /// </summary>
        /// <example>
        /// Here is an example how to parse an instance of IHasSemantics:
        /// <code>
        /// string someString = "... some JSON ...";
        /// var node = System.Text.Json.Nodes.JsonNode.Parse(someString);
        /// Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom(
        ///     node);
        /// </code>
        /// </example>
        public static class Deserialize
        {
            /// <summary>
            /// Deserialize an instance of IHasSemantics from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasSemantics.
            /// </exception>
            public static Aas.IHasSemantics IHasSemanticsFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasSemantics? result = DeserializeImplementation.IHasSemanticsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Extension.
            /// </exception>
            public static Aas.Extension ExtensionFrom(
                Nodes.JsonNode node)
            {
                Aas.Extension? result = DeserializeImplementation.ExtensionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasExtensions from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasExtensions.
            /// </exception>
            public static Aas.IHasExtensions IHasExtensionsFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasExtensions? result = DeserializeImplementation.IHasExtensionsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IReferable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IReferable.
            /// </exception>
            public static Aas.IReferable IReferableFrom(
                Nodes.JsonNode node)
            {
                Aas.IReferable? result = DeserializeImplementation.IReferableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IIdentifiable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IIdentifiable.
            /// </exception>
            public static Aas.IIdentifiable IIdentifiableFrom(
                Nodes.JsonNode node)
            {
                Aas.IIdentifiable? result = DeserializeImplementation.IIdentifiableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ModelingKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ModelingKind.
            /// </exception>
            public static Aas.ModelingKind ModelingKindFrom(
                Nodes.JsonNode node)
            {
                Aas.ModelingKind? result = DeserializeImplementation.ModelingKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasKind.
            /// </exception>
            public static Aas.IHasKind IHasKindFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasKind? result = DeserializeImplementation.IHasKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IHasDataSpecification.
            /// </exception>
            public static Aas.IHasDataSpecification IHasDataSpecificationFrom(
                Nodes.JsonNode node)
            {
                Aas.IHasDataSpecification? result = DeserializeImplementation.IHasDataSpecificationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AdministrativeInformation.
            /// </exception>
            public static Aas.AdministrativeInformation AdministrativeInformationFrom(
                Nodes.JsonNode node)
            {
                Aas.AdministrativeInformation? result = DeserializeImplementation.AdministrativeInformationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IConstraint from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IConstraint.
            /// </exception>
            public static Aas.IConstraint IConstraintFrom(
                Nodes.JsonNode node)
            {
                Aas.IConstraint? result = DeserializeImplementation.IConstraintFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IQualifiable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IQualifiable.
            /// </exception>
            public static Aas.IQualifiable IQualifiableFrom(
                Nodes.JsonNode node)
            {
                Aas.IQualifiable? result = DeserializeImplementation.IQualifiableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Qualifier.
            /// </exception>
            public static Aas.Qualifier QualifierFrom(
                Nodes.JsonNode node)
            {
                Aas.Qualifier? result = DeserializeImplementation.QualifierFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Formula from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Formula.
            /// </exception>
            public static Aas.Formula FormulaFrom(
                Nodes.JsonNode node)
            {
                Aas.Formula? result = DeserializeImplementation.FormulaFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetAdministrationShell.
            /// </exception>
            public static Aas.AssetAdministrationShell AssetAdministrationShellFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetAdministrationShell? result = DeserializeImplementation.AssetAdministrationShellFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetInformation.
            /// </exception>
            public static Aas.AssetInformation AssetInformationFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetInformation? result = DeserializeImplementation.AssetInformationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AssetKind from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AssetKind.
            /// </exception>
            public static Aas.AssetKind AssetKindFrom(
                Nodes.JsonNode node)
            {
                Aas.AssetKind? result = DeserializeImplementation.AssetKindFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IdentifierKeyValuePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IdentifierKeyValuePair.
            /// </exception>
            public static Aas.IdentifierKeyValuePair IdentifierKeyValuePairFrom(
                Nodes.JsonNode node)
            {
                Aas.IdentifierKeyValuePair? result = DeserializeImplementation.IdentifierKeyValuePairFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Submodel.
            /// </exception>
            public static Aas.Submodel SubmodelFrom(
                Nodes.JsonNode node)
            {
                Aas.Submodel? result = DeserializeImplementation.SubmodelFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ISubmodelElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ISubmodelElement.
            /// </exception>
            public static Aas.ISubmodelElement ISubmodelElementFrom(
                Nodes.JsonNode node)
            {
                Aas.ISubmodelElement? result = DeserializeImplementation.ISubmodelElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IRelationshipElement.
            /// </exception>
            public static Aas.IRelationshipElement IRelationshipElementFrom(
                Nodes.JsonNode node)
            {
                Aas.IRelationshipElement? result = DeserializeImplementation.IRelationshipElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SubmodelElementList.
            /// </exception>
            public static Aas.SubmodelElementList SubmodelElementListFrom(
                Nodes.JsonNode node)
            {
                Aas.SubmodelElementList? result = DeserializeImplementation.SubmodelElementListFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElementStruct from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SubmodelElementStruct.
            /// </exception>
            public static Aas.SubmodelElementStruct SubmodelElementStructFrom(
                Nodes.JsonNode node)
            {
                Aas.SubmodelElementStruct? result = DeserializeImplementation.SubmodelElementStructFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IDataElement.
            /// </exception>
            public static Aas.IDataElement IDataElementFrom(
                Nodes.JsonNode node)
            {
                Aas.IDataElement? result = DeserializeImplementation.IDataElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Property.
            /// </exception>
            public static Aas.Property PropertyFrom(
                Nodes.JsonNode node)
            {
                Aas.Property? result = DeserializeImplementation.PropertyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of MultiLanguageProperty.
            /// </exception>
            public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom(
                Nodes.JsonNode node)
            {
                Aas.MultiLanguageProperty? result = DeserializeImplementation.MultiLanguagePropertyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Range.
            /// </exception>
            public static Aas.Range RangeFrom(
                Nodes.JsonNode node)
            {
                Aas.Range? result = DeserializeImplementation.RangeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ReferenceElement.
            /// </exception>
            public static Aas.ReferenceElement ReferenceElementFrom(
                Nodes.JsonNode node)
            {
                Aas.ReferenceElement? result = DeserializeImplementation.ReferenceElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Blob.
            /// </exception>
            public static Aas.Blob BlobFrom(
                Nodes.JsonNode node)
            {
                Aas.Blob? result = DeserializeImplementation.BlobFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of File from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of File.
            /// </exception>
            public static Aas.File FileFrom(
                Nodes.JsonNode node)
            {
                Aas.File? result = DeserializeImplementation.FileFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of AnnotatedRelationshipElement.
            /// </exception>
            public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(
                Nodes.JsonNode node)
            {
                Aas.AnnotatedRelationshipElement? result = DeserializeImplementation.AnnotatedRelationshipElementFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of EntityType from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of EntityType.
            /// </exception>
            public static Aas.EntityType EntityTypeFrom(
                Nodes.JsonNode node)
            {
                Aas.EntityType? result = DeserializeImplementation.EntityTypeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Entity.
            /// </exception>
            public static Aas.Entity EntityFrom(
                Nodes.JsonNode node)
            {
                Aas.Entity? result = DeserializeImplementation.EntityFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IEvent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IEvent.
            /// </exception>
            public static Aas.IEvent IEventFrom(
                Nodes.JsonNode node)
            {
                Aas.IEvent? result = DeserializeImplementation.IEventFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of BasicEvent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of BasicEvent.
            /// </exception>
            public static Aas.BasicEvent BasicEventFrom(
                Nodes.JsonNode node)
            {
                Aas.BasicEvent? result = DeserializeImplementation.BasicEventFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Operation.
            /// </exception>
            public static Aas.Operation OperationFrom(
                Nodes.JsonNode node)
            {
                Aas.Operation? result = DeserializeImplementation.OperationFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of OperationVariable.
            /// </exception>
            public static Aas.OperationVariable OperationVariableFrom(
                Nodes.JsonNode node)
            {
                Aas.OperationVariable? result = DeserializeImplementation.OperationVariableFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Capability.
            /// </exception>
            public static Aas.Capability CapabilityFrom(
                Nodes.JsonNode node)
            {
                Aas.Capability? result = DeserializeImplementation.CapabilityFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ConceptDescription.
            /// </exception>
            public static Aas.ConceptDescription ConceptDescriptionFrom(
                Nodes.JsonNode node)
            {
                Aas.ConceptDescription? result = DeserializeImplementation.ConceptDescriptionFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of View from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of View.
            /// </exception>
            public static Aas.View ViewFrom(
                Nodes.JsonNode node)
            {
                Aas.View? result = DeserializeImplementation.ViewFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IReference.
            /// </exception>
            public static Aas.IReference IReferenceFrom(
                Nodes.JsonNode node)
            {
                Aas.IReference? result = DeserializeImplementation.IReferenceFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of GlobalReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of GlobalReference.
            /// </exception>
            public static Aas.GlobalReference GlobalReferenceFrom(
                Nodes.JsonNode node)
            {
                Aas.GlobalReference? result = DeserializeImplementation.GlobalReferenceFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ModelReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ModelReference.
            /// </exception>
            public static Aas.ModelReference ModelReferenceFrom(
                Nodes.JsonNode node)
            {
                Aas.ModelReference? result = DeserializeImplementation.ModelReferenceFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Key.
            /// </exception>
            public static Aas.Key KeyFrom(
                Nodes.JsonNode node)
            {
                Aas.Key? result = DeserializeImplementation.KeyFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IdentifiableElements from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IdentifiableElements.
            /// </exception>
            public static Aas.IdentifiableElements IdentifiableElementsFrom(
                Nodes.JsonNode node)
            {
                Aas.IdentifiableElements? result = DeserializeImplementation.IdentifiableElementsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ReferableElements from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ReferableElements.
            /// </exception>
            public static Aas.ReferableElements ReferableElementsFrom(
                Nodes.JsonNode node)
            {
                Aas.ReferableElements? result = DeserializeImplementation.ReferableElementsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of KeyElements from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of KeyElements.
            /// </exception>
            public static Aas.KeyElements KeyElementsFrom(
                Nodes.JsonNode node)
            {
                Aas.KeyElements? result = DeserializeImplementation.KeyElementsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of SubmodelElements from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of SubmodelElements.
            /// </exception>
            public static Aas.SubmodelElements SubmodelElementsFrom(
                Nodes.JsonNode node)
            {
                Aas.SubmodelElements? result = DeserializeImplementation.SubmodelElementsFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of BuildInListTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of BuildInListTypes.
            /// </exception>
            public static Aas.BuildInListTypes BuildInListTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.BuildInListTypes? result = DeserializeImplementation.BuildInListTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DecimalBuildInTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DecimalBuildInTypes.
            /// </exception>
            public static Aas.DecimalBuildInTypes DecimalBuildInTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.DecimalBuildInTypes? result = DeserializeImplementation.DecimalBuildInTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DurationBuildInTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DurationBuildInTypes.
            /// </exception>
            public static Aas.DurationBuildInTypes DurationBuildInTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.DurationBuildInTypes? result = DeserializeImplementation.DurationBuildInTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of PrimitiveTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of PrimitiveTypes.
            /// </exception>
            public static Aas.PrimitiveTypes PrimitiveTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.PrimitiveTypes? result = DeserializeImplementation.PrimitiveTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of StringBuildInTypes from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of StringBuildInTypes.
            /// </exception>
            public static Aas.StringBuildInTypes StringBuildInTypesFrom(
                Nodes.JsonNode node)
            {
                Aas.StringBuildInTypes? result = DeserializeImplementation.StringBuildInTypesFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataTypeDef from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataTypeDef.
            /// </exception>
            public static Aas.DataTypeDef DataTypeDefFrom(
                Nodes.JsonNode node)
            {
                Aas.DataTypeDef? result = DeserializeImplementation.DataTypeDefFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LangStringSet from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of LangStringSet.
            /// </exception>
            public static Aas.LangStringSet LangStringSetFrom(
                Nodes.JsonNode node)
            {
                Aas.LangStringSet? result = DeserializeImplementation.LangStringSetFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of IDataSpecificationContent.
            /// </exception>
            public static Aas.IDataSpecificationContent IDataSpecificationContentFrom(
                Nodes.JsonNode node)
            {
                Aas.IDataSpecificationContent? result = DeserializeImplementation.IDataSpecificationContentFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataTypeIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataTypeIec61360.
            /// </exception>
            public static Aas.DataTypeIec61360 DataTypeIec61360From(
                Nodes.JsonNode node)
            {
                Aas.DataTypeIec61360? result = DeserializeImplementation.DataTypeIec61360From(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of LevelType from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of LevelType.
            /// </exception>
            public static Aas.LevelType LevelTypeFrom(
                Nodes.JsonNode node)
            {
                Aas.LevelType? result = DeserializeImplementation.LevelTypeFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ValueReferencePair.
            /// </exception>
            public static Aas.ValueReferencePair ValueReferencePairFrom(
                Nodes.JsonNode node)
            {
                Aas.ValueReferencePair? result = DeserializeImplementation.ValueReferencePairFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of ValueList.
            /// </exception>
            public static Aas.ValueList ValueListFrom(
                Nodes.JsonNode node)
            {
                Aas.ValueList? result = DeserializeImplementation.ValueListFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataSpecificationIec61360.
            /// </exception>
            public static Aas.DataSpecificationIec61360 DataSpecificationIec61360From(
                Nodes.JsonNode node)
            {
                Aas.DataSpecificationIec61360? result = DeserializeImplementation.DataSpecificationIec61360From(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of DataSpecificationPhysicalUnit from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of DataSpecificationPhysicalUnit.
            /// </exception>
            public static Aas.DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(
                Nodes.JsonNode node)
            {
                Aas.DataSpecificationPhysicalUnit? result = DeserializeImplementation.DataSpecificationPhysicalUnitFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <exception cref="Jsonization.Exception">
            /// Thrown when <paramref name="node" /> is not a valid JSON
            /// representation of Environment.
            /// </exception>
            public static Aas.Environment EnvironmentFrom(
                Nodes.JsonNode node)
            {
                Aas.Environment? result = DeserializeImplementation.EnvironmentFrom(
                    node,
                    out Reporting.Error? error);
                if (error != null)
                {
                    throw new Jsonization.Exception(
                        Reporting.GenerateJsonPath(error.PathSegments),
                        error.Cause);
                }
                return result
                    ?? throw new System.InvalidOperationException(
                        "Unexpected output null when error is null");
            }
        }  // public static class Deserialize

        internal class Transformer
            : Visitation.AbstractTransformer<Nodes.JsonObject>
        {
            /// <summary>
            /// Convert <paramref name="that" /> 64-bit long integer to a JSON value.
            /// </summary>
            /// <param name="that">value to be converted</param>
            /// <exception name="System.ArgumentException>
            /// Thrown if <paramref name="that"> is not within the range where it
            /// can be losslessly converted to a double floating number.
            /// </exception>
            private static Nodes.JsonValue ToJsonValue(long that)
            {
                // We need to check that we can perform a lossless conversion.
                if ((long)((double)that) != that)
                {
                    throw new System.ArgumentException(
                        $"The number can not be losslessly represented in JSON: {that}");
                }
                return Nodes.JsonValue.Create(that);
            }

            public override Nodes.JsonObject Transform(Aas.Extension that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["name"] = Nodes.JsonValue.Create(
                    that.Name);

                if (that.ValueType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueType
                        ?? throw new System.InvalidOperationException();
                    result["valueType"] = Serialize.DataTypeDefToJsonValue(
                        value);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.RefersTo != null)
                {
                    result["refersTo"] = Transform(
                        that.RefersTo);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AdministrativeInformation that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.Version != null)
                {
                    result["version"] = Nodes.JsonValue.Create(
                        that.Version);
                }

                if (that.Revision != null)
                {
                    result["revision"] = Nodes.JsonValue.Create(
                        that.Revision);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Qualifier that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["type"] = Nodes.JsonValue.Create(
                    that.Type);

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Formula that)
            {
                var result = new Nodes.JsonObject();

                if (that.DependsOn != null)
                {
                    var arrayDependsOn = new Nodes.JsonArray();
                    foreach (IReference item in that.DependsOn)
                    {
                        arrayDependsOn.Add(
                            Transform(
                                item));
                    }
                    result["dependsOn"] = arrayDependsOn;
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetAdministrationShell that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.DerivedFrom != null)
                {
                    result["derivedFrom"] = Transform(
                        that.DerivedFrom);
                }

                result["assetInformation"] = Transform(
                    that.AssetInformation);

                if (that.Submodels != null)
                {
                    var arraySubmodels = new Nodes.JsonArray();
                    foreach (ModelReference item in that.Submodels)
                    {
                        arraySubmodels.Add(
                            Transform(
                                item));
                    }
                    result["submodels"] = arraySubmodels;
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetInformation that)
            {
                var result = new Nodes.JsonObject();

                result["assetKind"] = Serialize.AssetKindToJsonValue(
                    that.AssetKind);

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    result["specificAssetId"] = Transform(
                        that.SpecificAssetId);
                }

                if (that.DefaultThumbnail != null)
                {
                    result["defaultThumbnail"] = Transform(
                        that.DefaultThumbnail);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.IdentifierKeyValuePair that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["key"] = Nodes.JsonValue.Create(
                    that.Key);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                if (that.ExternalSubjectId != null)
                {
                    result["externalSubjectId"] = Transform(
                        that.ExternalSubjectId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Submodel that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arraySubmodelElements = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.SubmodelElements)
                {
                    arraySubmodelElements.Add(
                        Transform(
                            item));
                }
                result["submodelElements"] = arraySubmodelElements;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementList that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["submodelElementTypeValues"] = Serialize.SubmodelElementsToJsonValue(
                    that.SubmodelElementTypeValues);

                var arrayValues = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Values)
                {
                    arrayValues.Add(
                        Transform(
                            item));
                }
                result["values"] = arrayValues;

                if (that.SemanticIdValues != null)
                {
                    result["semanticIdValues"] = Transform(
                        that.SemanticIdValues);
                }

                if (that.ValueTypeValues != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueTypeValues
                        ?? throw new System.InvalidOperationException();
                    result["valueTypeValues"] = Serialize.DataTypeDefToJsonValue(
                        value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementStruct that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayValues = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Values)
                {
                    arrayValues.Add(
                        Transform(
                            item));
                }
                result["values"] = arrayValues;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Property that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.MultiLanguageProperty that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.Value != null)
                {
                    result["value"] = Transform(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Range that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Min != null)
                {
                    result["min"] = Nodes.JsonValue.Create(
                        that.Min);
                }

                if (that.Max != null)
                {
                    result["max"] = Nodes.JsonValue.Create(
                        that.Max);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ReferenceElement that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.Value != null)
                {
                    result["value"] = Transform(
                        that.Value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Blob that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["mimeType"] = Nodes.JsonValue.Create(
                    that.MimeType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        System.Convert.ToBase64String(
                            that.Value));
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.File that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["mimeType"] = Nodes.JsonValue.Create(
                    that.MimeType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AnnotatedRelationshipElement that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["first"] = Transform(
                    that.First);

                result["second"] = Transform(
                    that.Second);

                var arrayAnnotation = new Nodes.JsonArray();
                foreach (IDataElement item in that.Annotation)
                {
                    arrayAnnotation.Add(
                        Transform(
                            item));
                }
                result["annotation"] = arrayAnnotation;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Entity that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["entityType"] = Serialize.EntityTypeToJsonValue(
                    that.EntityType);

                var arrayStatements = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Statements)
                {
                    arrayStatements.Add(
                        Transform(
                            item));
                }
                result["statements"] = arrayStatements;

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    result["specificAssetId"] = Transform(
                        that.SpecificAssetId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.BasicEvent that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                result["observed"] = Transform(
                    that.Observed);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Operation that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayInputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.InputVariables)
                {
                    arrayInputVariables.Add(
                        Transform(
                            item));
                }
                result["inputVariables"] = arrayInputVariables;

                var arrayOutputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.OutputVariables)
                {
                    arrayOutputVariables.Add(
                        Transform(
                            item));
                }
                result["outputVariables"] = arrayOutputVariables;

                var arrayInoutputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.InoutputVariables)
                {
                    arrayInoutputVariables.Add(
                        Transform(
                            item));
                }
                result["inoutputVariables"] = arrayInoutputVariables;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.OperationVariable that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Transform(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Capability that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ConceptDescription that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayIsCaseOf = new Nodes.JsonArray();
                foreach (IReference item in that.IsCaseOf)
                {
                    arrayIsCaseOf.Add(
                        Transform(
                            item));
                }
                result["isCaseOf"] = arrayIsCaseOf;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.View that)
            {
                var result = new Nodes.JsonObject();

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayContainedElements = new Nodes.JsonArray();
                foreach (IReference item in that.ContainedElements)
                {
                    arrayContainedElements.Add(
                        Transform(
                            item));
                }
                result["containedElements"] = arrayContainedElements;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.GlobalReference that)
            {
                var result = new Nodes.JsonObject();

                var arrayValues = new Nodes.JsonArray();
                foreach (string item in that.Values)
                {
                    arrayValues.Add(
                        Nodes.JsonValue.Create(
                            item));
                }
                result["values"] = arrayValues;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ModelReference that)
            {
                var result = new Nodes.JsonObject();

                var arrayKeys = new Nodes.JsonArray();
                foreach (Key item in that.Keys)
                {
                    arrayKeys.Add(
                        Transform(
                            item));
                }
                result["keys"] = arrayKeys;

                if (that.ReferredSemanticId != null)
                {
                    result["referredSemanticId"] = Transform(
                        that.ReferredSemanticId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Key that)
            {
                var result = new Nodes.JsonObject();

                result["type"] = Serialize.KeyElementsToJsonValue(
                    that.Type);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.LangStringSet that)
            {
                throw new System.NotImplementedException("TODO");
            }

            public override Nodes.JsonObject Transform(Aas.ValueReferencePair that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                result["valueId"] = Transform(
                    that.ValueId);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ValueList that)
            {
                var result = new Nodes.JsonObject();

                var arrayValueReferencePairs = new Nodes.JsonArray();
                foreach (ValueReferencePair item in that.ValueReferencePairs)
                {
                    arrayValueReferencePairs.Add(
                        Transform(
                            item));
                }
                result["valueReferencePairs"] = arrayValueReferencePairs;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationIec61360 that)
            {
                var result = new Nodes.JsonObject();

                if (that.PreferredName != null)
                {
                    result["preferredName"] = Transform(
                        that.PreferredName);
                }

                if (that.ShortName != null)
                {
                    result["shortName"] = Transform(
                        that.ShortName);
                }

                if (that.Unit != null)
                {
                    result["unit"] = Nodes.JsonValue.Create(
                        that.Unit);
                }

                if (that.UnitId != null)
                {
                    result["unitId"] = Transform(
                        that.UnitId);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.Symbol != null)
                {
                    result["symbol"] = Nodes.JsonValue.Create(
                        that.Symbol);
                }

                if (that.DataType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeIec61360 value = that.DataType
                        ?? throw new System.InvalidOperationException();
                    result["dataType"] = Serialize.DataTypeIec61360ToJsonValue(
                        value);
                }

                if (that.Definition != null)
                {
                    result["definition"] = Transform(
                        that.Definition);
                }

                if (that.ValueFormat != null)
                {
                    result["valueFormat"] = Nodes.JsonValue.Create(
                        that.ValueFormat);
                }

                if (that.ValueList != null)
                {
                    result["valueList"] = Transform(
                        that.ValueList);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                if (that.LevelType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.LevelType value = that.LevelType
                        ?? throw new System.InvalidOperationException();
                    result["levelType"] = Serialize.LevelTypeToJsonValue(
                        value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationPhysicalUnit that)
            {
                var result = new Nodes.JsonObject();

                if (that.UnitName != null)
                {
                    result["unitName"] = Nodes.JsonValue.Create(
                        that.UnitName);
                }

                if (that.UnitSymbol != null)
                {
                    result["unitSymbol"] = Nodes.JsonValue.Create(
                        that.UnitSymbol);
                }

                if (that.Definition != null)
                {
                    result["definition"] = Transform(
                        that.Definition);
                }

                if (that.SiNotation != null)
                {
                    result["siNotation"] = Nodes.JsonValue.Create(
                        that.SiNotation);
                }

                if (that.DinNotation != null)
                {
                    result["dinNotation"] = Nodes.JsonValue.Create(
                        that.DinNotation);
                }

                if (that.EceName != null)
                {
                    result["eceName"] = Nodes.JsonValue.Create(
                        that.EceName);
                }

                if (that.EceCode != null)
                {
                    result["eceCode"] = Nodes.JsonValue.Create(
                        that.EceCode);
                }

                if (that.NistName != null)
                {
                    result["nistName"] = Nodes.JsonValue.Create(
                        that.NistName);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.ConversionFactor != null)
                {
                    result["conversionFactor"] = Nodes.JsonValue.Create(
                        that.ConversionFactor);
                }

                if (that.RegistrationAuthorityId != null)
                {
                    result["registrationAuthorityId"] = Nodes.JsonValue.Create(
                        that.RegistrationAuthorityId);
                }

                if (that.Supplier != null)
                {
                    result["supplier"] = Nodes.JsonValue.Create(
                        that.Supplier);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Environment that)
            {
                var result = new Nodes.JsonObject();

                if (that.AssetAdministrationShells != null)
                {
                    var arrayAssetAdministrationShells = new Nodes.JsonArray();
                    foreach (AssetAdministrationShell item in that.AssetAdministrationShells)
                    {
                        arrayAssetAdministrationShells.Add(
                            Transform(
                                item));
                    }
                    result["assetAdministrationShells"] = arrayAssetAdministrationShells;
                }

                if (that.Submodels != null)
                {
                    var arraySubmodels = new Nodes.JsonArray();
                    foreach (Submodel item in that.Submodels)
                    {
                        arraySubmodels.Add(
                            Transform(
                                item));
                    }
                    result["submodels"] = arraySubmodels;
                }

                if (that.ConceptDescriptions != null)
                {
                    var arrayConceptDescriptions = new Nodes.JsonArray();
                    foreach (ConceptDescription item in that.ConceptDescriptions)
                    {
                        arrayConceptDescriptions.Add(
                            Transform(
                                item));
                    }
                    result["conceptDescriptions"] = arrayConceptDescriptions;
                }

                return result;
            }
        }  // internal class Transformer

        /// <summary>
        /// Serialize instances of meta-model classes to JSON elements.
        /// </summary>
        /// <example>
        /// Here is an example how to serialize an instance of IHasSemantics:
        /// <code>
        /// var anInstance = new Aas.IHasSemantics(
        ///     // ... some constructor arguments ...
        /// );
        /// System.Text.Json.Nodes.JsonObject element = (
        ///     Serialize.ToJsonObject(
        ///         anInstance));
        /// </code>
        /// </example>
        public static class Serialize
        {
            private static Transformer _transformer = new Transformer();

            /// <summary>
            /// Serialize an instance of the meta-model into a JSON object.
            /// </summary>
            public static Nodes.JsonObject ToJsonObject(Aas.IClass that)
            {
                return Serialize._transformer.Transform(that);
            }

            /// <summary>
            /// Serialize a literal of ModelingKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ModelingKindToJsonValue(Aas.ModelingKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ModelingKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of AssetKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue AssetKindToJsonValue(Aas.AssetKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid AssetKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of EntityType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue EntityTypeToJsonValue(Aas.EntityType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid EntityType: {that}");
            }

            /// <summary>
            /// Serialize a literal of IdentifiableElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue IdentifiableElementsToJsonValue(Aas.IdentifiableElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid IdentifiableElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of ReferableElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ReferableElementsToJsonValue(Aas.ReferableElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ReferableElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of KeyElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue KeyElementsToJsonValue(Aas.KeyElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid KeyElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of SubmodelElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue SubmodelElementsToJsonValue(Aas.SubmodelElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid SubmodelElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of BuildInListTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue BuildInListTypesToJsonValue(Aas.BuildInListTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid BuildInListTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DecimalBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DecimalBuildInTypesToJsonValue(Aas.DecimalBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DecimalBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DurationBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DurationBuildInTypesToJsonValue(Aas.DurationBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DurationBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of PrimitiveTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue PrimitiveTypesToJsonValue(Aas.PrimitiveTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid PrimitiveTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of StringBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue StringBuildInTypesToJsonValue(Aas.StringBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid StringBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeDef into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeDefToJsonValue(Aas.DataTypeDef that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeDef: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeIec61360 into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeIec61360ToJsonValue(Aas.DataTypeIec61360 that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeIec61360: {that}");
            }

            /// <summary>
            /// Serialize a literal of LevelType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue LevelTypeToJsonValue(Aas.LevelType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid LevelType: {that}");
            }
        }  // public static class Serialize
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
