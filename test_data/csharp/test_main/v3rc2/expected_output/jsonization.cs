/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Json = System.Text.Json;
using Nodes = System.Text.Json.Nodes;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    /// <summary>
    /// Provide de/serialization of meta-model entities to/from JSON.
    /// </summary>
    /// <remarks>
    /// We can not use one-pass deserialization for JSON since the object
    /// properties do not have fixed order, and hence we can not read
    /// <c>modelType</c> property ahead of the remaining properties.
    ///
    /// Mind that we pass the paths to the functions in order
    /// to provide informative exceptions in case of parsing errors.
    /// However, this comes with a <strong>SUBSTANTIAL COST</strong>!
    /// For each call to a parsing function, we have to copy the previous
    /// prefix path and append the identifier of the JSON node.
    /// Thus this can run <c>O(n^2)</c> where <c>n</c> denotes the longest
    /// path.
    ///
    /// Please notify the developers if this becomes a bottleneck for
    /// you since there is a workaround, but we did not prioritize it at
    /// the moment (<em>e.g.</em>, we could back-track the path only upon
    /// exceptions).
    public static class Jsonization
    {
        internal static class Implementation
        {
            /// <summary>Convert <paramref name="node" /> to a boolean.</summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown if not a valid boolean.
            /// </exception>
            internal static bool BoolFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonValue, but got {node.GetType()} " +
                        $" at: {path}");
                }
                bool ok = value.TryGetValue<bool>(out bool result);
                if (!ok)
                {
                    throw new System.ArgumentException(
                    $"Expected a boolean, but the conversion failed " +
                    $"from {value.ToJsonString()} " +
                    $"at: {path}");
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a long 64-bit integer.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown if not a valid 64-bit integer.
            /// </exception>
            internal static long LongFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonValue, but got {node.GetType()} " +
                        $" at: {path}");
                }
                bool ok = value.TryGetValue<long>(out long result);
                if (!ok)
                {
                    throw new System.ArgumentException(
                    $"Expected a 64-bit long integer, but the conversion failed " +
                    $"from {value.ToJsonString()} " +
                    $"at: {path}");
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a double-precision 64-bit float.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown if not a valid double-precision 64-bit float.
            /// </exception>
            internal static double DoubleFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonValue, but got {node.GetType()} " +
                        $" at: {path}");
                }
                bool ok = value.TryGetValue<double>(out double result);
                if (!ok)
                {
                    throw new System.ArgumentException(
                    "Expected a 64-bit double-precision float, " +
                    "but the conversion failed " +
                    $"from {value.ToJsonString()} " +
                    $"at: {path}");
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to a string.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown if not a valid string.
            /// </exception>
            internal static string StringFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonValue, but got {node.GetType()} " +
                        $" at: {path}");
                }
                bool ok = value.TryGetValue<string>(out string? result);
                if (!ok)
                {
                    throw new System.ArgumentException(
                    $"Expected a string, but the conversion failed " +
                    $"from {value.ToJsonString()} " +
                    $"at: {path}");
                }
                if (result == null)
                {
                    throw new System.ArgumentException(
                    $"Expected a string, but got a null at: {path}");
                }
                return result;
            }

            /// <summary>
            /// Convert the <paramref name="node" /> to bytes.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown if not a valid base64-encoded string.
            /// </exception>
            internal static byte[] BytesFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonValue? value = node as Nodes.JsonValue;
                if (value == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonValue, but got {node.GetType()} " +
                        $" at: {path}");
                }
                bool ok = value.TryGetValue<string>(out string? text);
                if (!ok)
                {
                    throw new System.ArgumentException(
                    $"Expected a string, but the conversion failed " +
                    $"from {value.ToJsonString()} " +
                    $"at: {path}");
                }
                if (text == null)
                {
                    throw new System.ArgumentException(
                    $"Expected a string, but got a null at: {path}");
                }
                try
                {
                    return System.Convert.FromBase64String(text);
                }
                catch (System.FormatException exception)
                {
                    throw new System.ArgumentException(
                        "Expected Base-64 encoded bytes, but the conversion failed " +
                        $"because: {exception}; at: {path}");
                }
            }

            /// <summary>
            /// Convert <paramref name="that" /> 64-bit long integer to a JSON value.
            /// </summary>
            /// <param name="that">value to be converted</param>
            /// <exception name="System.ArgumentException>
            /// Thrown if <paramref name="that"> is not within the range where it
            /// can be losslessly converted to a double floating number.
            /// </exception>
            internal static Nodes.JsonValue ToJsonValue(long that)
            {
                // We need to check that we can perform a lossless conversion.
                if ((long)((double)that) != that)
                {
                    throw new System.ArgumentException(
                        $"The number can not be losslessly represented in JSON: {that}");
                }
                return Nodes.JsonValue.Create(that);
            }
        }  // internal static class Implementation

        /// <summary>
        /// Deserialize instances of meta-model classes from JSON nodes.
        /// </summary>
        /// <example>
        /// Here is an example how to parse an instance of IHasSemantics:
        /// <code>
        /// string someString = "... some JSON ...";
        /// var node = System.Text.Json.Nodes.JsonNode.Parse(someString);
        /// Aas.IHasSemantics anInstance = Deserialize.IHasSemanticsFrom(
        ///     node, "/some/path/to/a/file.json#/somewhere");
        /// </code>
        /// </example>
        public static class Deserialize
        {
            /// <summary>
            /// Deserialize an instance of IHasSemantics by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IHasSemantics.
            /// </exception>
            public static Aas.IHasSemantics IHasSemanticsFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "Extension":
                    return ExtensionFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "IdentifierKeyValuePair":
                    return IdentifierKeyValuePairFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Qualifier":
                    return QualifierFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                case "View":
                    return ViewFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IHasSemantics at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IHasSemantics IHasSemanticsFrom

            /// <summary>
            /// Deserialize an instance of Extension from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Extension.
            /// </exception>
            public static Aas.Extension ExtensionFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeName = obj["name"];
                if (nodeName == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"name\" is missing " +
                        $"at: {path}/name");
                }
                string theName = Implementation.StringFrom(
                    nodeName,
                    $"{path}/name");

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                Aas.DataTypeDef? theValueType = null;
                if (nodeValueType != null)
                {
                    theValueType = Deserialize.DataTypeDefFrom(
                        nodeValueType,
                        $"{path}/valueType");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.StringFrom(
                        nodeValue,
                        $"{path}/value");
                }

                Nodes.JsonNode? nodeRefersTo = obj["refersTo"];
                Aas.IReference? theRefersTo = null;
                if (nodeRefersTo != null)
                {
                    theRefersTo = Deserialize.IReferenceFrom(
                        nodeRefersTo,
                        $"{path}/refersTo");
                }

                return new Aas.Extension(
                    theName,
                    theSemanticId,
                    theValueType,
                    theValue,
                    theRefersTo);
            }  // public static Aas.Extension ExtensionFrom

            /// <summary>
            /// Deserialize an instance of IHasExtensions by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IHasExtensions.
            /// </exception>
            public static Aas.IHasExtensions IHasExtensionsFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                case "View":
                    return ViewFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IHasExtensions at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IHasExtensions IHasExtensionsFrom

            /// <summary>
            /// Deserialize an instance of IReferable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IReferable.
            /// </exception>
            public static Aas.IReferable IReferableFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                case "View":
                    return ViewFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IReferable at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IReferable IReferableFrom

            /// <summary>
            /// Deserialize an instance of IIdentifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IIdentifiable.
            /// </exception>
            public static Aas.IIdentifiable IIdentifiableFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, path);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IIdentifiable at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IIdentifiable IIdentifiableFrom

            /// <summary>
            /// Deserialize the enumeration ModelingKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ModelingKind.
            /// </exception>
            public static Aas.ModelingKind ModelingKindFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.ModelingKind? result = Stringification.ModelingKindFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of ModelingKind " +
                        $"at: {path}");
            }  // public static Aas.ModelingKind ModelingKindFrom

            /// <summary>
            /// Deserialize an instance of IHasKind by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IHasKind.
            /// </exception>
            public static Aas.IHasKind IHasKindFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IHasKind at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IHasKind IHasKindFrom

            /// <summary>
            /// Deserialize an instance of IHasDataSpecification by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IHasDataSpecification.
            /// </exception>
            public static Aas.IHasDataSpecification IHasDataSpecificationFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AdministrativeInformation":
                    return AdministrativeInformationFrom(
                        node, path);
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "AssetAdministrationShell":
                    return AssetAdministrationShellFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "ConceptDescription":
                    return ConceptDescriptionFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                case "View":
                    return ViewFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IHasDataSpecification at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IHasDataSpecification IHasDataSpecificationFrom

            /// <summary>
            /// Deserialize an instance of AdministrativeInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of AdministrativeInformation.
            /// </exception>
            public static Aas.AdministrativeInformation AdministrativeInformationFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeVersion = obj["version"];
                string? theVersion = null;
                if (nodeVersion != null)
                {
                    theVersion = Implementation.StringFrom(
                        nodeVersion,
                        $"{path}/version");
                }

                Nodes.JsonNode? nodeRevision = obj["revision"];
                string? theRevision = null;
                if (nodeRevision != null)
                {
                    theRevision = Implementation.StringFrom(
                        nodeRevision,
                        $"{path}/revision");
                }

                return new Aas.AdministrativeInformation(
                    theVersion,
                    theRevision,
                    theDataSpecifications);
            }  // public static Aas.AdministrativeInformation AdministrativeInformationFrom

            /// <summary>
            /// Deserialize an instance of IConstraint by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IConstraint.
            /// </exception>
            public static Aas.IConstraint IConstraintFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "Formula":
                    return FormulaFrom(
                        node, path);
                case "Qualifier":
                    return QualifierFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IConstraint at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IConstraint IConstraintFrom

            /// <summary>
            /// Deserialize an instance of IQualifiable by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IQualifiable.
            /// </exception>
            public static Aas.IQualifiable IQualifiableFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "Submodel":
                    return SubmodelFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IQualifiable at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IQualifiable IQualifiableFrom

            /// <summary>
            /// Deserialize an instance of Qualifier from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Qualifier.
            /// </exception>
            public static Aas.Qualifier QualifierFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeType = obj["type"];
                if (nodeType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"type\" is missing " +
                        $"at: {path}/type");
                }
                string theType = Implementation.StringFrom(
                    nodeType,
                    $"{path}/type");

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"valueType\" is missing " +
                        $"at: {path}/valueType");
                }
                Aas.DataTypeDef theValueType = Deserialize.DataTypeDefFrom(
                    nodeValueType,
                    $"{path}/valueType");

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.StringFrom(
                        nodeValue,
                        $"{path}/value");
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = Deserialize.IReferenceFrom(
                        nodeValueId,
                        $"{path}/valueId");
                }

                return new Aas.Qualifier(
                    theType,
                    theValueType,
                    theValue,
                    theValueId,
                    theSemanticId);
            }  // public static Aas.Qualifier QualifierFrom

            /// <summary>
            /// Deserialize an instance of Formula from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Formula.
            /// </exception>
            public static Aas.Formula FormulaFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDependsOn = obj["dependsOn"];
                List<IReference>? theDependsOn = null;
                if (nodeDependsOn != null)
                {
                    Nodes.JsonArray? arrayDependsOn = nodeDependsOn as Nodes.JsonArray;
                    if (arrayDependsOn == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDependsOn.GetType()} " +
                            $"at: {path}/dependsOn");
                    }
                    theDependsOn = new List<IReference>(
                        arrayDependsOn.Count);
                    int indexDependsOn = 0;
                    foreach (Nodes.JsonNode? item in arrayDependsOn)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dependsOn/{indexDependsOn}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dependsOn/{indexDependsOn}");
                        theDependsOn.Add(parsedItem);
                        indexDependsOn++;
                    }
                }

                return new Aas.Formula(
                    theDependsOn);
            }  // public static Aas.Formula FormulaFrom

            /// <summary>
            /// Deserialize an instance of AssetAdministrationShell from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of AssetAdministrationShell.
            /// </exception>
            public static Aas.AssetAdministrationShell AssetAdministrationShellFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"id\" is missing " +
                        $"at: {path}/id");
                }
                string theId = Implementation.StringFrom(
                    nodeId,
                    $"{path}/id");

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = Deserialize.AdministrativeInformationFrom(
                        nodeAdministration,
                        $"{path}/administration");
                }

                Nodes.JsonNode? nodeDerivedFrom = obj["derivedFrom"];
                Aas.IReference? theDerivedFrom = null;
                if (nodeDerivedFrom != null)
                {
                    theDerivedFrom = Deserialize.IReferenceFrom(
                        nodeDerivedFrom,
                        $"{path}/derivedFrom");
                }

                Nodes.JsonNode? nodeAssetInformation = obj["assetInformation"];
                if (nodeAssetInformation == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"assetInformation\" is missing " +
                        $"at: {path}/assetInformation");
                }
                Aas.AssetInformation theAssetInformation = Deserialize.AssetInformationFrom(
                    nodeAssetInformation,
                    $"{path}/assetInformation");

                Nodes.JsonNode? nodeSubmodels = obj["submodels"];
                if (nodeSubmodels == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"submodels\" is missing " +
                        $"at: {path}/submodels");
                }
                Nodes.JsonArray? arraySubmodels = nodeSubmodels as Nodes.JsonArray;
                if (arraySubmodels == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeSubmodels.GetType()} " +
                        $"at: {path}/submodels");
                }
                var theSubmodels = new List<IReference>(
                    arraySubmodels.Count);
                int indexSubmodels = 0;
                foreach (Nodes.JsonNode? item in arraySubmodels)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/submodels/{indexSubmodels}");
                    }
                    IReference parsedItem = Deserialize.IReferenceFrom(
                        item,
                        $"{path}/submodels/{indexSubmodels}");
                    theSubmodels.Add(parsedItem);
                    indexSubmodels++;
                }

                return new Aas.AssetAdministrationShell(
                    theId,
                    theAssetInformation,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theDataSpecifications,
                    theDerivedFrom,
                    theSubmodels);
            }  // public static Aas.AssetAdministrationShell AssetAdministrationShellFrom

            /// <summary>
            /// Deserialize an instance of AssetInformation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of AssetInformation.
            /// </exception>
            public static Aas.AssetInformation AssetInformationFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeAssetKind = obj["assetKind"];
                if (nodeAssetKind == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"assetKind\" is missing " +
                        $"at: {path}/assetKind");
                }
                Aas.AssetKind theAssetKind = Deserialize.AssetKindFrom(
                    nodeAssetKind,
                    $"{path}/assetKind");

                Nodes.JsonNode? nodeGlobalAssetId = obj["globalAssetId"];
                Aas.IReference? theGlobalAssetId = null;
                if (nodeGlobalAssetId != null)
                {
                    theGlobalAssetId = Deserialize.IReferenceFrom(
                        nodeGlobalAssetId,
                        $"{path}/globalAssetId");
                }

                Nodes.JsonNode? nodeSpecificAssetId = obj["specificAssetId"];
                Aas.IdentifierKeyValuePair? theSpecificAssetId = null;
                if (nodeSpecificAssetId != null)
                {
                    theSpecificAssetId = Deserialize.IdentifierKeyValuePairFrom(
                        nodeSpecificAssetId,
                        $"{path}/specificAssetId");
                }

                Nodes.JsonNode? nodeDefaultThumbnail = obj["defaultThumbnail"];
                Aas.File? theDefaultThumbnail = null;
                if (nodeDefaultThumbnail != null)
                {
                    theDefaultThumbnail = Deserialize.FileFrom(
                        nodeDefaultThumbnail,
                        $"{path}/defaultThumbnail");
                }

                return new Aas.AssetInformation(
                    theAssetKind,
                    theGlobalAssetId,
                    theSpecificAssetId,
                    theDefaultThumbnail);
            }  // public static Aas.AssetInformation AssetInformationFrom

            /// <summary>
            /// Deserialize the enumeration AssetKind from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of AssetKind.
            /// </exception>
            public static Aas.AssetKind AssetKindFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.AssetKind? result = Stringification.AssetKindFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of AssetKind " +
                        $"at: {path}");
            }  // public static Aas.AssetKind AssetKindFrom

            /// <summary>
            /// Deserialize an instance of IdentifierKeyValuePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IdentifierKeyValuePair.
            /// </exception>
            public static Aas.IdentifierKeyValuePair IdentifierKeyValuePairFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeKey = obj["key"];
                if (nodeKey == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"key\" is missing " +
                        $"at: {path}/key");
                }
                string theKey = Implementation.StringFrom(
                    nodeKey,
                    $"{path}/key");

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"value\" is missing " +
                        $"at: {path}/value");
                }
                string theValue = Implementation.StringFrom(
                    nodeValue,
                    $"{path}/value");

                Nodes.JsonNode? nodeExternalSubjectId = obj["externalSubjectId"];
                Aas.IReference? theExternalSubjectId = null;
                if (nodeExternalSubjectId != null)
                {
                    theExternalSubjectId = Deserialize.IReferenceFrom(
                        nodeExternalSubjectId,
                        $"{path}/externalSubjectId");
                }

                return new Aas.IdentifierKeyValuePair(
                    theKey,
                    theValue,
                    theExternalSubjectId,
                    theSemanticId);
            }  // public static Aas.IdentifierKeyValuePair IdentifierKeyValuePairFrom

            /// <summary>
            /// Deserialize an instance of Submodel from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Submodel.
            /// </exception>
            public static Aas.Submodel SubmodelFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"id\" is missing " +
                        $"at: {path}/id");
                }
                string theId = Implementation.StringFrom(
                    nodeId,
                    $"{path}/id");

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = Deserialize.AdministrativeInformationFrom(
                        nodeAdministration,
                        $"{path}/administration");
                }

                Nodes.JsonNode? nodeSubmodelElements = obj["submodelElements"];
                if (nodeSubmodelElements == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"submodelElements\" is missing " +
                        $"at: {path}/submodelElements");
                }
                Nodes.JsonArray? arraySubmodelElements = nodeSubmodelElements as Nodes.JsonArray;
                if (arraySubmodelElements == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeSubmodelElements.GetType()} " +
                        $"at: {path}/submodelElements");
                }
                var theSubmodelElements = new List<ISubmodelElement>(
                    arraySubmodelElements.Count);
                int indexSubmodelElements = 0;
                foreach (Nodes.JsonNode? item in arraySubmodelElements)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/submodelElements/{indexSubmodelElements}");
                    }
                    ISubmodelElement parsedItem = Deserialize.ISubmodelElementFrom(
                        item,
                        $"{path}/submodelElements/{indexSubmodelElements}");
                    theSubmodelElements.Add(parsedItem);
                    indexSubmodelElements++;
                }

                return new Aas.Submodel(
                    theId,
                    theIdShort,
                    theSubmodelElements,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications);
            }  // public static Aas.Submodel SubmodelFrom

            /// <summary>
            /// Deserialize an instance of ISubmodelElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ISubmodelElement.
            /// </exception>
            public static Aas.ISubmodelElement ISubmodelElementFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "Capability":
                    return CapabilityFrom(
                        node, path);
                case "Entity":
                    return EntityFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Operation":
                    return OperationFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                case "SubmodelElementList":
                    return SubmodelElementListFrom(
                        node, path);
                case "SubmodelElementStruct":
                    return SubmodelElementStructFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for ISubmodelElement at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.ISubmodelElement ISubmodelElementFrom

            /// <summary>
            /// Deserialize an instance of IRelationshipElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IRelationshipElement.
            /// </exception>
            public static Aas.IRelationshipElement IRelationshipElementFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "AnnotatedRelationshipElement":
                    return AnnotatedRelationshipElementFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IRelationshipElement at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IRelationshipElement IRelationshipElementFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of SubmodelElementList.
            /// </exception>
            public static Aas.SubmodelElementList SubmodelElementListFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeSubmodelElementTypeValues = obj["submodelElementTypeValues"];
                if (nodeSubmodelElementTypeValues == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"submodelElementTypeValues\" is missing " +
                        $"at: {path}/submodelElementTypeValues");
                }
                Aas.SubmodelElements theSubmodelElementTypeValues = Deserialize.SubmodelElementsFrom(
                    nodeSubmodelElementTypeValues,
                    $"{path}/submodelElementTypeValues");

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"values\" is missing " +
                        $"at: {path}/values");
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeValues.GetType()} " +
                        $"at: {path}/values");
                }
                var theValues = new List<ISubmodelElement>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/values/{indexValues}");
                    }
                    ISubmodelElement parsedItem = Deserialize.ISubmodelElementFrom(
                        item,
                        $"{path}/values/{indexValues}");
                    theValues.Add(parsedItem);
                    indexValues++;
                }

                Nodes.JsonNode? nodeSemanticIdValues = obj["semanticIdValues"];
                Aas.IReference? theSemanticIdValues = null;
                if (nodeSemanticIdValues != null)
                {
                    theSemanticIdValues = Deserialize.IReferenceFrom(
                        nodeSemanticIdValues,
                        $"{path}/semanticIdValues");
                }

                Nodes.JsonNode? nodeValueTypeValues = obj["valueTypeValues"];
                Aas.DataTypeDef? theValueTypeValues = null;
                if (nodeValueTypeValues != null)
                {
                    theValueTypeValues = Deserialize.DataTypeDefFrom(
                        nodeValueTypeValues,
                        $"{path}/valueTypeValues");
                }

                return new Aas.SubmodelElementList(
                    theSubmodelElementTypeValues,
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValues,
                    theSemanticIdValues,
                    theValueTypeValues);
            }  // public static Aas.SubmodelElementList SubmodelElementListFrom

            /// <summary>
            /// Deserialize an instance of SubmodelElementStruct from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of SubmodelElementStruct.
            /// </exception>
            public static Aas.SubmodelElementStruct SubmodelElementStructFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"values\" is missing " +
                        $"at: {path}/values");
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeValues.GetType()} " +
                        $"at: {path}/values");
                }
                var theValues = new List<ISubmodelElement>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/values/{indexValues}");
                    }
                    ISubmodelElement parsedItem = Deserialize.ISubmodelElementFrom(
                        item,
                        $"{path}/values/{indexValues}");
                    theValues.Add(parsedItem);
                    indexValues++;
                }

                return new Aas.SubmodelElementStruct(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValues);
            }  // public static Aas.SubmodelElementStruct SubmodelElementStructFrom

            /// <summary>
            /// Deserialize an instance of IDataElement by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IDataElement.
            /// </exception>
            public static Aas.IDataElement IDataElementFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "Blob":
                    return BlobFrom(
                        node, path);
                case "File":
                    return FileFrom(
                        node, path);
                case "MultiLanguageProperty":
                    return MultiLanguagePropertyFrom(
                        node, path);
                case "Property":
                    return PropertyFrom(
                        node, path);
                case "Range":
                    return RangeFrom(
                        node, path);
                case "ReferenceElement":
                    return ReferenceElementFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IDataElement at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IDataElement IDataElementFrom

            /// <summary>
            /// Deserialize an instance of Property from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Property.
            /// </exception>
            public static Aas.Property PropertyFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"valueType\" is missing " +
                        $"at: {path}/valueType");
                }
                Aas.DataTypeDef theValueType = Deserialize.DataTypeDefFrom(
                    nodeValueType,
                    $"{path}/valueType");

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.StringFrom(
                        nodeValue,
                        $"{path}/value");
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = Deserialize.IReferenceFrom(
                        nodeValueId,
                        $"{path}/valueId");
                }

                return new Aas.Property(
                    theValueType,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // public static Aas.Property PropertyFrom

            /// <summary>
            /// Deserialize an instance of MultiLanguageProperty from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of MultiLanguageProperty.
            /// </exception>
            public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                Aas.LangStringSet? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Deserialize.LangStringSetFrom(
                        nodeValue,
                        $"{path}/value");
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = Deserialize.IReferenceFrom(
                        nodeValueId,
                        $"{path}/valueId");
                }

                return new Aas.MultiLanguageProperty(
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue,
                    theValueId);
            }  // public static Aas.MultiLanguageProperty MultiLanguagePropertyFrom

            /// <summary>
            /// Deserialize an instance of Range from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Range.
            /// </exception>
            public static Aas.Range RangeFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeValueType = obj["valueType"];
                if (nodeValueType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"valueType\" is missing " +
                        $"at: {path}/valueType");
                }
                Aas.DataTypeDef theValueType = Deserialize.DataTypeDefFrom(
                    nodeValueType,
                    $"{path}/valueType");

                Nodes.JsonNode? nodeMin = obj["min"];
                string? theMin = null;
                if (nodeMin != null)
                {
                    theMin = Implementation.StringFrom(
                        nodeMin,
                        $"{path}/min");
                }

                Nodes.JsonNode? nodeMax = obj["max"];
                string? theMax = null;
                if (nodeMax != null)
                {
                    theMax = Implementation.StringFrom(
                        nodeMax,
                        $"{path}/max");
                }

                return new Aas.Range(
                    theValueType,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theMin,
                    theMax);
            }  // public static Aas.Range RangeFrom

            /// <summary>
            /// Deserialize an instance of ReferenceElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ReferenceElement.
            /// </exception>
            public static Aas.ReferenceElement ReferenceElementFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                Aas.IReference? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Deserialize.IReferenceFrom(
                        nodeValue,
                        $"{path}/value");
                }

                return new Aas.ReferenceElement(
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // public static Aas.ReferenceElement ReferenceElementFrom

            /// <summary>
            /// Deserialize an instance of Blob from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Blob.
            /// </exception>
            public static Aas.Blob BlobFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeMimeType = obj["mimeType"];
                if (nodeMimeType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"mimeType\" is missing " +
                        $"at: {path}/mimeType");
                }
                string theMimeType = Implementation.StringFrom(
                    nodeMimeType,
                    $"{path}/mimeType");

                Nodes.JsonNode? nodeValue = obj["value"];
                byte[]? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.BytesFrom(
                        nodeValue,
                        $"{path}/value");
                }

                return new Aas.Blob(
                    theMimeType,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // public static Aas.Blob BlobFrom

            /// <summary>
            /// Deserialize an instance of File from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of File.
            /// </exception>
            public static Aas.File FileFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeMimeType = obj["mimeType"];
                if (nodeMimeType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"mimeType\" is missing " +
                        $"at: {path}/mimeType");
                }
                string theMimeType = Implementation.StringFrom(
                    nodeMimeType,
                    $"{path}/mimeType");

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.StringFrom(
                        nodeValue,
                        $"{path}/value");
                }

                return new Aas.File(
                    theMimeType,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theValue);
            }  // public static Aas.File FileFrom

            /// <summary>
            /// Deserialize an instance of AnnotatedRelationshipElement from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of AnnotatedRelationshipElement.
            /// </exception>
            public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeFirst = obj["first"];
                if (nodeFirst == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"first\" is missing " +
                        $"at: {path}/first");
                }
                Aas.IReference theFirst = Deserialize.IReferenceFrom(
                    nodeFirst,
                    $"{path}/first");

                Nodes.JsonNode? nodeSecond = obj["second"];
                if (nodeSecond == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"second\" is missing " +
                        $"at: {path}/second");
                }
                Aas.IReference theSecond = Deserialize.IReferenceFrom(
                    nodeSecond,
                    $"{path}/second");

                Nodes.JsonNode? nodeAnnotation = obj["annotation"];
                if (nodeAnnotation == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"annotation\" is missing " +
                        $"at: {path}/annotation");
                }
                Nodes.JsonArray? arrayAnnotation = nodeAnnotation as Nodes.JsonArray;
                if (arrayAnnotation == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeAnnotation.GetType()} " +
                        $"at: {path}/annotation");
                }
                var theAnnotation = new List<IDataElement>(
                    arrayAnnotation.Count);
                int indexAnnotation = 0;
                foreach (Nodes.JsonNode? item in arrayAnnotation)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/annotation/{indexAnnotation}");
                    }
                    IDataElement parsedItem = Deserialize.IDataElementFrom(
                        item,
                        $"{path}/annotation/{indexAnnotation}");
                    theAnnotation.Add(parsedItem);
                    indexAnnotation++;
                }

                return new Aas.AnnotatedRelationshipElement(
                    theFirst,
                    theSecond,
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theAnnotation);
            }  // public static Aas.AnnotatedRelationshipElement AnnotatedRelationshipElementFrom

            /// <summary>
            /// Deserialize the enumeration EntityType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of EntityType.
            /// </exception>
            public static Aas.EntityType EntityTypeFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.EntityType? result = Stringification.EntityTypeFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of EntityType " +
                        $"at: {path}");
            }  // public static Aas.EntityType EntityTypeFrom

            /// <summary>
            /// Deserialize an instance of Entity from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Entity.
            /// </exception>
            public static Aas.Entity EntityFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeEntityType = obj["entityType"];
                if (nodeEntityType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"entityType\" is missing " +
                        $"at: {path}/entityType");
                }
                Aas.EntityType theEntityType = Deserialize.EntityTypeFrom(
                    nodeEntityType,
                    $"{path}/entityType");

                Nodes.JsonNode? nodeStatements = obj["statements"];
                if (nodeStatements == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"statements\" is missing " +
                        $"at: {path}/statements");
                }
                Nodes.JsonArray? arrayStatements = nodeStatements as Nodes.JsonArray;
                if (arrayStatements == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeStatements.GetType()} " +
                        $"at: {path}/statements");
                }
                var theStatements = new List<ISubmodelElement>(
                    arrayStatements.Count);
                int indexStatements = 0;
                foreach (Nodes.JsonNode? item in arrayStatements)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/statements/{indexStatements}");
                    }
                    ISubmodelElement parsedItem = Deserialize.ISubmodelElementFrom(
                        item,
                        $"{path}/statements/{indexStatements}");
                    theStatements.Add(parsedItem);
                    indexStatements++;
                }

                Nodes.JsonNode? nodeGlobalAssetId = obj["globalAssetId"];
                Aas.IReference? theGlobalAssetId = null;
                if (nodeGlobalAssetId != null)
                {
                    theGlobalAssetId = Deserialize.IReferenceFrom(
                        nodeGlobalAssetId,
                        $"{path}/globalAssetId");
                }

                Nodes.JsonNode? nodeSpecificAssetId = obj["specificAssetId"];
                Aas.IdentifierKeyValuePair? theSpecificAssetId = null;
                if (nodeSpecificAssetId != null)
                {
                    theSpecificAssetId = Deserialize.IdentifierKeyValuePairFrom(
                        nodeSpecificAssetId,
                        $"{path}/specificAssetId");
                }

                return new Aas.Entity(
                    theEntityType,
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theStatements,
                    theGlobalAssetId,
                    theSpecificAssetId);
            }  // public static Aas.Entity EntityFrom

            /// <summary>
            /// Deserialize an instance of IEvent by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IEvent.
            /// </exception>
            public static Aas.IEvent IEventFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "BasicEvent":
                    return BasicEventFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IEvent at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IEvent IEventFrom

            /// <summary>
            /// Deserialize an instance of BasicEvent from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of BasicEvent.
            /// </exception>
            public static Aas.BasicEvent BasicEventFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeObserved = obj["observed"];
                if (nodeObserved == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"observed\" is missing " +
                        $"at: {path}/observed");
                }
                Aas.IReference theObserved = Deserialize.IReferenceFrom(
                    nodeObserved,
                    $"{path}/observed");

                return new Aas.BasicEvent(
                    theObserved,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications);
            }  // public static Aas.BasicEvent BasicEventFrom

            /// <summary>
            /// Deserialize an instance of Operation from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Operation.
            /// </exception>
            public static Aas.Operation OperationFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                Nodes.JsonNode? nodeInputVariables = obj["inputVariables"];
                if (nodeInputVariables == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"inputVariables\" is missing " +
                        $"at: {path}/inputVariables");
                }
                Nodes.JsonArray? arrayInputVariables = nodeInputVariables as Nodes.JsonArray;
                if (arrayInputVariables == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeInputVariables.GetType()} " +
                        $"at: {path}/inputVariables");
                }
                var theInputVariables = new List<OperationVariable>(
                    arrayInputVariables.Count);
                int indexInputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayInputVariables)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/inputVariables/{indexInputVariables}");
                    }
                    OperationVariable parsedItem = Deserialize.OperationVariableFrom(
                        item,
                        $"{path}/inputVariables/{indexInputVariables}");
                    theInputVariables.Add(parsedItem);
                    indexInputVariables++;
                }

                Nodes.JsonNode? nodeOutputVariables = obj["outputVariables"];
                if (nodeOutputVariables == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"outputVariables\" is missing " +
                        $"at: {path}/outputVariables");
                }
                Nodes.JsonArray? arrayOutputVariables = nodeOutputVariables as Nodes.JsonArray;
                if (arrayOutputVariables == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeOutputVariables.GetType()} " +
                        $"at: {path}/outputVariables");
                }
                var theOutputVariables = new List<OperationVariable>(
                    arrayOutputVariables.Count);
                int indexOutputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayOutputVariables)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/outputVariables/{indexOutputVariables}");
                    }
                    OperationVariable parsedItem = Deserialize.OperationVariableFrom(
                        item,
                        $"{path}/outputVariables/{indexOutputVariables}");
                    theOutputVariables.Add(parsedItem);
                    indexOutputVariables++;
                }

                Nodes.JsonNode? nodeInoutputVariables = obj["inoutputVariables"];
                if (nodeInoutputVariables == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"inoutputVariables\" is missing " +
                        $"at: {path}/inoutputVariables");
                }
                Nodes.JsonArray? arrayInoutputVariables = nodeInoutputVariables as Nodes.JsonArray;
                if (arrayInoutputVariables == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeInoutputVariables.GetType()} " +
                        $"at: {path}/inoutputVariables");
                }
                var theInoutputVariables = new List<OperationVariable>(
                    arrayInoutputVariables.Count);
                int indexInoutputVariables = 0;
                foreach (Nodes.JsonNode? item in arrayInoutputVariables)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/inoutputVariables/{indexInoutputVariables}");
                    }
                    OperationVariable parsedItem = Deserialize.OperationVariableFrom(
                        item,
                        $"{path}/inoutputVariables/{indexInoutputVariables}");
                    theInoutputVariables.Add(parsedItem);
                    indexInoutputVariables++;
                }

                return new Aas.Operation(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications,
                    theInputVariables,
                    theOutputVariables,
                    theInoutputVariables);
            }  // public static Aas.Operation OperationFrom

            /// <summary>
            /// Deserialize an instance of OperationVariable from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of OperationVariable.
            /// </exception>
            public static Aas.OperationVariable OperationVariableFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"value\" is missing " +
                        $"at: {path}/value");
                }
                Aas.ISubmodelElement theValue = Deserialize.ISubmodelElementFrom(
                    nodeValue,
                    $"{path}/value");

                return new Aas.OperationVariable(
                    theValue);
            }  // public static Aas.OperationVariable OperationVariableFrom

            /// <summary>
            /// Deserialize an instance of Capability from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Capability.
            /// </exception>
            public static Aas.Capability CapabilityFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeKind = obj["kind"];
                Aas.ModelingKind? theKind = null;
                if (nodeKind != null)
                {
                    theKind = Deserialize.ModelingKindFrom(
                        nodeKind,
                        $"{path}/kind");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeQualifiers = obj["qualifiers"];
                if (nodeQualifiers == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"qualifiers\" is missing " +
                        $"at: {path}/qualifiers");
                }
                Nodes.JsonArray? arrayQualifiers = nodeQualifiers as Nodes.JsonArray;
                if (arrayQualifiers == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeQualifiers.GetType()} " +
                        $"at: {path}/qualifiers");
                }
                var theQualifiers = new List<IConstraint>(
                    arrayQualifiers.Count);
                int indexQualifiers = 0;
                foreach (Nodes.JsonNode? item in arrayQualifiers)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/qualifiers/{indexQualifiers}");
                    }
                    IConstraint parsedItem = Deserialize.IConstraintFrom(
                        item,
                        $"{path}/qualifiers/{indexQualifiers}");
                    theQualifiers.Add(parsedItem);
                    indexQualifiers++;
                }

                return new Aas.Capability(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theKind,
                    theSemanticId,
                    theQualifiers,
                    theDataSpecifications);
            }  // public static Aas.Capability CapabilityFrom

            /// <summary>
            /// Deserialize an instance of ConceptDescription from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ConceptDescription.
            /// </exception>
            public static Aas.ConceptDescription ConceptDescriptionFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeId = obj["id"];
                if (nodeId == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"id\" is missing " +
                        $"at: {path}/id");
                }
                string theId = Implementation.StringFrom(
                    nodeId,
                    $"{path}/id");

                Nodes.JsonNode? nodeAdministration = obj["administration"];
                Aas.AdministrativeInformation? theAdministration = null;
                if (nodeAdministration != null)
                {
                    theAdministration = Deserialize.AdministrativeInformationFrom(
                        nodeAdministration,
                        $"{path}/administration");
                }

                Nodes.JsonNode? nodeIsCaseOf = obj["isCaseOf"];
                if (nodeIsCaseOf == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"isCaseOf\" is missing " +
                        $"at: {path}/isCaseOf");
                }
                Nodes.JsonArray? arrayIsCaseOf = nodeIsCaseOf as Nodes.JsonArray;
                if (arrayIsCaseOf == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeIsCaseOf.GetType()} " +
                        $"at: {path}/isCaseOf");
                }
                var theIsCaseOf = new List<IReference>(
                    arrayIsCaseOf.Count);
                int indexIsCaseOf = 0;
                foreach (Nodes.JsonNode? item in arrayIsCaseOf)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/isCaseOf/{indexIsCaseOf}");
                    }
                    IReference parsedItem = Deserialize.IReferenceFrom(
                        item,
                        $"{path}/isCaseOf/{indexIsCaseOf}");
                    theIsCaseOf.Add(parsedItem);
                    indexIsCaseOf++;
                }

                return new Aas.ConceptDescription(
                    theId,
                    theIdShort,
                    theExtensions,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theAdministration,
                    theIsCaseOf,
                    theDataSpecifications);
            }  // public static Aas.ConceptDescription ConceptDescriptionFrom

            /// <summary>
            /// Deserialize an instance of View from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of View.
            /// </exception>
            public static Aas.View ViewFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeDataSpecifications = obj["dataSpecifications"];
                List<IReference>? theDataSpecifications = null;
                if (nodeDataSpecifications != null)
                {
                    Nodes.JsonArray? arrayDataSpecifications = nodeDataSpecifications as Nodes.JsonArray;
                    if (arrayDataSpecifications == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeDataSpecifications.GetType()} " +
                            $"at: {path}/dataSpecifications");
                    }
                    theDataSpecifications = new List<IReference>(
                        arrayDataSpecifications.Count);
                    int indexDataSpecifications = 0;
                    foreach (Nodes.JsonNode? item in arrayDataSpecifications)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/dataSpecifications/{indexDataSpecifications}");
                        }
                        IReference parsedItem = Deserialize.IReferenceFrom(
                            item,
                            $"{path}/dataSpecifications/{indexDataSpecifications}");
                        theDataSpecifications.Add(parsedItem);
                        indexDataSpecifications++;
                    }
                }

                Nodes.JsonNode? nodeExtensions = obj["extensions"];
                if (nodeExtensions == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"extensions\" is missing " +
                        $"at: {path}/extensions");
                }
                Nodes.JsonArray? arrayExtensions = nodeExtensions as Nodes.JsonArray;
                if (arrayExtensions == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeExtensions.GetType()} " +
                        $"at: {path}/extensions");
                }
                var theExtensions = new List<Extension>(
                    arrayExtensions.Count);
                int indexExtensions = 0;
                foreach (Nodes.JsonNode? item in arrayExtensions)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/extensions/{indexExtensions}");
                    }
                    Extension parsedItem = Deserialize.ExtensionFrom(
                        item,
                        $"{path}/extensions/{indexExtensions}");
                    theExtensions.Add(parsedItem);
                    indexExtensions++;
                }

                Nodes.JsonNode? nodeIdShort = obj["idShort"];
                string? theIdShort = null;
                if (nodeIdShort != null)
                {
                    theIdShort = Implementation.StringFrom(
                        nodeIdShort,
                        $"{path}/idShort");
                }

                Nodes.JsonNode? nodeDisplayName = obj["displayName"];
                Aas.LangStringSet? theDisplayName = null;
                if (nodeDisplayName != null)
                {
                    theDisplayName = Deserialize.LangStringSetFrom(
                        nodeDisplayName,
                        $"{path}/displayName");
                }

                Nodes.JsonNode? nodeCategory = obj["category"];
                string? theCategory = null;
                if (nodeCategory != null)
                {
                    theCategory = Implementation.StringFrom(
                        nodeCategory,
                        $"{path}/category");
                }

                Nodes.JsonNode? nodeDescription = obj["description"];
                Aas.LangStringSet? theDescription = null;
                if (nodeDescription != null)
                {
                    theDescription = Deserialize.LangStringSetFrom(
                        nodeDescription,
                        $"{path}/description");
                }

                Nodes.JsonNode? nodeSemanticId = obj["semanticId"];
                Aas.IReference? theSemanticId = null;
                if (nodeSemanticId != null)
                {
                    theSemanticId = Deserialize.IReferenceFrom(
                        nodeSemanticId,
                        $"{path}/semanticId");
                }

                Nodes.JsonNode? nodeContainedElements = obj["containedElements"];
                if (nodeContainedElements == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"containedElements\" is missing " +
                        $"at: {path}/containedElements");
                }
                Nodes.JsonArray? arrayContainedElements = nodeContainedElements as Nodes.JsonArray;
                if (arrayContainedElements == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeContainedElements.GetType()} " +
                        $"at: {path}/containedElements");
                }
                var theContainedElements = new List<IReference>(
                    arrayContainedElements.Count);
                int indexContainedElements = 0;
                foreach (Nodes.JsonNode? item in arrayContainedElements)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/containedElements/{indexContainedElements}");
                    }
                    IReference parsedItem = Deserialize.IReferenceFrom(
                        item,
                        $"{path}/containedElements/{indexContainedElements}");
                    theContainedElements.Add(parsedItem);
                    indexContainedElements++;
                }

                return new Aas.View(
                    theExtensions,
                    theIdShort,
                    theDisplayName,
                    theCategory,
                    theDescription,
                    theSemanticId,
                    theDataSpecifications,
                    theContainedElements);
            }  // public static Aas.View ViewFrom

            /// <summary>
            /// Deserialize an instance of IReference by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IReference.
            /// </exception>
            public static Aas.IReference IReferenceFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "GlobalReference":
                    return GlobalReferenceFrom(
                        node, path);
                case "ModelReference":
                    return ModelReferenceFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IReference at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IReference IReferenceFrom

            /// <summary>
            /// Deserialize an instance of GlobalReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of GlobalReference.
            /// </exception>
            public static Aas.GlobalReference GlobalReferenceFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeValues = obj["values"];
                if (nodeValues == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"values\" is missing " +
                        $"at: {path}/values");
                }
                Nodes.JsonArray? arrayValues = nodeValues as Nodes.JsonArray;
                if (arrayValues == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeValues.GetType()} " +
                        $"at: {path}/values");
                }
                var theValues = new List<string>(
                    arrayValues.Count);
                int indexValues = 0;
                foreach (Nodes.JsonNode? item in arrayValues)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/values/{indexValues}");
                    }
                    string parsedItem = Implementation.StringFrom(
                        item,
                        $"{path}/values/{indexValues}");
                    theValues.Add(parsedItem);
                    indexValues++;
                }

                return new Aas.GlobalReference(
                    theValues);
            }  // public static Aas.GlobalReference GlobalReferenceFrom

            /// <summary>
            /// Deserialize an instance of ModelReference from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ModelReference.
            /// </exception>
            public static Aas.ModelReference ModelReferenceFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeKeys = obj["keys"];
                if (nodeKeys == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"keys\" is missing " +
                        $"at: {path}/keys");
                }
                Nodes.JsonArray? arrayKeys = nodeKeys as Nodes.JsonArray;
                if (arrayKeys == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeKeys.GetType()} " +
                        $"at: {path}/keys");
                }
                var theKeys = new List<Key>(
                    arrayKeys.Count);
                int indexKeys = 0;
                foreach (Nodes.JsonNode? item in arrayKeys)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/keys/{indexKeys}");
                    }
                    Key parsedItem = Deserialize.KeyFrom(
                        item,
                        $"{path}/keys/{indexKeys}");
                    theKeys.Add(parsedItem);
                    indexKeys++;
                }

                Nodes.JsonNode? nodeReferredSemanticId = obj["referredSemanticId"];
                Aas.IReference? theReferredSemanticId = null;
                if (nodeReferredSemanticId != null)
                {
                    theReferredSemanticId = Deserialize.IReferenceFrom(
                        nodeReferredSemanticId,
                        $"{path}/referredSemanticId");
                }

                return new Aas.ModelReference(
                    theKeys,
                    theReferredSemanticId);
            }  // public static Aas.ModelReference ModelReferenceFrom

            /// <summary>
            /// Deserialize an instance of Key from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Key.
            /// </exception>
            public static Aas.Key KeyFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeType = obj["type"];
                if (nodeType == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"type\" is missing " +
                        $"at: {path}/type");
                }
                Aas.KeyElements theType = Deserialize.KeyElementsFrom(
                    nodeType,
                    $"{path}/type");

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"value\" is missing " +
                        $"at: {path}/value");
                }
                string theValue = Implementation.StringFrom(
                    nodeValue,
                    $"{path}/value");

                return new Aas.Key(
                    theType,
                    theValue);
            }  // public static Aas.Key KeyFrom

            /// <summary>
            /// Deserialize the enumeration IdentifiableElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IdentifiableElements.
            /// </exception>
            public static Aas.IdentifiableElements IdentifiableElementsFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.IdentifiableElements? result = Stringification.IdentifiableElementsFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of IdentifiableElements " +
                        $"at: {path}");
            }  // public static Aas.IdentifiableElements IdentifiableElementsFrom

            /// <summary>
            /// Deserialize the enumeration ReferableElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ReferableElements.
            /// </exception>
            public static Aas.ReferableElements ReferableElementsFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.ReferableElements? result = Stringification.ReferableElementsFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of ReferableElements " +
                        $"at: {path}");
            }  // public static Aas.ReferableElements ReferableElementsFrom

            /// <summary>
            /// Deserialize the enumeration KeyElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of KeyElements.
            /// </exception>
            public static Aas.KeyElements KeyElementsFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.KeyElements? result = Stringification.KeyElementsFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of KeyElements " +
                        $"at: {path}");
            }  // public static Aas.KeyElements KeyElementsFrom

            /// <summary>
            /// Deserialize the enumeration SubmodelElements from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of SubmodelElements.
            /// </exception>
            public static Aas.SubmodelElements SubmodelElementsFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.SubmodelElements? result = Stringification.SubmodelElementsFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of SubmodelElements " +
                        $"at: {path}");
            }  // public static Aas.SubmodelElements SubmodelElementsFrom

            /// <summary>
            /// Deserialize the enumeration BuildInListTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of BuildInListTypes.
            /// </exception>
            public static Aas.BuildInListTypes BuildInListTypesFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.BuildInListTypes? result = Stringification.BuildInListTypesFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of BuildInListTypes " +
                        $"at: {path}");
            }  // public static Aas.BuildInListTypes BuildInListTypesFrom

            /// <summary>
            /// Deserialize the enumeration DecimalBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DecimalBuildInTypes.
            /// </exception>
            public static Aas.DecimalBuildInTypes DecimalBuildInTypesFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.DecimalBuildInTypes? result = Stringification.DecimalBuildInTypesFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of DecimalBuildInTypes " +
                        $"at: {path}");
            }  // public static Aas.DecimalBuildInTypes DecimalBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration DurationBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DurationBuildInTypes.
            /// </exception>
            public static Aas.DurationBuildInTypes DurationBuildInTypesFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.DurationBuildInTypes? result = Stringification.DurationBuildInTypesFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of DurationBuildInTypes " +
                        $"at: {path}");
            }  // public static Aas.DurationBuildInTypes DurationBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration PrimitiveTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of PrimitiveTypes.
            /// </exception>
            public static Aas.PrimitiveTypes PrimitiveTypesFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.PrimitiveTypes? result = Stringification.PrimitiveTypesFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of PrimitiveTypes " +
                        $"at: {path}");
            }  // public static Aas.PrimitiveTypes PrimitiveTypesFrom

            /// <summary>
            /// Deserialize the enumeration StringBuildInTypes from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of StringBuildInTypes.
            /// </exception>
            public static Aas.StringBuildInTypes StringBuildInTypesFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.StringBuildInTypes? result = Stringification.StringBuildInTypesFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of StringBuildInTypes " +
                        $"at: {path}");
            }  // public static Aas.StringBuildInTypes StringBuildInTypesFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeDef from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DataTypeDef.
            /// </exception>
            public static Aas.DataTypeDef DataTypeDefFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.DataTypeDef? result = Stringification.DataTypeDefFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of DataTypeDef " +
                        $"at: {path}");
            }  // public static Aas.DataTypeDef DataTypeDefFrom

            public static Aas.LangStringSet LangStringSetFrom(
                Nodes.JsonNode node,
                string path)
            {
                throw new System.NotImplementedException("TODO");
            }

            /// <summary>
            /// Deserialize an instance of IDataSpecificationContent by dispatching
            /// based on <c>modelType</c> property of the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of IDataSpecificationContent.
            /// </exception>
            public static Aas.IDataSpecificationContent IDataSpecificationContentFrom(
                Nodes.JsonNode node,
                string path)
            {
                var obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected Nodes.JsonObject, " +
                        $"but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? modelTypeNode = obj["modelType"];
                if (modelTypeNode == null)
                {
                    throw new System.ArgumentException(
                        "Expected a model type, but none is present: " +
                        $"{path}/modelType");
                }
                Nodes.JsonValue? modelTypeValue = modelTypeNode as Nodes.JsonValue;
                if (modelTypeValue == null)
                {
                    throw new System.ArgumentException(
                        "Expected JsonValue, " +
                        $"but got {modelTypeNode.GetType()} at: {path}");
                }
                modelTypeValue.TryGetValue<string>(out string? modelType);
                if (modelType == null)
                {
                    throw new System.ArgumentException(
                        "Expected a string, " +
                        $"but the conversion failed from {modelTypeValue} " +
                        $"at: {path}/modelType");
                }

                switch (modelType)
                {
                case "DataSpecificationIec61360":
                    return DataSpecificationIec61360From(
                        node, path);
                case "DataSpecificationPhysicalUnit":
                    return DataSpecificationPhysicalUnitFrom(
                        node, path);
                    default:
                        throw new System.ArgumentException(
                            $"Unexpected model type for IDataSpecificationContent at {path}/modelType: " +
                            modelType);
                }
            }  // public static Aas.IDataSpecificationContent IDataSpecificationContentFrom

            /// <summary>
            /// Deserialize the enumeration DataTypeIec61360 from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DataTypeIec61360.
            /// </exception>
            public static Aas.DataTypeIec61360 DataTypeIec61360From(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.DataTypeIec61360? result = Stringification.DataTypeIec61360FromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of DataTypeIec61360 " +
                        $"at: {path}");
            }  // public static Aas.DataTypeIec61360 DataTypeIec61360From

            /// <summary>
            /// Deserialize the enumeration LevelType from the <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of LevelType.
            /// </exception>
            public static Aas.LevelType LevelTypeFrom(
                Nodes.JsonNode node,
                string path)
            {
                string text = Implementation.StringFrom(node, path);
                Aas.LevelType? result = Stringification.LevelTypeFromString(text);
                return result
                     ?? throw new System.ArgumentException(
                        "Not a valid JSON representation of LevelType " +
                        $"at: {path}");
            }  // public static Aas.LevelType LevelTypeFrom

            /// <summary>
            /// Deserialize an instance of ValueReferencePair from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ValueReferencePair.
            /// </exception>
            public static Aas.ValueReferencePair ValueReferencePairFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                if (nodeValue == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"value\" is missing " +
                        $"at: {path}/value");
                }
                string theValue = Implementation.StringFrom(
                    nodeValue,
                    $"{path}/value");

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                if (nodeValueId == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"valueId\" is missing " +
                        $"at: {path}/valueId");
                }
                Aas.IReference theValueId = Deserialize.IReferenceFrom(
                    nodeValueId,
                    $"{path}/valueId");

                return new Aas.ValueReferencePair(
                    theValue,
                    theValueId);
            }  // public static Aas.ValueReferencePair ValueReferencePairFrom

            /// <summary>
            /// Deserialize an instance of ValueList from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of ValueList.
            /// </exception>
            public static Aas.ValueList ValueListFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeValueReferencePairs = obj["valueReferencePairs"];
                if (nodeValueReferencePairs == null)
                {
                    throw new System.ArgumentException(
                        "Required property \"valueReferencePairs\" is missing " +
                        $"at: {path}/valueReferencePairs");
                }
                Nodes.JsonArray? arrayValueReferencePairs = nodeValueReferencePairs as Nodes.JsonArray;
                if (arrayValueReferencePairs == null)
                {
                    throw new System.ArgumentException(
                        $"Expected a JsonArray, but got {nodeValueReferencePairs.GetType()} " +
                        $"at: {path}/valueReferencePairs");
                }
                var theValueReferencePairs = new List<ValueReferencePair>(
                    arrayValueReferencePairs.Count);
                int indexValueReferencePairs = 0;
                foreach (Nodes.JsonNode? item in arrayValueReferencePairs)
                {
                    if (item == null)
                    {
                        throw new System.ArgumentException(
                            "Expected a non-null item, but got a null " +
                            $"at: {path}/valueReferencePairs/{indexValueReferencePairs}");
                    }
                    ValueReferencePair parsedItem = Deserialize.ValueReferencePairFrom(
                        item,
                        $"{path}/valueReferencePairs/{indexValueReferencePairs}");
                    theValueReferencePairs.Add(parsedItem);
                    indexValueReferencePairs++;
                }

                return new Aas.ValueList(
                    theValueReferencePairs);
            }  // public static Aas.ValueList ValueListFrom

            /// <summary>
            /// Deserialize an instance of DataSpecificationIec61360 from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DataSpecificationIec61360.
            /// </exception>
            public static Aas.DataSpecificationIec61360 DataSpecificationIec61360From(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodePreferredName = obj["preferredName"];
                Aas.LangStringSet? thePreferredName = null;
                if (nodePreferredName != null)
                {
                    thePreferredName = Deserialize.LangStringSetFrom(
                        nodePreferredName,
                        $"{path}/preferredName");
                }

                Nodes.JsonNode? nodeShortName = obj["shortName"];
                Aas.LangStringSet? theShortName = null;
                if (nodeShortName != null)
                {
                    theShortName = Deserialize.LangStringSetFrom(
                        nodeShortName,
                        $"{path}/shortName");
                }

                Nodes.JsonNode? nodeUnit = obj["unit"];
                string? theUnit = null;
                if (nodeUnit != null)
                {
                    theUnit = Implementation.StringFrom(
                        nodeUnit,
                        $"{path}/unit");
                }

                Nodes.JsonNode? nodeUnitId = obj["unitId"];
                Aas.IReference? theUnitId = null;
                if (nodeUnitId != null)
                {
                    theUnitId = Deserialize.IReferenceFrom(
                        nodeUnitId,
                        $"{path}/unitId");
                }

                Nodes.JsonNode? nodeSourceOfDefinition = obj["sourceOfDefinition"];
                string? theSourceOfDefinition = null;
                if (nodeSourceOfDefinition != null)
                {
                    theSourceOfDefinition = Implementation.StringFrom(
                        nodeSourceOfDefinition,
                        $"{path}/sourceOfDefinition");
                }

                Nodes.JsonNode? nodeSymbol = obj["symbol"];
                string? theSymbol = null;
                if (nodeSymbol != null)
                {
                    theSymbol = Implementation.StringFrom(
                        nodeSymbol,
                        $"{path}/symbol");
                }

                Nodes.JsonNode? nodeDataType = obj["dataType"];
                Aas.DataTypeIec61360? theDataType = null;
                if (nodeDataType != null)
                {
                    theDataType = Deserialize.DataTypeIec61360From(
                        nodeDataType,
                        $"{path}/dataType");
                }

                Nodes.JsonNode? nodeDefinition = obj["definition"];
                Aas.LangStringSet? theDefinition = null;
                if (nodeDefinition != null)
                {
                    theDefinition = Deserialize.LangStringSetFrom(
                        nodeDefinition,
                        $"{path}/definition");
                }

                Nodes.JsonNode? nodeValueFormat = obj["valueFormat"];
                string? theValueFormat = null;
                if (nodeValueFormat != null)
                {
                    theValueFormat = Implementation.StringFrom(
                        nodeValueFormat,
                        $"{path}/valueFormat");
                }

                Nodes.JsonNode? nodeValueList = obj["valueList"];
                Aas.ValueList? theValueList = null;
                if (nodeValueList != null)
                {
                    theValueList = Deserialize.ValueListFrom(
                        nodeValueList,
                        $"{path}/valueList");
                }

                Nodes.JsonNode? nodeValue = obj["value"];
                string? theValue = null;
                if (nodeValue != null)
                {
                    theValue = Implementation.StringFrom(
                        nodeValue,
                        $"{path}/value");
                }

                Nodes.JsonNode? nodeValueId = obj["valueId"];
                Aas.IReference? theValueId = null;
                if (nodeValueId != null)
                {
                    theValueId = Deserialize.IReferenceFrom(
                        nodeValueId,
                        $"{path}/valueId");
                }

                Nodes.JsonNode? nodeLevelType = obj["levelType"];
                Aas.LevelType? theLevelType = null;
                if (nodeLevelType != null)
                {
                    theLevelType = Deserialize.LevelTypeFrom(
                        nodeLevelType,
                        $"{path}/levelType");
                }

                return new Aas.DataSpecificationIec61360(
                    thePreferredName,
                    theShortName,
                    theUnit,
                    theUnitId,
                    theSourceOfDefinition,
                    theSymbol,
                    theDataType,
                    theDefinition,
                    theValueFormat,
                    theValueList,
                    theValue,
                    theValueId,
                    theLevelType);
            }  // public static Aas.DataSpecificationIec61360 DataSpecificationIec61360From

            /// <summary>
            /// Deserialize an instance of DataSpecificationPhysicalUnit from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of DataSpecificationPhysicalUnit.
            /// </exception>
            public static Aas.DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeUnitName = obj["unitName"];
                string? theUnitName = null;
                if (nodeUnitName != null)
                {
                    theUnitName = Implementation.StringFrom(
                        nodeUnitName,
                        $"{path}/unitName");
                }

                Nodes.JsonNode? nodeUnitSymbol = obj["unitSymbol"];
                string? theUnitSymbol = null;
                if (nodeUnitSymbol != null)
                {
                    theUnitSymbol = Implementation.StringFrom(
                        nodeUnitSymbol,
                        $"{path}/unitSymbol");
                }

                Nodes.JsonNode? nodeDefinition = obj["definition"];
                Aas.LangStringSet? theDefinition = null;
                if (nodeDefinition != null)
                {
                    theDefinition = Deserialize.LangStringSetFrom(
                        nodeDefinition,
                        $"{path}/definition");
                }

                Nodes.JsonNode? nodeSiNotation = obj["siNotation"];
                string? theSiNotation = null;
                if (nodeSiNotation != null)
                {
                    theSiNotation = Implementation.StringFrom(
                        nodeSiNotation,
                        $"{path}/siNotation");
                }

                Nodes.JsonNode? nodeDinNotation = obj["dinNotation"];
                string? theDinNotation = null;
                if (nodeDinNotation != null)
                {
                    theDinNotation = Implementation.StringFrom(
                        nodeDinNotation,
                        $"{path}/dinNotation");
                }

                Nodes.JsonNode? nodeEceName = obj["eceName"];
                string? theEceName = null;
                if (nodeEceName != null)
                {
                    theEceName = Implementation.StringFrom(
                        nodeEceName,
                        $"{path}/eceName");
                }

                Nodes.JsonNode? nodeEceCode = obj["eceCode"];
                string? theEceCode = null;
                if (nodeEceCode != null)
                {
                    theEceCode = Implementation.StringFrom(
                        nodeEceCode,
                        $"{path}/eceCode");
                }

                Nodes.JsonNode? nodeNistName = obj["nistName"];
                string? theNistName = null;
                if (nodeNistName != null)
                {
                    theNistName = Implementation.StringFrom(
                        nodeNistName,
                        $"{path}/nistName");
                }

                Nodes.JsonNode? nodeSourceOfDefinition = obj["sourceOfDefinition"];
                string? theSourceOfDefinition = null;
                if (nodeSourceOfDefinition != null)
                {
                    theSourceOfDefinition = Implementation.StringFrom(
                        nodeSourceOfDefinition,
                        $"{path}/sourceOfDefinition");
                }

                Nodes.JsonNode? nodeConversionFactor = obj["conversionFactor"];
                string? theConversionFactor = null;
                if (nodeConversionFactor != null)
                {
                    theConversionFactor = Implementation.StringFrom(
                        nodeConversionFactor,
                        $"{path}/conversionFactor");
                }

                Nodes.JsonNode? nodeRegistrationAuthorityId = obj["registrationAuthorityId"];
                string? theRegistrationAuthorityId = null;
                if (nodeRegistrationAuthorityId != null)
                {
                    theRegistrationAuthorityId = Implementation.StringFrom(
                        nodeRegistrationAuthorityId,
                        $"{path}/registrationAuthorityId");
                }

                Nodes.JsonNode? nodeSupplier = obj["supplier"];
                string? theSupplier = null;
                if (nodeSupplier != null)
                {
                    theSupplier = Implementation.StringFrom(
                        nodeSupplier,
                        $"{path}/supplier");
                }

                return new Aas.DataSpecificationPhysicalUnit(
                    theUnitName,
                    theUnitSymbol,
                    theDefinition,
                    theSiNotation,
                    theDinNotation,
                    theEceName,
                    theEceCode,
                    theNistName,
                    theSourceOfDefinition,
                    theConversionFactor,
                    theRegistrationAuthorityId,
                    theSupplier);
            }  // public static Aas.DataSpecificationPhysicalUnit DataSpecificationPhysicalUnitFrom

            /// <summary>
            /// Deserialize an instance of Environment from <paramref name="node" />.
            /// </summary>
            /// <param name="node">JSON node to be parsed</param>
            /// <param name="path">Path to the node used in exceptions</param>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="node" /> is not a valid JSON representation
            /// of Environment.
            /// </exception>
            public static Aas.Environment EnvironmentFrom(
                Nodes.JsonNode node,
                string path)
            {
                Nodes.JsonObject? obj = node as Nodes.JsonObject;
                if (obj == null)
                {
                    throw new System.ArgumentException(
                        "Expected a JsonObject, but got {node.GetType()} at: {path}");
                }

                Nodes.JsonNode? nodeAssetAdministrationShells = obj["assetAdministrationShells"];
                List<AssetAdministrationShell>? theAssetAdministrationShells = null;
                if (nodeAssetAdministrationShells != null)
                {
                    Nodes.JsonArray? arrayAssetAdministrationShells = nodeAssetAdministrationShells as Nodes.JsonArray;
                    if (arrayAssetAdministrationShells == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeAssetAdministrationShells.GetType()} " +
                            $"at: {path}/assetAdministrationShells");
                    }
                    theAssetAdministrationShells = new List<AssetAdministrationShell>(
                        arrayAssetAdministrationShells.Count);
                    int indexAssetAdministrationShells = 0;
                    foreach (Nodes.JsonNode? item in arrayAssetAdministrationShells)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/assetAdministrationShells/{indexAssetAdministrationShells}");
                        }
                        AssetAdministrationShell parsedItem = Deserialize.AssetAdministrationShellFrom(
                            item,
                            $"{path}/assetAdministrationShells/{indexAssetAdministrationShells}");
                        theAssetAdministrationShells.Add(parsedItem);
                        indexAssetAdministrationShells++;
                    }
                }

                Nodes.JsonNode? nodeSubmodels = obj["submodels"];
                List<Submodel>? theSubmodels = null;
                if (nodeSubmodels != null)
                {
                    Nodes.JsonArray? arraySubmodels = nodeSubmodels as Nodes.JsonArray;
                    if (arraySubmodels == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeSubmodels.GetType()} " +
                            $"at: {path}/submodels");
                    }
                    theSubmodels = new List<Submodel>(
                        arraySubmodels.Count);
                    int indexSubmodels = 0;
                    foreach (Nodes.JsonNode? item in arraySubmodels)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/submodels/{indexSubmodels}");
                        }
                        Submodel parsedItem = Deserialize.SubmodelFrom(
                            item,
                            $"{path}/submodels/{indexSubmodels}");
                        theSubmodels.Add(parsedItem);
                        indexSubmodels++;
                    }
                }

                Nodes.JsonNode? nodeConceptDescriptions = obj["conceptDescriptions"];
                List<ConceptDescription>? theConceptDescriptions = null;
                if (nodeConceptDescriptions != null)
                {
                    Nodes.JsonArray? arrayConceptDescriptions = nodeConceptDescriptions as Nodes.JsonArray;
                    if (arrayConceptDescriptions == null)
                    {
                        throw new System.ArgumentException(
                            $"Expected a JsonArray, but got {nodeConceptDescriptions.GetType()} " +
                            $"at: {path}/conceptDescriptions");
                    }
                    theConceptDescriptions = new List<ConceptDescription>(
                        arrayConceptDescriptions.Count);
                    int indexConceptDescriptions = 0;
                    foreach (Nodes.JsonNode? item in arrayConceptDescriptions)
                    {
                        if (item == null)
                        {
                            throw new System.ArgumentException(
                                "Expected a non-null item, but got a null " +
                                $"at: {path}/conceptDescriptions/{indexConceptDescriptions}");
                        }
                        ConceptDescription parsedItem = Deserialize.ConceptDescriptionFrom(
                            item,
                            $"{path}/conceptDescriptions/{indexConceptDescriptions}");
                        theConceptDescriptions.Add(parsedItem);
                        indexConceptDescriptions++;
                    }
                }

                return new Aas.Environment(
                    theAssetAdministrationShells,
                    theSubmodels,
                    theConceptDescriptions);
            }  // public static Aas.Environment EnvironmentFrom
        }  // public static class Deserialize

        internal class Transformer
            : Visitation.AbstractTransformer<Nodes.JsonObject>
        {
            public override Nodes.JsonObject Transform(Aas.Extension that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["name"] = Nodes.JsonValue.Create(
                    that.Name);

                if (that.ValueType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueType
                        ?? throw new System.InvalidOperationException();
                    result["valueType"] = Serialize.DataTypeDefToJsonValue(
                        value);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.RefersTo != null)
                {
                    result["refersTo"] = Transform(
                        that.RefersTo);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AdministrativeInformation that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.Version != null)
                {
                    result["version"] = Nodes.JsonValue.Create(
                        that.Version);
                }

                if (that.Revision != null)
                {
                    result["revision"] = Nodes.JsonValue.Create(
                        that.Revision);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Qualifier that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["type"] = Nodes.JsonValue.Create(
                    that.Type);

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Formula that)
            {
                var result = new Nodes.JsonObject();

                if (that.DependsOn != null)
                {
                    var arrayDependsOn = new Nodes.JsonArray();
                    foreach (IReference item in that.DependsOn)
                    {
                        arrayDependsOn.Add(
                            Transform(
                                item));
                    }
                    result["dependsOn"] = arrayDependsOn;
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetAdministrationShell that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                if (that.DerivedFrom != null)
                {
                    result["derivedFrom"] = Transform(
                        that.DerivedFrom);
                }

                result["assetInformation"] = Transform(
                    that.AssetInformation);

                var arraySubmodels = new Nodes.JsonArray();
                foreach (IReference item in that.Submodels)
                {
                    arraySubmodels.Add(
                        Transform(
                            item));
                }
                result["submodels"] = arraySubmodels;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AssetInformation that)
            {
                var result = new Nodes.JsonObject();

                result["assetKind"] = Serialize.AssetKindToJsonValue(
                    that.AssetKind);

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    result["specificAssetId"] = Transform(
                        that.SpecificAssetId);
                }

                if (that.DefaultThumbnail != null)
                {
                    result["defaultThumbnail"] = Transform(
                        that.DefaultThumbnail);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.IdentifierKeyValuePair that)
            {
                var result = new Nodes.JsonObject();

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                result["key"] = Nodes.JsonValue.Create(
                    that.Key);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                if (that.ExternalSubjectId != null)
                {
                    result["externalSubjectId"] = Transform(
                        that.ExternalSubjectId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Submodel that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                var arraySubmodelElements = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.SubmodelElements)
                {
                    arraySubmodelElements.Add(
                        Transform(
                            item));
                }
                result["submodelElements"] = arraySubmodelElements;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementList that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["submodelElementTypeValues"] = Serialize.SubmodelElementsToJsonValue(
                    that.SubmodelElementTypeValues);

                var arrayValues = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Values)
                {
                    arrayValues.Add(
                        Transform(
                            item));
                }
                result["values"] = arrayValues;

                if (that.SemanticIdValues != null)
                {
                    result["semanticIdValues"] = Transform(
                        that.SemanticIdValues);
                }

                if (that.ValueTypeValues != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeDef value = that.ValueTypeValues
                        ?? throw new System.InvalidOperationException();
                    result["valueTypeValues"] = Serialize.DataTypeDefToJsonValue(
                        value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.SubmodelElementStruct that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                var arrayValues = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Values)
                {
                    arrayValues.Add(
                        Transform(
                            item));
                }
                result["values"] = arrayValues;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Property that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.MultiLanguageProperty that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.Value != null)
                {
                    result["value"] = Transform(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Range that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["valueType"] = Serialize.DataTypeDefToJsonValue(
                    that.ValueType);

                if (that.Min != null)
                {
                    result["min"] = Nodes.JsonValue.Create(
                        that.Min);
                }

                if (that.Max != null)
                {
                    result["max"] = Nodes.JsonValue.Create(
                        that.Max);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ReferenceElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                if (that.Value != null)
                {
                    result["value"] = Transform(
                        that.Value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Blob that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["mimeType"] = Nodes.JsonValue.Create(
                    that.MimeType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        System.Convert.ToBase64String(
                            that.Value));
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.File that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["mimeType"] = Nodes.JsonValue.Create(
                    that.MimeType);

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.AnnotatedRelationshipElement that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["first"] = Transform(
                    that.First);

                result["second"] = Transform(
                    that.Second);

                var arrayAnnotation = new Nodes.JsonArray();
                foreach (IDataElement item in that.Annotation)
                {
                    arrayAnnotation.Add(
                        Transform(
                            item));
                }
                result["annotation"] = arrayAnnotation;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Entity that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["entityType"] = Serialize.EntityTypeToJsonValue(
                    that.EntityType);

                var arrayStatements = new Nodes.JsonArray();
                foreach (ISubmodelElement item in that.Statements)
                {
                    arrayStatements.Add(
                        Transform(
                            item));
                }
                result["statements"] = arrayStatements;

                if (that.GlobalAssetId != null)
                {
                    result["globalAssetId"] = Transform(
                        that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    result["specificAssetId"] = Transform(
                        that.SpecificAssetId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.BasicEvent that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                result["observed"] = Transform(
                    that.Observed);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Operation that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                var arrayInputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.InputVariables)
                {
                    arrayInputVariables.Add(
                        Transform(
                            item));
                }
                result["inputVariables"] = arrayInputVariables;

                var arrayOutputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.OutputVariables)
                {
                    arrayOutputVariables.Add(
                        Transform(
                            item));
                }
                result["outputVariables"] = arrayOutputVariables;

                var arrayInoutputVariables = new Nodes.JsonArray();
                foreach (OperationVariable item in that.InoutputVariables)
                {
                    arrayInoutputVariables.Add(
                        Transform(
                            item));
                }
                result["inoutputVariables"] = arrayInoutputVariables;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.OperationVariable that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Transform(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Capability that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.Kind != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.ModelingKind value = that.Kind
                        ?? throw new System.InvalidOperationException();
                    result["kind"] = Serialize.ModelingKindToJsonValue(
                        value);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayQualifiers = new Nodes.JsonArray();
                foreach (IConstraint item in that.Qualifiers)
                {
                    arrayQualifiers.Add(
                        Transform(
                            item));
                }
                result["qualifiers"] = arrayQualifiers;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ConceptDescription that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                result["id"] = Nodes.JsonValue.Create(
                    that.Id);

                if (that.Administration != null)
                {
                    result["administration"] = Transform(
                        that.Administration);
                }

                var arrayIsCaseOf = new Nodes.JsonArray();
                foreach (IReference item in that.IsCaseOf)
                {
                    arrayIsCaseOf.Add(
                        Transform(
                            item));
                }
                result["isCaseOf"] = arrayIsCaseOf;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.View that)
            {
                var result = new Nodes.JsonObject();

                if (that.DataSpecifications != null)
                {
                    var arrayDataSpecifications = new Nodes.JsonArray();
                    foreach (IReference item in that.DataSpecifications)
                    {
                        arrayDataSpecifications.Add(
                            Transform(
                                item));
                    }
                    result["dataSpecifications"] = arrayDataSpecifications;
                }

                var arrayExtensions = new Nodes.JsonArray();
                foreach (Extension item in that.Extensions)
                {
                    arrayExtensions.Add(
                        Transform(
                            item));
                }
                result["extensions"] = arrayExtensions;

                if (that.IdShort != null)
                {
                    result["idShort"] = Nodes.JsonValue.Create(
                        that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    result["displayName"] = Transform(
                        that.DisplayName);
                }

                if (that.Category != null)
                {
                    result["category"] = Nodes.JsonValue.Create(
                        that.Category);
                }

                if (that.Description != null)
                {
                    result["description"] = Transform(
                        that.Description);
                }

                if (that.SemanticId != null)
                {
                    result["semanticId"] = Transform(
                        that.SemanticId);
                }

                var arrayContainedElements = new Nodes.JsonArray();
                foreach (IReference item in that.ContainedElements)
                {
                    arrayContainedElements.Add(
                        Transform(
                            item));
                }
                result["containedElements"] = arrayContainedElements;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.GlobalReference that)
            {
                var result = new Nodes.JsonObject();

                var arrayValues = new Nodes.JsonArray();
                foreach (string item in that.Values)
                {
                    arrayValues.Add(
                        Nodes.JsonValue.Create(
                            item));
                }
                result["values"] = arrayValues;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ModelReference that)
            {
                var result = new Nodes.JsonObject();

                var arrayKeys = new Nodes.JsonArray();
                foreach (Key item in that.Keys)
                {
                    arrayKeys.Add(
                        Transform(
                            item));
                }
                result["keys"] = arrayKeys;

                if (that.ReferredSemanticId != null)
                {
                    result["referredSemanticId"] = Transform(
                        that.ReferredSemanticId);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Key that)
            {
                var result = new Nodes.JsonObject();

                result["type"] = Serialize.KeyElementsToJsonValue(
                    that.Type);

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.LangStringSet that)
            {
                throw new System.NotImplementedException("TODO");
            }

            public override Nodes.JsonObject Transform(Aas.ValueReferencePair that)
            {
                var result = new Nodes.JsonObject();

                result["value"] = Nodes.JsonValue.Create(
                    that.Value);

                result["valueId"] = Transform(
                    that.ValueId);

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.ValueList that)
            {
                var result = new Nodes.JsonObject();

                var arrayValueReferencePairs = new Nodes.JsonArray();
                foreach (ValueReferencePair item in that.ValueReferencePairs)
                {
                    arrayValueReferencePairs.Add(
                        Transform(
                            item));
                }
                result["valueReferencePairs"] = arrayValueReferencePairs;

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationIec61360 that)
            {
                var result = new Nodes.JsonObject();

                if (that.PreferredName != null)
                {
                    result["preferredName"] = Transform(
                        that.PreferredName);
                }

                if (that.ShortName != null)
                {
                    result["shortName"] = Transform(
                        that.ShortName);
                }

                if (that.Unit != null)
                {
                    result["unit"] = Nodes.JsonValue.Create(
                        that.Unit);
                }

                if (that.UnitId != null)
                {
                    result["unitId"] = Transform(
                        that.UnitId);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.Symbol != null)
                {
                    result["symbol"] = Nodes.JsonValue.Create(
                        that.Symbol);
                }

                if (that.DataType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.DataTypeIec61360 value = that.DataType
                        ?? throw new System.InvalidOperationException();
                    result["dataType"] = Serialize.DataTypeIec61360ToJsonValue(
                        value);
                }

                if (that.Definition != null)
                {
                    result["definition"] = Transform(
                        that.Definition);
                }

                if (that.ValueFormat != null)
                {
                    result["valueFormat"] = Nodes.JsonValue.Create(
                        that.ValueFormat);
                }

                if (that.ValueList != null)
                {
                    result["valueList"] = Transform(
                        that.ValueList);
                }

                if (that.Value != null)
                {
                    result["value"] = Nodes.JsonValue.Create(
                        that.Value);
                }

                if (that.ValueId != null)
                {
                    result["valueId"] = Transform(
                        that.ValueId);
                }

                if (that.LevelType != null)
                {
                    // We need to help the static analyzer with a null coalescing.
                    Aas.LevelType value = that.LevelType
                        ?? throw new System.InvalidOperationException();
                    result["levelType"] = Serialize.LevelTypeToJsonValue(
                        value);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.DataSpecificationPhysicalUnit that)
            {
                var result = new Nodes.JsonObject();

                if (that.UnitName != null)
                {
                    result["unitName"] = Nodes.JsonValue.Create(
                        that.UnitName);
                }

                if (that.UnitSymbol != null)
                {
                    result["unitSymbol"] = Nodes.JsonValue.Create(
                        that.UnitSymbol);
                }

                if (that.Definition != null)
                {
                    result["definition"] = Transform(
                        that.Definition);
                }

                if (that.SiNotation != null)
                {
                    result["siNotation"] = Nodes.JsonValue.Create(
                        that.SiNotation);
                }

                if (that.DinNotation != null)
                {
                    result["dinNotation"] = Nodes.JsonValue.Create(
                        that.DinNotation);
                }

                if (that.EceName != null)
                {
                    result["eceName"] = Nodes.JsonValue.Create(
                        that.EceName);
                }

                if (that.EceCode != null)
                {
                    result["eceCode"] = Nodes.JsonValue.Create(
                        that.EceCode);
                }

                if (that.NistName != null)
                {
                    result["nistName"] = Nodes.JsonValue.Create(
                        that.NistName);
                }

                if (that.SourceOfDefinition != null)
                {
                    result["sourceOfDefinition"] = Nodes.JsonValue.Create(
                        that.SourceOfDefinition);
                }

                if (that.ConversionFactor != null)
                {
                    result["conversionFactor"] = Nodes.JsonValue.Create(
                        that.ConversionFactor);
                }

                if (that.RegistrationAuthorityId != null)
                {
                    result["registrationAuthorityId"] = Nodes.JsonValue.Create(
                        that.RegistrationAuthorityId);
                }

                if (that.Supplier != null)
                {
                    result["supplier"] = Nodes.JsonValue.Create(
                        that.Supplier);
                }

                return result;
            }

            public override Nodes.JsonObject Transform(Aas.Environment that)
            {
                var result = new Nodes.JsonObject();

                if (that.AssetAdministrationShells != null)
                {
                    var arrayAssetAdministrationShells = new Nodes.JsonArray();
                    foreach (AssetAdministrationShell item in that.AssetAdministrationShells)
                    {
                        arrayAssetAdministrationShells.Add(
                            Transform(
                                item));
                    }
                    result["assetAdministrationShells"] = arrayAssetAdministrationShells;
                }

                if (that.Submodels != null)
                {
                    var arraySubmodels = new Nodes.JsonArray();
                    foreach (Submodel item in that.Submodels)
                    {
                        arraySubmodels.Add(
                            Transform(
                                item));
                    }
                    result["submodels"] = arraySubmodels;
                }

                if (that.ConceptDescriptions != null)
                {
                    var arrayConceptDescriptions = new Nodes.JsonArray();
                    foreach (ConceptDescription item in that.ConceptDescriptions)
                    {
                        arrayConceptDescriptions.Add(
                            Transform(
                                item));
                    }
                    result["conceptDescriptions"] = arrayConceptDescriptions;
                }

                return result;
            }
        }  // internal class Transformer

        /// <summary>
        /// Serialize instances of meta-model classes to JSON elements.
        /// </summary>
        /// <example>
        /// Here is an example how to serialize an instance of IHasSemantics:
        /// <code>
        /// var anInstance = new Aas.IHasSemantics(
        ///     // ... some constructor arguments ...
        /// );
        /// Json.Nodes.JsonObject element = Serialize.ToJsonObject(
        ///     anInstance);
        /// </code>
        /// </example>
        public static class Serialize
        {
            private static Transformer _transformer = new Transformer();

            /// <summary>
            /// Serialize an instance of the meta-model into a JSON object.
            /// </summary>
            public static Nodes.JsonObject ToJsonObject(Aas.IClass that)
            {
                return Serialize._transformer.Transform(that);
            }

            /// <summary>
            /// Serialize a literal of ModelingKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ModelingKindToJsonValue(Aas.ModelingKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ModelingKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of AssetKind into a JSON string.
            /// </summary>
            public static Nodes.JsonValue AssetKindToJsonValue(Aas.AssetKind that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid AssetKind: {that}");
            }

            /// <summary>
            /// Serialize a literal of EntityType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue EntityTypeToJsonValue(Aas.EntityType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid EntityType: {that}");
            }

            /// <summary>
            /// Serialize a literal of IdentifiableElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue IdentifiableElementsToJsonValue(Aas.IdentifiableElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid IdentifiableElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of ReferableElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue ReferableElementsToJsonValue(Aas.ReferableElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid ReferableElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of KeyElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue KeyElementsToJsonValue(Aas.KeyElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid KeyElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of SubmodelElements into a JSON string.
            /// </summary>
            public static Nodes.JsonValue SubmodelElementsToJsonValue(Aas.SubmodelElements that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid SubmodelElements: {that}");
            }

            /// <summary>
            /// Serialize a literal of BuildInListTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue BuildInListTypesToJsonValue(Aas.BuildInListTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid BuildInListTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DecimalBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DecimalBuildInTypesToJsonValue(Aas.DecimalBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DecimalBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DurationBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DurationBuildInTypesToJsonValue(Aas.DurationBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DurationBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of PrimitiveTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue PrimitiveTypesToJsonValue(Aas.PrimitiveTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid PrimitiveTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of StringBuildInTypes into a JSON string.
            /// </summary>
            public static Nodes.JsonValue StringBuildInTypesToJsonValue(Aas.StringBuildInTypes that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid StringBuildInTypes: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeDef into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeDefToJsonValue(Aas.DataTypeDef that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeDef: {that}");
            }

            /// <summary>
            /// Serialize a literal of DataTypeIec61360 into a JSON string.
            /// </summary>
            public static Nodes.JsonValue DataTypeIec61360ToJsonValue(Aas.DataTypeIec61360 that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid DataTypeIec61360: {that}");
            }

            /// <summary>
            /// Serialize a literal of LevelType into a JSON string.
            /// </summary>
            public static Nodes.JsonValue LevelTypeToJsonValue(Aas.LevelType that)
            {
                string? text = Stringification.ToString(that);
                return Nodes.JsonValue.Create(text)
                    ?? throw new System.ArgumentException(
                        $"Invalid LevelType: {that}");
            }
        }  // public static class Serialize
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
