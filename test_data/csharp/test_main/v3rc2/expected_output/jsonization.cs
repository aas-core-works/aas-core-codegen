/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

/*
 * For more information about customizing JSON serialization in C#, please see:
 * <ul>
 * <li>https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to</li>
 * <li>https://docs.microsoft.com/en-gb/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to</li>
 * </ul>
 */

using Json = System.Text.Json;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Jsonization
    {
        public class IHasSemanticsJsonConverter :
            Json.Serialization.JsonConverter<Aas.IHasSemantics>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IHasSemantics).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IHasSemantics Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theName = null;
                DataTypeDef? theValueType = null;
                string? theValue = null;
                IReference? theRefersTo = null;
                string? theKey = null;
                IReference? theExternalSubjectId = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                string? theType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                string? theId = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                AdministrativeInformation? theAdministration = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;
                List<IReference>? theContainedElements = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "Extension":
                                    return new Aas.Extension(
                                        theName ?? throw new Json.JsonException(
                                            "Required property is missing: name"),
                                        theSemanticId,
                                        theValueType,
                                        theValue,
                                        theRefersTo);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "IdentifierKeyValuePair":
                                    return new Aas.IdentifierKeyValuePair(
                                        theKey ?? throw new Json.JsonException(
                                            "Required property is missing: key"),
                                        theValue ?? throw new Json.JsonException(
                                            "Required property is missing: value"),
                                        theExternalSubjectId,
                                        theSemanticId);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Qualifier":
                                    return new Aas.Qualifier(
                                        theType ?? throw new Json.JsonException(
                                            "Required property is missing: type"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theValue,
                                        theValueId,
                                        theSemanticId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                case "View":
                                    return new Aas.View(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theSemanticId,
                                        theDataSpecifications,
                                        theContainedElements);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "name":
                                    theName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "refersTo":
                                    theRefersTo =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "key":
                                    theKey =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "externalSubjectID":
                                    theExternalSubjectId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "type":
                                    theType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "containedElements":
                                    theContainedElements =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IHasSemantics: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IHasSemantics that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case Extension theExtension:
                    Json.JsonSerializer.Serialize(
                        writer, theExtension);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case IdentifierKeyValuePair theIdentifierKeyValuePair:
                    Json.JsonSerializer.Serialize(
                        writer, theIdentifierKeyValuePair);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Qualifier theQualifier:
                    Json.JsonSerializer.Serialize(
                        writer, theQualifier);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                case View theView:
                    Json.JsonSerializer.Serialize(
                        writer, theView);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IHasSemantics: {that}");
            }
            }
        }  // IHasSemanticsJsonConverter

        public class ExtensionJsonConverter :
            Json.Serialization.JsonConverter<Aas.Extension>
        {
            public override Aas.Extension Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theName = null;
                IReference? theSemanticId = null;
                DataTypeDef? theValueType = null;
                string? theValue = null;
                IReference? theRefersTo = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Extension(
                                theName ?? throw new Json.JsonException(
                                    "Required property is missing: name"),
                                theSemanticId,
                                theValueType,
                                theValue,
                                theRefersTo);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "name":
                                    theName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "refersTo":
                                    theRefersTo =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Extension that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("name");
                Json.JsonSerializer.Serialize(
                    writer, that.Name);

                if (that.ValueType != null)
                {
                    writer.WritePropertyName("valueType");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueType);
                }

                if (that.Value != null)
                {
                    writer.WritePropertyName("value");
                    Json.JsonSerializer.Serialize(
                        writer, that.Value);
                }

                if (that.RefersTo != null)
                {
                    writer.WritePropertyName("refersTo");
                    Json.JsonSerializer.Serialize(
                        writer, that.RefersTo);
                }

                writer.WriteEndObject();
            }
        }  // ExtensionJsonConverter

        public class IHasExtensionsJsonConverter :
            Json.Serialization.JsonConverter<Aas.IHasExtensions>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IHasExtensions).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IHasExtensions Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                string? theId = null;
                AssetInformation? theAssetInformation = null;
                AdministrativeInformation? theAdministration = null;
                IReference? theDerivedFrom = null;
                List<IReference>? theSubmodels = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                List<IReference>? theIsCaseOf = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;
                List<IReference>? theContainedElements = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theAssetInformation ?? throw new Json.JsonException(
                                            "Required property is missing: assetInformation"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications,
                                        theDerivedFrom,
                                        theSubmodels);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "ConceptDescription":
                                    return new Aas.ConceptDescription(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theIsCaseOf,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                case "View":
                                    return new Aas.View(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theSemanticId,
                                        theDataSpecifications,
                                        theContainedElements);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "assetInformation":
                                    theAssetInformation =  (
                                        Json.JsonSerializer.Deserialize<AssetInformation>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "derivedFrom":
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "isCaseOf":
                                    theIsCaseOf =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "containedElements":
                                    theContainedElements =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IHasExtensions: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IHasExtensions that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case ConceptDescription theConceptDescription:
                    Json.JsonSerializer.Serialize(
                        writer, theConceptDescription);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                case View theView:
                    Json.JsonSerializer.Serialize(
                        writer, theView);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IHasExtensions: {that}");
            }
            }
        }  // IHasExtensionsJsonConverter

        public class IReferableJsonConverter :
            Json.Serialization.JsonConverter<Aas.IReferable>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IReferable).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IReferable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                string? theId = null;
                AssetInformation? theAssetInformation = null;
                AdministrativeInformation? theAdministration = null;
                IReference? theDerivedFrom = null;
                List<IReference>? theSubmodels = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                List<IReference>? theIsCaseOf = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;
                List<IReference>? theContainedElements = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theAssetInformation ?? throw new Json.JsonException(
                                            "Required property is missing: assetInformation"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications,
                                        theDerivedFrom,
                                        theSubmodels);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "ConceptDescription":
                                    return new Aas.ConceptDescription(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theIsCaseOf,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                case "View":
                                    return new Aas.View(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theSemanticId,
                                        theDataSpecifications,
                                        theContainedElements);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "assetInformation":
                                    theAssetInformation =  (
                                        Json.JsonSerializer.Deserialize<AssetInformation>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "derivedFrom":
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "isCaseOf":
                                    theIsCaseOf =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "containedElements":
                                    theContainedElements =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IReferable: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IReferable that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case ConceptDescription theConceptDescription:
                    Json.JsonSerializer.Serialize(
                        writer, theConceptDescription);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                case View theView:
                    Json.JsonSerializer.Serialize(
                        writer, theView);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IReferable: {that}");
            }
            }
        }  // IReferableJsonConverter

        public class IIdentifiableJsonConverter :
            Json.Serialization.JsonConverter<Aas.IIdentifiable>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IIdentifiable).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IIdentifiable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                string? theId = null;
                string? theIdShort = null;
                AssetInformation? theAssetInformation = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                AdministrativeInformation? theAdministration = null;
                List<IReference>? theDataSpecifications = null;
                IReference? theDerivedFrom = null;
                List<IReference>? theSubmodels = null;
                List<IReference>? theIsCaseOf = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theAssetInformation ?? throw new Json.JsonException(
                                            "Required property is missing: assetInformation"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications,
                                        theDerivedFrom,
                                        theSubmodels);
                                case "ConceptDescription":
                                    return new Aas.ConceptDescription(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theIsCaseOf,
                                        theDataSpecifications);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "assetInformation":
                                    theAssetInformation =  (
                                        Json.JsonSerializer.Deserialize<AssetInformation>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "derivedFrom":
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "isCaseOf":
                                    theIsCaseOf =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IIdentifiable: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IIdentifiable that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                case ConceptDescription theConceptDescription:
                    Json.JsonSerializer.Serialize(
                        writer, theConceptDescription);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IIdentifiable: {that}");
            }
            }
        }  // IIdentifiableJsonConverter

        public class ModelingKindJsonConverter :
            Json.Serialization.JsonConverter<Aas.ModelingKind>
        {
            public override Aas.ModelingKind Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.ModelingKind? value = Stringification.ModelingKindFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid ModelingKind: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ModelingKind value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid ModelingKind: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IHasKindJsonConverter :
            Json.Serialization.JsonConverter<Aas.IHasKind>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IHasKind).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IHasKind Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                string? theId = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                AdministrativeInformation? theAdministration = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IHasKind: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IHasKind that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IHasKind: {that}");
            }
            }
        }  // IHasKindJsonConverter

        public class IHasDataSpecificationJsonConverter :
            Json.Serialization.JsonConverter<Aas.IHasDataSpecification>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IHasDataSpecification).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IHasDataSpecification Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                string? theVersion = null;
                string? theRevision = null;
                List<IReference>? theDataSpecifications = null;
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IDataElement>? theAnnotation = null;
                string? theId = null;
                AssetInformation? theAssetInformation = null;
                AdministrativeInformation? theAdministration = null;
                IReference? theDerivedFrom = null;
                List<IReference>? theSubmodels = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                List<IReference>? theIsCaseOf = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;
                List<IReference>? theContainedElements = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AdministrativeInformation":
                                    return new Aas.AdministrativeInformation(
                                        theVersion,
                                        theRevision,
                                        theDataSpecifications);
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theAssetInformation ?? throw new Json.JsonException(
                                            "Required property is missing: assetInformation"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications,
                                        theDerivedFrom,
                                        theSubmodels);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "ConceptDescription":
                                    return new Aas.ConceptDescription(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theIsCaseOf,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                case "View":
                                    return new Aas.View(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theSemanticId,
                                        theDataSpecifications,
                                        theContainedElements);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "version":
                                    theVersion =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "revision":
                                    theRevision =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "assetInformation":
                                    theAssetInformation =  (
                                        Json.JsonSerializer.Deserialize<AssetInformation>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "derivedFrom":
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "isCaseOf":
                                    theIsCaseOf =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "containedElements":
                                    theContainedElements =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IHasDataSpecification: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IHasDataSpecification that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AdministrativeInformation theAdministrativeInformation:
                    Json.JsonSerializer.Serialize(
                        writer, theAdministrativeInformation);
                    break;
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case ConceptDescription theConceptDescription:
                    Json.JsonSerializer.Serialize(
                        writer, theConceptDescription);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                case View theView:
                    Json.JsonSerializer.Serialize(
                        writer, theView);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IHasDataSpecification: {that}");
            }
            }
        }  // IHasDataSpecificationJsonConverter

        public class AdministrativeInformationJsonConverter :
            Json.Serialization.JsonConverter<Aas.AdministrativeInformation>
        {
            public override Aas.AdministrativeInformation Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theVersion = null;
                string? theRevision = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AdministrativeInformation(
                                theVersion,
                                theRevision,
                                theDataSpecifications);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "version":
                                    theVersion =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "revision":
                                    theRevision =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AdministrativeInformation that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                if (that.Version != null)
                {
                    writer.WritePropertyName("version");
                    Json.JsonSerializer.Serialize(
                        writer, that.Version);
                }

                if (that.Revision != null)
                {
                    writer.WritePropertyName("revision");
                    Json.JsonSerializer.Serialize(
                        writer, that.Revision);
                }

                writer.WriteEndObject();
            }
        }  // AdministrativeInformationJsonConverter

        public class IConstraintJsonConverter :
            Json.Serialization.JsonConverter<Aas.IConstraint>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IConstraint).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IConstraint Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                List<IReference>? theDependsOn = null;
                string? theType = null;
                DataTypeDef? theValueType = null;
                string? theValue = null;
                IReference? theValueId = null;
                IReference? theSemanticId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "Formula":
                                    return new Aas.Formula(
                                        theDependsOn);
                                case "Qualifier":
                                    return new Aas.Qualifier(
                                        theType ?? throw new Json.JsonException(
                                            "Required property is missing: type"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theValue,
                                        theValueId,
                                        theSemanticId);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dependsOn":
                                    theDependsOn =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "type":
                                    theType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IConstraint: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IConstraint that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case Formula theFormula:
                    Json.JsonSerializer.Serialize(
                        writer, theFormula);
                    break;
                case Qualifier theQualifier:
                    Json.JsonSerializer.Serialize(
                        writer, theQualifier);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IConstraint: {that}");
            }
            }
        }  // IConstraintJsonConverter

        public class IQualifiableJsonConverter :
            Json.Serialization.JsonConverter<Aas.IQualifiable>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IQualifiable).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IQualifiable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                string? theId = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                AdministrativeInformation? theAdministration = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "Submodel":
                                    return new Aas.Submodel(
                                        theId ?? throw new Json.JsonException(
                                            "Required property is missing: id"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theSubmodelElements,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IQualifiable: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IQualifiable that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case Submodel theSubmodel:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodel);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IQualifiable: {that}");
            }
            }
        }  // IQualifiableJsonConverter

        public class QualifierJsonConverter :
            Json.Serialization.JsonConverter<Aas.Qualifier>
        {
            public override Aas.Qualifier Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theType = null;
                DataTypeDef? theValueType = null;
                string? theValue = null;
                IReference? theValueId = null;
                IReference? theSemanticId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Qualifier(
                                theType ?? throw new Json.JsonException(
                                    "Required property is missing: type"),
                                theValueType ?? throw new Json.JsonException(
                                    "Required property is missing: valueType"),
                                theValue,
                                theValueId,
                                theSemanticId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "type":
                                    theType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Qualifier that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Qualifier");

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("type");
                Json.JsonSerializer.Serialize(
                    writer, that.Type);

                writer.WritePropertyName("valueType");
                Json.JsonSerializer.Serialize(
                    writer, that.ValueType);

                if (that.Value != null)
                {
                    writer.WritePropertyName("value");
                    Json.JsonSerializer.Serialize(
                        writer, that.Value);
                }

                if (that.ValueId != null)
                {
                    writer.WritePropertyName("valueID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueId);
                }

                writer.WriteEndObject();
            }
        }  // QualifierJsonConverter

        public class FormulaJsonConverter :
            Json.Serialization.JsonConverter<Aas.Formula>
        {
            public override Aas.Formula Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<IReference>? theDependsOn = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Formula(
                                theDependsOn);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dependsOn":
                                    theDependsOn =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Formula that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Formula");

                writer.WritePropertyName("dependsOn");
                Json.JsonSerializer.Serialize(
                    writer, that.DependsOn);

                writer.WriteEndObject();
            }
        }  // FormulaJsonConverter

        public class AssetAdministrationShellJsonConverter :
            Json.Serialization.JsonConverter<Aas.AssetAdministrationShell>
        {
            public override Aas.AssetAdministrationShell Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theId = null;
                string? theIdShort = null;
                AssetInformation? theAssetInformation = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                AdministrativeInformation? theAdministration = null;
                List<IReference>? theDataSpecifications = null;
                IReference? theDerivedFrom = null;
                List<IReference>? theSubmodels = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AssetAdministrationShell(
                                theId ?? throw new Json.JsonException(
                                    "Required property is missing: id"),
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theAssetInformation ?? throw new Json.JsonException(
                                    "Required property is missing: assetInformation"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theAdministration,
                                theDataSpecifications,
                                theDerivedFrom,
                                theSubmodels);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "derivedFrom":
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "assetInformation":
                                    theAssetInformation =  (
                                        Json.JsonSerializer.Deserialize<AssetInformation>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AssetAdministrationShell that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "AssetAdministrationShell");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                writer.WritePropertyName("id");
                Json.JsonSerializer.Serialize(
                    writer, that.Id);

                if (that.Administration != null)
                {
                    writer.WritePropertyName("administration");
                    Json.JsonSerializer.Serialize(
                        writer, that.Administration);
                }

                if (that.DerivedFrom != null)
                {
                    writer.WritePropertyName("derivedFrom");
                    Json.JsonSerializer.Serialize(
                        writer, that.DerivedFrom);
                }

                writer.WritePropertyName("assetInformation");
                Json.JsonSerializer.Serialize(
                    writer, that.AssetInformation);

                writer.WritePropertyName("submodels");
                Json.JsonSerializer.Serialize(
                    writer, that.Submodels);

                writer.WriteEndObject();
            }
        }  // AssetAdministrationShellJsonConverter

        public class AssetInformationJsonConverter :
            Json.Serialization.JsonConverter<Aas.AssetInformation>
        {
            public override Aas.AssetInformation Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                AssetKind? theAssetKind = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                File? theDefaultThumbnail = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AssetInformation(
                                theAssetKind ?? throw new Json.JsonException(
                                    "Required property is missing: assetKind"),
                                theGlobalAssetId,
                                theSpecificAssetId,
                                theDefaultThumbnail);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "assetKind":
                                    theAssetKind =  (
                                        Json.JsonSerializer.Deserialize<AssetKind>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "defaultThumbnail":
                                    theDefaultThumbnail =  (
                                        Json.JsonSerializer.Deserialize<File>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AssetInformation that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("assetKind");
                Json.JsonSerializer.Serialize(
                    writer, that.AssetKind);

                if (that.GlobalAssetId != null)
                {
                    writer.WritePropertyName("globalAssetID");
                    Json.JsonSerializer.Serialize(
                        writer, that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    writer.WritePropertyName("specificAssetID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SpecificAssetId);
                }

                if (that.DefaultThumbnail != null)
                {
                    writer.WritePropertyName("defaultThumbnail");
                    Json.JsonSerializer.Serialize(
                        writer, that.DefaultThumbnail);
                }

                writer.WriteEndObject();
            }
        }  // AssetInformationJsonConverter

        public class AssetKindJsonConverter :
            Json.Serialization.JsonConverter<Aas.AssetKind>
        {
            public override Aas.AssetKind Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.AssetKind? value = Stringification.AssetKindFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid AssetKind: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AssetKind value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid AssetKind: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifierKeyValuePairJsonConverter :
            Json.Serialization.JsonConverter<Aas.IdentifierKeyValuePair>
        {
            public override Aas.IdentifierKeyValuePair Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theKey = null;
                string? theValue = null;
                IReference? theExternalSubjectId = null;
                IReference? theSemanticId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.IdentifierKeyValuePair(
                                theKey ?? throw new Json.JsonException(
                                    "Required property is missing: key"),
                                theValue ?? throw new Json.JsonException(
                                    "Required property is missing: value"),
                                theExternalSubjectId,
                                theSemanticId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "key":
                                    theKey =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "externalSubjectID":
                                    theExternalSubjectId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IdentifierKeyValuePair that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("key");
                Json.JsonSerializer.Serialize(
                    writer, that.Key);

                writer.WritePropertyName("value");
                Json.JsonSerializer.Serialize(
                    writer, that.Value);

                if (that.ExternalSubjectId != null)
                {
                    writer.WritePropertyName("externalSubjectID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ExternalSubjectId);
                }

                writer.WriteEndObject();
            }
        }  // IdentifierKeyValuePairJsonConverter

        public class SubmodelJsonConverter :
            Json.Serialization.JsonConverter<Aas.Submodel>
        {
            public override Aas.Submodel Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theId = null;
                string? theIdShort = null;
                List<ISubmodelElement>? theSubmodelElements = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                AdministrativeInformation? theAdministration = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Submodel(
                                theId ?? throw new Json.JsonException(
                                    "Required property is missing: id"),
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theSubmodelElements,
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theAdministration,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "submodelElements":
                                    theSubmodelElements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Submodel that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Submodel");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                writer.WritePropertyName("id");
                Json.JsonSerializer.Serialize(
                    writer, that.Id);

                if (that.Administration != null)
                {
                    writer.WritePropertyName("administration");
                    Json.JsonSerializer.Serialize(
                        writer, that.Administration);
                }

                writer.WritePropertyName("submodelElements");
                Json.JsonSerializer.Serialize(
                    writer, that.SubmodelElements);

                writer.WriteEndObject();
            }
        }  // SubmodelJsonConverter

        public class ISubmodelElementJsonConverter :
            Json.Serialization.JsonConverter<Aas.ISubmodelElement>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.ISubmodelElement).IsAssignableFrom(typeToConvert);
            }

            public override Aas.ISubmodelElement Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;
                IReference? theObserved = null;
                string? theMimeType = null;
                byte[]? theContent = null;
                EntityType? theEntityType = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "Capability":
                                    return new Aas.Capability(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                case "Entity":
                                    return new Aas.Entity(
                                        theEntityType ?? throw new Json.JsonException(
                                            "Required property is missing: entityType"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theStatements,
                                        theGlobalAssetId,
                                        theSpecificAssetId);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Operation":
                                    return new Aas.Operation(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theInputVariables,
                                        theOutputVariables,
                                        theInoutputVariables);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                case "SubmodelElementList":
                                    return new Aas.SubmodelElementList(
                                        theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                            "Required property is missing: submodelElementTypeValues"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues,
                                        theSemanticIdValues,
                                        theValueTypeValues);
                                case "SubmodelElementStruct":
                                    return new Aas.SubmodelElementStruct(
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValues);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of ISubmodelElement: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ISubmodelElement that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case Capability theCapability:
                    Json.JsonSerializer.Serialize(
                        writer, theCapability);
                    break;
                case Entity theEntity:
                    Json.JsonSerializer.Serialize(
                        writer, theEntity);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Operation theOperation:
                    Json.JsonSerializer.Serialize(
                        writer, theOperation);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                case SubmodelElementList theSubmodelElementList:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementList);
                    break;
                case SubmodelElementStruct theSubmodelElementStruct:
                    Json.JsonSerializer.Serialize(
                        writer, theSubmodelElementStruct);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of ISubmodelElement: {that}");
            }
            }
        }  // ISubmodelElementJsonConverter

        public class IRelationshipElementJsonConverter :
            Json.Serialization.JsonConverter<Aas.IRelationshipElement>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IRelationshipElement).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IRelationshipElement Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AnnotatedRelationshipElement":
                                    return new Aas.AnnotatedRelationshipElement(
                                        theFirst ?? throw new Json.JsonException(
                                            "Required property is missing: first"),
                                        theSecond ?? throw new Json.JsonException(
                                            "Required property is missing: second"),
                                        theExtensions,
                                        theIdShort,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theAnnotation);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IRelationshipElement: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IRelationshipElement that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AnnotatedRelationshipElement theAnnotatedRelationshipElement:
                    Json.JsonSerializer.Serialize(
                        writer, theAnnotatedRelationshipElement);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IRelationshipElement: {that}");
            }
            }
        }  // IRelationshipElementJsonConverter

        public class SubmodelElementListJsonConverter :
            Json.Serialization.JsonConverter<Aas.SubmodelElementList>
        {
            public override Aas.SubmodelElementList Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                SubmodelElements? theSubmodelElementTypeValues = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<ISubmodelElement>? theValues = null;
                IReference? theSemanticIdValues = null;
                DataTypeDef? theValueTypeValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.SubmodelElementList(
                                theSubmodelElementTypeValues ?? throw new Json.JsonException(
                                    "Required property is missing: submodelElementTypeValues"),
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theValues,
                                theSemanticIdValues,
                                theValueTypeValues);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "submodelElementTypeValues":
                                    theSubmodelElementTypeValues =  (
                                        Json.JsonSerializer.Deserialize<SubmodelElements>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "semanticIDValues":
                                    theSemanticIdValues =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueTypeValues":
                                    theValueTypeValues =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.SubmodelElementList that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "SubmodelElementList");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("submodelElementTypeValues");
                Json.JsonSerializer.Serialize(
                    writer, that.SubmodelElementTypeValues);

                writer.WritePropertyName("values");
                Json.JsonSerializer.Serialize(
                    writer, that.Values);

                if (that.SemanticIdValues != null)
                {
                    writer.WritePropertyName("semanticIDValues");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticIdValues);
                }

                if (that.ValueTypeValues != null)
                {
                    writer.WritePropertyName("valueTypeValues");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueTypeValues);
                }

                writer.WriteEndObject();
            }
        }  // SubmodelElementListJsonConverter

        public class SubmodelElementStructJsonConverter :
            Json.Serialization.JsonConverter<Aas.SubmodelElementStruct>
        {
            public override Aas.SubmodelElementStruct Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<ISubmodelElement>? theValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.SubmodelElementStruct(
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theValues);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.SubmodelElementStruct that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "SubmodelElementStruct");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("values");
                Json.JsonSerializer.Serialize(
                    writer, that.Values);

                writer.WriteEndObject();
            }
        }  // SubmodelElementStructJsonConverter

        public class IDataElementJsonConverter :
            Json.Serialization.JsonConverter<Aas.IDataElement>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IDataElement).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IDataElement Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                string? theMimeType = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                byte[]? theContent = null;
                string? theValue = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;
                DataTypeDef? theValueType = null;
                string? theMin = null;
                string? theMax = null;
                IReference? theReference = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "Blob":
                                    return new Aas.Blob(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theContent);
                                case "File":
                                    return new Aas.File(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theMimeType ?? throw new Json.JsonException(
                                            "Required property is missing: mimeType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue);
                                case "MultiLanguageProperty":
                                    return new Aas.MultiLanguageProperty(
                                        theIdShort,
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theTranslatable,
                                        theValueId);
                                case "Property":
                                    return new Aas.Property(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theValue,
                                        theValueId);
                                case "Range":
                                    return new Aas.Range(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theValueType ?? throw new Json.JsonException(
                                            "Required property is missing: valueType"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theMin,
                                        theMax);
                                case "ReferenceElement":
                                    return new Aas.ReferenceElement(
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications,
                                        theReference);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IDataElement: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IDataElement that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case Blob theBlob:
                    Json.JsonSerializer.Serialize(
                        writer, theBlob);
                    break;
                case File theFile:
                    Json.JsonSerializer.Serialize(
                        writer, theFile);
                    break;
                case MultiLanguageProperty theMultiLanguageProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theMultiLanguageProperty);
                    break;
                case Property theProperty:
                    Json.JsonSerializer.Serialize(
                        writer, theProperty);
                    break;
                case Range theRange:
                    Json.JsonSerializer.Serialize(
                        writer, theRange);
                    break;
                case ReferenceElement theReferenceElement:
                    Json.JsonSerializer.Serialize(
                        writer, theReferenceElement);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IDataElement: {that}");
            }
            }
        }  // IDataElementJsonConverter

        public class PropertyJsonConverter :
            Json.Serialization.JsonConverter<Aas.Property>
        {
            public override Aas.Property Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                DataTypeDef? theValueType = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                string? theValue = null;
                IReference? theValueId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Property(
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theValueType ?? throw new Json.JsonException(
                                    "Required property is missing: valueType"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theValue,
                                theValueId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Property that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Property");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("valueType");
                Json.JsonSerializer.Serialize(
                    writer, that.ValueType);

                if (that.Value != null)
                {
                    writer.WritePropertyName("value");
                    Json.JsonSerializer.Serialize(
                        writer, that.Value);
                }

                if (that.ValueId != null)
                {
                    writer.WritePropertyName("valueID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueId);
                }

                writer.WriteEndObject();
            }
        }  // PropertyJsonConverter

        public class MultiLanguagePropertyJsonConverter :
            Json.Serialization.JsonConverter<Aas.MultiLanguageProperty>
        {
            public override Aas.MultiLanguageProperty Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                LangStringSet? theTranslatable = null;
                IReference? theValueId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.MultiLanguageProperty(
                                theIdShort,
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theTranslatable,
                                theValueId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "translatable":
                                    theTranslatable =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.MultiLanguageProperty that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "MultiLanguageProperty");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                if (that.Translatable != null)
                {
                    writer.WritePropertyName("translatable");
                    Json.JsonSerializer.Serialize(
                        writer, that.Translatable);
                }

                if (that.ValueId != null)
                {
                    writer.WritePropertyName("valueID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueId);
                }

                writer.WriteEndObject();
            }
        }  // MultiLanguagePropertyJsonConverter

        public class RangeJsonConverter :
            Json.Serialization.JsonConverter<Aas.Range>
        {
            public override Aas.Range Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                DataTypeDef? theValueType = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                string? theMin = null;
                string? theMax = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Range(
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theValueType ?? throw new Json.JsonException(
                                    "Required property is missing: valueType"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theMin,
                                theMax);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "valueType":
                                    theValueType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeDef>(
                                            ref reader));
                                    break;
                                case "min":
                                    theMin =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "max":
                                    theMax =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Range that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Range");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("valueType");
                Json.JsonSerializer.Serialize(
                    writer, that.ValueType);

                if (that.Min != null)
                {
                    writer.WritePropertyName("min");
                    Json.JsonSerializer.Serialize(
                        writer, that.Min);
                }

                if (that.Max != null)
                {
                    writer.WritePropertyName("max");
                    Json.JsonSerializer.Serialize(
                        writer, that.Max);
                }

                writer.WriteEndObject();
            }
        }  // RangeJsonConverter

        public class ReferenceElementJsonConverter :
            Json.Serialization.JsonConverter<Aas.ReferenceElement>
        {
            public override Aas.ReferenceElement Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                IReference? theReference = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.ReferenceElement(
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theReference);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "reference":
                                    theReference =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ReferenceElement that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "ReferenceElement");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                if (that.Reference != null)
                {
                    writer.WritePropertyName("reference");
                    Json.JsonSerializer.Serialize(
                        writer, that.Reference);
                }

                writer.WriteEndObject();
            }
        }  // ReferenceElementJsonConverter

        public class BlobJsonConverter :
            Json.Serialization.JsonConverter<Aas.Blob>
        {
            public override Aas.Blob Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                string? theMimeType = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                byte[]? theContent = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Blob(
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theMimeType ?? throw new Json.JsonException(
                                    "Required property is missing: mimeType"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theContent);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "content":
                                    theContent =  (
                                        Json.JsonSerializer.Deserialize<byte[]>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Blob that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Blob");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("mimeType");
                Json.JsonSerializer.Serialize(
                    writer, that.MimeType);

                if (that.Content != null)
                {
                    writer.WritePropertyName("content");
                    Json.JsonSerializer.Serialize(
                        writer, that.Content);
                }

                writer.WriteEndObject();
            }
        }  // BlobJsonConverter

        public class FileJsonConverter :
            Json.Serialization.JsonConverter<Aas.File>
        {
            public override Aas.File Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                string? theMimeType = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                string? theValue = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.File(
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theMimeType ?? throw new Json.JsonException(
                                    "Required property is missing: mimeType"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theValue);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "mimeType":
                                    theMimeType =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.File that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "File");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("mimeType");
                Json.JsonSerializer.Serialize(
                    writer, that.MimeType);

                if (that.Value != null)
                {
                    writer.WritePropertyName("value");
                    Json.JsonSerializer.Serialize(
                        writer, that.Value);
                }

                writer.WriteEndObject();
            }
        }  // FileJsonConverter

        public class AnnotatedRelationshipElementJsonConverter :
            Json.Serialization.JsonConverter<Aas.AnnotatedRelationshipElement>
        {
            public override Aas.AnnotatedRelationshipElement Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theFirst = null;
                IReference? theSecond = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<IDataElement>? theAnnotation = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AnnotatedRelationshipElement(
                                theFirst ?? throw new Json.JsonException(
                                    "Required property is missing: first"),
                                theSecond ?? throw new Json.JsonException(
                                    "Required property is missing: second"),
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theAnnotation);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "first":
                                    theFirst =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "second":
                                    theSecond =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "annotation":
                                    theAnnotation =  (
                                        Json.JsonSerializer.Deserialize<List<IDataElement>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AnnotatedRelationshipElement that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "AnnotatedRelationshipElement");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("first");
                Json.JsonSerializer.Serialize(
                    writer, that.First);

                writer.WritePropertyName("second");
                Json.JsonSerializer.Serialize(
                    writer, that.Second);

                writer.WritePropertyName("annotation");
                Json.JsonSerializer.Serialize(
                    writer, that.Annotation);

                writer.WriteEndObject();
            }
        }  // AnnotatedRelationshipElementJsonConverter

        public class EntityTypeJsonConverter :
            Json.Serialization.JsonConverter<Aas.EntityType>
        {
            public override Aas.EntityType Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.EntityType? value = Stringification.EntityTypeFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid EntityType: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.EntityType value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid EntityType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class EntityJsonConverter :
            Json.Serialization.JsonConverter<Aas.Entity>
        {
            public override Aas.Entity Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                EntityType? theEntityType = null;
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<ISubmodelElement>? theStatements = null;
                IReference? theGlobalAssetId = null;
                IdentifierKeyValuePair? theSpecificAssetId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Entity(
                                theEntityType ?? throw new Json.JsonException(
                                    "Required property is missing: entityType"),
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theStatements,
                                theGlobalAssetId,
                                theSpecificAssetId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "entityType":
                                    theEntityType =  (
                                        Json.JsonSerializer.Deserialize<EntityType>(
                                            ref reader));
                                    break;
                                case "statements":
                                    theStatements =  (
                                        Json.JsonSerializer.Deserialize<List<ISubmodelElement>>(
                                            ref reader));
                                    break;
                                case "globalAssetID":
                                    theGlobalAssetId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "specificAssetID":
                                    theSpecificAssetId =  (
                                        Json.JsonSerializer.Deserialize<IdentifierKeyValuePair>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Entity that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Entity");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("entityType");
                Json.JsonSerializer.Serialize(
                    writer, that.EntityType);

                writer.WritePropertyName("statements");
                Json.JsonSerializer.Serialize(
                    writer, that.Statements);

                if (that.GlobalAssetId != null)
                {
                    writer.WritePropertyName("globalAssetID");
                    Json.JsonSerializer.Serialize(
                        writer, that.GlobalAssetId);
                }

                if (that.SpecificAssetId != null)
                {
                    writer.WritePropertyName("specificAssetID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SpecificAssetId);
                }

                writer.WriteEndObject();
            }
        }  // EntityJsonConverter

        public class IEventJsonConverter :
            Json.Serialization.JsonConverter<Aas.IEvent>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IEvent).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IEvent Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theObserved = null;
                string? theIdShort = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "BasicEvent":
                                    return new Aas.BasicEvent(
                                        theObserved ?? throw new Json.JsonException(
                                            "Required property is missing: observed"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theExtensions,
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theKind,
                                        theSemanticId,
                                        theQualifiers,
                                        theDataSpecifications);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IEvent: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IEvent that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case BasicEvent theBasicEvent:
                    Json.JsonSerializer.Serialize(
                        writer, theBasicEvent);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IEvent: {that}");
            }
            }
        }  // IEventJsonConverter

        public class BasicEventJsonConverter :
            Json.Serialization.JsonConverter<Aas.BasicEvent>
        {
            public override Aas.BasicEvent Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                IReference? theObserved = null;
                string? theIdShort = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.BasicEvent(
                                theObserved ?? throw new Json.JsonException(
                                    "Required property is missing: observed"),
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "observed":
                                    theObserved =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.BasicEvent that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "BasicEvent");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("observed");
                Json.JsonSerializer.Serialize(
                    writer, that.Observed);

                writer.WriteEndObject();
            }
        }  // BasicEventJsonConverter

        public class OperationJsonConverter :
            Json.Serialization.JsonConverter<Aas.Operation>
        {
            public override Aas.Operation Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;
                List<OperationVariable>? theInputVariables = null;
                List<OperationVariable>? theOutputVariables = null;
                List<OperationVariable>? theInoutputVariables = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Operation(
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications,
                                theInputVariables,
                                theOutputVariables,
                                theInoutputVariables);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "inputVariables":
                                    theInputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "outputVariables":
                                    theOutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "inoutputVariables":
                                    theInoutputVariables =  (
                                        Json.JsonSerializer.Deserialize<List<OperationVariable>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Operation that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Operation");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WritePropertyName("inputVariables");
                Json.JsonSerializer.Serialize(
                    writer, that.InputVariables);

                writer.WritePropertyName("outputVariables");
                Json.JsonSerializer.Serialize(
                    writer, that.OutputVariables);

                writer.WritePropertyName("inoutputVariables");
                Json.JsonSerializer.Serialize(
                    writer, that.InoutputVariables);

                writer.WriteEndObject();
            }
        }  // OperationJsonConverter

        public class OperationVariableJsonConverter :
            Json.Serialization.JsonConverter<Aas.OperationVariable>
        {
            public override Aas.OperationVariable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                ISubmodelElement? theValue = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.OperationVariable(
                                theValue ?? throw new Json.JsonException(
                                    "Required property is missing: value"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<ISubmodelElement>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.OperationVariable that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("value");
                Json.JsonSerializer.Serialize(
                    writer, that.Value);

                writer.WriteEndObject();
            }
        }  // OperationVariableJsonConverter

        public class CapabilityJsonConverter :
            Json.Serialization.JsonConverter<Aas.Capability>
        {
            public override Aas.Capability Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                ModelingKind? theKind = null;
                IReference? theSemanticId = null;
                List<IConstraint>? theQualifiers = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Capability(
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theKind,
                                theSemanticId,
                                theQualifiers,
                                theDataSpecifications);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "kind":
                                    theKind =  (
                                        Json.JsonSerializer.Deserialize<ModelingKind>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "qualifiers":
                                    theQualifiers =  (
                                        Json.JsonSerializer.Deserialize<List<IConstraint>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Capability that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "Capability");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.Kind != null)
                {
                    writer.WritePropertyName("kind");
                    Json.JsonSerializer.Serialize(
                        writer, that.Kind);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("qualifiers");
                Json.JsonSerializer.Serialize(
                    writer, that.Qualifiers);

                writer.WriteEndObject();
            }
        }  // CapabilityJsonConverter

        public class ConceptDescriptionJsonConverter :
            Json.Serialization.JsonConverter<Aas.ConceptDescription>
        {
            public override Aas.ConceptDescription Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theId = null;
                string? theIdShort = null;
                List<Extension>? theExtensions = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                AdministrativeInformation? theAdministration = null;
                List<IReference>? theIsCaseOf = null;
                List<IReference>? theDataSpecifications = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.ConceptDescription(
                                theId ?? throw new Json.JsonException(
                                    "Required property is missing: id"),
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theExtensions,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theAdministration,
                                theIsCaseOf,
                                theDataSpecifications);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "id":
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "administration":
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "isCaseOf":
                                    theIsCaseOf =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ConceptDescription that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "ConceptDescription");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                writer.WritePropertyName("id");
                Json.JsonSerializer.Serialize(
                    writer, that.Id);

                if (that.Administration != null)
                {
                    writer.WritePropertyName("administration");
                    Json.JsonSerializer.Serialize(
                        writer, that.Administration);
                }

                writer.WritePropertyName("isCaseOf");
                Json.JsonSerializer.Serialize(
                    writer, that.IsCaseOf);

                writer.WriteEndObject();
            }
        }  // ConceptDescriptionJsonConverter

        public class ViewJsonConverter :
            Json.Serialization.JsonConverter<Aas.View>
        {
            public override Aas.View Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Extension>? theExtensions = null;
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                IReference? theSemanticId = null;
                List<IReference>? theDataSpecifications = null;
                List<IReference>? theContainedElements = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.View(
                                theExtensions,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theSemanticId,
                                theDataSpecifications,
                                theContainedElements);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "dataSpecifications":
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "extensions":
                                    theExtensions =  (
                                        Json.JsonSerializer.Deserialize<List<Extension>>(
                                            ref reader));
                                    break;
                                case "idShort":
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName":
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category":
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description":
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "semanticID":
                                    theSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "containedElements":
                                    theContainedElements =  (
                                        Json.JsonSerializer.Deserialize<List<IReference>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.View that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "View");

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                writer.WritePropertyName("extensions");
                Json.JsonSerializer.Serialize(
                    writer, that.Extensions);

                if (that.IdShort != null)
                {
                    writer.WritePropertyName("idShort");
                    Json.JsonSerializer.Serialize(
                        writer, that.IdShort);
                }

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                if (that.SemanticId != null)
                {
                    writer.WritePropertyName("semanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.SemanticId);
                }

                writer.WritePropertyName("containedElements");
                Json.JsonSerializer.Serialize(
                    writer, that.ContainedElements);

                writer.WriteEndObject();
            }
        }  // ViewJsonConverter

        public class IReferenceJsonConverter :
            Json.Serialization.JsonConverter<Aas.IReference>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IReference).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IReference Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                List<string>? theValues = null;
                List<Key>? theKeys = null;
                IReference? theReferredSemanticId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "GlobalReference":
                                    return new Aas.GlobalReference(
                                        theValues ?? throw new Json.JsonException(
                                            "Required property is missing: values"));
                                case "ModelReference":
                                    return new Aas.ModelReference(
                                        theKeys ?? throw new Json.JsonException(
                                            "Required property is missing: keys"),
                                        theReferredSemanticId);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<string>>(
                                            ref reader));
                                    break;
                                case "keys":
                                    theKeys =  (
                                        Json.JsonSerializer.Deserialize<List<Key>>(
                                            ref reader));
                                    break;
                                case "referredSemanticID":
                                    theReferredSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IReference: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IReference that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case GlobalReference theGlobalReference:
                    Json.JsonSerializer.Serialize(
                        writer, theGlobalReference);
                    break;
                case ModelReference theModelReference:
                    Json.JsonSerializer.Serialize(
                        writer, theModelReference);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IReference: {that}");
            }
            }
        }  // IReferenceJsonConverter

        public class GlobalReferenceJsonConverter :
            Json.Serialization.JsonConverter<Aas.GlobalReference>
        {
            public override Aas.GlobalReference Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<string>? theValues = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.GlobalReference(
                                theValues ?? throw new Json.JsonException(
                                    "Required property is missing: values"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "values":
                                    theValues =  (
                                        Json.JsonSerializer.Deserialize<List<string>>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.GlobalReference that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "GlobalReference");

                writer.WritePropertyName("values");
                Json.JsonSerializer.Serialize(
                    writer, that.Values);

                writer.WriteEndObject();
            }
        }  // GlobalReferenceJsonConverter

        public class ModelReferenceJsonConverter :
            Json.Serialization.JsonConverter<Aas.ModelReference>
        {
            public override Aas.ModelReference Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Key>? theKeys = null;
                IReference? theReferredSemanticId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.ModelReference(
                                theKeys ?? throw new Json.JsonException(
                                    "Required property is missing: keys"),
                                theReferredSemanticId);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "keys":
                                    theKeys =  (
                                        Json.JsonSerializer.Deserialize<List<Key>>(
                                            ref reader));
                                    break;
                                case "referredSemanticID":
                                    theReferredSemanticId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ModelReference that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "ModelReference");

                writer.WritePropertyName("keys");
                Json.JsonSerializer.Serialize(
                    writer, that.Keys);

                if (that.ReferredSemanticId != null)
                {
                    writer.WritePropertyName("referredSemanticID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ReferredSemanticId);
                }

                writer.WriteEndObject();
            }
        }  // ModelReferenceJsonConverter

        public class KeyJsonConverter :
            Json.Serialization.JsonConverter<Aas.Key>
        {
            public override Aas.Key Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                KeyElements? theType = null;
                string? theValue = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Key(
                                theType ?? throw new Json.JsonException(
                                    "Required property is missing: type"),
                                theValue ?? throw new Json.JsonException(
                                    "Required property is missing: value"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "type":
                                    theType =  (
                                        Json.JsonSerializer.Deserialize<KeyElements>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Key that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("type");
                Json.JsonSerializer.Serialize(
                    writer, that.Type);

                writer.WritePropertyName("value");
                Json.JsonSerializer.Serialize(
                    writer, that.Value);

                writer.WriteEndObject();
            }
        }  // KeyJsonConverter

        public class IdentifiableElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.IdentifiableElements>
        {
            public override Aas.IdentifiableElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.IdentifiableElements? value = Stringification.IdentifiableElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid IdentifiableElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IdentifiableElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid IdentifiableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class ReferableElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.ReferableElements>
        {
            public override Aas.ReferableElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.ReferableElements? value = Stringification.ReferableElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid ReferableElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ReferableElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid ReferableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.KeyElements>
        {
            public override Aas.KeyElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.KeyElements? value = Stringification.KeyElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid KeyElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.KeyElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid KeyElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class SubmodelElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.SubmodelElements>
        {
            public override Aas.SubmodelElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.SubmodelElements? value = Stringification.SubmodelElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid SubmodelElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.SubmodelElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid SubmodelElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class BuildInListTypesJsonConverter :
            Json.Serialization.JsonConverter<Aas.BuildInListTypes>
        {
            public override Aas.BuildInListTypes Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.BuildInListTypes? value = Stringification.BuildInListTypesFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid BuildInListTypes: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.BuildInListTypes value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid BuildInListTypes: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class DecimalBuildInTypesJsonConverter :
            Json.Serialization.JsonConverter<Aas.DecimalBuildInTypes>
        {
            public override Aas.DecimalBuildInTypes Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.DecimalBuildInTypes? value = Stringification.DecimalBuildInTypesFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid DecimalBuildInTypes: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DecimalBuildInTypes value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid DecimalBuildInTypes: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class DurationBuildInTypesJsonConverter :
            Json.Serialization.JsonConverter<Aas.DurationBuildInTypes>
        {
            public override Aas.DurationBuildInTypes Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.DurationBuildInTypes? value = Stringification.DurationBuildInTypesFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid DurationBuildInTypes: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DurationBuildInTypes value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid DurationBuildInTypes: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class PrimitiveTypesJsonConverter :
            Json.Serialization.JsonConverter<Aas.PrimitiveTypes>
        {
            public override Aas.PrimitiveTypes Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.PrimitiveTypes? value = Stringification.PrimitiveTypesFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid PrimitiveTypes: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.PrimitiveTypes value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid PrimitiveTypes: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class StringBuildInTypesJsonConverter :
            Json.Serialization.JsonConverter<Aas.StringBuildInTypes>
        {
            public override Aas.StringBuildInTypes Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.StringBuildInTypes? value = Stringification.StringBuildInTypesFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid StringBuildInTypes: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.StringBuildInTypes value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid StringBuildInTypes: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class DataTypeDefJsonConverter :
            Json.Serialization.JsonConverter<Aas.DataTypeDef>
        {
            public override Aas.DataTypeDef Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.DataTypeDef? value = Stringification.DataTypeDefFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid DataTypeDef: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DataTypeDef value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid DataTypeDef: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class LangStringSetJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangStringSet>
        {
            public override Aas.LangStringSet Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                throw new System.NotImplementedException("TODO");
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.LangStringSet value,
                System.Text.Json.JsonSerializerOptions options)
            {
                throw new System.NotImplementedException("TODO");
            }
        }

        public class IDataSpecificationContentJsonConverter :
            Json.Serialization.JsonConverter<Aas.IDataSpecificationContent>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IDataSpecificationContent).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IDataSpecificationContent Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                LangStringSet? thePreferredName = null;
                LangStringSet? theShortName = null;
                string? theUnit = null;
                IReference? theUnitId = null;
                string? theSourceOfDefinition = null;
                string? theSymbol = null;
                DataTypeIec61360? theDataType = null;
                LangStringSet? theDefinition = null;
                string? theValueFormat = null;
                ValueList? theValueList = null;
                string? theValue = null;
                IReference? theValueId = null;
                LevelType? theLevelType = null;
                string? theUnitName = null;
                string? theUnitSymbol = null;
                string? theSiNotation = null;
                string? theDinNotation = null;
                string? theEceName = null;
                string? theEceCode = null;
                string? theNistName = null;
                string? theConversionFactor = null;
                string? theRegistrationAuthorityId = null;
                string? theSupplier = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "DataSpecificationIec61360":
                                    return new Aas.DataSpecificationIec61360(
                                        thePreferredName,
                                        theShortName,
                                        theUnit,
                                        theUnitId,
                                        theSourceOfDefinition,
                                        theSymbol,
                                        theDataType,
                                        theDefinition,
                                        theValueFormat,
                                        theValueList,
                                        theValue,
                                        theValueId,
                                        theLevelType);
                                case "DataSpecificationPhysicalUnit":
                                    return new Aas.DataSpecificationPhysicalUnit(
                                        theUnitName,
                                        theUnitSymbol,
                                        theDefinition,
                                        theSiNotation,
                                        theDinNotation,
                                        theEceName,
                                        theEceCode,
                                        theNistName,
                                        theSourceOfDefinition,
                                        theConversionFactor,
                                        theRegistrationAuthorityId,
                                        theSupplier);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");

                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "preferredName":
                                    thePreferredName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "shortName":
                                    theShortName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "unit":
                                    theUnit =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "unitID":
                                    theUnitId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "sourceOfDefinition":
                                    theSourceOfDefinition =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "symbol":
                                    theSymbol =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dataType":
                                    theDataType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeIec61360>(
                                            ref reader));
                                    break;
                                case "definition":
                                    theDefinition =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueFormat":
                                    theValueFormat =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueList":
                                    theValueList =  (
                                        Json.JsonSerializer.Deserialize<ValueList>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "levelType":
                                    theLevelType =  (
                                        Json.JsonSerializer.Deserialize<LevelType>(
                                            ref reader));
                                    break;
                                case "unitName":
                                    theUnitName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "unitSymbol":
                                    theUnitSymbol =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "siNotation":
                                    theSiNotation =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dinNotation":
                                    theDinNotation =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "eceName":
                                    theEceName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "eceCode":
                                    theEceCode =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "nistName":
                                    theNistName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "conversionFactor":
                                    theConversionFactor =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "registrationAuthorityID":
                                    theRegistrationAuthorityId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "supplier":
                                    theSupplier =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " +
                                        $"of IDataSpecificationContent: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IDataSpecificationContent that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case DataSpecificationIec61360 theDataSpecificationIec61360:
                    Json.JsonSerializer.Serialize(
                        writer, theDataSpecificationIec61360);
                    break;
                case DataSpecificationPhysicalUnit theDataSpecificationPhysicalUnit:
                    Json.JsonSerializer.Serialize(
                        writer, theDataSpecificationPhysicalUnit);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " +
                    $"not an implementer class of IDataSpecificationContent: {that}");
            }
            }
        }  // IDataSpecificationContentJsonConverter

        public class DataTypeIec61360JsonConverter :
            Json.Serialization.JsonConverter<Aas.DataTypeIec61360>
        {
            public override Aas.DataTypeIec61360 Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.DataTypeIec61360? value = Stringification.DataTypeIec61360FromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid DataTypeIec61360: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DataTypeIec61360 value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid DataTypeIec61360: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class LevelTypeJsonConverter :
            Json.Serialization.JsonConverter<Aas.LevelType>
        {
            public override Aas.LevelType Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.LevelType? value = Stringification.LevelTypeFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid LevelType: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.LevelType value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid LevelType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class ValueReferencePairJsonConverter :
            Json.Serialization.JsonConverter<Aas.ValueReferencePair>
        {
            public override Aas.ValueReferencePair Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theValue = null;
                IReference? theValueId = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.ValueReferencePair(
                                theValue ?? throw new Json.JsonException(
                                    "Required property is missing: value"),
                                theValueId ?? throw new Json.JsonException(
                                    "Required property is missing: valueID"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ValueReferencePair that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("value");
                Json.JsonSerializer.Serialize(
                    writer, that.Value);

                writer.WritePropertyName("valueID");
                Json.JsonSerializer.Serialize(
                    writer, that.ValueId);

                writer.WriteEndObject();
            }
        }  // ValueReferencePairJsonConverter

        public class ValueListJsonConverter :
            Json.Serialization.JsonConverter<Aas.ValueList>
        {
            public override Aas.ValueList Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<ValueReferencePair>? theValueReferencePairs = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.ValueList(
                                theValueReferencePairs);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "valueReferencePairs":
                                    theValueReferencePairs =  (
                                        Json.JsonSerializer.Deserialize<List<ValueReferencePair>>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ValueList that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("valueReferencePairs");
                Json.JsonSerializer.Serialize(
                    writer, that.ValueReferencePairs);

                writer.WriteEndObject();
            }
        }  // ValueListJsonConverter

        public class DataSpecificationIec61360JsonConverter :
            Json.Serialization.JsonConverter<Aas.DataSpecificationIec61360>
        {
            public override Aas.DataSpecificationIec61360 Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                LangStringSet? thePreferredName = null;
                LangStringSet? theShortName = null;
                string? theUnit = null;
                IReference? theUnitId = null;
                string? theSourceOfDefinition = null;
                string? theSymbol = null;
                DataTypeIec61360? theDataType = null;
                LangStringSet? theDefinition = null;
                string? theValueFormat = null;
                ValueList? theValueList = null;
                string? theValue = null;
                IReference? theValueId = null;
                LevelType? theLevelType = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.DataSpecificationIec61360(
                                thePreferredName,
                                theShortName,
                                theUnit,
                                theUnitId,
                                theSourceOfDefinition,
                                theSymbol,
                                theDataType,
                                theDefinition,
                                theValueFormat,
                                theValueList,
                                theValue,
                                theValueId,
                                theLevelType);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "preferredName":
                                    thePreferredName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "shortName":
                                    theShortName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "unit":
                                    theUnit =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "unitID":
                                    theUnitId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "sourceOfDefinition":
                                    theSourceOfDefinition =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "symbol":
                                    theSymbol =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dataType":
                                    theDataType =  (
                                        Json.JsonSerializer.Deserialize<DataTypeIec61360>(
                                            ref reader));
                                    break;
                                case "definition":
                                    theDefinition =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "valueFormat":
                                    theValueFormat =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueList":
                                    theValueList =  (
                                        Json.JsonSerializer.Deserialize<ValueList>(
                                            ref reader));
                                    break;
                                case "value":
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "valueID":
                                    theValueId =  (
                                        Json.JsonSerializer.Deserialize<IReference>(
                                            ref reader));
                                    break;
                                case "levelType":
                                    theLevelType =  (
                                        Json.JsonSerializer.Deserialize<LevelType>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DataSpecificationIec61360 that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.PreferredName != null)
                {
                    writer.WritePropertyName("preferredName");
                    Json.JsonSerializer.Serialize(
                        writer, that.PreferredName);
                }

                if (that.ShortName != null)
                {
                    writer.WritePropertyName("shortName");
                    Json.JsonSerializer.Serialize(
                        writer, that.ShortName);
                }

                if (that.Unit != null)
                {
                    writer.WritePropertyName("unit");
                    Json.JsonSerializer.Serialize(
                        writer, that.Unit);
                }

                if (that.UnitId != null)
                {
                    writer.WritePropertyName("unitID");
                    Json.JsonSerializer.Serialize(
                        writer, that.UnitId);
                }

                if (that.SourceOfDefinition != null)
                {
                    writer.WritePropertyName("sourceOfDefinition");
                    Json.JsonSerializer.Serialize(
                        writer, that.SourceOfDefinition);
                }

                if (that.Symbol != null)
                {
                    writer.WritePropertyName("symbol");
                    Json.JsonSerializer.Serialize(
                        writer, that.Symbol);
                }

                if (that.DataType != null)
                {
                    writer.WritePropertyName("dataType");
                    Json.JsonSerializer.Serialize(
                        writer, that.DataType);
                }

                if (that.Definition != null)
                {
                    writer.WritePropertyName("definition");
                    Json.JsonSerializer.Serialize(
                        writer, that.Definition);
                }

                if (that.ValueFormat != null)
                {
                    writer.WritePropertyName("valueFormat");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueFormat);
                }

                if (that.ValueList != null)
                {
                    writer.WritePropertyName("valueList");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueList);
                }

                if (that.Value != null)
                {
                    writer.WritePropertyName("value");
                    Json.JsonSerializer.Serialize(
                        writer, that.Value);
                }

                if (that.ValueId != null)
                {
                    writer.WritePropertyName("valueID");
                    Json.JsonSerializer.Serialize(
                        writer, that.ValueId);
                }

                if (that.LevelType != null)
                {
                    writer.WritePropertyName("levelType");
                    Json.JsonSerializer.Serialize(
                        writer, that.LevelType);
                }

                writer.WriteEndObject();
            }
        }  // DataSpecificationIec61360JsonConverter

        public class DataSpecificationPhysicalUnitJsonConverter :
            Json.Serialization.JsonConverter<Aas.DataSpecificationPhysicalUnit>
        {
            public override Aas.DataSpecificationPhysicalUnit Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theUnitName = null;
                string? theUnitSymbol = null;
                LangStringSet? theDefinition = null;
                string? theSiNotation = null;
                string? theDinNotation = null;
                string? theEceName = null;
                string? theEceCode = null;
                string? theNistName = null;
                string? theSourceOfDefinition = null;
                string? theConversionFactor = null;
                string? theRegistrationAuthorityId = null;
                string? theSupplier = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.DataSpecificationPhysicalUnit(
                                theUnitName,
                                theUnitSymbol,
                                theDefinition,
                                theSiNotation,
                                theDinNotation,
                                theEceName,
                                theEceCode,
                                theNistName,
                                theSourceOfDefinition,
                                theConversionFactor,
                                theRegistrationAuthorityId,
                                theSupplier);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "unitName":
                                    theUnitName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "unitSymbol":
                                    theUnitSymbol =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "definition":
                                    theDefinition =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "siNotation":
                                    theSiNotation =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dinNotation":
                                    theDinNotation =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "eceName":
                                    theEceName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "eceCode":
                                    theEceCode =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "nistName":
                                    theNistName =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "sourceOfDefinition":
                                    theSourceOfDefinition =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "conversionFactor":
                                    theConversionFactor =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "registrationAuthorityID":
                                    theRegistrationAuthorityId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "supplier":
                                    theSupplier =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.DataSpecificationPhysicalUnit that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.UnitName != null)
                {
                    writer.WritePropertyName("unitName");
                    Json.JsonSerializer.Serialize(
                        writer, that.UnitName);
                }

                if (that.UnitSymbol != null)
                {
                    writer.WritePropertyName("unitSymbol");
                    Json.JsonSerializer.Serialize(
                        writer, that.UnitSymbol);
                }

                if (that.Definition != null)
                {
                    writer.WritePropertyName("definition");
                    Json.JsonSerializer.Serialize(
                        writer, that.Definition);
                }

                if (that.SiNotation != null)
                {
                    writer.WritePropertyName("siNotation");
                    Json.JsonSerializer.Serialize(
                        writer, that.SiNotation);
                }

                if (that.DinNotation != null)
                {
                    writer.WritePropertyName("dinNotation");
                    Json.JsonSerializer.Serialize(
                        writer, that.DinNotation);
                }

                if (that.EceName != null)
                {
                    writer.WritePropertyName("eceName");
                    Json.JsonSerializer.Serialize(
                        writer, that.EceName);
                }

                if (that.EceCode != null)
                {
                    writer.WritePropertyName("eceCode");
                    Json.JsonSerializer.Serialize(
                        writer, that.EceCode);
                }

                if (that.NistName != null)
                {
                    writer.WritePropertyName("nistName");
                    Json.JsonSerializer.Serialize(
                        writer, that.NistName);
                }

                if (that.SourceOfDefinition != null)
                {
                    writer.WritePropertyName("sourceOfDefinition");
                    Json.JsonSerializer.Serialize(
                        writer, that.SourceOfDefinition);
                }

                if (that.ConversionFactor != null)
                {
                    writer.WritePropertyName("conversionFactor");
                    Json.JsonSerializer.Serialize(
                        writer, that.ConversionFactor);
                }

                if (that.RegistrationAuthorityId != null)
                {
                    writer.WritePropertyName("registrationAuthorityID");
                    Json.JsonSerializer.Serialize(
                        writer, that.RegistrationAuthorityId);
                }

                if (that.Supplier != null)
                {
                    writer.WritePropertyName("supplier");
                    Json.JsonSerializer.Serialize(
                        writer, that.Supplier);
                }

                writer.WriteEndObject();
            }
        }  // DataSpecificationPhysicalUnitJsonConverter

        public class EnvironmentJsonConverter :
            Json.Serialization.JsonConverter<Aas.Environment>
        {
            public override Aas.Environment Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<AssetAdministrationShell>? theAssetAdministrationShells = null;
                List<Submodel>? theSubmodels = null;
                List<ConceptDescription>? theConceptDescriptions = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Environment(
                                theAssetAdministrationShells,
                                theSubmodels,
                                theConceptDescriptions);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");

                            switch (propertyName)
                            {
                                case "assetAdministrationShells":
                                    theAssetAdministrationShells =  (
                                        Json.JsonSerializer.Deserialize<List<AssetAdministrationShell>>(
                                            ref reader));
                                    break;
                                case "submodels":
                                    theSubmodels =  (
                                        Json.JsonSerializer.Deserialize<List<Submodel>>(
                                            ref reader));
                                    break;
                                case "conceptDescriptions":
                                    theConceptDescriptions =  (
                                        Json.JsonSerializer.Deserialize<List<ConceptDescription>>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " +
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Environment that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("assetAdministrationShells");
                Json.JsonSerializer.Serialize(
                    writer, that.AssetAdministrationShells);

                writer.WritePropertyName("submodels");
                Json.JsonSerializer.Serialize(
                    writer, that.Submodels);

                writer.WritePropertyName("conceptDescriptions");
                Json.JsonSerializer.Serialize(
                    writer, that.ConceptDescriptions);

                writer.WriteEndObject();
            }
        }  // EnvironmentJsonConverter

        /// <summary>
        /// Create and populate a list of our custom-tailored JSON converters.
        /// </summary>
        public static List<Json.Serialization.JsonConverter> CreateJsonConverters()
        {
            return new List<Json.Serialization.JsonConverter>()
            {
                new IHasSemanticsJsonConverter(),
                new ExtensionJsonConverter(),
                new IHasExtensionsJsonConverter(),
                new IReferableJsonConverter(),
                new IIdentifiableJsonConverter(),
                new ModelingKindJsonConverter(),
                new IHasKindJsonConverter(),
                new IHasDataSpecificationJsonConverter(),
                new AdministrativeInformationJsonConverter(),
                new IConstraintJsonConverter(),
                new IQualifiableJsonConverter(),
                new QualifierJsonConverter(),
                new FormulaJsonConverter(),
                new AssetAdministrationShellJsonConverter(),
                new AssetInformationJsonConverter(),
                new AssetKindJsonConverter(),
                new IdentifierKeyValuePairJsonConverter(),
                new SubmodelJsonConverter(),
                new ISubmodelElementJsonConverter(),
                new IRelationshipElementJsonConverter(),
                new SubmodelElementListJsonConverter(),
                new SubmodelElementStructJsonConverter(),
                new IDataElementJsonConverter(),
                new PropertyJsonConverter(),
                new MultiLanguagePropertyJsonConverter(),
                new RangeJsonConverter(),
                new ReferenceElementJsonConverter(),
                new BlobJsonConverter(),
                new FileJsonConverter(),
                new AnnotatedRelationshipElementJsonConverter(),
                new EntityTypeJsonConverter(),
                new EntityJsonConverter(),
                new IEventJsonConverter(),
                new BasicEventJsonConverter(),
                new OperationJsonConverter(),
                new OperationVariableJsonConverter(),
                new CapabilityJsonConverter(),
                new ConceptDescriptionJsonConverter(),
                new ViewJsonConverter(),
                new IReferenceJsonConverter(),
                new GlobalReferenceJsonConverter(),
                new ModelReferenceJsonConverter(),
                new KeyJsonConverter(),
                new IdentifiableElementsJsonConverter(),
                new ReferableElementsJsonConverter(),
                new KeyElementsJsonConverter(),
                new SubmodelElementsJsonConverter(),
                new BuildInListTypesJsonConverter(),
                new DecimalBuildInTypesJsonConverter(),
                new DurationBuildInTypesJsonConverter(),
                new PrimitiveTypesJsonConverter(),
                new StringBuildInTypesJsonConverter(),
                new DataTypeDefJsonConverter(),
                new LangStringSetJsonConverter(),
                new IDataSpecificationContentJsonConverter(),
                new DataTypeIec61360JsonConverter(),
                new LevelTypeJsonConverter(),
                new ValueReferencePairJsonConverter(),
                new ValueListJsonConverter(),
                new DataSpecificationIec61360JsonConverter(),
                new DataSpecificationPhysicalUnitJsonConverter(),
                new EnvironmentJsonConverter()
            };
        }
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
