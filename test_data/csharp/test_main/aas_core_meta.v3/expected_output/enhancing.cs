/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0;  // renamed
using System.Collections.Generic;  // can't alias
using System.Linq;  // can't alias

namespace AasCore.Aas3_0
{
    /// <summary>
    /// Allow for enhancing of our model classes with custom wraps.
    /// </summary>
    public static class Enhancing
    {
        public abstract class Enhanced<TEnhancement> where TEnhancement : class
        {
            // ReSharper disable once InconsistentNaming
            protected readonly TEnhancement _enhancement;

            protected Enhanced(TEnhancement enhancement)
            {
                _enhancement = enhancement;
            }

            internal TEnhancement _getEnhancement()
            {
                return _enhancement;
            }
        }

        public class EnhancedExtension<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IExtension
            where TEnhancement : class
        {
            private readonly Aas.IExtension _instance;

            public EnhancedExtension(
                Aas.IExtension instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public string Name
            {
                get => _instance.Name;
                set => _instance.Name = value;
            }

            public DataTypeDefXsd? ValueType
            {
                get => _instance.ValueType;
                set => _instance.ValueType = value;
            }

            public string? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public List<IReference>? RefersTo
            {
                get => _instance.RefersTo;
                set => _instance.RefersTo = value;
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverRefersToOrEmpty()
            {
                return _instance.OverRefersToOrEmpty();
            }

            public Aas.DataTypeDefXsd ValueTypeOrDefault()
            {
                return _instance.ValueTypeOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitExtension(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitExtension(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformExtension(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformExtension(_instance, context);
            }
        }

        public class EnhancedAdministrativeInformation<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IAdministrativeInformation
            where TEnhancement : class
        {
            private readonly Aas.IAdministrativeInformation _instance;

            public EnhancedAdministrativeInformation(
                Aas.IAdministrativeInformation instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public string? Version
            {
                get => _instance.Version;
                set => _instance.Version = value;
            }

            public string? Revision
            {
                get => _instance.Revision;
                set => _instance.Revision = value;
            }

            public IReference? Creator
            {
                get => _instance.Creator;
                set => _instance.Creator = value;
            }

            public string? TemplateId
            {
                get => _instance.TemplateId;
                set => _instance.TemplateId = value;
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitAdministrativeInformation(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitAdministrativeInformation(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformAdministrativeInformation(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformAdministrativeInformation(_instance, context);
            }
        }

        public class EnhancedQualifier<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IQualifier
            where TEnhancement : class
        {
            private readonly Aas.IQualifier _instance;

            public EnhancedQualifier(
                Aas.IQualifier instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public QualifierKind? Kind
            {
                get => _instance.Kind;
                set => _instance.Kind = value;
            }

            public string Type
            {
                get => _instance.Type;
                set => _instance.Type = value;
            }

            public DataTypeDefXsd ValueType
            {
                get => _instance.ValueType;
                set => _instance.ValueType = value;
            }

            public string? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IReference? ValueId
            {
                get => _instance.ValueId;
                set => _instance.ValueId = value;
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public Aas.QualifierKind KindOrDefault()
            {
                return _instance.KindOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitQualifier(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitQualifier(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformQualifier(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformQualifier(_instance, context);
            }
        }

        public class EnhancedAssetAdministrationShell<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IAssetAdministrationShell
            where TEnhancement : class
        {
            private readonly Aas.IAssetAdministrationShell _instance;

            public EnhancedAssetAdministrationShell(
                Aas.IAssetAdministrationShell instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IAdministrativeInformation? Administration
            {
                get => _instance.Administration;
                set => _instance.Administration = value;
            }

            public string Id
            {
                get => _instance.Id;
                set => _instance.Id = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IReference? DerivedFrom
            {
                get => _instance.DerivedFrom;
                set => _instance.DerivedFrom = value;
            }

            public IAssetInformation AssetInformation
            {
                get => _instance.AssetInformation;
                set => _instance.AssetInformation = value;
            }

            public List<IReference>? Submodels
            {
                get => _instance.Submodels;
                set => _instance.Submodels = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSubmodelsOrEmpty()
            {
                return _instance.OverSubmodelsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitAssetAdministrationShell(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitAssetAdministrationShell(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformAssetAdministrationShell(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformAssetAdministrationShell(_instance, context);
            }
        }

        public class EnhancedAssetInformation<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IAssetInformation
            where TEnhancement : class
        {
            private readonly Aas.IAssetInformation _instance;

            public EnhancedAssetInformation(
                Aas.IAssetInformation instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public AssetKind AssetKind
            {
                get => _instance.AssetKind;
                set => _instance.AssetKind = value;
            }

            public string? GlobalAssetId
            {
                get => _instance.GlobalAssetId;
                set => _instance.GlobalAssetId = value;
            }

            public List<ISpecificAssetId>? SpecificAssetIds
            {
                get => _instance.SpecificAssetIds;
                set => _instance.SpecificAssetIds = value;
            }

            public string? AssetType
            {
                get => _instance.AssetType;
                set => _instance.AssetType = value;
            }

            public IResource? DefaultThumbnail
            {
                get => _instance.DefaultThumbnail;
                set => _instance.DefaultThumbnail = value;
            }

            public IEnumerable<Aas.ISpecificAssetId> OverSpecificAssetIdsOrEmpty()
            {
                return _instance.OverSpecificAssetIdsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitAssetInformation(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitAssetInformation(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformAssetInformation(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformAssetInformation(_instance, context);
            }
        }

        public class EnhancedResource<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IResource
            where TEnhancement : class
        {
            private readonly Aas.IResource _instance;

            public EnhancedResource(
                Aas.IResource instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Path
            {
                get => _instance.Path;
                set => _instance.Path = value;
            }

            public string? ContentType
            {
                get => _instance.ContentType;
                set => _instance.ContentType = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitResource(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitResource(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformResource(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformResource(_instance, context);
            }
        }

        public class EnhancedSpecificAssetId<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ISpecificAssetId
            where TEnhancement : class
        {
            private readonly Aas.ISpecificAssetId _instance;

            public EnhancedSpecificAssetId(
                Aas.ISpecificAssetId instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public string Name
            {
                get => _instance.Name;
                set => _instance.Name = value;
            }

            public string Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IReference? ExternalSubjectId
            {
                get => _instance.ExternalSubjectId;
                set => _instance.ExternalSubjectId = value;
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitSpecificAssetId(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitSpecificAssetId(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformSpecificAssetId(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformSpecificAssetId(_instance, context);
            }
        }

        public class EnhancedSubmodel<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ISubmodel
            where TEnhancement : class
        {
            private readonly Aas.ISubmodel _instance;

            public EnhancedSubmodel(
                Aas.ISubmodel instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IAdministrativeInformation? Administration
            {
                get => _instance.Administration;
                set => _instance.Administration = value;
            }

            public string Id
            {
                get => _instance.Id;
                set => _instance.Id = value;
            }

            public ModellingKind? Kind
            {
                get => _instance.Kind;
                set => _instance.Kind = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<ISubmodelElement>? SubmodelElements
            {
                get => _instance.SubmodelElements;
                set => _instance.SubmodelElements = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.ISubmodelElement> OverSubmodelElementsOrEmpty()
            {
                return _instance.OverSubmodelElementsOrEmpty();
            }

            public Aas.ModellingKind KindOrDefault()
            {
                return _instance.KindOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitSubmodel(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitSubmodel(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformSubmodel(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformSubmodel(_instance, context);
            }
        }

        public class EnhancedRelationshipElement<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IRelationshipElement
            where TEnhancement : class
        {
            private readonly Aas.IRelationshipElement _instance;

            public EnhancedRelationshipElement(
                Aas.IRelationshipElement instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IReference First
            {
                get => _instance.First;
                set => _instance.First = value;
            }

            public IReference Second
            {
                get => _instance.Second;
                set => _instance.Second = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitRelationshipElement(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitRelationshipElement(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformRelationshipElement(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformRelationshipElement(_instance, context);
            }
        }

        public class EnhancedSubmodelElementList<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ISubmodelElementList
            where TEnhancement : class
        {
            private readonly Aas.ISubmodelElementList _instance;

            public EnhancedSubmodelElementList(
                Aas.ISubmodelElementList instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public bool? OrderRelevant
            {
                get => _instance.OrderRelevant;
                set => _instance.OrderRelevant = value;
            }

            public IReference? SemanticIdListElement
            {
                get => _instance.SemanticIdListElement;
                set => _instance.SemanticIdListElement = value;
            }

            public AasSubmodelElements TypeValueListElement
            {
                get => _instance.TypeValueListElement;
                set => _instance.TypeValueListElement = value;
            }

            public DataTypeDefXsd? ValueTypeListElement
            {
                get => _instance.ValueTypeListElement;
                set => _instance.ValueTypeListElement = value;
            }

            public List<ISubmodelElement>? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.ISubmodelElement> OverValueOrEmpty()
            {
                return _instance.OverValueOrEmpty();
            }

            public bool OrderRelevantOrDefault()
            {
                return _instance.OrderRelevantOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitSubmodelElementList(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitSubmodelElementList(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformSubmodelElementList(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformSubmodelElementList(_instance, context);
            }
        }

        public class EnhancedSubmodelElementCollection<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ISubmodelElementCollection
            where TEnhancement : class
        {
            private readonly Aas.ISubmodelElementCollection _instance;

            public EnhancedSubmodelElementCollection(
                Aas.ISubmodelElementCollection instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<ISubmodelElement>? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.ISubmodelElement> OverValueOrEmpty()
            {
                return _instance.OverValueOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitSubmodelElementCollection(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitSubmodelElementCollection(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformSubmodelElementCollection(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformSubmodelElementCollection(_instance, context);
            }
        }

        public class EnhancedProperty<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IProperty
            where TEnhancement : class
        {
            private readonly Aas.IProperty _instance;

            public EnhancedProperty(
                Aas.IProperty instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public DataTypeDefXsd ValueType
            {
                get => _instance.ValueType;
                set => _instance.ValueType = value;
            }

            public string? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IReference? ValueId
            {
                get => _instance.ValueId;
                set => _instance.ValueId = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitProperty(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitProperty(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformProperty(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformProperty(_instance, context);
            }
        }

        public class EnhancedMultiLanguageProperty<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IMultiLanguageProperty
            where TEnhancement : class
        {
            private readonly Aas.IMultiLanguageProperty _instance;

            public EnhancedMultiLanguageProperty(
                Aas.IMultiLanguageProperty instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<ILangStringTextType>? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IReference? ValueId
            {
                get => _instance.ValueId;
                set => _instance.ValueId = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverValueOrEmpty()
            {
                return _instance.OverValueOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitMultiLanguageProperty(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitMultiLanguageProperty(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformMultiLanguageProperty(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformMultiLanguageProperty(_instance, context);
            }
        }

        public class EnhancedRange<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IRange
            where TEnhancement : class
        {
            private readonly Aas.IRange _instance;

            public EnhancedRange(
                Aas.IRange instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public DataTypeDefXsd ValueType
            {
                get => _instance.ValueType;
                set => _instance.ValueType = value;
            }

            public string? Min
            {
                get => _instance.Min;
                set => _instance.Min = value;
            }

            public string? Max
            {
                get => _instance.Max;
                set => _instance.Max = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitRange(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitRange(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformRange(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformRange(_instance, context);
            }
        }

        public class EnhancedReferenceElement<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IReferenceElement
            where TEnhancement : class
        {
            private readonly Aas.IReferenceElement _instance;

            public EnhancedReferenceElement(
                Aas.IReferenceElement instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IReference? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitReferenceElement(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitReferenceElement(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformReferenceElement(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformReferenceElement(_instance, context);
            }
        }

        public class EnhancedBlob<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IBlob
            where TEnhancement : class
        {
            private readonly Aas.IBlob _instance;

            public EnhancedBlob(
                Aas.IBlob instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public byte[]? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public string ContentType
            {
                get => _instance.ContentType;
                set => _instance.ContentType = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitBlob(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitBlob(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformBlob(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformBlob(_instance, context);
            }
        }

        public class EnhancedFile<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IFile
            where TEnhancement : class
        {
            private readonly Aas.IFile _instance;

            public EnhancedFile(
                Aas.IFile instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public string? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public string ContentType
            {
                get => _instance.ContentType;
                set => _instance.ContentType = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public string CategoryOrDefault()
            {
                return _instance.CategoryOrDefault();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitFile(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitFile(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformFile(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformFile(_instance, context);
            }
        }

        public class EnhancedAnnotatedRelationshipElement<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IAnnotatedRelationshipElement
            where TEnhancement : class
        {
            private readonly Aas.IAnnotatedRelationshipElement _instance;

            public EnhancedAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IReference First
            {
                get => _instance.First;
                set => _instance.First = value;
            }

            public IReference Second
            {
                get => _instance.Second;
                set => _instance.Second = value;
            }

            public List<IDataElement>? Annotations
            {
                get => _instance.Annotations;
                set => _instance.Annotations = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IDataElement> OverAnnotationsOrEmpty()
            {
                return _instance.OverAnnotationsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitAnnotatedRelationshipElement(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitAnnotatedRelationshipElement(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformAnnotatedRelationshipElement(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformAnnotatedRelationshipElement(_instance, context);
            }
        }

        public class EnhancedEntity<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IEntity
            where TEnhancement : class
        {
            private readonly Aas.IEntity _instance;

            public EnhancedEntity(
                Aas.IEntity instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<ISubmodelElement>? Statements
            {
                get => _instance.Statements;
                set => _instance.Statements = value;
            }

            public EntityType EntityType
            {
                get => _instance.EntityType;
                set => _instance.EntityType = value;
            }

            public string? GlobalAssetId
            {
                get => _instance.GlobalAssetId;
                set => _instance.GlobalAssetId = value;
            }

            public List<ISpecificAssetId>? SpecificAssetIds
            {
                get => _instance.SpecificAssetIds;
                set => _instance.SpecificAssetIds = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.ISubmodelElement> OverStatementsOrEmpty()
            {
                return _instance.OverStatementsOrEmpty();
            }

            public IEnumerable<Aas.ISpecificAssetId> OverSpecificAssetIdsOrEmpty()
            {
                return _instance.OverSpecificAssetIdsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitEntity(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitEntity(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformEntity(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformEntity(_instance, context);
            }
        }

        public class EnhancedEventPayload<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IEventPayload
            where TEnhancement : class
        {
            private readonly Aas.IEventPayload _instance;

            public EnhancedEventPayload(
                Aas.IEventPayload instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public IReference Source
            {
                get => _instance.Source;
                set => _instance.Source = value;
            }

            public IReference? SourceSemanticId
            {
                get => _instance.SourceSemanticId;
                set => _instance.SourceSemanticId = value;
            }

            public IReference ObservableReference
            {
                get => _instance.ObservableReference;
                set => _instance.ObservableReference = value;
            }

            public IReference? ObservableSemanticId
            {
                get => _instance.ObservableSemanticId;
                set => _instance.ObservableSemanticId = value;
            }

            public string? Topic
            {
                get => _instance.Topic;
                set => _instance.Topic = value;
            }

            public IReference? SubjectId
            {
                get => _instance.SubjectId;
                set => _instance.SubjectId = value;
            }

            public string TimeStamp
            {
                get => _instance.TimeStamp;
                set => _instance.TimeStamp = value;
            }

            public byte[]? Payload
            {
                get => _instance.Payload;
                set => _instance.Payload = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitEventPayload(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitEventPayload(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformEventPayload(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformEventPayload(_instance, context);
            }
        }

        public class EnhancedBasicEventElement<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IBasicEventElement
            where TEnhancement : class
        {
            private readonly Aas.IBasicEventElement _instance;

            public EnhancedBasicEventElement(
                Aas.IBasicEventElement instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IReference Observed
            {
                get => _instance.Observed;
                set => _instance.Observed = value;
            }

            public Direction Direction
            {
                get => _instance.Direction;
                set => _instance.Direction = value;
            }

            public StateOfEvent State
            {
                get => _instance.State;
                set => _instance.State = value;
            }

            public string? MessageTopic
            {
                get => _instance.MessageTopic;
                set => _instance.MessageTopic = value;
            }

            public IReference? MessageBroker
            {
                get => _instance.MessageBroker;
                set => _instance.MessageBroker = value;
            }

            public string? LastUpdate
            {
                get => _instance.LastUpdate;
                set => _instance.LastUpdate = value;
            }

            public string? MinInterval
            {
                get => _instance.MinInterval;
                set => _instance.MinInterval = value;
            }

            public string? MaxInterval
            {
                get => _instance.MaxInterval;
                set => _instance.MaxInterval = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitBasicEventElement(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitBasicEventElement(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformBasicEventElement(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformBasicEventElement(_instance, context);
            }
        }

        public class EnhancedOperation<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IOperation
            where TEnhancement : class
        {
            private readonly Aas.IOperation _instance;

            public EnhancedOperation(
                Aas.IOperation instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<IOperationVariable>? InputVariables
            {
                get => _instance.InputVariables;
                set => _instance.InputVariables = value;
            }

            public List<IOperationVariable>? OutputVariables
            {
                get => _instance.OutputVariables;
                set => _instance.OutputVariables = value;
            }

            public List<IOperationVariable>? InoutputVariables
            {
                get => _instance.InoutputVariables;
                set => _instance.InoutputVariables = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IOperationVariable> OverInputVariablesOrEmpty()
            {
                return _instance.OverInputVariablesOrEmpty();
            }

            public IEnumerable<Aas.IOperationVariable> OverOutputVariablesOrEmpty()
            {
                return _instance.OverOutputVariablesOrEmpty();
            }

            public IEnumerable<Aas.IOperationVariable> OverInoutputVariablesOrEmpty()
            {
                return _instance.OverInoutputVariablesOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitOperation(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitOperation(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformOperation(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformOperation(_instance, context);
            }
        }

        public class EnhancedOperationVariable<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IOperationVariable
            where TEnhancement : class
        {
            private readonly Aas.IOperationVariable _instance;

            public EnhancedOperationVariable(
                Aas.IOperationVariable instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public ISubmodelElement Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitOperationVariable(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitOperationVariable(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformOperationVariable(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformOperationVariable(_instance, context);
            }
        }

        public class EnhancedCapability<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ICapability
            where TEnhancement : class
        {
            private readonly Aas.ICapability _instance;

            public EnhancedCapability(
                Aas.ICapability instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IReference? SemanticId
            {
                get => _instance.SemanticId;
                set => _instance.SemanticId = value;
            }

            public List<IReference>? SupplementalSemanticIds
            {
                get => _instance.SupplementalSemanticIds;
                set => _instance.SupplementalSemanticIds = value;
            }

            public List<IQualifier>? Qualifiers
            {
                get => _instance.Qualifiers;
                set => _instance.Qualifiers = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverSupplementalSemanticIdsOrEmpty()
            {
                return _instance.OverSupplementalSemanticIdsOrEmpty();
            }

            public IEnumerable<Aas.IQualifier> OverQualifiersOrEmpty()
            {
                return _instance.OverQualifiersOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitCapability(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitCapability(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformCapability(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformCapability(_instance, context);
            }
        }

        public class EnhancedConceptDescription<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IConceptDescription
            where TEnhancement : class
        {
            private readonly Aas.IConceptDescription _instance;

            public EnhancedConceptDescription(
                Aas.IConceptDescription instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IExtension>? Extensions
            {
                get => _instance.Extensions;
                set => _instance.Extensions = value;
            }

            public string? Category
            {
                get => _instance.Category;
                set => _instance.Category = value;
            }

            public string? IdShort
            {
                get => _instance.IdShort;
                set => _instance.IdShort = value;
            }

            public List<ILangStringNameType>? DisplayName
            {
                get => _instance.DisplayName;
                set => _instance.DisplayName = value;
            }

            public List<ILangStringTextType>? Description
            {
                get => _instance.Description;
                set => _instance.Description = value;
            }

            public IAdministrativeInformation? Administration
            {
                get => _instance.Administration;
                set => _instance.Administration = value;
            }

            public string Id
            {
                get => _instance.Id;
                set => _instance.Id = value;
            }

            public List<IEmbeddedDataSpecification>? EmbeddedDataSpecifications
            {
                get => _instance.EmbeddedDataSpecifications;
                set => _instance.EmbeddedDataSpecifications = value;
            }

            public List<IReference>? IsCaseOf
            {
                get => _instance.IsCaseOf;
                set => _instance.IsCaseOf = value;
            }

            public IEnumerable<Aas.IExtension> OverExtensionsOrEmpty()
            {
                return _instance.OverExtensionsOrEmpty();
            }

            public IEnumerable<Aas.ILangStringNameType> OverDisplayNameOrEmpty()
            {
                return _instance.OverDisplayNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringTextType> OverDescriptionOrEmpty()
            {
                return _instance.OverDescriptionOrEmpty();
            }

            public IEnumerable<Aas.IEmbeddedDataSpecification> OverEmbeddedDataSpecificationsOrEmpty()
            {
                return _instance.OverEmbeddedDataSpecificationsOrEmpty();
            }

            public IEnumerable<Aas.IReference> OverIsCaseOfOrEmpty()
            {
                return _instance.OverIsCaseOfOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitConceptDescription(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitConceptDescription(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformConceptDescription(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformConceptDescription(_instance, context);
            }
        }

        public class EnhancedReference<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IReference
            where TEnhancement : class
        {
            private readonly Aas.IReference _instance;

            public EnhancedReference(
                Aas.IReference instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public ReferenceTypes Type
            {
                get => _instance.Type;
                set => _instance.Type = value;
            }

            public IReference? ReferredSemanticId
            {
                get => _instance.ReferredSemanticId;
                set => _instance.ReferredSemanticId = value;
            }

            public List<IKey> Keys
            {
                get => _instance.Keys;
                set => _instance.Keys = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitReference(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitReference(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformReference(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformReference(_instance, context);
            }
        }

        public class EnhancedKey<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IKey
            where TEnhancement : class
        {
            private readonly Aas.IKey _instance;

            public EnhancedKey(
                Aas.IKey instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public KeyTypes Type
            {
                get => _instance.Type;
                set => _instance.Type = value;
            }

            public string Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitKey(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitKey(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformKey(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformKey(_instance, context);
            }
        }

        public class EnhancedLangStringNameType<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILangStringNameType
            where TEnhancement : class
        {
            private readonly Aas.ILangStringNameType _instance;

            public EnhancedLangStringNameType(
                Aas.ILangStringNameType instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Language
            {
                get => _instance.Language;
                set => _instance.Language = value;
            }

            public string Text
            {
                get => _instance.Text;
                set => _instance.Text = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLangStringNameType(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLangStringNameType(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLangStringNameType(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLangStringNameType(_instance, context);
            }
        }

        public class EnhancedLangStringTextType<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILangStringTextType
            where TEnhancement : class
        {
            private readonly Aas.ILangStringTextType _instance;

            public EnhancedLangStringTextType(
                Aas.ILangStringTextType instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Language
            {
                get => _instance.Language;
                set => _instance.Language = value;
            }

            public string Text
            {
                get => _instance.Text;
                set => _instance.Text = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLangStringTextType(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLangStringTextType(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLangStringTextType(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLangStringTextType(_instance, context);
            }
        }

        public class EnhancedEnvironment<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IEnvironment
            where TEnhancement : class
        {
            private readonly Aas.IEnvironment _instance;

            public EnhancedEnvironment(
                Aas.IEnvironment instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IAssetAdministrationShell>? AssetAdministrationShells
            {
                get => _instance.AssetAdministrationShells;
                set => _instance.AssetAdministrationShells = value;
            }

            public List<ISubmodel>? Submodels
            {
                get => _instance.Submodels;
                set => _instance.Submodels = value;
            }

            public List<IConceptDescription>? ConceptDescriptions
            {
                get => _instance.ConceptDescriptions;
                set => _instance.ConceptDescriptions = value;
            }

            public IEnumerable<Aas.IAssetAdministrationShell> OverAssetAdministrationShellsOrEmpty()
            {
                return _instance.OverAssetAdministrationShellsOrEmpty();
            }

            public IEnumerable<Aas.ISubmodel> OverSubmodelsOrEmpty()
            {
                return _instance.OverSubmodelsOrEmpty();
            }

            public IEnumerable<Aas.IConceptDescription> OverConceptDescriptionsOrEmpty()
            {
                return _instance.OverConceptDescriptionsOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitEnvironment(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitEnvironment(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformEnvironment(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformEnvironment(_instance, context);
            }
        }

        public class EnhancedEmbeddedDataSpecification<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IEmbeddedDataSpecification
            where TEnhancement : class
        {
            private readonly Aas.IEmbeddedDataSpecification _instance;

            public EnhancedEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public IReference DataSpecification
            {
                get => _instance.DataSpecification;
                set => _instance.DataSpecification = value;
            }

            public IDataSpecificationContent DataSpecificationContent
            {
                get => _instance.DataSpecificationContent;
                set => _instance.DataSpecificationContent = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitEmbeddedDataSpecification(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitEmbeddedDataSpecification(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformEmbeddedDataSpecification(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformEmbeddedDataSpecification(_instance, context);
            }
        }

        public class EnhancedLevelType<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILevelType
            where TEnhancement : class
        {
            private readonly Aas.ILevelType _instance;

            public EnhancedLevelType(
                Aas.ILevelType instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public bool Min
            {
                get => _instance.Min;
                set => _instance.Min = value;
            }

            public bool Nom
            {
                get => _instance.Nom;
                set => _instance.Nom = value;
            }

            public bool Typ
            {
                get => _instance.Typ;
                set => _instance.Typ = value;
            }

            public bool Max
            {
                get => _instance.Max;
                set => _instance.Max = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLevelType(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLevelType(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLevelType(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLevelType(_instance, context);
            }
        }

        public class EnhancedValueReferencePair<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IValueReferencePair
            where TEnhancement : class
        {
            private readonly Aas.IValueReferencePair _instance;

            public EnhancedValueReferencePair(
                Aas.IValueReferencePair instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public IReference ValueId
            {
                get => _instance.ValueId;
                set => _instance.ValueId = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitValueReferencePair(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitValueReferencePair(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformValueReferencePair(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformValueReferencePair(_instance, context);
            }
        }

        public class EnhancedValueList<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IValueList
            where TEnhancement : class
        {
            private readonly Aas.IValueList _instance;

            public EnhancedValueList(
                Aas.IValueList instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<IValueReferencePair> ValueReferencePairs
            {
                get => _instance.ValueReferencePairs;
                set => _instance.ValueReferencePairs = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitValueList(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitValueList(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformValueList(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformValueList(_instance, context);
            }
        }

        public class EnhancedLangStringPreferredNameTypeIec61360<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILangStringPreferredNameTypeIec61360
            where TEnhancement : class
        {
            private readonly Aas.ILangStringPreferredNameTypeIec61360 _instance;

            public EnhancedLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Language
            {
                get => _instance.Language;
                set => _instance.Language = value;
            }

            public string Text
            {
                get => _instance.Text;
                set => _instance.Text = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLangStringPreferredNameTypeIec61360(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLangStringPreferredNameTypeIec61360(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLangStringPreferredNameTypeIec61360(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLangStringPreferredNameTypeIec61360(_instance, context);
            }
        }

        public class EnhancedLangStringShortNameTypeIec61360<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILangStringShortNameTypeIec61360
            where TEnhancement : class
        {
            private readonly Aas.ILangStringShortNameTypeIec61360 _instance;

            public EnhancedLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Language
            {
                get => _instance.Language;
                set => _instance.Language = value;
            }

            public string Text
            {
                get => _instance.Text;
                set => _instance.Text = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLangStringShortNameTypeIec61360(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLangStringShortNameTypeIec61360(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLangStringShortNameTypeIec61360(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLangStringShortNameTypeIec61360(_instance, context);
            }
        }

        public class EnhancedLangStringDefinitionTypeIec61360<TEnhancement>
            : Enhanced<TEnhancement>, Aas.ILangStringDefinitionTypeIec61360
            where TEnhancement : class
        {
            private readonly Aas.ILangStringDefinitionTypeIec61360 _instance;

            public EnhancedLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public string Language
            {
                get => _instance.Language;
                set => _instance.Language = value;
            }

            public string Text
            {
                get => _instance.Text;
                set => _instance.Text = value;
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitLangStringDefinitionTypeIec61360(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitLangStringDefinitionTypeIec61360(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformLangStringDefinitionTypeIec61360(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformLangStringDefinitionTypeIec61360(_instance, context);
            }
        }

        public class EnhancedDataSpecificationIec61360<TEnhancement>
            : Enhanced<TEnhancement>, Aas.IDataSpecificationIec61360
            where TEnhancement : class
        {
            private readonly Aas.IDataSpecificationIec61360 _instance;

            public EnhancedDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 instance,
                TEnhancement enhancement
            ) : base(enhancement)
            {
                _instance = instance;
            }

            public List<ILangStringPreferredNameTypeIec61360> PreferredName
            {
                get => _instance.PreferredName;
                set => _instance.PreferredName = value;
            }

            public List<ILangStringShortNameTypeIec61360>? ShortName
            {
                get => _instance.ShortName;
                set => _instance.ShortName = value;
            }

            public string? Unit
            {
                get => _instance.Unit;
                set => _instance.Unit = value;
            }

            public IReference? UnitId
            {
                get => _instance.UnitId;
                set => _instance.UnitId = value;
            }

            public string? SourceOfDefinition
            {
                get => _instance.SourceOfDefinition;
                set => _instance.SourceOfDefinition = value;
            }

            public string? Symbol
            {
                get => _instance.Symbol;
                set => _instance.Symbol = value;
            }

            public DataTypeIec61360? DataType
            {
                get => _instance.DataType;
                set => _instance.DataType = value;
            }

            public List<ILangStringDefinitionTypeIec61360>? Definition
            {
                get => _instance.Definition;
                set => _instance.Definition = value;
            }

            public string? ValueFormat
            {
                get => _instance.ValueFormat;
                set => _instance.ValueFormat = value;
            }

            public IValueList? ValueList
            {
                get => _instance.ValueList;
                set => _instance.ValueList = value;
            }

            public string? Value
            {
                get => _instance.Value;
                set => _instance.Value = value;
            }

            public ILevelType? LevelType
            {
                get => _instance.LevelType;
                set => _instance.LevelType = value;
            }

            public IEnumerable<Aas.ILangStringShortNameTypeIec61360> OverShortNameOrEmpty()
            {
                return _instance.OverShortNameOrEmpty();
            }

            public IEnumerable<Aas.ILangStringDefinitionTypeIec61360> OverDefinitionOrEmpty()
            {
                return _instance.OverDefinitionOrEmpty();
            }

            public IEnumerable<Aas.IClass> DescendOnce()
            {
                return _instance.DescendOnce();
            }

            public IEnumerable<Aas.IClass> Descend()
            {
                return _instance.Descend();
            }

            public void Accept(Aas.Visitation.IVisitor visitor)
            {
                visitor.VisitDataSpecificationIec61360(_instance);
            }

            public void Accept<TContext>(
                Visitation.IVisitorWithContext<TContext> visitor,
                TContext context
            )
            {
                visitor.VisitDataSpecificationIec61360(_instance, context);
            }

            public T Transform<T>(Visitation.ITransformer<T> transformer)
            {
                return transformer.TransformDataSpecificationIec61360(_instance);
            }

            public T Transform<TContext, T>(
                Visitation.ITransformerWithContext<TContext, T> transformer,
                TContext context
            )
            {
                return transformer.TransformDataSpecificationIec61360(_instance, context);
            }
        }

        internal class Wrapper<TEnhancement>
            : Aas.Visitation.AbstractTransformer<Enhanced<TEnhancement>>
            where TEnhancement : class
        {
            private readonly System.Func<Aas.IClass, TEnhancement> _enhancementFactory;

            internal Wrapper(
                System.Func<Aas.IClass, TEnhancement> enhancementFactory
            )
            {
                _enhancementFactory = enhancementFactory;
            }

            public override Enhanced<TEnhancement> TransformExtension(
                Aas.IExtension that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.RefersTo != null)
                {
                    that.RefersTo = (
                        that.RefersTo
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedExtension<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformAdministrativeInformation(
                Aas.IAdministrativeInformation that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Creator != null)
                {
                    var transformedCreator = Transform(
                        that.Creator
                    );
                    var castedCreator = (
                        transformedCreator as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedCreator}"
                    );
                    that.Creator = castedCreator;
                }

                return new EnhancedAdministrativeInformation<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformQualifier(
                Aas.IQualifier that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ValueId != null)
                {
                    var transformedValueId = Transform(
                        that.ValueId
                    );
                    var castedValueId = (
                        transformedValueId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedValueId}"
                    );
                    that.ValueId = castedValueId;
                }

                return new EnhancedQualifier<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformAssetAdministrationShell(
                Aas.IAssetAdministrationShell that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Administration != null)
                {
                    var transformedAdministration = Transform(
                        that.Administration
                    );
                    var castedAdministration = (
                        transformedAdministration as Aas.IAdministrativeInformation
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IAdministrativeInformation, " +
                        $"but got: {transformedAdministration}"
                    );
                    that.Administration = castedAdministration;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DerivedFrom != null)
                {
                    var transformedDerivedFrom = Transform(
                        that.DerivedFrom
                    );
                    var castedDerivedFrom = (
                        transformedDerivedFrom as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedDerivedFrom}"
                    );
                    that.DerivedFrom = castedDerivedFrom;
                }

                var transformedAssetInformation = Transform(
                    that.AssetInformation
                );
                var castedAssetInformation = (
                    transformedAssetInformation as Aas.IAssetInformation
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IAssetInformation, " +
                    $"but got: {transformedAssetInformation}"
                );
                that.AssetInformation = castedAssetInformation;

                if (that.Submodels != null)
                {
                    that.Submodels = (
                        that.Submodels
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedAssetAdministrationShell<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformAssetInformation(
                Aas.IAssetInformation that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.SpecificAssetIds != null)
                {
                    that.SpecificAssetIds = (
                        that.SpecificAssetIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISpecificAssetId
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISpecificAssetId, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DefaultThumbnail != null)
                {
                    var transformedDefaultThumbnail = Transform(
                        that.DefaultThumbnail
                    );
                    var castedDefaultThumbnail = (
                        transformedDefaultThumbnail as Aas.IResource
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IResource, " +
                        $"but got: {transformedDefaultThumbnail}"
                    );
                    that.DefaultThumbnail = castedDefaultThumbnail;
                }

                return new EnhancedAssetInformation<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformResource(
                Aas.IResource that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedResource<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformSpecificAssetId(
                Aas.ISpecificAssetId that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ExternalSubjectId != null)
                {
                    var transformedExternalSubjectId = Transform(
                        that.ExternalSubjectId
                    );
                    var castedExternalSubjectId = (
                        transformedExternalSubjectId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedExternalSubjectId}"
                    );
                    that.ExternalSubjectId = castedExternalSubjectId;
                }

                return new EnhancedSpecificAssetId<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformSubmodel(
                Aas.ISubmodel that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Administration != null)
                {
                    var transformedAdministration = Transform(
                        that.Administration
                    );
                    var castedAdministration = (
                        transformedAdministration as Aas.IAdministrativeInformation
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IAdministrativeInformation, " +
                        $"but got: {transformedAdministration}"
                    );
                    that.Administration = castedAdministration;
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SubmodelElements != null)
                {
                    that.SubmodelElements = (
                        that.SubmodelElements
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISubmodelElement
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISubmodelElement, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedSubmodel<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformRelationshipElement(
                Aas.IRelationshipElement that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                var transformedFirst = Transform(
                    that.First
                );
                var castedFirst = (
                    transformedFirst as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedFirst}"
                );
                that.First = castedFirst;

                var transformedSecond = Transform(
                    that.Second
                );
                var castedSecond = (
                    transformedSecond as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedSecond}"
                );
                that.Second = castedSecond;

                return new EnhancedRelationshipElement<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformSubmodelElementList(
                Aas.ISubmodelElementList that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticIdListElement != null)
                {
                    var transformedSemanticIdListElement = Transform(
                        that.SemanticIdListElement
                    );
                    var castedSemanticIdListElement = (
                        transformedSemanticIdListElement as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticIdListElement}"
                    );
                    that.SemanticIdListElement = castedSemanticIdListElement;
                }

                if (that.Value != null)
                {
                    that.Value = (
                        that.Value
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISubmodelElement
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISubmodelElement, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedSubmodelElementList<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformSubmodelElementCollection(
                Aas.ISubmodelElementCollection that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Value != null)
                {
                    that.Value = (
                        that.Value
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISubmodelElement
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISubmodelElement, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedSubmodelElementCollection<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformProperty(
                Aas.IProperty that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ValueId != null)
                {
                    var transformedValueId = Transform(
                        that.ValueId
                    );
                    var castedValueId = (
                        transformedValueId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedValueId}"
                    );
                    that.ValueId = castedValueId;
                }

                return new EnhancedProperty<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformMultiLanguageProperty(
                Aas.IMultiLanguageProperty that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Value != null)
                {
                    that.Value = (
                        that.Value
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ValueId != null)
                {
                    var transformedValueId = Transform(
                        that.ValueId
                    );
                    var castedValueId = (
                        transformedValueId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedValueId}"
                    );
                    that.ValueId = castedValueId;
                }

                return new EnhancedMultiLanguageProperty<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformRange(
                Aas.IRange that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedRange<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformReferenceElement(
                Aas.IReferenceElement that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Value != null)
                {
                    var transformedValue = Transform(
                        that.Value
                    );
                    var castedValue = (
                        transformedValue as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedValue}"
                    );
                    that.Value = castedValue;
                }

                return new EnhancedReferenceElement<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformBlob(
                Aas.IBlob that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedBlob<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformFile(
                Aas.IFile that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedFile<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformAnnotatedRelationshipElement(
                Aas.IAnnotatedRelationshipElement that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                var transformedFirst = Transform(
                    that.First
                );
                var castedFirst = (
                    transformedFirst as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedFirst}"
                );
                that.First = castedFirst;

                var transformedSecond = Transform(
                    that.Second
                );
                var castedSecond = (
                    transformedSecond as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedSecond}"
                );
                that.Second = castedSecond;

                if (that.Annotations != null)
                {
                    that.Annotations = (
                        that.Annotations
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IDataElement
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IDataElement, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedAnnotatedRelationshipElement<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformEntity(
                Aas.IEntity that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Statements != null)
                {
                    that.Statements = (
                        that.Statements
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISubmodelElement
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISubmodelElement, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SpecificAssetIds != null)
                {
                    that.SpecificAssetIds = (
                        that.SpecificAssetIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISpecificAssetId
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISpecificAssetId, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedEntity<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformEventPayload(
                Aas.IEventPayload that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                var transformedSource = Transform(
                    that.Source
                );
                var castedSource = (
                    transformedSource as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedSource}"
                );
                that.Source = castedSource;

                if (that.SourceSemanticId != null)
                {
                    var transformedSourceSemanticId = Transform(
                        that.SourceSemanticId
                    );
                    var castedSourceSemanticId = (
                        transformedSourceSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSourceSemanticId}"
                    );
                    that.SourceSemanticId = castedSourceSemanticId;
                }

                var transformedObservableReference = Transform(
                    that.ObservableReference
                );
                var castedObservableReference = (
                    transformedObservableReference as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedObservableReference}"
                );
                that.ObservableReference = castedObservableReference;

                if (that.ObservableSemanticId != null)
                {
                    var transformedObservableSemanticId = Transform(
                        that.ObservableSemanticId
                    );
                    var castedObservableSemanticId = (
                        transformedObservableSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedObservableSemanticId}"
                    );
                    that.ObservableSemanticId = castedObservableSemanticId;
                }

                if (that.SubjectId != null)
                {
                    var transformedSubjectId = Transform(
                        that.SubjectId
                    );
                    var castedSubjectId = (
                        transformedSubjectId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSubjectId}"
                    );
                    that.SubjectId = castedSubjectId;
                }

                return new EnhancedEventPayload<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformBasicEventElement(
                Aas.IBasicEventElement that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                var transformedObserved = Transform(
                    that.Observed
                );
                var castedObserved = (
                    transformedObserved as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedObserved}"
                );
                that.Observed = castedObserved;

                if (that.MessageBroker != null)
                {
                    var transformedMessageBroker = Transform(
                        that.MessageBroker
                    );
                    var castedMessageBroker = (
                        transformedMessageBroker as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedMessageBroker}"
                    );
                    that.MessageBroker = castedMessageBroker;
                }

                return new EnhancedBasicEventElement<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformOperation(
                Aas.IOperation that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.InputVariables != null)
                {
                    that.InputVariables = (
                        that.InputVariables
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IOperationVariable
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IOperationVariable, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.OutputVariables != null)
                {
                    that.OutputVariables = (
                        that.OutputVariables
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IOperationVariable
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IOperationVariable, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.InoutputVariables != null)
                {
                    that.InoutputVariables = (
                        that.InoutputVariables
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IOperationVariable
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IOperationVariable, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedOperation<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformOperationVariable(
                Aas.IOperationVariable that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                var transformedValue = Transform(
                    that.Value
                );
                var castedValue = (
                    transformedValue as Aas.ISubmodelElement
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a ISubmodelElement, " +
                    $"but got: {transformedValue}"
                );
                that.Value = castedValue;

                return new EnhancedOperationVariable<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformCapability(
                Aas.ICapability that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.SemanticId != null)
                {
                    var transformedSemanticId = Transform(
                        that.SemanticId
                    );
                    var castedSemanticId = (
                        transformedSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedSemanticId}"
                    );
                    that.SemanticId = castedSemanticId;
                }

                if (that.SupplementalSemanticIds != null)
                {
                    that.SupplementalSemanticIds = (
                        that.SupplementalSemanticIds
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Qualifiers != null)
                {
                    that.Qualifiers = (
                        that.Qualifiers
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IQualifier
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IQualifier, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedCapability<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformConceptDescription(
                Aas.IConceptDescription that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.Extensions != null)
                {
                    that.Extensions = (
                        that.Extensions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IExtension
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IExtension, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.DisplayName != null)
                {
                    that.DisplayName = (
                        that.DisplayName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringNameType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringNameType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Description != null)
                {
                    that.Description = (
                        that.Description
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringTextType
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringTextType, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Administration != null)
                {
                    var transformedAdministration = Transform(
                        that.Administration
                    );
                    var castedAdministration = (
                        transformedAdministration as Aas.IAdministrativeInformation
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IAdministrativeInformation, " +
                        $"but got: {transformedAdministration}"
                    );
                    that.Administration = castedAdministration;
                }

                if (that.EmbeddedDataSpecifications != null)
                {
                    that.EmbeddedDataSpecifications = (
                        that.EmbeddedDataSpecifications
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IEmbeddedDataSpecification
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IEmbeddedDataSpecification, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.IsCaseOf != null)
                {
                    that.IsCaseOf = (
                        that.IsCaseOf
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IReference
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IReference, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedConceptDescription<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformReference(
                Aas.IReference that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.ReferredSemanticId != null)
                {
                    var transformedReferredSemanticId = Transform(
                        that.ReferredSemanticId
                    );
                    var castedReferredSemanticId = (
                        transformedReferredSemanticId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedReferredSemanticId}"
                    );
                    that.ReferredSemanticId = castedReferredSemanticId;
                }

                that.Keys = (
                    that.Keys
                    .Select(
                        (item) => {
                            var transformed = Transform(item);
                            return (
                                transformed as Aas.IKey
                            ) ?? throw new System.InvalidOperationException(
                                "Expected the transformed item to be a IKey, " +
                                $"but got: {transformed}"
                            );
                        }
                    )
                ).ToList();

                return new EnhancedReference<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformKey(
                Aas.IKey that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedKey<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLangStringNameType(
                Aas.ILangStringNameType that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLangStringNameType<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLangStringTextType(
                Aas.ILangStringTextType that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLangStringTextType<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformEnvironment(
                Aas.IEnvironment that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                if (that.AssetAdministrationShells != null)
                {
                    that.AssetAdministrationShells = (
                        that.AssetAdministrationShells
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IAssetAdministrationShell
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IAssetAdministrationShell, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.Submodels != null)
                {
                    that.Submodels = (
                        that.Submodels
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ISubmodel
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ISubmodel, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ConceptDescriptions != null)
                {
                    that.ConceptDescriptions = (
                        that.ConceptDescriptions
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.IConceptDescription
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a IConceptDescription, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                return new EnhancedEnvironment<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformEmbeddedDataSpecification(
                Aas.IEmbeddedDataSpecification that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                var transformedDataSpecification = Transform(
                    that.DataSpecification
                );
                var castedDataSpecification = (
                    transformedDataSpecification as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedDataSpecification}"
                );
                that.DataSpecification = castedDataSpecification;

                var transformedDataSpecificationContent = Transform(
                    that.DataSpecificationContent
                );
                var castedDataSpecificationContent = (
                    transformedDataSpecificationContent as Aas.IDataSpecificationContent
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IDataSpecificationContent, " +
                    $"but got: {transformedDataSpecificationContent}"
                );
                that.DataSpecificationContent = castedDataSpecificationContent;

                return new EnhancedEmbeddedDataSpecification<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLevelType(
                Aas.ILevelType that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLevelType<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformValueReferencePair(
                Aas.IValueReferencePair that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                var transformedValueId = Transform(
                    that.ValueId
                );
                var castedValueId = (
                    transformedValueId as Aas.IReference
                ) ?? throw new System.InvalidOperationException(
                    "Expected the transformed value to be a IReference, " +
                    $"but got: {transformedValueId}"
                );
                that.ValueId = castedValueId;

                return new EnhancedValueReferencePair<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformValueList(
                Aas.IValueList that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                that.ValueReferencePairs = (
                    that.ValueReferencePairs
                    .Select(
                        (item) => {
                            var transformed = Transform(item);
                            return (
                                transformed as Aas.IValueReferencePair
                            ) ?? throw new System.InvalidOperationException(
                                "Expected the transformed item to be a IValueReferencePair, " +
                                $"but got: {transformed}"
                            );
                        }
                    )
                ).ToList();

                return new EnhancedValueList<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLangStringPreferredNameTypeIec61360(
                Aas.ILangStringPreferredNameTypeIec61360 that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLangStringPreferredNameTypeIec61360<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLangStringShortNameTypeIec61360(
                Aas.ILangStringShortNameTypeIec61360 that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLangStringShortNameTypeIec61360<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformLangStringDefinitionTypeIec61360(
                Aas.ILangStringDefinitionTypeIec61360 that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                return new EnhancedLangStringDefinitionTypeIec61360<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }

            public override Enhanced<TEnhancement> TransformDataSpecificationIec61360(
                Aas.IDataSpecificationIec61360 that
            )
            {
                if (that is Enhanced<TEnhancement>)
                {
                    throw new System.ArgumentException(
                        $"The instance has been already enhanced: {that}"
                    );
                }

                that.PreferredName = (
                    that.PreferredName
                    .Select(
                        (item) => {
                            var transformed = Transform(item);
                            return (
                                transformed as Aas.ILangStringPreferredNameTypeIec61360
                            ) ?? throw new System.InvalidOperationException(
                                "Expected the transformed item to be a ILangStringPreferredNameTypeIec61360, " +
                                $"but got: {transformed}"
                            );
                        }
                    )
                ).ToList();

                if (that.ShortName != null)
                {
                    that.ShortName = (
                        that.ShortName
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringShortNameTypeIec61360
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringShortNameTypeIec61360, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.UnitId != null)
                {
                    var transformedUnitId = Transform(
                        that.UnitId
                    );
                    var castedUnitId = (
                        transformedUnitId as Aas.IReference
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IReference, " +
                        $"but got: {transformedUnitId}"
                    );
                    that.UnitId = castedUnitId;
                }

                if (that.Definition != null)
                {
                    that.Definition = (
                        that.Definition
                        .Select(
                            (item) => {
                                var transformed = Transform(item);
                                return (
                                    transformed as Aas.ILangStringDefinitionTypeIec61360
                                ) ?? throw new System.InvalidOperationException(
                                    "Expected the transformed item to be a ILangStringDefinitionTypeIec61360, " +
                                    $"but got: {transformed}"
                                );
                            }
                        )
                    ).ToList();
                }

                if (that.ValueList != null)
                {
                    var transformedValueList = Transform(
                        that.ValueList
                    );
                    var castedValueList = (
                        transformedValueList as Aas.IValueList
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a IValueList, " +
                        $"but got: {transformedValueList}"
                    );
                    that.ValueList = castedValueList;
                }

                if (that.LevelType != null)
                {
                    var transformedLevelType = Transform(
                        that.LevelType
                    );
                    var castedLevelType = (
                        transformedLevelType as Aas.ILevelType
                    ) ?? throw new System.InvalidOperationException(
                        "Expected the transformed value to be a ILevelType, " +
                        $"but got: {transformedLevelType}"
                    );
                    that.LevelType = castedLevelType;
                }

                return new EnhancedDataSpecificationIec61360<TEnhancement>(
                    that,
                    _enhancementFactory(that)
                );
            }
        }

        /// <summary>
        /// Wrap and unwrap the instances of model classes with enhancement.
        /// </summary>
        /// <typeparam name="TEnhancement">type of the enhancement</typeparam>
        public class Enhancer<TEnhancement> where TEnhancement : class
        {
            private readonly Wrapper<TEnhancement> _wrapper;

            /// <param name="enhancementFactory">how to enhance the instances</param>
            public Enhancer(
                System.Func<Aas.IClass, TEnhancement> enhancementFactory
            )
            {
                _wrapper = new Wrapper<TEnhancement>(enhancementFactory);
            }

            /// <summary>
            /// Unwrap the given model instance.
            /// </summary>
            /// <param name="that">model instance to be unwrapped</param>
            /// <returns>
            /// Enhancement, or <c>null</c> if <paramref name="that" />
            /// has not been wrapped yet.
            /// </returns>
            public TEnhancement? Unwrap(Aas.IClass that)
            {
                // ReSharper disable once SuspiciousTypeConversion.Global
                var enhanced = that as Enhanced<TEnhancement>;
                return enhanced?._getEnhancement();
                }

            /// <summary>
            /// Unwrap the given model instance.
            /// </summary>
            /// <param name="that">model instance to be unwrapped</param>
            /// <returns>
            /// Enhancement wrapped around <paramref name="that" />
            /// </returns>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="that" /> has not been wrapped yet
            /// </exception>
            public TEnhancement MustUnwrap(Aas.IClass that)
            {
                return Unwrap(that) ?? throw new System.ArgumentException(
                    $"Expected the instance to have been wrapped, but it was not: {that}"
                );
            }

            /// <summary>
            /// Wrap the instance with an enhancement.
            /// </summary>
            /// <remarks>
            /// Double wraps are not allowed to prevent runtime leakage.
            ///
            /// If you use references to the instance objects, you have to update them
            /// after the wrapping, as the wrapping is recursive.
            /// </remarks>
            /// <param name="that">model instance to be wrapped</param>
            /// <returns>
            /// <paramref name="that" /> instance wrapped recursively with enhancements
            /// </returns>
            /// <exception cref="System.ArgumentException">
            /// Thrown when <paramref name="that" /> has been already wrapped
            /// </exception>
            public Aas.IClass Wrap(
                Aas.IClass that
            )
            {
                var wrapped = _wrapper.Transform(that);
                return (
                    wrapped as Aas.IClass
                ) ?? throw new System.InvalidOperationException(
                    "Expected the wrapped instance to be an instance of IClass, " +
                    $"but got: {wrapped}"
                );
            }
        }  // public class Enhancer
    }  // public static class Enhancing
}  // namespace AasCore.Aas3_0

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
