/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

/*
 * For more information about customizing JSON serialization in C#, please see:
 * <ul>
 * <li>https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to</li>
 * <li>https://docs.microsoft.com/en-gb/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to</li>
 * </ul>
 */

using Json = System.Text.Json;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Jsonization
    {
        public class LangStringJsonConverter :
            Json.Serialization.JsonConverter<Aas.LangString>
        {
            public override Aas.LangString Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theLanguage = null;
                string? theText = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.LangString(
                                theLanguage ?? throw new Json.JsonException(
                                    "Required property is missing: language"),
                                theText ?? throw new Json.JsonException(
                                    "Required property is missing: text"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "language": 
                                    theLanguage =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "text": 
                                    theText =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.LangString that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("language");
                Json.JsonSerializer.Serialize(
                    writer, that.Language);

                writer.WritePropertyName("text");
                Json.JsonSerializer.Serialize(
                    writer, that.Text);

                writer.WriteEndObject();
            }
        }  // LangStringJsonConverter

        public class LangStringSetJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangStringSet>
        {
            public override Aas.LangStringSet Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                throw new System.NotImplementedException("TODO");
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.LangStringSet value,
                System.Text.Json.JsonSerializerOptions options)
            {
                throw new System.NotImplementedException("TODO");
            }
        }

        public class IReferableJsonConverter :
            Json.Serialization.JsonConverter<Aas.IReferable>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IReferable).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IReferable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                AdministrativeInformation? theAdministration = null;
                string? theCategory = null;
                List<Reference>? theDataSpecifications = null;
                AssetAdministrationShell? theDerivedFrom = null;
                LangStringSet? theDescription = null;
                LangStringSet? theDisplayName = null;
                string? theIdShort = null;
                Identifier? theIdentification = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theIdentification ?? throw new Json.JsonException(
                                            "Required property is missing: identification"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications ?? throw new Json.JsonException(
                                            "Required property is missing: dataSpecifications"),
                                        theDerivedFrom);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");
    
                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "administration": 
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "category": 
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dataSpecifications": 
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<Reference>>(
                                            ref reader));
                                    break;
                                case "derivedFrom": 
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<AssetAdministrationShell>(
                                            ref reader));
                                    break;
                                case "description": 
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "displayName": 
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "idShort": 
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "identification": 
                                    theIdentification =  (
                                        Json.JsonSerializer.Deserialize<Identifier>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " + 
                                        $"of IReferable: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IReferable that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " + 
                    $"not an implementer class of IReferable: {that}");
            }
            }
        }  // IReferableJsonConverter

        public class IdentifierTypeJsonConverter :
            Json.Serialization.JsonConverter<Aas.IdentifierType>
        {
            public override Aas.IdentifierType Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.IdentifierType? value = Stringification.IdentifierTypeFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid IdentifierType: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IdentifierType value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid IdentifierType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifierJsonConverter :
            Json.Serialization.JsonConverter<Aas.Identifier>
        {
            public override Aas.Identifier Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theId = null;
                IdentifierType? theIdType = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Identifier(
                                theId ?? throw new Json.JsonException(
                                    "Required property is missing: id"),
                                theIdType ?? throw new Json.JsonException(
                                    "Required property is missing: idType"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "id": 
                                    theId =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "idType": 
                                    theIdType =  (
                                        Json.JsonSerializer.Deserialize<IdentifierType>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Identifier that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("id");
                Json.JsonSerializer.Serialize(
                    writer, that.Id);

                writer.WritePropertyName("idType");
                Json.JsonSerializer.Serialize(
                    writer, that.IdType);

                writer.WriteEndObject();
            }
        }  // IdentifierJsonConverter

        public class AdministrativeInformationJsonConverter :
            Json.Serialization.JsonConverter<Aas.AdministrativeInformation>
        {
            public override Aas.AdministrativeInformation Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theVersion = null;
                string? theRevision = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AdministrativeInformation(
                                theVersion,
                                theRevision);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "version": 
                                    theVersion =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "revision": 
                                    theRevision =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AdministrativeInformation that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.Version != null)
                {
                    writer.WritePropertyName("version");
                    Json.JsonSerializer.Serialize(
                        writer, that.Version);
                }

                if (that.Revision != null)
                {
                    writer.WritePropertyName("revision");
                    Json.JsonSerializer.Serialize(
                        writer, that.Revision);
                }

                writer.WriteEndObject();
            }
        }  // AdministrativeInformationJsonConverter

        public class IIdentifiableJsonConverter :
            Json.Serialization.JsonConverter<Aas.IIdentifiable>
        {
            public override bool CanConvert(System.Type typeToConvert)
            {
                return typeof(Aas.IIdentifiable).IsAssignableFrom(typeToConvert);
            }

            public override Aas.IIdentifiable Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                string? modelType = null;

                // Prefix the property variables with "the" to avoid conflicts
                AdministrativeInformation? theAdministration = null;
                string? theCategory = null;
                List<Reference>? theDataSpecifications = null;
                AssetAdministrationShell? theDerivedFrom = null;
                LangStringSet? theDescription = null;
                LangStringSet? theDisplayName = null;
                string? theIdShort = null;
                Identifier? theIdentification = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            switch (modelType)
                            {
                                case "AssetAdministrationShell":
                                    return new Aas.AssetAdministrationShell(
                                        theIdentification ?? throw new Json.JsonException(
                                            "Required property is missing: identification"),
                                        theIdShort ?? throw new Json.JsonException(
                                            "Required property is missing: idShort"),
                                        theDisplayName,
                                        theCategory,
                                        theDescription,
                                        theAdministration,
                                        theDataSpecifications ?? throw new Json.JsonException(
                                            "Required property is missing: dataSpecifications"),
                                        theDerivedFrom);
                                default:
                                    throw new Json.JsonException(
                                        $"Unknown model type: {modelType}");
    
                            }  // switch on modelType

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "administration": 
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "category": 
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "dataSpecifications": 
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<Reference>>(
                                            ref reader));
                                    break;
                                case "derivedFrom": 
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<AssetAdministrationShell>(
                                            ref reader));
                                    break;
                                case "description": 
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "displayName": 
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "idShort": 
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "identification": 
                                    theIdentification =  (
                                        Json.JsonSerializer.Deserialize<Identifier>(
                                            ref reader));
                                    break;
                                case "modelType":
                                    modelType = Json.JsonSerializer.Deserialize<string>(
                                        ref reader);
                                    break;
                                default:
                                    throw new Json.JsonException(
                                        $"Unexpected property in an implementer class " + 
                                        $"of IIdentifiable: {propertyName}");
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IIdentifiable that,
                Json.JsonSerializerOptions options)
            {
            switch (that)
            {
                case AssetAdministrationShell theAssetAdministrationShell:
                    Json.JsonSerializer.Serialize(
                        writer, theAssetAdministrationShell);
                    break;
                default:
                    throw new System.ArgumentException(
                    $"Instance `that` of type {that.GetType()} is " + 
                    $"not an implementer class of IIdentifiable: {that}");
            }
            }
        }  // IIdentifiableJsonConverter

        public class ModelingKindJsonConverter :
            Json.Serialization.JsonConverter<Aas.ModelingKind>
        {
            public override Aas.ModelingKind Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.ModelingKind? value = Stringification.ModelingKindFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid ModelingKind: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ModelingKind value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid ModelingKind: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class LocalKeyTypeJsonConverter :
            Json.Serialization.JsonConverter<Aas.LocalKeyType>
        {
            public override Aas.LocalKeyType Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.LocalKeyType? value = Stringification.LocalKeyTypeFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid LocalKeyType: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.LocalKeyType value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid LocalKeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyTypeJsonConverter :
            Json.Serialization.JsonConverter<Aas.KeyType>
        {
            public override Aas.KeyType Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.KeyType? value = Stringification.KeyTypeFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid KeyType: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.KeyType value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid KeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifiableElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.IdentifiableElements>
        {
            public override Aas.IdentifiableElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.IdentifiableElements? value = Stringification.IdentifiableElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid IdentifiableElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.IdentifiableElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid IdentifiableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class ReferableElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.ReferableElements>
        {
            public override Aas.ReferableElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.ReferableElements? value = Stringification.ReferableElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid ReferableElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.ReferableElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid ReferableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyElementsJsonConverter :
            Json.Serialization.JsonConverter<Aas.KeyElements>
        {
            public override Aas.KeyElements Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.String)
                {
                    throw new Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new Json.JsonException();
                }

                Aas.KeyElements? value = Stringification.KeyElementsFromString(
                    text);
                return value ?? throw new Json.JsonException(
                    $"Invalid KeyElements: {text}");
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.KeyElements value,
                Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ToString(value);
                if (text == null)
                {
                    throw new System.ArgumentException(
                        $"Invalid KeyElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyJsonConverter :
            Json.Serialization.JsonConverter<Aas.Key>
        {
            public override Aas.Key Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                KeyElements? theType = null;
                string? theValue = null;
                KeyType? theIdType = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Key(
                                theType ?? throw new Json.JsonException(
                                    "Required property is missing: type"),
                                theValue ?? throw new Json.JsonException(
                                    "Required property is missing: value"),
                                theIdType ?? throw new Json.JsonException(
                                    "Required property is missing: idType"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "type": 
                                    theType =  (
                                        Json.JsonSerializer.Deserialize<KeyElements>(
                                            ref reader));
                                    break;
                                case "value": 
                                    theValue =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "idType": 
                                    theIdType =  (
                                        Json.JsonSerializer.Deserialize<KeyType>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Key that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("type");
                Json.JsonSerializer.Serialize(
                    writer, that.Type);

                writer.WritePropertyName("value");
                Json.JsonSerializer.Serialize(
                    writer, that.Value);

                writer.WritePropertyName("idType");
                Json.JsonSerializer.Serialize(
                    writer, that.IdType);

                writer.WriteEndObject();
            }
        }  // KeyJsonConverter

        public class ReferenceJsonConverter :
            Json.Serialization.JsonConverter<Aas.Reference>
        {
            public override Aas.Reference Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Key>? theKeys = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Reference(
                                theKeys ?? throw new Json.JsonException(
                                    "Required property is missing: keys"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "keys": 
                                    theKeys =  (
                                        Json.JsonSerializer.Deserialize<List<Key>>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Reference that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("keys");
                Json.JsonSerializer.Serialize(
                    writer, that.Keys);

                writer.WriteEndObject();
            }
        }  // ReferenceJsonConverter

        public class AssetAdministrationShellJsonConverter :
            Json.Serialization.JsonConverter<Aas.AssetAdministrationShell>
        {
            public override Aas.AssetAdministrationShell Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort = null;
                LangStringSet? theDisplayName = null;
                string? theCategory = null;
                LangStringSet? theDescription = null;
                Identifier? theIdentification = null;
                AdministrativeInformation? theAdministration = null;
                List<Reference>? theDataSpecifications = null;
                AssetAdministrationShell? theDerivedFrom = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.AssetAdministrationShell(
                                theIdentification ?? throw new Json.JsonException(
                                    "Required property is missing: identification"),
                                theIdShort ?? throw new Json.JsonException(
                                    "Required property is missing: idShort"),
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theAdministration,
                                theDataSpecifications ?? throw new Json.JsonException(
                                    "Required property is missing: dataSpecifications"),
                                theDerivedFrom);

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "idShort": 
                                    theIdShort =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName": 
                                    theDisplayName =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category": 
                                    theCategory =  (
                                        Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description": 
                                    theDescription =  (
                                        Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "identification": 
                                    theIdentification =  (
                                        Json.JsonSerializer.Deserialize<Identifier>(
                                            ref reader));
                                    break;
                                case "administration": 
                                    theAdministration =  (
                                        Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "dataSpecifications": 
                                    theDataSpecifications =  (
                                        Json.JsonSerializer.Deserialize<List<Reference>>(
                                            ref reader));
                                    break;
                                case "derivedFrom": 
                                    theDerivedFrom =  (
                                        Json.JsonSerializer.Deserialize<AssetAdministrationShell>(
                                            ref reader));
                                    break;
                                case "modelType": 
                                    // Ignore the property modelType as we already know the exact type
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.AssetAdministrationShell that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("modelType");
                Json.JsonSerializer.Serialize(
                    writer, "AssetAdministrationShell");

                writer.WritePropertyName("idShort");
                Json.JsonSerializer.Serialize(
                    writer, that.IdShort);

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                writer.WritePropertyName("identification");
                Json.JsonSerializer.Serialize(
                    writer, that.Identification);

                if (that.Administration != null)
                {
                    writer.WritePropertyName("administration");
                    Json.JsonSerializer.Serialize(
                        writer, that.Administration);
                }

                writer.WritePropertyName("dataSpecifications");
                Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                if (that.DerivedFrom != null)
                {
                    writer.WritePropertyName("derivedFrom");
                    Json.JsonSerializer.Serialize(
                        writer, that.DerivedFrom);
                }

                writer.WriteEndObject();
            }
        }  // AssetAdministrationShellJsonConverter

        public class EnvironmentJsonConverter :
            Json.Serialization.JsonConverter<Aas.Environment>
        {
            public override Aas.Environment Read(
                ref Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != Json.JsonTokenType.StartObject)
                {
                    throw new Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<AssetAdministrationShell>? theAssetAdministrationShells = null;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case Json.JsonTokenType.EndObject:
                            return new Aas.Environment(
                                theAssetAdministrationShells ?? throw new Json.JsonException(
                                    "Required property is missing: assetAdministrationShells"));

                        case Json.JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                                ?? throw new System.InvalidOperationException(
                                    "Unexpected property name null");
    
                            switch (propertyName)
                            {
                                case "assetAdministrationShells": 
                                    theAssetAdministrationShells =  (
                                        Json.JsonSerializer.Deserialize<List<AssetAdministrationShell>>(
                                            ref reader));
                                    break;
                                default:
                                    // Ignore an unknown property
                                    if (!reader.Read())
                                    {
                                        throw new Json.JsonException(
                                            $"Unexpected end-of-stream after the property: {propertyName}");
                                    }
                                    if (!reader.TrySkip())
                                    {
                                        throw new Json.JsonException(
                                            "Unexpected end-of-stream when skipping " + 
                                            $"the value of the unknown property: {propertyName}");
                                    }
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new Json.JsonException();
                    }  // switch on token type
                }  // while reader.Read

                throw new Json.JsonException();
            }

            public override void Write(
                Json.Utf8JsonWriter writer,
                Aas.Environment that,
                Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("assetAdministrationShells");
                Json.JsonSerializer.Serialize(
                    writer, that.AssetAdministrationShells);

                writer.WriteEndObject();
            }
        }  // EnvironmentJsonConverter

        /// <summary>
        /// Create and populate a list of our custom-tailored JSON converters.
        /// </summary>
        public static List<Json.Serialization.JsonConverter> CreateJsonConverters()
        {
            return new List<Json.Serialization.JsonConverter>()
            {
                new LangStringJsonConverter(),
                new LangStringSetJsonConverter(),
                new IReferableJsonConverter(),
                new IdentifierTypeJsonConverter(),
                new IdentifierJsonConverter(),
                new AdministrativeInformationJsonConverter(),
                new IIdentifiableJsonConverter(),
                new ModelingKindJsonConverter(),
                new LocalKeyTypeJsonConverter(),
                new KeyTypeJsonConverter(),
                new IdentifiableElementsJsonConverter(),
                new ReferableElementsJsonConverter(),
                new KeyElementsJsonConverter(),
                new KeyJsonConverter(),
                new ReferenceJsonConverter(),
                new AssetAdministrationShellJsonConverter(),
                new EnvironmentJsonConverter()
            };
        }
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
