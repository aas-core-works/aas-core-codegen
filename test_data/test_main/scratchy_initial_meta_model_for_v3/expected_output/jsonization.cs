/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

/*
 * For more information about customizing JSON serialization in C#, please see:
 * <ul>
 * <li>https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to</li>
 * <li>https://docs.microsoft.com/en-gb/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to</li>
 * </ul>
 */

using InvalidArgumentException = System.InvalidArgumentException;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Jsonization
    {
        public class LangStringJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangString>
        {
            public override Aas.LangString Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                string language = (
                    System.Text.Json.JsonSerializer.Deserialize<string>(
                        ref reader));

                if (language == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: language");
                }

                // Don't pass in options when recursively calling Deserialize.
                string text = (
                    System.Text.Json.JsonSerializer.Deserialize<string>(
                        ref reader));

                if (text == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: text");
                }

                return new Aas.LangString(
                    language,
                    text);
            }
        }

        public class LangStringSetJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangStringSet>
        {
            public override Aas.LangStringSet Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                List<LangString> langStrings = (
                    System.Text.Json.JsonSerializer.Deserialize<List<LangString>>(
                        ref reader));

                if (langStrings == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: langStrings");
                }

                return new Aas.LangStringSet(
                    langStrings);
            }
        }

        public class IdentifierTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.IdentifierType>
        {
            public override Aas.IdentifierType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.IdentifierType? value = Stringification.IdentifierTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid IdentifierType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.IdentifierType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.IdentifierTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid IdentifierType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifierJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Identifier>
        {
            public override Aas.Identifier Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                string id = (
                    System.Text.Json.JsonSerializer.Deserialize<string>(
                        ref reader));

                if (id == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: id");
                }

                // Don't pass in options when recursively calling Deserialize.
                IdentifierType idType = (
                    System.Text.Json.JsonSerializer.Deserialize<IdentifierType>(
                        ref reader));

                if (idType == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: idType");
                }

                return new Aas.Identifier(
                    id,
                    idType);
            }
        }

        public class AdministrativeInformationJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.AdministrativeInformation>
        {
            public override Aas.AdministrativeInformation Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                string? version = (
                    System.Text.Json.JsonSerializer.Deserialize<string?>(
                        ref reader));

                // Don't pass in options when recursively calling Deserialize.
                string? revision = (
                    System.Text.Json.JsonSerializer.Deserialize<string?>(
                        ref reader));

                return new Aas.AdministrativeInformation(
                    version,
                    revision);
            }
        }

        public class ModelingKindJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.ModelingKind>
        {
            public override Aas.ModelingKind Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.ModelingKind? value = Stringification.ModelingKindFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid ModelingKind: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.ModelingKind value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ModelingKindToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid ModelingKind: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class LocalKeyTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LocalKeyType>
        {
            public override Aas.LocalKeyType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.LocalKeyType? value = Stringification.LocalKeyTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid LocalKeyType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.LocalKeyType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.LocalKeyTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid LocalKeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.KeyType>
        {
            public override Aas.KeyType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.KeyType? value = Stringification.KeyTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid KeyType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.KeyType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.KeyTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid KeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifiableElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.IdentifiableElements>
        {
            public override Aas.IdentifiableElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.IdentifiableElements? value = Stringification.IdentifiableElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid IdentifiableElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.IdentifiableElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.IdentifiableElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid IdentifiableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class ReferableElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.ReferableElements>
        {
            public override Aas.ReferableElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.ReferableElements? value = Stringification.ReferableElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid ReferableElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.ReferableElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ReferableElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid ReferableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.KeyElements>
        {
            public override Aas.KeyElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.KeyElements? value = Stringification.KeyElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid KeyElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.KeyElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.KeyElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid KeyElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Key>
        {
            public override Aas.Key Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                KeyElements type = (
                    System.Text.Json.JsonSerializer.Deserialize<KeyElements>(
                        ref reader));

                if (type == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: type");
                }

                // Don't pass in options when recursively calling Deserialize.
                string value = (
                    System.Text.Json.JsonSerializer.Deserialize<string>(
                        ref reader));

                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: value");
                }

                // Don't pass in options when recursively calling Deserialize.
                KeyType idType = (
                    System.Text.Json.JsonSerializer.Deserialize<KeyType>(
                        ref reader));

                if (idType == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: idType");
                }

                return new Aas.Key(
                    type,
                    value,
                    idType);
            }
        }

        public class ReferenceJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Reference>
        {
            public override Aas.Reference Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                List<Key> keys = (
                    System.Text.Json.JsonSerializer.Deserialize<List<Key>>(
                        ref reader));

                if (keys == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: keys");
                }

                return new Aas.Reference(
                    keys);
            }
        }

        public class AssetAdministrationShellJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.AssetAdministrationShell>
        {
            public override Aas.AssetAdministrationShell Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                // Don't pass in options when recursively calling Deserialize.
                string idShort = (
                    System.Text.Json.JsonSerializer.Deserialize<string>(
                        ref reader));

                if (idShort == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: idShort");
                }

                // Don't pass in options when recursively calling Deserialize.
                LangStringSet? displayName = (
                    System.Text.Json.JsonSerializer.Deserialize<LangStringSet?>(
                        ref reader));

                // Don't pass in options when recursively calling Deserialize.
                string? category = (
                    System.Text.Json.JsonSerializer.Deserialize<string?>(
                        ref reader));

                // Don't pass in options when recursively calling Deserialize.
                LangStringSet? description = (
                    System.Text.Json.JsonSerializer.Deserialize<LangStringSet?>(
                        ref reader));

                // Don't pass in options when recursively calling Deserialize.
                Identifier identification = (
                    System.Text.Json.JsonSerializer.Deserialize<Identifier>(
                        ref reader));

                if (identification == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: identification");
                }

                // Don't pass in options when recursively calling Deserialize.
                AdministrativeInformation? administration = (
                    System.Text.Json.JsonSerializer.Deserialize<AdministrativeInformation?>(
                        ref reader));

                // Don't pass in options when recursively calling Deserialize.
                List<Reference> dataSpecifications = (
                    System.Text.Json.JsonSerializer.Deserialize<List<Reference>>(
                        ref reader));

                if (dataSpecifications == null)
                {
                    throw new System.Text.Json.JsonException(
                        "Required property is missing: dataSpecifications");
                }

                // Don't pass in options when recursively calling Deserialize.
                AssetAdministrationShell? derivedFrom = (
                    System.Text.Json.JsonSerializer.Deserialize<AssetAdministrationShell?>(
                        ref reader));

                return new Aas.AssetAdministrationShell(
                    idShort,
                    displayName,
                    category,
                    description,
                    identification,
                    administration,
                    dataSpecifications,
                    derivedFrom);
            }
        }
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
