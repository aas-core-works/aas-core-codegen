/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

/*
 * For more information about customizing JSON serialization in C#, please see:
 * <ul>
 * <li>https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-converters-how-to</li>
 * <li>https://docs.microsoft.com/en-gb/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to</li>
 * </ul>
 */

using InvalidArgumentException = System.InvalidArgumentException;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Jsonization
    {
        public class LangStringJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangString>
        {
            public override Aas.LangString Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theLanguage;
                string? theText;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theLanguage == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: language");
                            }
    
                            if (theText == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: text");
                            }
    
                            return new Aas.LangString(
                                theLanguage,
                                theText);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "language": 
                                    theLanguage =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "text": 
                                    theText =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in LangString: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.LangString that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("language");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Language);

                writer.WritePropertyName("text");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Text);

                writer.WriteEndObject();
            }
        }  // LangStringJsonConverter

        public class LangStringSetJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LangStringSet>
        {
            public override Aas.LangStringSet Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<LangString>? theLangStrings;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theLangStrings == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: langStrings");
                            }
    
                            return new Aas.LangStringSet(
                                theLangStrings);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "langStrings": 
                                    theLangStrings =  (
                                        System.Text.Json.JsonSerializer.Deserialize<List<LangString>>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in LangStringSet: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.LangStringSet that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("langStrings");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.LangStrings);

                writer.WriteEndObject();
            }
        }  // LangStringSetJsonConverter

        public class IdentifierTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.IdentifierType>
        {
            public override Aas.IdentifierType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.IdentifierType? value = Stringification.IdentifierTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid IdentifierType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.IdentifierType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.IdentifierTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid IdentifierType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifierJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Identifier>
        {
            public override Aas.Identifier Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theId;
                IdentifierType? theIdType;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theId == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: id");
                            }
    
                            if (theIdType == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: idType");
                            }
    
                            return new Aas.Identifier(
                                theId,
                                theIdType);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "id": 
                                    theId =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "idType": 
                                    theIdType =  (
                                        System.Text.Json.JsonSerializer.Deserialize<IdentifierType>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in Identifier: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.Identifier that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("id");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Id);

                writer.WritePropertyName("idType");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.IdType);

                writer.WriteEndObject();
            }
        }  // IdentifierJsonConverter

        public class AdministrativeInformationJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.AdministrativeInformation>
        {
            public override Aas.AdministrativeInformation Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theVersion;
                string? theRevision;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            return new Aas.AdministrativeInformation(
                                theVersion,
                                theRevision);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "version": 
                                    theVersion =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "revision": 
                                    theRevision =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in AdministrativeInformation: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.AdministrativeInformation that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                if (that.Version != null)
                {
                    writer.WritePropertyName("version");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.Version);
                }

                if (that.Revision != null)
                {
                    writer.WritePropertyName("revision");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.Revision);
                }

                writer.WriteEndObject();
            }
        }  // AdministrativeInformationJsonConverter

        public class ModelingKindJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.ModelingKind>
        {
            public override Aas.ModelingKind Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.ModelingKind? value = Stringification.ModelingKindFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid ModelingKind: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.ModelingKind value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ModelingKindToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid ModelingKind: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class LocalKeyTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.LocalKeyType>
        {
            public override Aas.LocalKeyType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.LocalKeyType? value = Stringification.LocalKeyTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid LocalKeyType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.LocalKeyType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.LocalKeyTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid LocalKeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyTypeJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.KeyType>
        {
            public override Aas.KeyType Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.KeyType? value = Stringification.KeyTypeFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid KeyType: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.KeyType value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.KeyTypeToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid KeyType: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class IdentifiableElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.IdentifiableElements>
        {
            public override Aas.IdentifiableElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.IdentifiableElements? value = Stringification.IdentifiableElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid IdentifiableElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.IdentifiableElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.IdentifiableElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid IdentifiableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class ReferableElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.ReferableElements>
        {
            public override Aas.ReferableElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.ReferableElements? value = Stringification.ReferableElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid ReferableElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.ReferableElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.ReferableElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid ReferableElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyElementsJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.KeyElements>
        {
            public override Aas.KeyElements Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.String)
                {
                    throw new System.Text.Json.JsonException();
                }

                string? text = reader.GetString();
                if (text == null)
                {
                    throw new System.Text.Json.JsonException();
                }

                Aas.KeyElements? value = Stringification.KeyElementsFromString(
                    text);
                if (value == null)
                {
                    throw new System.Text.Json.JsonException(
                        $"Invalid KeyElements: {text}");
                }
                return value;
            }

            public override void Write(
                Utf8JsonWriter writer,
                Aas.KeyElements value,
                System.Text.Json.JsonSerializerOptions options)
            {
                string? text = Stringification.KeyElementsToString(
                    value);
                if (text == null)
                {
                    throw new InvalidArgumentException(
                        $"Invalid KeyElements: {value}");
                }

                writer.WriteStringValue(text);
            }
        }

        public class KeyJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Key>
        {
            public override Aas.Key Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                KeyElements? theType;
                string? theValue;
                KeyType? theIdType;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theType == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: type");
                            }
    
                            if (theValue == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: value");
                            }
    
                            if (theIdType == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: idType");
                            }
    
                            return new Aas.Key(
                                theType,
                                theValue,
                                theIdType);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "type": 
                                    theType =  (
                                        System.Text.Json.JsonSerializer.Deserialize<KeyElements>(
                                            ref reader));
                                    break;
                                case "value": 
                                    theValue =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "idType": 
                                    theIdType =  (
                                        System.Text.Json.JsonSerializer.Deserialize<KeyType>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in Key: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.Key that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("type");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Type);

                writer.WritePropertyName("value");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Value);

                writer.WritePropertyName("idType");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.IdType);

                writer.WriteEndObject();
            }
        }  // KeyJsonConverter

        public class ReferenceJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.Reference>
        {
            public override Aas.Reference Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                List<Key>? theKeys;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theKeys == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: keys");
                            }
    
                            return new Aas.Reference(
                                theKeys);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "keys": 
                                    theKeys =  (
                                        System.Text.Json.JsonSerializer.Deserialize<List<Key>>(
                                            ref reader));
                                    break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in Reference: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.Reference that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("keys");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Keys);

                writer.WriteEndObject();
            }
        }  // ReferenceJsonConverter

        public class AssetAdministrationShellJsonConverter :
            System.Text.Json.Serialization.JsonConverter<Aas.AssetAdministrationShell>
        {
            public override Aas.AssetAdministrationShell Read(
                ref System.Text.Json.Utf8JsonReader reader,
                System.Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options)
            {
                if (reader.TokenType != System.Text.Json.JsonTokenType.StartObject)
                {
                    throw new System.Text.Json.JsonException();
                }

                // Prefix the property variables with "the" to avoid conflicts
                string? theIdShort;
                LangStringSet? theDisplayName;
                string? theCategory;
                LangStringSet? theDescription;
                Identifier? theIdentification;
                AdministrativeInformation? theAdministration;
                List<Reference>? theDataSpecifications;
                AssetAdministrationShell? theDerivedFrom;

                while (reader.Read())
                {
                    switch (reader.TokenType)
                    {
                        case System.Text.Json.JsonTokenType.EndObject:
                            if (theIdShort == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: idShort");
                            }
    
                            if (theIdentification == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: identification");
                            }
    
                            if (theDataSpecifications == null)
                            {
                                throw new System.Text.Json.JsonException(
                                    "Required property is missing: dataSpecifications");
                            }
    
                            return new Aas.AssetAdministrationShell(
                                theIdentification,
                                theIdShort,
                                theDisplayName,
                                theCategory,
                                theDescription,
                                theAdministration,
                                theDataSpecifications,
                                theDerivedFrom);
                            break;

                        case JsonTokenType.PropertyName:
                            string propertyName = reader.GetString()
                            switch (propertyName)
                            {
                                case "idShort": 
                                    theIdShort =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "displayName": 
                                    theDisplayName =  (
                                        System.Text.Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "category": 
                                    theCategory =  (
                                        System.Text.Json.JsonSerializer.Deserialize<string>(
                                            ref reader));
                                    break;
                                case "description": 
                                    theDescription =  (
                                        System.Text.Json.JsonSerializer.Deserialize<LangStringSet>(
                                            ref reader));
                                    break;
                                case "identification": 
                                    theIdentification =  (
                                        System.Text.Json.JsonSerializer.Deserialize<Identifier>(
                                            ref reader));
                                    break;
                                case "administration": 
                                    theAdministration =  (
                                        System.Text.Json.JsonSerializer.Deserialize<AdministrativeInformation>(
                                            ref reader));
                                    break;
                                case "dataSpecifications": 
                                    theDataSpecifications =  (
                                        System.Text.Json.JsonSerializer.Deserialize<List<Reference>>(
                                            ref reader));
                                    break;
                                case "derivedFrom": 
                                    theDerivedFrom =  (
                                        System.Text.Json.JsonSerializer.Deserialize<AssetAdministrationShell>(
                                            ref reader));
                                    break;
                                case "modelType": 
                                        // Ignore the property modelType as we already know the exact type
                                        break;
                                default:
                                    throw new System.Text.Json.JsonException(
                                        $"Unexpected property in AssetAdministrationShell: {propertyName}");
                                    break;
                            }  // switch on propertyName
                            break;

                        default:
                            throw new JsonException();
                            break;
                    }  // switch on token type
                }  // while reader.Read
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                Aas.AssetAdministrationShell that,
                System.Text.Json.JsonSerializerOptions options)
            {
                writer.WriteStartObject();

                writer.WritePropertyName("idShort");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.IdShort);

                if (that.DisplayName != null)
                {
                    writer.WritePropertyName("displayName");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.DisplayName);
                }

                if (that.Category != null)
                {
                    writer.WritePropertyName("category");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.Category);
                }

                if (that.Description != null)
                {
                    writer.WritePropertyName("description");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.Description);
                }

                writer.WritePropertyName("identification");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.Identification);

                if (that.Administration != null)
                {
                    writer.WritePropertyName("administration");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.Administration);
                }

                writer.WritePropertyName("dataSpecifications");
                System.Text.Json.JsonSerializer.Serialize(
                    writer, that.DataSpecifications);

                if (that.DerivedFrom != null)
                {
                    writer.WritePropertyName("derivedFrom");
                    System.Text.Json.JsonSerializer.Serialize(
                        writer, that.DerivedFrom);
                }

                writer.WriteEndObject();
            }
        }  // AssetAdministrationShellJsonConverter
    }  // public static class Jsonization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
