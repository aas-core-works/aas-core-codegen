/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

using EnumMemberAttribute = System.Runtime.Serialization.EnumMemberAttribute;
using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3
{

    public interface IHasExtension
    {

    }

    /// <summary>
    /// Give a text in a specific language.
    /// </summary>
    public class LangString
    {
        /// <summary>
        /// Language of the <see cref="text" />
        /// </summary>
        string Language { get; set; }

        /// <summary>
        /// Content of the string
        /// </summary>
        string Text { get; set; }

        LangString(
            string language,
            string text)
        {
        }
    }

    public class LangStringSet {
        // This is just a dummy snippet.
    }

    /// <summary>
    /// An element that is referable by its <see cref="id_short" />.
    /// </summary>
    /// <remarks>
    /// This identifier is not globally unique.
    /// This identifier is unique within the name space of the element.
    /// </remarks>
    public interface IReferable : IHasExtension
    {
        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this id is an identifying string of
        /// the element within its name space.
        /// </summary>
        string IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:</para>
        /// <para><ul>
        /// <li>the preferred name in the requested language of the concept description defining
        /// the semantics of the element</li>
        /// <li>If there is a default language list defined in the application,
        /// then the corresponding preferred name in the language is chosen
        /// according to this order.</li>
        /// <li>the English preferred name of the concept description defining
        /// the semantics of the element</li>
        /// <li>the short name of the concept description-the idShort of the element</li>
        /// </ul></para>
        /// </remarks>
        LangStringSet? DisplayName { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        string? Category { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// The description can be provided in several languages. If no description is defined,
        /// then the definition of the concept description that defines the semantics
        /// of the element is used. Additional information can be provided,
        /// <em>e.g.</em>, if the element is qualified and which qualifier types can be expected
        /// in which context or which additional data specification templates are provided.
        /// </remarks>
        LangStringSet? Description { get; set; }
    }

    /// <summary>
    /// Enumeration of different types of Identifiersfor global identification
    /// </summary>
    public enum IdentifierType
    {    /// <summary>
        /// IRDI according to ISO29002-5 as an Identifier scheme for properties
        /// and classifications.
        /// </summary>
        [EnumMember(Value = "IRDI")]
        Irdi,

        /// <summary>
        /// IRI according to Rfc 3987. Every URIis an IRI
        /// </summary>
        [EnumMember(Value = "IRI")]
        Iri,

        /// <summary>
        /// Custom identifiers like GUIDs (globally unique identifiers)
        /// </summary>
        [EnumMember(Value = "Custom")]
        Custom
    }

    public class Identifier
    {
        string Id { get; set; }

        IdentifierType IdType { get; set; }

        Identifier(
            string id,
            IdentifierType idType)
        {
        }
    }

    public class AdministrativeInformation
    {
        string? Version { get; set; }

        string? Revision { get; set; }

        AdministrativeInformation(
            string? version,
            string? revision)
        {
        }
    }

    public interface IIdentifiable : IReferable
    {
        Identifier Identifier { get; set; }

        AdministrativeInformation? AdministrativeInformation? { get; set; }
    }

    public enum ModelingKind
    {    [EnumMember(Value = "Template")]
        Template,

        [EnumMember(Value = "Instance")]
        Instance
    }

    public interface IHasKind
    {
        ModelingKind ModelingKind { get; set; }
    }

    public enum LocalKeyType
    {    [EnumMember(Value = "IdShort")]
        IdShort,

        [EnumMember(Value = "FragmentId")]
        FragmentId
    }

    public enum KeyType
    {    [EnumMember(Value = "IdShort")]
        IdShort,

        [EnumMember(Value = "FragmentId")]
        FragmentId,

        [EnumMember(Value = "Custom")]
        Custom,

        [EnumMember(Value = "IRDI")]
        Irdi,

        [EnumMember(Value = "IRI")]
        Iri
    }

    public enum IdentifiableElements
    {    [EnumMember(Value = "Asset")]
        Asset,

        [EnumMember(Value = "AssetAdministrationShell")]
        AssetAdministrationShell,

        [EnumMember(Value = "ConceptDescription")]
        ConceptDescription,

        [EnumMember(Value = "Submodel")]
        Submodel
    }

    public enum ReferableElements
    {    [EnumMember(Value = "AccessPermissionRule")]
        AccessPermissionRule,

        [EnumMember(Value = "AnnotatedRelationshipElement")]
        AnnotatedRelationshipElement,

        [EnumMember(Value = "Asset")]
        Asset,

        [EnumMember(Value = "AssetAdministrationShell")]
        AssetAdministrationShell,

        [EnumMember(Value = "BasicEvent")]
        BasicEvent,

        [EnumMember(Value = "Blob")]
        Blob,

        [EnumMember(Value = "Capability")]
        Capability,

        [EnumMember(Value = "ConceptDescription")]
        ConceptDescription,

        [EnumMember(Value = "ConceptDictionary")]
        ConceptDictionary,

        [EnumMember(Value = "DataElement")]
        DataElement,

        [EnumMember(Value = "Entity")]
        Entity,

        [EnumMember(Value = "Event")]
        Event,

        [EnumMember(Value = "File")]
        File,

        [EnumMember(Value = "MultiLanguageProperty")]
        MultiLanguageProperty,

        [EnumMember(Value = "Operation")]
        Operation,

        [EnumMember(Value = "Property")]
        Property,

        [EnumMember(Value = "Range")]
        Range,

        [EnumMember(Value = "ReferenceElement")]
        ReferenceElement,

        [EnumMember(Value = "RelationshipElement")]
        RelationshipElement,

        [EnumMember(Value = "Submodel")]
        Submodel,

        [EnumMember(Value = "SubmodelElement")]
        SubmodelElement,

        [EnumMember(Value = "SubmodelElementCollection")]
        SubmodelElementCollection,

        [EnumMember(Value = "View")]
        View
    }

    public enum KeyElements
    {    [EnumMember(Value = "GlobalReference")]
        GlobalReference,

        [EnumMember(Value = "FragmentReference")]
        FragmentReference,

        [EnumMember(Value = "AccessPermissionRule")]
        AccessPermissionRule,

        [EnumMember(Value = "AnnotatedRelationshipElement")]
        AnnotatedRelationshipElement,

        [EnumMember(Value = "Asset")]
        Asset,

        [EnumMember(Value = "AssetAdministrationShell")]
        AssetAdministrationShell,

        [EnumMember(Value = "BasicEvent")]
        BasicEvent,

        [EnumMember(Value = "Blob")]
        Blob,

        [EnumMember(Value = "Capability")]
        Capability,

        [EnumMember(Value = "ConceptDescription")]
        ConceptDescription,

        [EnumMember(Value = "ConceptDictionary")]
        ConceptDictionary,

        [EnumMember(Value = "DataElement")]
        DataElement,

        [EnumMember(Value = "Entity")]
        Entity,

        [EnumMember(Value = "Event")]
        Event,

        [EnumMember(Value = "File")]
        File,

        [EnumMember(Value = "MultiLanguageProperty")]
        MultiLanguageProperty,

        [EnumMember(Value = "Operation")]
        Operation,

        [EnumMember(Value = "Property")]
        Property,

        [EnumMember(Value = "Range")]
        Range,

        [EnumMember(Value = "ReferenceElement")]
        ReferenceElement,

        [EnumMember(Value = "RelationshipElement")]
        RelationshipElement,

        [EnumMember(Value = "Submodel")]
        Submodel,

        [EnumMember(Value = "SubmodelElement")]
        SubmodelElement,

        [EnumMember(Value = "SubmodelElementCollection")]
        SubmodelElementCollection,

        [EnumMember(Value = "View")]
        View
    }

    public class Key
    {
        KeyElements Type { get; set; }

        string Value { get; set; }

        KeyType IdType { get; set; }

        Key(
            KeyElements type,
            string value,
            KeyType idType)
        {
        }
    }

    public class Reference
    {
        List<Key> Keys { get; set; }

        Reference(List<Key> keys)
        {
        }
    }

    public interface IHasSemantics
    {
        Reference? Reference? { get; set; }
    }

    public interface IHasDataSpecification
    {
        List<Reference> List<Reference> { get; set; }
    }

    /// <summary>
    /// Structure a digital representation of an Asset.
    /// </summary>
    public class AssetAdministrationShell :
            IIdentifiable,
            IHasDataSpecification
    {{
        /// <summary>
        /// In case of identifiables this attribute is a short name of the element.
        /// In case of referable this id is an identifying string of
        /// the element within its name space.
        /// </summary>
        string IdShort { get; set; }

        /// <summary>
        /// Display name. Can be provided in several languages.
        /// </summary>
        /// <remarks>
        /// <para>If no display name is defined in the language requested by the application,
        /// then the display name is selected in the following order if available:</para>
        /// <para><ul>
        /// <li>the preferred name in the requested language of the concept description defining
        /// the semantics of the element</li>
        /// <li>If there is a default language list defined in the application,
        /// then the corresponding preferred name in the language is chosen
        /// according to this order.</li>
        /// <li>the English preferred name of the concept description defining
        /// the semantics of the element</li>
        /// <li>the short name of the concept description-the idShort of the element</li>
        /// </ul></para>
        /// </remarks>
        LangStringSet? DisplayName { get; set; }

        /// <summary>
        /// The category is a value that gives further meta information
        /// w.r.t. to the class of the element.
        /// It affects the expected existence of attributes and the applicability of
        /// constraints.
        /// </summary>
        string? Category { get; set; }

        /// <summary>
        /// Description or comments on the element.
        /// </summary>
        /// <remarks>
        /// The description can be provided in several languages. If no description is defined,
        /// then the definition of the concept description that defines the semantics
        /// of the element is used. Additional information can be provided,
        /// <em>e.g.</em>, if the element is qualified and which qualifier types can be expected
        /// in which context or which additional data specification templates are provided.
        /// </remarks>
        LangStringSet? Description { get; set; }

        Identifier Identification { get; set; }

        AdministrativeInformation? Administration { get; set; }

        List<Reference> DataSpecifications { get; set; }

        /// <summary>
        /// The reference to the AAS this AAS was derived from.
        /// </summary>
        AssetAdministrationShell? DerivedFrom { get; set; }

        AssetAdministrationShell(
            Identifier identification,
            string idShort,
            LangStringSet? displayName,
            string? category,
            LangStringSet? description,
            AdministrativeInformation? administration,
            List<Reference>? dataSpecifications,
            AssetAdministrationShell? derivedFrom)
        {
        }
    }

}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
