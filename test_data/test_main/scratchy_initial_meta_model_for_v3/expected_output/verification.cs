/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

using ArgumentException = System.ArgumentException;
using Regex = System.Text.RegularExpressions.Regex;
using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3.Verification
{

    public static class Pattern
    {


        private static Regex _constructIrdiRegex()
        {
            var numeric = "[0-9]";
            var safeChar = "[A-Za-z0-9:_.]";

            return new Regex(
                $"^{numeric}{{4}}-{safeChar}{{1,35}}(-{safeChar}{{1,35}})?
                $"#{safeChar}{{2}}-{safeChar}{{6}}
                $"#{numeric}{{1,35}}$")
            );
        }

        private static readonly Regex _IrdiRegex = _constructIrdiRegex();

        /// <summary>
        /// Check that the <paramref name="text"/> is a valid IRDI.
        /// </summary>
        /// <remarks>
        /// Related ISO standard: https://www.iso.org/standard/50773.html
        /// </remarks>
        public static bool IsIri(string text)
        {
            return _IrdiRegex.IsMatch(text);
        }

        private static readonly Regex _idShortRe = new Regex(
            "^[a-zA-Z][a-zA-Z_0-9]*$"
        );

        /// <summary>
        /// Check that the <paramref name="text"/> is a valid short ID.
        /// </summary>
        /// <remarks>
        /// Related: Constraint AASd-002
        /// </remarks>
        public static bool IsIri(string text)
        {
            return _idShortRe.IsMatch(text);
        }
    }

/// <summary>
/// Represent a verification error traceable to an entity or a property.
/// </summary>
public class Error
{
    /// <summary>
    /// JSON-like path to the related object (an entity or a property)
    /// </summary>
    public readonly string Path;

    /// <summary>
    /// Cause or description of the error
    /// </summary>
    public readonly string Message;

    public Error(string path, string message)
    {
        Path = path;
        Message = message;
    }
}

/// <summary>
/// Contain multiple errors observed during a verification.
/// </summary>
public class Errors
{
    /// <summary>
    /// The maximum capacity of the container
    /// </summary>
    public readonly int Capacity;

    /// <summary>
    /// Contained error items
    /// </summary>
    public readonly List<Error> Errors;

    /// <summary>
    /// Initialize the container with the given <paramref name="capacity" />.
    /// </summary>
    public Errors(int capacity)
    {
        if (capacity <= 0)
        {
            throw new ArgumentException(
                $"Expected a strictly positive capacity, but got: {capacity}");
        }

        Capacity = capacity;
        Errors = new List<Error>(Capacity);
    }

    /// <summary>
    /// Add the error to the container if the capacity has not been reached.
    /// </summary>
    public void Add(Error error)
    {
        if(Errors.Count <= Capacity)
        {
            Errors.Add(error);
        }
    }

    /// <summary>
    /// True if the capacity has been reached.
    /// </summary>
    public boolean Full()
    {
        return Errors.Count == Capacity;
    }
}

}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
