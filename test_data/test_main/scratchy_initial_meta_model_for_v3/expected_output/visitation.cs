/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

namespace AasCore.Aas3
{
    public static class Visitation
    {
        /// <summary>
        /// Define the interface for a visitor which visits the instances of the model.
        /// </summary>
        public interface IVisitor
        {
            public void Visit(IEntity that);
            public void Visit(LangString that);
            public void Visit(LangStringSet that);
            public void Visit(Identifier that);
            public void Visit(AdministrativeInformation that);
            public void Visit(Key that);
            public void Visit(Reference that);
            public void Visit(AssetAdministrationShell that);
        }  // public interface IVisitor

        /// <summary>
        /// Define the interface for a visitor which visits the instances of the model.
        /// </summary>
        /// <typeparam name="C">Context type</typeparam>
        public interface IVisitorWithContext<C>
        {
            public void Visit(IEntity that, C context);
            public void Visit(LangString that, C context);
            public void Visit(LangStringSet that, C context);
            public void Visit(Identifier that, C context);
            public void Visit(AdministrativeInformation that, C context);
            public void Visit(Key that, C context);
            public void Visit(Reference that, C context);
            public void Visit(AssetAdministrationShell that, C context);
        }  // public interface IVisitorWithContext

        /// <summary>
        /// Define the interface for a transformer which transforms recursively 
        /// the instances into something else.
        /// </summary>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        public interface ITransformer<T>
        {
            public T Transform(IEntity that);
            public T Transform(LangString that);
            public T Transform(LangStringSet that);
            public T Transform(Identifier that);
            public T Transform(AdministrativeInformation that);
            public T Transform(Key that);
            public T Transform(Reference that);
            public T Transform(AssetAdministrationShell that);
        }  // public interface ITransformer

        /// <summary>
        /// Define the interface for a transformer which recursively transforms
        /// the instances into something else while the context is passed along.
        /// </summary>
        /// <typeparam name="T">The type of the transformation result</typeparam>
        /// <typeparam name="C">Context type</typeparam>
        public interface ITransformerWithContext<C, T>
        {
            public T Transform(IEntity that, C context);
            public T Transform(LangString that, C context);
            public T Transform(LangStringSet that, C context);
            public T Transform(Identifier that, C context);
            public T Transform(AdministrativeInformation that, C context);
            public T Transform(Key that, C context);
            public T Transform(Reference that, C context);
            public T Transform(AssetAdministrationShell that, C context);
        }  // public interface ITransformerWithContext
    }  // public static class Visitation
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
