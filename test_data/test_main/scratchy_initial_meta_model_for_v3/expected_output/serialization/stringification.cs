/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

using System.Collections.Generic;  // can't alias

namespace AasCore.Aas3.Serialization
{
    public static class Stringification
    {
        private static readonly Dictionary<IdentifierType, string> _identifierTypeToString = (
            new Dictionary<IdentifierType, string>()
            {
                { IdentifierType.Irdi, "IRDI" },
                { IdentifierType.Iri, "IRI" },
                { IdentifierType.Custom, "Custom" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(IdentifierType that)
        {
            string value;
            return _identifierTypeToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, IdentifierType> _identifierTypeFromString = (
            new Dictionary<string, IdentifierType>()
            {
                { "IRDI", IdentifierType.Irdi },
                { "IRI", IdentifierType.Iri },
                { "Custom", IdentifierType.Custom }
            });

        /// <summary>
        /// Parse the string representation of <see cref="IdentifierType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="IdentifierType" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? IdentifierTypeFromString(string text)
        {
            IdentifierType value;
            return _identifierTypeFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<ModelingKind, string> _modelingKindToString = (
            new Dictionary<ModelingKind, string>()
            {
                { ModelingKind.Template, "Template" },
                { ModelingKind.Instance, "Instance" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(ModelingKind that)
        {
            string value;
            return _modelingKindToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, ModelingKind> _modelingKindFromString = (
            new Dictionary<string, ModelingKind>()
            {
                { "Template", ModelingKind.Template },
                { "Instance", ModelingKind.Instance }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ModelingKind" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="ModelingKind" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? ModelingKindFromString(string text)
        {
            ModelingKind value;
            return _modelingKindFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<LocalKeyType, string> _localKeyTypeToString = (
            new Dictionary<LocalKeyType, string>()
            {
                { LocalKeyType.IdShort, "IdShort" },
                { LocalKeyType.FragmentId, "FragmentId" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(LocalKeyType that)
        {
            string value;
            return _localKeyTypeToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, LocalKeyType> _localKeyTypeFromString = (
            new Dictionary<string, LocalKeyType>()
            {
                { "IdShort", LocalKeyType.IdShort },
                { "FragmentId", LocalKeyType.FragmentId }
            });

        /// <summary>
        /// Parse the string representation of <see cref="LocalKeyType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="LocalKeyType" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? LocalKeyTypeFromString(string text)
        {
            LocalKeyType value;
            return _localKeyTypeFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<KeyType, string> _keyTypeToString = (
            new Dictionary<KeyType, string>()
            {
                { KeyType.IdShort, "IdShort" },
                { KeyType.FragmentId, "FragmentId" },
                { KeyType.Custom, "Custom" },
                { KeyType.Irdi, "IRDI" },
                { KeyType.Iri, "IRI" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(KeyType that)
        {
            string value;
            return _keyTypeToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, KeyType> _keyTypeFromString = (
            new Dictionary<string, KeyType>()
            {
                { "IdShort", KeyType.IdShort },
                { "FragmentId", KeyType.FragmentId },
                { "Custom", KeyType.Custom },
                { "IRDI", KeyType.Irdi },
                { "IRI", KeyType.Iri }
            });

        /// <summary>
        /// Parse the string representation of <see cref="KeyType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="KeyType" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? KeyTypeFromString(string text)
        {
            KeyType value;
            return _keyTypeFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<IdentifiableElements, string> _identifiableElementsToString = (
            new Dictionary<IdentifiableElements, string>()
            {
                { IdentifiableElements.Asset, "Asset" },
                { IdentifiableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { IdentifiableElements.ConceptDescription, "ConceptDescription" },
                { IdentifiableElements.Submodel, "Submodel" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(IdentifiableElements that)
        {
            string value;
            return _identifiableElementsToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, IdentifiableElements> _identifiableElementsFromString = (
            new Dictionary<string, IdentifiableElements>()
            {
                { "Asset", IdentifiableElements.Asset },
                { "AssetAdministrationShell", IdentifiableElements.AssetAdministrationShell },
                { "ConceptDescription", IdentifiableElements.ConceptDescription },
                { "Submodel", IdentifiableElements.Submodel }
            });

        /// <summary>
        /// Parse the string representation of <see cref="IdentifiableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="IdentifiableElements" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? IdentifiableElementsFromString(string text)
        {
            IdentifiableElements value;
            return _identifiableElementsFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<ReferableElements, string> _referableElementsToString = (
            new Dictionary<ReferableElements, string>()
            {
                { ReferableElements.AccessPermissionRule, "AccessPermissionRule" },
                { ReferableElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { ReferableElements.Asset, "Asset" },
                { ReferableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { ReferableElements.BasicEvent, "BasicEvent" },
                { ReferableElements.Blob, "Blob" },
                { ReferableElements.Capability, "Capability" },
                { ReferableElements.ConceptDescription, "ConceptDescription" },
                { ReferableElements.ConceptDictionary, "ConceptDictionary" },
                { ReferableElements.DataElement, "DataElement" },
                { ReferableElements.Entity, "Entity" },
                { ReferableElements.Event, "Event" },
                { ReferableElements.File, "File" },
                { ReferableElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { ReferableElements.Operation, "Operation" },
                { ReferableElements.Property, "Property" },
                { ReferableElements.Range, "Range" },
                { ReferableElements.ReferenceElement, "ReferenceElement" },
                { ReferableElements.RelationshipElement, "RelationshipElement" },
                { ReferableElements.Submodel, "Submodel" },
                { ReferableElements.SubmodelElement, "SubmodelElement" },
                { ReferableElements.SubmodelElementCollection, "SubmodelElementCollection" },
                { ReferableElements.View, "View" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(ReferableElements that)
        {
            string value;
            return _referableElementsToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, ReferableElements> _referableElementsFromString = (
            new Dictionary<string, ReferableElements>()
            {
                { "AccessPermissionRule", ReferableElements.AccessPermissionRule },
                { "AnnotatedRelationshipElement", ReferableElements.AnnotatedRelationshipElement },
                { "Asset", ReferableElements.Asset },
                { "AssetAdministrationShell", ReferableElements.AssetAdministrationShell },
                { "BasicEvent", ReferableElements.BasicEvent },
                { "Blob", ReferableElements.Blob },
                { "Capability", ReferableElements.Capability },
                { "ConceptDescription", ReferableElements.ConceptDescription },
                { "ConceptDictionary", ReferableElements.ConceptDictionary },
                { "DataElement", ReferableElements.DataElement },
                { "Entity", ReferableElements.Entity },
                { "Event", ReferableElements.Event },
                { "File", ReferableElements.File },
                { "MultiLanguageProperty", ReferableElements.MultiLanguageProperty },
                { "Operation", ReferableElements.Operation },
                { "Property", ReferableElements.Property },
                { "Range", ReferableElements.Range },
                { "ReferenceElement", ReferableElements.ReferenceElement },
                { "RelationshipElement", ReferableElements.RelationshipElement },
                { "Submodel", ReferableElements.Submodel },
                { "SubmodelElement", ReferableElements.SubmodelElement },
                { "SubmodelElementCollection", ReferableElements.SubmodelElementCollection },
                { "View", ReferableElements.View }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ReferableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="ReferableElements" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? ReferableElementsFromString(string text)
        {
            ReferableElements value;
            return _referableElementsFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<KeyElements, string> _keyElementsToString = (
            new Dictionary<KeyElements, string>()
            {
                { KeyElements.GlobalReference, "GlobalReference" },
                { KeyElements.FragmentReference, "FragmentReference" },
                { KeyElements.AccessPermissionRule, "AccessPermissionRule" },
                { KeyElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { KeyElements.Asset, "Asset" },
                { KeyElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { KeyElements.BasicEvent, "BasicEvent" },
                { KeyElements.Blob, "Blob" },
                { KeyElements.Capability, "Capability" },
                { KeyElements.ConceptDescription, "ConceptDescription" },
                { KeyElements.ConceptDictionary, "ConceptDictionary" },
                { KeyElements.DataElement, "DataElement" },
                { KeyElements.Entity, "Entity" },
                { KeyElements.Event, "Event" },
                { KeyElements.File, "File" },
                { KeyElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { KeyElements.Operation, "Operation" },
                { KeyElements.Property, "Property" },
                { KeyElements.Range, "Range" },
                { KeyElements.ReferenceElement, "ReferenceElement" },
                { KeyElements.RelationshipElement, "RelationshipElement" },
                { KeyElements.Submodel, "Submodel" },
                { KeyElements.SubmodelElement, "SubmodelElement" },
                { KeyElements.SubmodelElementCollection, "SubmodelElementCollection" },
                { KeyElements.View, "View" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public string? ToString(KeyElements that)
        {
            string value;
            return _keyElementsToString.TryGetValue(that, out value)
                ? value
                : null;
            }
        }

        private static readonly Dictionary<string, KeyElements> _keyElementsFromString = (
            new Dictionary<string, KeyElements>()
            {
                { "GlobalReference", KeyElements.GlobalReference },
                { "FragmentReference", KeyElements.FragmentReference },
                { "AccessPermissionRule", KeyElements.AccessPermissionRule },
                { "AnnotatedRelationshipElement", KeyElements.AnnotatedRelationshipElement },
                { "Asset", KeyElements.Asset },
                { "AssetAdministrationShell", KeyElements.AssetAdministrationShell },
                { "BasicEvent", KeyElements.BasicEvent },
                { "Blob", KeyElements.Blob },
                { "Capability", KeyElements.Capability },
                { "ConceptDescription", KeyElements.ConceptDescription },
                { "ConceptDictionary", KeyElements.ConceptDictionary },
                { "DataElement", KeyElements.DataElement },
                { "Entity", KeyElements.Entity },
                { "Event", KeyElements.Event },
                { "File", KeyElements.File },
                { "MultiLanguageProperty", KeyElements.MultiLanguageProperty },
                { "Operation", KeyElements.Operation },
                { "Property", KeyElements.Property },
                { "Range", KeyElements.Range },
                { "ReferenceElement", KeyElements.ReferenceElement },
                { "RelationshipElement", KeyElements.RelationshipElement },
                { "Submodel", KeyElements.Submodel },
                { "SubmodelElement", KeyElements.SubmodelElement },
                { "SubmodelElementCollection", KeyElements.SubmodelElementCollection },
                { "View", KeyElements.View }
            });

        /// <summary>
        /// Parse the string representation of <see cref="KeyElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation 
        /// of a literal of <see cref="KeyElements" />, 
        /// return <c>null</c>.
        /// </remarks>
        public string? KeyElementsFromString(string text)
        {
            KeyElements value;
            return _keyElementsFromString.TryGetValue(text, out value)
                ? value
                : null;
            }
        }
    }  // public static class Stringification
}  // namespace AasCore.Aas3.Serialization

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
