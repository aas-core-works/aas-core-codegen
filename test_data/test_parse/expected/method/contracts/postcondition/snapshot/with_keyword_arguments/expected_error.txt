We do not know how to parse the AST node: ClassDef(name='Something', bases=[], keywords=[], body=[FunctionDef(name='do_something', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='lst', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load()), type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Pass()], decorator_list=[Call(func=Name(id='snapshot', ctx=Load()), args=[], keywords=[keyword(arg='capture', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='lst', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='lst', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load()))), keyword(arg='name', value=Constant(value='lst', kind=None))]), Call(func=Name(id='ensure', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='lst', annotation=None, type_comment=None), arg(arg='OLD', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Compare(left=Name(id='lst', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='OLD', ctx=Load()), attr='lst', ctx=Load())]))], keywords=[])], returns=Constant(value=None, kind=None), type_comment=None)], decorator_list=[])
The code matched no pattern for transpilation at the parse stage: Subscript(value=Name(id='lst', ctx=Load()), slice=Slice(lower=None, upper=None, step=None), ctx=Load())