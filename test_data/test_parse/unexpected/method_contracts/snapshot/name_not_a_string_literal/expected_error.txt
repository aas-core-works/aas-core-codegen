We do not know how to parse the AST node: ClassDef(name='Something', bases=[], keywords=[], body=[FunctionDef(name='do_something', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='x', annotation=Name(id='int', ctx=Load()), type_comment=None), arg(arg='y', annotation=Name(id='int', ctx=Load()), type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Pass()], decorator_list=[Call(func=Name(id='snapshot', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=None, type_comment=None), arg(arg='y', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='y', ctx=Load())), ops=[Gt()], comparators=[Constant(value=0, kind=None)]))], keywords=[keyword(arg='name', value=Name(id='SOME_CONSTANT', ctx=Load()))])], returns=Name(id='int', ctx=Load()), type_comment=None)], decorator_list=[])
Expected a string literal as a capture name, but got: SOME_CONSTANT