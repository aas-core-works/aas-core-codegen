We do not know how to parse the AST node: ClassDef(name='Something', bases=[], keywords=[], body=[FunctionDef(name='do_something', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=None, type_comment=None), arg(arg='x', annotation=Name(id='int', ctx=Load()), type_comment=None), arg(arg='y', annotation=Name(id='int', ctx=Load()), type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Pass()], decorator_list=[Call(func=Name(id='ensure', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='OLD', annotation=None, type_comment=None)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='OLD', ctx=Load()), attr='lst', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0, kind=None)]))], keywords=[])], returns=Name(id='int', ctx=Load()), type_comment=None)], decorator_list=[])
The argument OLD of the postcondition is not provided since there were no snapshots defined for the method: do_something