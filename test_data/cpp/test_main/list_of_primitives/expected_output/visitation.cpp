// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/types.hpp"
#include "aas_core/aas_3_0/stringification.hpp"
#include "aas_core/aas_3_0/visitation.hpp"

#pragma warning(push, 0)
#include <sstream>
#pragma warning(pop)

namespace aas_core {
namespace aas_3_0 {
namespace visitation {

// region AbstractVisitor

void AbstractVisitor::Visit(
  const std::shared_ptr<types::IClass>& that
) {
  // NOTE (mristin):
  // We have to dynamically cast the pointers due to the virtual multiple
  // inheritance, and also because we used shared pointers for references.
  // If we used constant references instead of shared pointers, we could use
  // a pattern such as double dispatch. However, this has the limitation that
  // it would prevent us from collecting the instances in the visitor, such that
  // they outlive the original structures.

  switch (that->model_type()) {
    case types::ModelType::kMyClass:
      VisitMyClass(
        std::dynamic_pointer_cast<
          types::IMyClass
        >(that)
      );
      break;
    case types::ModelType::kListOfPrimitives:
      VisitListOfPrimitives(
        std::dynamic_pointer_cast<
          types::IListOfPrimitives
        >(that)
      );
      break;
    default:
      throw std::logic_error(
        common::Concat(
          "Unexpected model type: ",
          std::to_string(
            static_cast<std::uint32_t>(that->model_type())
          )
        )
      );
  }
}

// endregion

// region PassThroughVisitor

void PassThroughVisitor::VisitMyClass(
  const std::shared_ptr<types::IMyClass>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitListOfPrimitives(
  const std::shared_ptr<types::IListOfPrimitives>& that
) {
  // mutable_strings
  for (
    const std::wstring& item :
    that->mutable_strings()
  ) {
    Visit(item);
  }

  // mutable_integers
  for (
    int64_t item :
    that->mutable_integers()
  ) {
    Visit(item);
  }

  // mutable_booleans
  for (
    bool item :
    that->mutable_booleans()
  ) {
    Visit(item);
  }

  // mutable_classes
  for (
    const std::shared_ptr<types::IMyClass>& item :
    that->mutable_classes()
  ) {
    Visit(item);
  }
}

// endregion

}  // namespace visitation
}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
