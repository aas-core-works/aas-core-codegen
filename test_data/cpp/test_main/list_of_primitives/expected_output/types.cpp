// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/types.hpp"

namespace aas_core {
namespace aas_3_0 {
namespace types {

// region MyClass

MyClass::MyClass() {
  // Intentionally empty.
}

ModelType MyClass::model_type() const {
  return ModelType::kMyClass;
}

// endregion MyClass

// region ListOfPrimitives

ListOfPrimitives::ListOfPrimitives(
  std::vector<std::wstring> strings,
  std::vector<int64_t> integers,
  std::vector<bool> booleans,
  std::vector<
    std::shared_ptr<IMyClass>
  > classes
) {
  strings_ = std::move(strings);

  integers_ = std::move(integers);

  booleans_ = std::move(booleans);

  classes_ = std::move(classes);
}

ModelType ListOfPrimitives::model_type() const {
  return ModelType::kListOfPrimitives;
}

const std::vector<std::wstring>& ListOfPrimitives::strings() const {
  return strings_;
}

std::vector<std::wstring>& ListOfPrimitives::mutable_strings() {
  return strings_;
}

void ListOfPrimitives::set_strings(
  std::vector<std::wstring> value
) {
  strings_ = value;
}

const std::vector<int64_t>& ListOfPrimitives::integers() const {
  return integers_;
}

std::vector<int64_t>& ListOfPrimitives::mutable_integers() {
  return integers_;
}

void ListOfPrimitives::set_integers(
  std::vector<int64_t> value
) {
  integers_ = value;
}

const std::vector<bool>& ListOfPrimitives::booleans() const {
  return booleans_;
}

std::vector<bool>& ListOfPrimitives::mutable_booleans() {
  return booleans_;
}

void ListOfPrimitives::set_booleans(
  std::vector<bool> value
) {
  booleans_ = value;
}

const std::vector<
  std::shared_ptr<IMyClass>
>& ListOfPrimitives::classes() const {
  return classes_;
}

std::vector<
  std::shared_ptr<IMyClass>
>& ListOfPrimitives::mutable_classes() {
  return classes_;
}

void ListOfPrimitives::set_classes(
  std::vector<
    std::shared_ptr<IMyClass>
  > value
) {
  classes_ = value;
}

// endregion ListOfPrimitives

// region Is-a functions

bool IsMyClass(
  const IClass& that
) {
  switch (that.model_type()) {
    case ModelType::kMyClass:
      return true;
    case ModelType::kListOfPrimitives:
      return false;
    default:
      throw std::invalid_argument(
        common::Concat(
          "Unexpected model type: ",
          std::to_string(
            static_cast<std::uint32_t>(that.model_type())
          )
        )
      );
  }
}

bool IsListOfPrimitives(
  const IClass& that
) {
  switch (that.model_type()) {
    case ModelType::kMyClass:
      return false;
    case ModelType::kListOfPrimitives:
      return true;
    default:
      throw std::invalid_argument(
        common::Concat(
          "Unexpected model type: ",
          std::to_string(
            static_cast<std::uint32_t>(that.model_type())
          )
        )
      );
  }
}

// endregion Is-a functions

}  // namespace types
}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
