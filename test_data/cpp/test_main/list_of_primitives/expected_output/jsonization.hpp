#ifndef AAS_CORE_AAS_3_0_JSONIZATION_GUARD_
#define AAS_CORE_AAS_3_0_JSONIZATION_GUARD_

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/common.hpp"
#include "aas_core/aas_3_0/iteration.hpp"
#include "aas_core/aas_3_0/types.hpp"

#pragma warning(push, 0)
#include <nlohmann/json.hpp>

#include <memory>
#include <string>
#include <utility>
#pragma warning(pop)

namespace aas_core {
namespace aas_3_0 {

/**
 * \defgroup jsonization De/serialize instances from and to JSON.
 * @{
 */
namespace jsonization {

/**
 * Represent a segment of a JSON path to some value.
 */
class ISegment {
 public:
  /**
   * \brief Convert the segment to a string in a JSON path.
   */
  virtual std::wstring ToWstring() const = 0;

  virtual std::unique_ptr<ISegment> Clone() const = 0;

  virtual ~ISegment() = default;
};  // class ISegment

/**
 * Represent a property access on a JSON path.
 */
struct PropertySegment : public ISegment {
  /**
   * Name of the property in a JSON object
   */
  std::wstring name;

  PropertySegment(
    std::wstring a_name
  );

  std::wstring ToWstring() const override;

  std::unique_ptr<ISegment> Clone() const override;

  ~PropertySegment() override = default;
};  // struct PropertySegment

/**
 * Represent an index access on a JSON path.
 */
struct IndexSegment : public ISegment {
  /**
   * Index of the value in an array.
   */
  size_t index;

  explicit IndexSegment(
    size_t an_index
  );

  std::wstring ToWstring() const override;

  std::unique_ptr<ISegment> Clone() const override;

  ~IndexSegment() override = default;
};  // struct IndexSegment

/**
 * Represent a JSON path to some value.
 */
struct Path {
  std::deque<std::unique_ptr<ISegment> > segments;

  Path();
  Path(const Path& other);
  Path(Path&& other);
  Path& operator=(const Path& other);
  Path& operator=(Path&& other);

  std::wstring ToWstring() const;
};  // struct Path

// region De-serialization

/**
 * Represent a de-serialization error.
 */
struct DeserializationError {
  /**
   * Human-readable description of the error
   */
  std::wstring cause;

  /**
   * Path to the erroneous value
   */
  Path path;

  explicit DeserializationError(std::wstring a_cause);
  DeserializationError(std::wstring a_cause, Path a_path);
};  // struct DeserializationError

/**
 * \brief Deserialize \p json value to an instance
 * of types::IMyClass.
 *
 * \param json value to be de-serialized
 * \param additional_properties if not set, check that \p json contains
 * no additional properties
 * \return The deserialized instance, or a de-serialization error, if any.
 */
common::expected<
  std::shared_ptr<types::IMyClass>,
  DeserializationError
> MyClassFrom(
  const nlohmann::json& json,
  bool additional_properties = false
);

/**
 * \brief Deserialize \p json value to an instance
 * of types::IListOfPrimitives.
 *
 * \param json value to be de-serialized
 * \param additional_properties if not set, check that \p json contains
 * no additional properties
 * \return The deserialized instance, or a de-serialization error, if any.
 */
common::expected<
  std::shared_ptr<types::IListOfPrimitives>,
  DeserializationError
> ListOfPrimitivesFrom(
  const nlohmann::json& json,
  bool additional_properties = false
);

// endregion Deserialization

// region Serialization

/**
 * Represent an error in the serialization of an instance to JSON.
 */
class SerializationException : public std::exception {
 public:
  SerializationException(
    std::wstring cause,
    iteration::Path path
  );

  const char* what() const noexcept override;

  const std::wstring& cause() const noexcept;
  const iteration::Path& path() const noexcept;

  ~SerializationException() noexcept override = default;

 private:
  const std::wstring cause_;
  const iteration::Path path_;
  const std::string msg_;
};  // class SerializationException

/**
 * \brief Serialize \p that instance to a JSON value.
 *
 * \param that instance to be serialized
 * \return The corresponding JSON value
 * \throw \ref SerializationException if a value within \p that instance
 * could not be serialized
 */
nlohmann::json Serialize(
  const types::IClass& that
);

// endregion Serialization

}  // namespace jsonization
/**@}*/

}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#endif  // AAS_CORE_AAS_3_0_JSONIZATION_GUARD_
