// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/wstringification.hpp"

#pragma warning(push, 0)
#include <unordered_map>
#pragma warning(pop)

namespace aas_core {
namespace aas_3_0 {
namespace wstringification {

const std::unordered_map<
  std::wstring,
  types::ModelType
> kModelTypeFromWstringMap = {
  {
    L"MyClass",
    types::ModelType::kMyClass
  },
  {
    L"ListOfPrimitives",
    types::ModelType::kListOfPrimitives
  }
};

common::optional<types::ModelType> ModelTypeFromWstring(
  const std::wstring& text
) {
  const auto it = kModelTypeFromWstringMap.find(
    text
  );
  if (it == kModelTypeFromWstringMap.end()) {
    return {};
  }
  return it->second;
}

types::ModelType MustModelTypeFromWstring(
  const std::wstring& text
) {
  const auto it = kModelTypeFromWstringMap.find(
    text
  );
  if (it == kModelTypeFromWstringMap.end()) {
    throw std::invalid_argument(
      common::WstringToUtf8(
        common::Concat(
          L"Unexpected ModelType literal: ",
          text
        )
      )
    );
  }
  return it->second;
}

std::wstring to_wstring(
  types::ModelType model_type
) {
  switch (model_type) {
    case types::ModelType::kMyClass:
    return L"MyClass";
    case types::ModelType::kListOfPrimitives:
    return L"ListOfPrimitives";
    default:
      throw std::invalid_argument(
        common::Concat(
          "Unexpected ModelType literal: ",
          std::to_string(
            static_cast<std::uint32_t>(model_type)
          )
        )
      );
  }
}

}  // namespace wstringification
}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
