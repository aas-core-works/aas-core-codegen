// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/types.hpp"
#include "aas_core/aas_3_0/stringification.hpp"
#include "aas_core/aas_3_0/visitation.hpp"

#pragma warning(push, 0)
#include <sstream>
#pragma warning(pop)

namespace aas_core {
namespace aas_3_0 {
namespace visitation {

// region AbstractVisitor

void AbstractVisitor::Visit(
  const std::shared_ptr<types::IClass>& that
) {
  // NOTE (mristin):
  // We have to dynamically cast the pointers due to the virtual multiple
  // inheritance, and also because we used shared pointers for references.
  // If we used constant references instead of shared pointers, we could use
  // a pattern such as double dispatch. However, this has the limitation that
  // it would prevent us from collecting the instances in the visitor, such that
  // they outlive the original structures.

  switch (that->model_type()) {
    case types::ModelType::kExtension:
      VisitExtension(
        std::dynamic_pointer_cast<
          types::IExtension
        >(that)
      );
      break;
    case types::ModelType::kAdministrativeInformation:
      VisitAdministrativeInformation(
        std::dynamic_pointer_cast<
          types::IAdministrativeInformation
        >(that)
      );
      break;
    case types::ModelType::kQualifier:
      VisitQualifier(
        std::dynamic_pointer_cast<
          types::IQualifier
        >(that)
      );
      break;
    case types::ModelType::kAssetAdministrationShell:
      VisitAssetAdministrationShell(
        std::dynamic_pointer_cast<
          types::IAssetAdministrationShell
        >(that)
      );
      break;
    case types::ModelType::kAssetInformation:
      VisitAssetInformation(
        std::dynamic_pointer_cast<
          types::IAssetInformation
        >(that)
      );
      break;
    case types::ModelType::kResource:
      VisitResource(
        std::dynamic_pointer_cast<
          types::IResource
        >(that)
      );
      break;
    case types::ModelType::kSpecificAssetId:
      VisitSpecificAssetId(
        std::dynamic_pointer_cast<
          types::ISpecificAssetId
        >(that)
      );
      break;
    case types::ModelType::kSubmodel:
      VisitSubmodel(
        std::dynamic_pointer_cast<
          types::ISubmodel
        >(that)
      );
      break;
    case types::ModelType::kRelationshipElement:
      VisitRelationshipElement(
        std::dynamic_pointer_cast<
          types::IRelationshipElement
        >(that)
      );
      break;
    case types::ModelType::kSubmodelElementList:
      VisitSubmodelElementList(
        std::dynamic_pointer_cast<
          types::ISubmodelElementList
        >(that)
      );
      break;
    case types::ModelType::kSubmodelElementCollection:
      VisitSubmodelElementCollection(
        std::dynamic_pointer_cast<
          types::ISubmodelElementCollection
        >(that)
      );
      break;
    case types::ModelType::kProperty:
      VisitProperty(
        std::dynamic_pointer_cast<
          types::IProperty
        >(that)
      );
      break;
    case types::ModelType::kMultiLanguageProperty:
      VisitMultiLanguageProperty(
        std::dynamic_pointer_cast<
          types::IMultiLanguageProperty
        >(that)
      );
      break;
    case types::ModelType::kRange:
      VisitRange(
        std::dynamic_pointer_cast<
          types::IRange
        >(that)
      );
      break;
    case types::ModelType::kReferenceElement:
      VisitReferenceElement(
        std::dynamic_pointer_cast<
          types::IReferenceElement
        >(that)
      );
      break;
    case types::ModelType::kBlob:
      VisitBlob(
        std::dynamic_pointer_cast<
          types::IBlob
        >(that)
      );
      break;
    case types::ModelType::kFile:
      VisitFile(
        std::dynamic_pointer_cast<
          types::IFile
        >(that)
      );
      break;
    case types::ModelType::kAnnotatedRelationshipElement:
      VisitAnnotatedRelationshipElement(
        std::dynamic_pointer_cast<
          types::IAnnotatedRelationshipElement
        >(that)
      );
      break;
    case types::ModelType::kEntity:
      VisitEntity(
        std::dynamic_pointer_cast<
          types::IEntity
        >(that)
      );
      break;
    case types::ModelType::kEventPayload:
      VisitEventPayload(
        std::dynamic_pointer_cast<
          types::IEventPayload
        >(that)
      );
      break;
    case types::ModelType::kBasicEventElement:
      VisitBasicEventElement(
        std::dynamic_pointer_cast<
          types::IBasicEventElement
        >(that)
      );
      break;
    case types::ModelType::kOperation:
      VisitOperation(
        std::dynamic_pointer_cast<
          types::IOperation
        >(that)
      );
      break;
    case types::ModelType::kOperationVariable:
      VisitOperationVariable(
        std::dynamic_pointer_cast<
          types::IOperationVariable
        >(that)
      );
      break;
    case types::ModelType::kCapability:
      VisitCapability(
        std::dynamic_pointer_cast<
          types::ICapability
        >(that)
      );
      break;
    case types::ModelType::kConceptDescription:
      VisitConceptDescription(
        std::dynamic_pointer_cast<
          types::IConceptDescription
        >(that)
      );
      break;
    case types::ModelType::kReference:
      VisitReference(
        std::dynamic_pointer_cast<
          types::IReference
        >(that)
      );
      break;
    case types::ModelType::kKey:
      VisitKey(
        std::dynamic_pointer_cast<
          types::IKey
        >(that)
      );
      break;
    case types::ModelType::kLangStringNameType:
      VisitLangStringNameType(
        std::dynamic_pointer_cast<
          types::ILangStringNameType
        >(that)
      );
      break;
    case types::ModelType::kLangStringTextType:
      VisitLangStringTextType(
        std::dynamic_pointer_cast<
          types::ILangStringTextType
        >(that)
      );
      break;
    case types::ModelType::kEnvironment:
      VisitEnvironment(
        std::dynamic_pointer_cast<
          types::IEnvironment
        >(that)
      );
      break;
    case types::ModelType::kEmbeddedDataSpecification:
      VisitEmbeddedDataSpecification(
        std::dynamic_pointer_cast<
          types::IEmbeddedDataSpecification
        >(that)
      );
      break;
    case types::ModelType::kLevelType:
      VisitLevelType(
        std::dynamic_pointer_cast<
          types::ILevelType
        >(that)
      );
      break;
    case types::ModelType::kValueReferencePair:
      VisitValueReferencePair(
        std::dynamic_pointer_cast<
          types::IValueReferencePair
        >(that)
      );
      break;
    case types::ModelType::kValueList:
      VisitValueList(
        std::dynamic_pointer_cast<
          types::IValueList
        >(that)
      );
      break;
    case types::ModelType::kLangStringPreferredNameTypeIec61360:
      VisitLangStringPreferredNameTypeIec61360(
        std::dynamic_pointer_cast<
          types::ILangStringPreferredNameTypeIec61360
        >(that)
      );
      break;
    case types::ModelType::kLangStringShortNameTypeIec61360:
      VisitLangStringShortNameTypeIec61360(
        std::dynamic_pointer_cast<
          types::ILangStringShortNameTypeIec61360
        >(that)
      );
      break;
    case types::ModelType::kLangStringDefinitionTypeIec61360:
      VisitLangStringDefinitionTypeIec61360(
        std::dynamic_pointer_cast<
          types::ILangStringDefinitionTypeIec61360
        >(that)
      );
      break;
    case types::ModelType::kDataSpecificationIec61360:
      VisitDataSpecificationIec61360(
        std::dynamic_pointer_cast<
          types::IDataSpecificationIec61360
        >(that)
      );
      break;
    default:
      throw std::logic_error(
        common::Concat(
          "Unexpected model type: ",
          std::to_string(
            static_cast<std::uint32_t>(that->model_type())
          )
        )
      );
  }
}

// endregion

// region PassThroughVisitor

void PassThroughVisitor::VisitExtension(
  const std::shared_ptr<types::IExtension>& that
) {
  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_refers_to
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_refers_to(
    that->mutable_refers_to()
  );
  if (maybe_refers_to.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_refers_to.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitAdministrativeInformation(
  const std::shared_ptr<types::IAdministrativeInformation>& that
) {
  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_creator
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_creator(
    that->mutable_creator()
  );
  if (maybe_creator.has_value()) {
    Visit(
      maybe_creator.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitQualifier(
  const std::shared_ptr<types::IQualifier>& that
) {
  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_value_id(
    that->mutable_value_id()
  );
  if (maybe_value_id.has_value()) {
    Visit(
      maybe_value_id.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitAssetAdministrationShell(
  const std::shared_ptr<types::IAssetAdministrationShell>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_administration
  const common::optional<
    std::shared_ptr<types::IAdministrativeInformation>
  >& maybe_administration(
    that->mutable_administration()
  );
  if (maybe_administration.has_value()) {
    Visit(
      maybe_administration.value()
    );
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_derived_from
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_derived_from(
    that->mutable_derived_from()
  );
  if (maybe_derived_from.has_value()) {
    Visit(
      maybe_derived_from.value()
    );
  }
  // endregion

  // mutable_asset_information
  Visit(
    that->mutable_asset_information()
  );

  // region mutable_submodels
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_submodels(
    that->mutable_submodels()
  );
  if (maybe_submodels.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_submodels.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitAssetInformation(
  const std::shared_ptr<types::IAssetInformation>& that
) {
  // region mutable_specific_asset_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISpecificAssetId>
    >
  >& maybe_specific_asset_ids(
    that->mutable_specific_asset_ids()
  );
  if (maybe_specific_asset_ids.has_value()) {
    for (
      const std::shared_ptr<types::ISpecificAssetId>& item :
      maybe_specific_asset_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_default_thumbnail
  const common::optional<
    std::shared_ptr<types::IResource>
  >& maybe_default_thumbnail(
    that->mutable_default_thumbnail()
  );
  if (maybe_default_thumbnail.has_value()) {
    Visit(
      maybe_default_thumbnail.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitResource(
  const std::shared_ptr<types::IResource>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitSpecificAssetId(
  const std::shared_ptr<types::ISpecificAssetId>& that
) {
  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_external_subject_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_external_subject_id(
    that->mutable_external_subject_id()
  );
  if (maybe_external_subject_id.has_value()) {
    Visit(
      maybe_external_subject_id.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitSubmodel(
  const std::shared_ptr<types::ISubmodel>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_administration
  const common::optional<
    std::shared_ptr<types::IAdministrativeInformation>
  >& maybe_administration(
    that->mutable_administration()
  );
  if (maybe_administration.has_value()) {
    Visit(
      maybe_administration.value()
    );
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_submodel_elements
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISubmodelElement>
    >
  >& maybe_submodel_elements(
    that->mutable_submodel_elements()
  );
  if (maybe_submodel_elements.has_value()) {
    for (
      const std::shared_ptr<types::ISubmodelElement>& item :
      maybe_submodel_elements.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitRelationshipElement(
  const std::shared_ptr<types::IRelationshipElement>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // mutable_first
  Visit(
    that->mutable_first()
  );

  // mutable_second
  Visit(
    that->mutable_second()
  );
}

void PassThroughVisitor::VisitSubmodelElementList(
  const std::shared_ptr<types::ISubmodelElementList>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id_list_element
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id_list_element(
    that->mutable_semantic_id_list_element()
  );
  if (maybe_semantic_id_list_element.has_value()) {
    Visit(
      maybe_semantic_id_list_element.value()
    );
  }
  // endregion

  // region mutable_value
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISubmodelElement>
    >
  >& maybe_value(
    that->mutable_value()
  );
  if (maybe_value.has_value()) {
    for (
      const std::shared_ptr<types::ISubmodelElement>& item :
      maybe_value.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitSubmodelElementCollection(
  const std::shared_ptr<types::ISubmodelElementCollection>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISubmodelElement>
    >
  >& maybe_value(
    that->mutable_value()
  );
  if (maybe_value.has_value()) {
    for (
      const std::shared_ptr<types::ISubmodelElement>& item :
      maybe_value.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitProperty(
  const std::shared_ptr<types::IProperty>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_value_id(
    that->mutable_value_id()
  );
  if (maybe_value_id.has_value()) {
    Visit(
      maybe_value_id.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitMultiLanguageProperty(
  const std::shared_ptr<types::IMultiLanguageProperty>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_value(
    that->mutable_value()
  );
  if (maybe_value.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_value.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_value_id(
    that->mutable_value_id()
  );
  if (maybe_value_id.has_value()) {
    Visit(
      maybe_value_id.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitRange(
  const std::shared_ptr<types::IRange>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitReferenceElement(
  const std::shared_ptr<types::IReferenceElement>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_value(
    that->mutable_value()
  );
  if (maybe_value.has_value()) {
    Visit(
      maybe_value.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitBlob(
  const std::shared_ptr<types::IBlob>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitFile(
  const std::shared_ptr<types::IFile>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitAnnotatedRelationshipElement(
  const std::shared_ptr<types::IAnnotatedRelationshipElement>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // mutable_first
  Visit(
    that->mutable_first()
  );

  // mutable_second
  Visit(
    that->mutable_second()
  );

  // region mutable_annotations
  const common::optional<
    std::vector<
      std::shared_ptr<types::IDataElement>
    >
  >& maybe_annotations(
    that->mutable_annotations()
  );
  if (maybe_annotations.has_value()) {
    for (
      const std::shared_ptr<types::IDataElement>& item :
      maybe_annotations.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitEntity(
  const std::shared_ptr<types::IEntity>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_statements
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISubmodelElement>
    >
  >& maybe_statements(
    that->mutable_statements()
  );
  if (maybe_statements.has_value()) {
    for (
      const std::shared_ptr<types::ISubmodelElement>& item :
      maybe_statements.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_specific_asset_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISpecificAssetId>
    >
  >& maybe_specific_asset_ids(
    that->mutable_specific_asset_ids()
  );
  if (maybe_specific_asset_ids.has_value()) {
    for (
      const std::shared_ptr<types::ISpecificAssetId>& item :
      maybe_specific_asset_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitEventPayload(
  const std::shared_ptr<types::IEventPayload>& that
) {
  // mutable_source
  Visit(
    that->mutable_source()
  );

  // region mutable_source_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_source_semantic_id(
    that->mutable_source_semantic_id()
  );
  if (maybe_source_semantic_id.has_value()) {
    Visit(
      maybe_source_semantic_id.value()
    );
  }
  // endregion

  // mutable_observable_reference
  Visit(
    that->mutable_observable_reference()
  );

  // region mutable_observable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_observable_semantic_id(
    that->mutable_observable_semantic_id()
  );
  if (maybe_observable_semantic_id.has_value()) {
    Visit(
      maybe_observable_semantic_id.value()
    );
  }
  // endregion

  // region mutable_subject_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_subject_id(
    that->mutable_subject_id()
  );
  if (maybe_subject_id.has_value()) {
    Visit(
      maybe_subject_id.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitBasicEventElement(
  const std::shared_ptr<types::IBasicEventElement>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // mutable_observed
  Visit(
    that->mutable_observed()
  );

  // region mutable_message_broker
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_message_broker(
    that->mutable_message_broker()
  );
  if (maybe_message_broker.has_value()) {
    Visit(
      maybe_message_broker.value()
    );
  }
  // endregion
}

void PassThroughVisitor::VisitOperation(
  const std::shared_ptr<types::IOperation>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_input_variables
  const common::optional<
    std::vector<
      std::shared_ptr<types::IOperationVariable>
    >
  >& maybe_input_variables(
    that->mutable_input_variables()
  );
  if (maybe_input_variables.has_value()) {
    for (
      const std::shared_ptr<types::IOperationVariable>& item :
      maybe_input_variables.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_output_variables
  const common::optional<
    std::vector<
      std::shared_ptr<types::IOperationVariable>
    >
  >& maybe_output_variables(
    that->mutable_output_variables()
  );
  if (maybe_output_variables.has_value()) {
    for (
      const std::shared_ptr<types::IOperationVariable>& item :
      maybe_output_variables.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_inoutput_variables
  const common::optional<
    std::vector<
      std::shared_ptr<types::IOperationVariable>
    >
  >& maybe_inoutput_variables(
    that->mutable_inoutput_variables()
  );
  if (maybe_inoutput_variables.has_value()) {
    for (
      const std::shared_ptr<types::IOperationVariable>& item :
      maybe_inoutput_variables.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitOperationVariable(
  const std::shared_ptr<types::IOperationVariable>& that
) {
  // mutable_value
  Visit(
    that->mutable_value()
  );
}

void PassThroughVisitor::VisitCapability(
  const std::shared_ptr<types::ICapability>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_semantic_id(
    that->mutable_semantic_id()
  );
  if (maybe_semantic_id.has_value()) {
    Visit(
      maybe_semantic_id.value()
    );
  }
  // endregion

  // region mutable_supplemental_semantic_ids
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_supplemental_semantic_ids(
    that->mutable_supplemental_semantic_ids()
  );
  if (maybe_supplemental_semantic_ids.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_supplemental_semantic_ids.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_qualifiers
  const common::optional<
    std::vector<
      std::shared_ptr<types::IQualifier>
    >
  >& maybe_qualifiers(
    that->mutable_qualifiers()
  );
  if (maybe_qualifiers.has_value()) {
    for (
      const std::shared_ptr<types::IQualifier>& item :
      maybe_qualifiers.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitConceptDescription(
  const std::shared_ptr<types::IConceptDescription>& that
) {
  // region mutable_extensions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IExtension>
    >
  >& maybe_extensions(
    that->mutable_extensions()
  );
  if (maybe_extensions.has_value()) {
    for (
      const std::shared_ptr<types::IExtension>& item :
      maybe_extensions.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_display_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringNameType>
    >
  >& maybe_display_name(
    that->mutable_display_name()
  );
  if (maybe_display_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringNameType>& item :
      maybe_display_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_description
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringTextType>
    >
  >& maybe_description(
    that->mutable_description()
  );
  if (maybe_description.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringTextType>& item :
      maybe_description.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_administration
  const common::optional<
    std::shared_ptr<types::IAdministrativeInformation>
  >& maybe_administration(
    that->mutable_administration()
  );
  if (maybe_administration.has_value()) {
    Visit(
      maybe_administration.value()
    );
  }
  // endregion

  // region mutable_embedded_data_specifications
  const common::optional<
    std::vector<
      std::shared_ptr<types::IEmbeddedDataSpecification>
    >
  >& maybe_embedded_data_specifications(
    that->mutable_embedded_data_specifications()
  );
  if (maybe_embedded_data_specifications.has_value()) {
    for (
      const std::shared_ptr<types::IEmbeddedDataSpecification>& item :
      maybe_embedded_data_specifications.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_is_case_of
  const common::optional<
    std::vector<
      std::shared_ptr<types::IReference>
    >
  >& maybe_is_case_of(
    that->mutable_is_case_of()
  );
  if (maybe_is_case_of.has_value()) {
    for (
      const std::shared_ptr<types::IReference>& item :
      maybe_is_case_of.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitReference(
  const std::shared_ptr<types::IReference>& that
) {
  // region mutable_referred_semantic_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_referred_semantic_id(
    that->mutable_referred_semantic_id()
  );
  if (maybe_referred_semantic_id.has_value()) {
    Visit(
      maybe_referred_semantic_id.value()
    );
  }
  // endregion

  // mutable_keys
  for (
    const std::shared_ptr<types::IKey>& item :
    that->mutable_keys()
  ) {
    Visit(item);
  }
}

void PassThroughVisitor::VisitKey(
  const std::shared_ptr<types::IKey>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitLangStringNameType(
  const std::shared_ptr<types::ILangStringNameType>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitLangStringTextType(
  const std::shared_ptr<types::ILangStringTextType>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitEnvironment(
  const std::shared_ptr<types::IEnvironment>& that
) {
  // region mutable_asset_administration_shells
  const common::optional<
    std::vector<
      std::shared_ptr<types::IAssetAdministrationShell>
    >
  >& maybe_asset_administration_shells(
    that->mutable_asset_administration_shells()
  );
  if (maybe_asset_administration_shells.has_value()) {
    for (
      const std::shared_ptr<types::IAssetAdministrationShell>& item :
      maybe_asset_administration_shells.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_submodels
  const common::optional<
    std::vector<
      std::shared_ptr<types::ISubmodel>
    >
  >& maybe_submodels(
    that->mutable_submodels()
  );
  if (maybe_submodels.has_value()) {
    for (
      const std::shared_ptr<types::ISubmodel>& item :
      maybe_submodels.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_concept_descriptions
  const common::optional<
    std::vector<
      std::shared_ptr<types::IConceptDescription>
    >
  >& maybe_concept_descriptions(
    that->mutable_concept_descriptions()
  );
  if (maybe_concept_descriptions.has_value()) {
    for (
      const std::shared_ptr<types::IConceptDescription>& item :
      maybe_concept_descriptions.value()
    ) {
      Visit(item);
    }
  }
  // endregion
}

void PassThroughVisitor::VisitEmbeddedDataSpecification(
  const std::shared_ptr<types::IEmbeddedDataSpecification>& that
) {
  // mutable_data_specification
  Visit(
    that->mutable_data_specification()
  );

  // mutable_data_specification_content
  Visit(
    that->mutable_data_specification_content()
  );
}

void PassThroughVisitor::VisitLevelType(
  const std::shared_ptr<types::ILevelType>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitValueReferencePair(
  const std::shared_ptr<types::IValueReferencePair>& that
) {
  // mutable_value_id
  Visit(
    that->mutable_value_id()
  );
}

void PassThroughVisitor::VisitValueList(
  const std::shared_ptr<types::IValueList>& that
) {
  // mutable_value_reference_pairs
  for (
    const std::shared_ptr<types::IValueReferencePair>& item :
    that->mutable_value_reference_pairs()
  ) {
    Visit(item);
  }
}

void PassThroughVisitor::VisitLangStringPreferredNameTypeIec61360(
  const std::shared_ptr<types::ILangStringPreferredNameTypeIec61360>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitLangStringShortNameTypeIec61360(
  const std::shared_ptr<types::ILangStringShortNameTypeIec61360>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitLangStringDefinitionTypeIec61360(
  const std::shared_ptr<types::ILangStringDefinitionTypeIec61360>&
) {
  // No properties to be passed through.
}

void PassThroughVisitor::VisitDataSpecificationIec61360(
  const std::shared_ptr<types::IDataSpecificationIec61360>& that
) {
  // mutable_preferred_name
  for (
    const std::shared_ptr<types::ILangStringPreferredNameTypeIec61360>& item :
    that->mutable_preferred_name()
  ) {
    Visit(item);
  }

  // region mutable_short_name
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringShortNameTypeIec61360>
    >
  >& maybe_short_name(
    that->mutable_short_name()
  );
  if (maybe_short_name.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringShortNameTypeIec61360>& item :
      maybe_short_name.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_unit_id
  const common::optional<
    std::shared_ptr<types::IReference>
  >& maybe_unit_id(
    that->mutable_unit_id()
  );
  if (maybe_unit_id.has_value()) {
    Visit(
      maybe_unit_id.value()
    );
  }
  // endregion

  // region mutable_definition
  const common::optional<
    std::vector<
      std::shared_ptr<types::ILangStringDefinitionTypeIec61360>
    >
  >& maybe_definition(
    that->mutable_definition()
  );
  if (maybe_definition.has_value()) {
    for (
      const std::shared_ptr<types::ILangStringDefinitionTypeIec61360>& item :
      maybe_definition.value()
    ) {
      Visit(item);
    }
  }
  // endregion

  // region mutable_value_list
  const common::optional<
    std::shared_ptr<types::IValueList>
  >& maybe_value_list(
    that->mutable_value_list()
  );
  if (maybe_value_list.has_value()) {
    Visit(
      maybe_value_list.value()
    );
  }
  // endregion

  // region mutable_level_type
  const common::optional<
    std::shared_ptr<types::ILevelType>
  >& maybe_level_type(
    that->mutable_level_type()
  );
  if (maybe_level_type.has_value()) {
    Visit(
      maybe_level_type.value()
    );
  }
  // endregion
}

// endregion

}  // namespace visitation
}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
