#ifndef AAS_CORE_AAS_3_0_CONSTANTS_GUARD_
#define AAS_CORE_AAS_3_0_CONSTANTS_GUARD_

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/types.hpp"

#pragma warning(push, 0)
#include <cstdint>
#include <unordered_set>
#include <vector>
#pragma warning(pop)

namespace aas_core {
namespace aas_3_0 {

/**
 * \defgroup constants Pre-defined constants of the meta-model
 * @{
 */
namespace constants {

/**
 * Hash a blob of bytes based on the Java's String hash.
 */
struct HashBytes {
  std::size_t operator()(const std::vector<std::uint8_t>& bytes) const;
};

/// \brief Categories for types::IDataElement as defined in Constraint AASd-090
extern const std::unordered_set<std::wstring> kValidCategoriesForDataElement;

/// \brief Enumeration of all identifiable elements within an asset administration shell.
extern const std::unordered_set<types::KeyTypes> kGenericFragmentKeys;

/// \brief Enumeration of different key value types within a key.
extern const std::unordered_set<types::KeyTypes> kGenericGloballyIdentifiables;

/// \brief Enumeration of different key value types within a key.
extern const std::unordered_set<types::KeyTypes> kAasIdentifiables;

/// \brief Enumeration of all submodel elements within an asset administration shell.
extern const std::unordered_set<types::KeyTypes> kAasSubmodelElementsAsKeys;

/// \brief Enumeration of different fragment key value types within a key.
extern const std::unordered_set<types::KeyTypes> kAasReferableNonIdentifiables;

/// \brief Enumeration of referables. We need this to check that model references refer to a Referable. For example, the observed attribute of the Basic Event Element object must be a model reference to a Referable.
extern const std::unordered_set<types::KeyTypes> kAasReferables;

/// \brief Enumeration of all referable elements within an asset administration shell
extern const std::unordered_set<types::KeyTypes> kGloballyIdentifiables;

/// \brief Enumeration of different key value types within a key.
extern const std::unordered_set<types::KeyTypes> kFragmentKeys;

/// \brief IEC 61360 data types for concept descriptions categorized with PROPERTY or VALUE.
extern const std::unordered_set<types::DataTypeIec61360> kDataTypeIec61360ForPropertyOrValue;

/// \brief IEC 61360 data types for concept descriptions categorized with REFERENCE.
extern const std::unordered_set<types::DataTypeIec61360> kDataTypeIec61360ForReference;

/// \brief IEC 61360 data types for concept descriptions categorized with DOCUMENT.
extern const std::unordered_set<types::DataTypeIec61360> kDataTypeIec61360ForDocument;

/// \brief These data types imply that the unit is defined in the data specification.
extern const std::unordered_set<types::DataTypeIec61360> kIec61360DataTypesWithUnit;

}  // namespace common
/**@}*/

}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#endif  // AAS_CORE_AAS_3_0_CONSTANTS_GUARD_
