#ifndef AAS_CORE_AAS_3_0_VISITATION_GUARD_
#define AAS_CORE_AAS_3_0_VISITATION_GUARD_

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#include "aas_core/aas_3_0/types.hpp"

namespace aas_core {
namespace aas_3_0 {

/**
 * \defgroup visitation Iterate and modify instances through visitors.
 * @{
 */
namespace visitation {

/**
 * Provide an interface for a recursive mutating visitor on an instance.
 */
class IVisitor {
 public:
  /**
   * Visit \p that instance and recursively visit all the instances
   * referenced from \p that instance.
   *
   * We use const references to shared pointers here for efficiency in case you want,
   * say, to share ownership over instances in your own external containers. Since
   * we do not make copies of the shared pointers, it is very important that
   * the given shared pointers outlive the visitor, lest cause undefined behavior.
   * See these StackOverflow questions:
   * * https://stackoverflow.com/questions/12002480/passing-stdshared-ptr-to-constructors/12002668#12002668
   * * https://stackoverflow.com/questions/3310737/should-we-pass-a-shared-ptr-by-reference-or-by-value
   * * https://stackoverflow.com/questions/37610494/passing-const-shared-ptrt-versus-just-shared-ptrt-as-parameter
   *
   * Changing the references during the visitation results in undefined
   * behavior. This follows how STL deals with modifications to containers, see:
   * https://stackoverflow.com/questions/6438086/iterator-invalidation-rules-for-c-containers
   *
   * \param that instance to be visited recursively
   */
  virtual void Visit(const std::shared_ptr<types::IClass>& that) = 0;
  virtual ~IVisitor() = default;

 protected:
  virtual void VisitExtension(
    const std::shared_ptr<types::IExtension>& that
  ) = 0;
  virtual void VisitAdministrativeInformation(
    const std::shared_ptr<types::IAdministrativeInformation>& that
  ) = 0;
  virtual void VisitQualifier(
    const std::shared_ptr<types::IQualifier>& that
  ) = 0;
  virtual void VisitAssetAdministrationShell(
    const std::shared_ptr<types::IAssetAdministrationShell>& that
  ) = 0;
  virtual void VisitAssetInformation(
    const std::shared_ptr<types::IAssetInformation>& that
  ) = 0;
  virtual void VisitResource(
    const std::shared_ptr<types::IResource>& that
  ) = 0;
  virtual void VisitSpecificAssetId(
    const std::shared_ptr<types::ISpecificAssetId>& that
  ) = 0;
  virtual void VisitSubmodel(
    const std::shared_ptr<types::ISubmodel>& that
  ) = 0;
  virtual void VisitRelationshipElement(
    const std::shared_ptr<types::IRelationshipElement>& that
  ) = 0;
  virtual void VisitSubmodelElementList(
    const std::shared_ptr<types::ISubmodelElementList>& that
  ) = 0;
  virtual void VisitSubmodelElementCollection(
    const std::shared_ptr<types::ISubmodelElementCollection>& that
  ) = 0;
  virtual void VisitProperty(
    const std::shared_ptr<types::IProperty>& that
  ) = 0;
  virtual void VisitMultiLanguageProperty(
    const std::shared_ptr<types::IMultiLanguageProperty>& that
  ) = 0;
  virtual void VisitRange(
    const std::shared_ptr<types::IRange>& that
  ) = 0;
  virtual void VisitReferenceElement(
    const std::shared_ptr<types::IReferenceElement>& that
  ) = 0;
  virtual void VisitBlob(
    const std::shared_ptr<types::IBlob>& that
  ) = 0;
  virtual void VisitFile(
    const std::shared_ptr<types::IFile>& that
  ) = 0;
  virtual void VisitAnnotatedRelationshipElement(
    const std::shared_ptr<types::IAnnotatedRelationshipElement>& that
  ) = 0;
  virtual void VisitEntity(
    const std::shared_ptr<types::IEntity>& that
  ) = 0;
  virtual void VisitEventPayload(
    const std::shared_ptr<types::IEventPayload>& that
  ) = 0;
  virtual void VisitBasicEventElement(
    const std::shared_ptr<types::IBasicEventElement>& that
  ) = 0;
  virtual void VisitOperation(
    const std::shared_ptr<types::IOperation>& that
  ) = 0;
  virtual void VisitOperationVariable(
    const std::shared_ptr<types::IOperationVariable>& that
  ) = 0;
  virtual void VisitCapability(
    const std::shared_ptr<types::ICapability>& that
  ) = 0;
  virtual void VisitConceptDescription(
    const std::shared_ptr<types::IConceptDescription>& that
  ) = 0;
  virtual void VisitReference(
    const std::shared_ptr<types::IReference>& that
  ) = 0;
  virtual void VisitKey(
    const std::shared_ptr<types::IKey>& that
  ) = 0;
  virtual void VisitLangStringNameType(
    const std::shared_ptr<types::ILangStringNameType>& that
  ) = 0;
  virtual void VisitLangStringTextType(
    const std::shared_ptr<types::ILangStringTextType>& that
  ) = 0;
  virtual void VisitEnvironment(
    const std::shared_ptr<types::IEnvironment>& that
  ) = 0;
  virtual void VisitEmbeddedDataSpecification(
    const std::shared_ptr<types::IEmbeddedDataSpecification>& that
  ) = 0;
  virtual void VisitLevelType(
    const std::shared_ptr<types::ILevelType>& that
  ) = 0;
  virtual void VisitValueReferencePair(
    const std::shared_ptr<types::IValueReferencePair>& that
  ) = 0;
  virtual void VisitValueList(
    const std::shared_ptr<types::IValueList>& that
  ) = 0;
  virtual void VisitLangStringPreferredNameTypeIec61360(
    const std::shared_ptr<types::ILangStringPreferredNameTypeIec61360>& that
  ) = 0;
  virtual void VisitLangStringShortNameTypeIec61360(
    const std::shared_ptr<types::ILangStringShortNameTypeIec61360>& that
  ) = 0;
  virtual void VisitLangStringDefinitionTypeIec61360(
    const std::shared_ptr<types::ILangStringDefinitionTypeIec61360>& that
  ) = 0;
  virtual void VisitDataSpecificationIec61360(
    const std::shared_ptr<types::IDataSpecificationIec61360>& that
  ) = 0;
};  // class IVisitor

/**
 * Provide an abstract recursive mutating visitor on an instance.
 */
class AbstractVisitor
    : public IVisitor {
 public:
  void Visit(const std::shared_ptr<types::IClass>& that) override;
  ~AbstractVisitor() override = default;
};  // class AbstractVisitor

/**
 * \brief Provide a mutating, recursive and no-op visitor on an instance.
 *
 * Usually, you want to inherit from this visitor and override one or more of its
 * visitation methods.
 */
class PassThroughVisitor
    : public AbstractVisitor {
 public:
  ~PassThroughVisitor() override = default;

 protected:
  void VisitExtension(
    const std::shared_ptr<types::IExtension>& that
  ) override;
  void VisitAdministrativeInformation(
    const std::shared_ptr<types::IAdministrativeInformation>& that
  ) override;
  void VisitQualifier(
    const std::shared_ptr<types::IQualifier>& that
  ) override;
  void VisitAssetAdministrationShell(
    const std::shared_ptr<types::IAssetAdministrationShell>& that
  ) override;
  void VisitAssetInformation(
    const std::shared_ptr<types::IAssetInformation>& that
  ) override;
  void VisitResource(
    const std::shared_ptr<types::IResource>& that
  ) override;
  void VisitSpecificAssetId(
    const std::shared_ptr<types::ISpecificAssetId>& that
  ) override;
  void VisitSubmodel(
    const std::shared_ptr<types::ISubmodel>& that
  ) override;
  void VisitRelationshipElement(
    const std::shared_ptr<types::IRelationshipElement>& that
  ) override;
  void VisitSubmodelElementList(
    const std::shared_ptr<types::ISubmodelElementList>& that
  ) override;
  void VisitSubmodelElementCollection(
    const std::shared_ptr<types::ISubmodelElementCollection>& that
  ) override;
  void VisitProperty(
    const std::shared_ptr<types::IProperty>& that
  ) override;
  void VisitMultiLanguageProperty(
    const std::shared_ptr<types::IMultiLanguageProperty>& that
  ) override;
  void VisitRange(
    const std::shared_ptr<types::IRange>& that
  ) override;
  void VisitReferenceElement(
    const std::shared_ptr<types::IReferenceElement>& that
  ) override;
  void VisitBlob(
    const std::shared_ptr<types::IBlob>& that
  ) override;
  void VisitFile(
    const std::shared_ptr<types::IFile>& that
  ) override;
  void VisitAnnotatedRelationshipElement(
    const std::shared_ptr<types::IAnnotatedRelationshipElement>& that
  ) override;
  void VisitEntity(
    const std::shared_ptr<types::IEntity>& that
  ) override;
  void VisitEventPayload(
    const std::shared_ptr<types::IEventPayload>& that
  ) override;
  void VisitBasicEventElement(
    const std::shared_ptr<types::IBasicEventElement>& that
  ) override;
  void VisitOperation(
    const std::shared_ptr<types::IOperation>& that
  ) override;
  void VisitOperationVariable(
    const std::shared_ptr<types::IOperationVariable>& that
  ) override;
  void VisitCapability(
    const std::shared_ptr<types::ICapability>& that
  ) override;
  void VisitConceptDescription(
    const std::shared_ptr<types::IConceptDescription>& that
  ) override;
  void VisitReference(
    const std::shared_ptr<types::IReference>& that
  ) override;
  void VisitKey(
    const std::shared_ptr<types::IKey>& that
  ) override;
  void VisitLangStringNameType(
    const std::shared_ptr<types::ILangStringNameType>& that
  ) override;
  void VisitLangStringTextType(
    const std::shared_ptr<types::ILangStringTextType>& that
  ) override;
  void VisitEnvironment(
    const std::shared_ptr<types::IEnvironment>& that
  ) override;
  void VisitEmbeddedDataSpecification(
    const std::shared_ptr<types::IEmbeddedDataSpecification>& that
  ) override;
  void VisitLevelType(
    const std::shared_ptr<types::ILevelType>& that
  ) override;
  void VisitValueReferencePair(
    const std::shared_ptr<types::IValueReferencePair>& that
  ) override;
  void VisitValueList(
    const std::shared_ptr<types::IValueList>& that
  ) override;
  void VisitLangStringPreferredNameTypeIec61360(
    const std::shared_ptr<types::ILangStringPreferredNameTypeIec61360>& that
  ) override;
  void VisitLangStringShortNameTypeIec61360(
    const std::shared_ptr<types::ILangStringShortNameTypeIec61360>& that
  ) override;
  void VisitLangStringDefinitionTypeIec61360(
    const std::shared_ptr<types::ILangStringDefinitionTypeIec61360>& that
  ) override;
  void VisitDataSpecificationIec61360(
    const std::shared_ptr<types::IDataSpecificationIec61360>& that
  ) override;
};  // class PassThroughVisitor

}  // namespace visitation
/**@*/

}  // namespace aas_3_0
}  // namespace aas_core

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

#endif  // AAS_CORE_AAS_3_0_VISITATION_GUARD_
