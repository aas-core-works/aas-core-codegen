SymbolTable(
  symbols=[
    ConstrainedPrimitive(
      name='Non_empty_string',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent a string with at least one character.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Date_time_stamp_UTC',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='matches_xs_date_time_stamp_utc',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Date_time_stamp_UTC',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_xs_date_time_stamp_utc',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Date_time_stamp_UTC',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent an <literal>xs:dateTimeStamp</literal> with the time zone fixed to UTC.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Blob_type',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='BYTEARRAY',
      is_implementation_specific=False,
      invariants=[],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Group of bytes to represent file content (binaries and non-binaries)</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Identifier',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='BCP_47_language_tag',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='matches_BCP_47',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive BCP_47_language_tag',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent a language tag conformant to BCP 47.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://en.wikipedia.org/wiki/IETF_language_tag">https://en.wikipedia.org/wiki/IETF_language_tag</reference></paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Content_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='matches_MIME_type',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Content_type',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[
          '<note><paragraph>Any content type as in RFC2046.</paragraph></note>',
          '<paragraph>A media type (also MIME type and content type) […] is a two-part\nidentifier for file formats and format contents transmitted on\nthe Internet. The Internet Assigned Numbers Authority (IANA) is\nthe official authority for the standardization and publication of\nthese classifications. Media types were originally defined in\nRequest for Comments 2045 in November 1996 as a part of MIME\n(Multipurpose Internet Mail Extensions) specification, for denoting\ntype of email message content and attachments.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Path_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='matches_RFC_8089_path',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Path_type',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[
          '<note><paragraph>Any string conformant to RFC8089 , the “file” URI scheme (for\nrelative and absolute file paths)</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Qualifier_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Value_data_type',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>any xsd atomic type as specified via <SymbolReference refuri=".Data_type_def_XSD">.Data_type_def_XSD</SymbolReference></paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConcreteClass(
      name='Resource',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='path',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_kind',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Path and name of the resource (with file extension).\nThe path can be absolute or relative.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Resource',
          parsed=...),
        Property(
          name='content_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Content_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Content type of the content of the file.\nThe content type states which file extensions the file can have.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Resource',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='path',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_kind',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='content_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Content_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='path',\n  argument='path',\n  default=None)",
          "AssignArgument(\n  name='content_type',\n  argument='content_type',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Resource represents an address to a file (a locator). The value is an URI that\ncan represent an absolute or relative path</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_semantics',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_semantics',
        name='Has_semantics',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass Extension',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Identifier_key_value_pair',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Qualifier',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can have a semantic definition.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass Extension',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Identifier_key_value_pair',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Qualifier',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can have a semantic definition.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Extension',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='name',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Name of the extension.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-077',
                '<field_body><paragraph>The name of an extension within <SymbolReference refuri=".Has_extensions">.Has_extensions</SymbolReference> needs to be unique.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Type of the value of the extension.</paragraph>',
            remarks=[
              '<paragraph>Default: xsd:string</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Value of the extension</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='refers_to',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an element the extension refers to.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='name',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def_XSD',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='refers_to',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='name',\n  argument='name',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='refers_to',\n  argument='refers_to',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          1],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Single extension of an element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_extensions',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_extensions',
        name='Has_extensions',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can be extended by proprietary extensions.</paragraph>',
          remarks=[
            '<paragraph>Note: Extensions are proprietary, i.e. they do not support global interoperability.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...)],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can be extended by proprietary extensions.</paragraph>',
        remarks=[
          '<paragraph>Note: Extensions are proprietary, i.e. they do not support global interoperability.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Referable',
      inheritances=[
        'Reference to AbstractClass Has_extensions'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Referable',
        name='Referable',
        inheritances=[
          'Reference to Interface Has_extensions'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element that is referable by its <AttributeReference refuri="~id_short">~id_short</AttributeReference>.</paragraph>',
          remarks=[
            '<paragraph>This identifier is not globally unique.\nThis identifier is unique within the name space of the element.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element that is referable by its <AttributeReference refuri="~id_short">~id_short</AttributeReference>.</paragraph>',
        remarks=[
          '<paragraph>This identifier is not globally unique.\nThis identifier is unique within the name space of the element.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Identifiable',
      inheritances=[
        'Reference to AbstractClass Referable'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Identifiable',
        name='Identifiable',
        inheritances=[
          'Reference to Interface Referable'],
        implementers=[
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Submodel'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The globally unique identification of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...),
          Property(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
              remarks=[
                '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element that has a globally unique identifier.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Submodel'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element that has a globally unique identifier.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Modeling_kind',
      literals=[
        EnumerationLiteral(
          name='Template',
          value='TEMPLATE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Software element which specifies the common attributes shared by all instances of\nthe template.</paragraph>',
            remarks=[
              '<paragraph>[SOURCE: IEC TR 62390:2005-01, 3.1.25] modified</paragraph>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='INSTANCE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Concrete, clearly identifiable component of a certain template.</paragraph>',
            remarks=[
              '<note><paragraph>It becomes an individual entity of a  template,  for example a\ndevice model, by defining specific property values.</paragraph></note>',
              '<note><paragraph>In an object oriented view,  an instance denotes an object of a\ntemplate (class).</paragraph></note>',
              '<paragraph>[SOURCE: IEC 62890:2016, 3.1.16 65/617/CDV]  modified</paragraph>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          4],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an element is a template or an instance.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    AbstractClass(
      name='Has_kind',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_kind',
        name='Has_kind',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element with a kind is an element that can either represent a template or an\ninstance.</paragraph>',
          remarks=[
            '<paragraph>Default for an element is that it is representing an instance.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element with a kind is an element that can either represent a template or an\ninstance.</paragraph>',
        remarks=[
          '<paragraph>Default for an element is that it is representing an instance.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_data_specification',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_data_specification',
        name='Has_data_specification',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Administrative_information',
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can be extended by using data specification templates.</paragraph>',
          remarks=[
            '<paragraph>A data specification template defines a named set of additional attributes an\nelement may or shall have. The data specifications used are explicitly specified\nwith their global ID.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Administrative_information',
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can be extended by using data specification templates.</paragraph>',
        remarks=[
          '<paragraph>A data specification template defines a named set of additional attributes an\nelement may or shall have. The data specifications used are explicitly specified\nwith their global ID.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Administrative_information',
      inheritances=[
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='version',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Version of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...),
        Property(
          name='revision',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Revision of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='version',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='revision',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='version',\n  argument='version',\n  default=None)",
          "AssignArgument(\n  name='revision',\n  argument='revision',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-005: If version is not specified than also revision shall be unspecified. This means, a revision requires a version. If there is no version there is no revision neither. Revision is optional.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='revision',\n      original_node=...),\n    original_node=...),\n  consequent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='version',\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Administrative meta-information for an element like version\ninformation.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-005',
            '<field_body><paragraph>If <AttributeReference refuri="~version">~version</AttributeReference> is not specified than also <AttributeReference refuri="~revision">~revision</AttributeReference> shall be\nunspecified. This means, a revision requires a version. If there is no version\nthere is no revision neither. Revision is optional.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Qualifiable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Qualifiable',
        name='Qualifiable',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>The value of a qualifiable element may be further qualified by one or more\nqualifiers or complex formulas.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          7],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>The value of a qualifiable element may be further qualified by one or more\nqualifiers or complex formulas.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Qualifier',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Qualifier_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The qualifier type describes the type of the qualifier that is applied to\nthe element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the qualifier value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The qualifier value is the value of the qualifier.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_id',\n  argument='value_id',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-020: The value shall be consistent to the data type as defined in value_type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='value_consistent_with_xsd_type',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value_type',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A qualifier is a type-value-pair that makes additional statements w.r.t.  the value\nof the element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-006',
            '<field_body><paragraph>If both the <AttributeReference refuri="~value">~value</AttributeReference> and the <AttributeReference refuri="~value_id">~value_id</AttributeReference> of\na <SymbolReference refuri=".Qualifier">.Qualifier</SymbolReference> are present then the <AttributeReference refuri="~value">~value</AttributeReference> needs\nto be identical to the value of the referenced coded value\nin <AttributeReference refuri="~value_id">~value_id</AttributeReference>.</paragraph></field_body>'],
          [
            'AASd-020',
            '<field_body><paragraph>The value of <AttributeReference refuri="~value">~value</AttributeReference> shall be consistent to the data type as\ndefined in <AttributeReference refuri="~value_type">~value_type</AttributeReference>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_administration_shell',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='asset_information',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_information',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Meta-information about the asset the AAS is representing.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>References to submodels of the AAS.</paragraph>',
            remarks=[
              '<paragraph>A submodel is a description of an aspect of the asset the AAS is representing.\nThe asset of an AAS is typically described by one or more submodels.\nTemporarily no submodel might be assigned to the AAS.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='derived_from',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The reference to the AAS the AAS was derived from.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='asset_information',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_information',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Model_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='derived_from',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='derived_from',\n  argument='derived_from',\n  default=None)",
          "AssignArgument(\n  name='asset_information',\n  argument='asset_information',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='derived_from',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='is_model_reference_to',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='derived_from',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='Key_elements',\n          original_node=...),\n        name='Asset_administration_shell',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='submodels',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='reference',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='submodels',\n        original_node=...),\n      original_node=...),\n    condition=FunctionCall(\n      name='is_model_reference_to',\n      args=[\n        Name(\n          identifier='reference',\n          original_node=...),\n        Member(\n          instance=Name(\n            identifier='Key_elements',\n            original_node=...),\n          name='Submodel',\n          original_node=...)],\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_information',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_kind',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_kind',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Denotes whether the Asset is of kind "Type" or "Instance".</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='global_asset_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to either an Asset object or a global reference to the asset the AAS is\nrepresenting.</paragraph>',
            remarks=[
              '<paragraph>This attribute is required as soon as the AAS is exchanged via partners in the life\ncycle of the asset. In a first phase of the life cycle the asset might not yet have\na global ID but already an internal identifier. The internal identifier would be\nmodelled via <AttributeReference refuri="~specific_asset_id">~specific_asset_id</AttributeReference>.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='specific_asset_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional domain-specific, typically proprietary, Identifier for the asset.</paragraph>',
            remarks=[
              '<paragraph>For example, serial number.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='default_thumbnail',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Resource',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Thumbnail of the asset represented by the asset administration shell.</paragraph>',
            remarks=[
              '<paragraph>Used as default.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_kind',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_kind',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='global_asset_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='default_thumbnail',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Resource',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_kind',\n  argument='asset_kind',\n  default=None)",
          "AssignArgument(\n  name='global_asset_id',\n  argument='global_asset_id',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_id',\n  argument='specific_asset_id',\n  default=None)",
          "AssignArgument(\n  name='default_thumbnail',\n  argument='default_thumbnail',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>In <SymbolReference refuri=".Asset_information">.Asset_information</SymbolReference> identifying meta data of the asset that is\nrepresented by an AAS is defined.</paragraph>',
        remarks=[
          '<paragraph>The asset may either represent an asset type or an asset instance.\nThe asset has a globally unique identifier plus – if needed – additional domain\nspecific (proprietary) identifiers. However, to support the corner case of very\nfirst phase of lifecycle where a stabilised/constant global asset identifier does\nnot already exist, the corresponding attribute\n<AttributeReference refuri="~global_asset_id">~global_asset_id</AttributeReference> is optional.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Asset_kind',
      literals=[
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=EnumerationLiteralDescription(
            summary='<paragraph>hardware or software element which specifies the common attributes shared by all\ninstances of the type</paragraph>',
            remarks=[
              '<paragraph>[SOURCE: IEC TR 62390:2005-01, 3.1.25]</paragraph>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='Instance',
          description=EnumerationLiteralDescription(
            summary='<paragraph>concrete, clearly identifiable component of a certain type</paragraph>',
            remarks=[
              '<note><paragraph>It becomes an individual entity of a type, for example a device, by defining\nspecific property values.</paragraph></note>',
              '<note><paragraph>In an object oriented view, an instance denotes an object of a class\n(of a type).</paragraph></note>',
              '<paragraph>[SOURCE: IEC 62890:2016, 3.1.16] 65/617/CDV</paragraph>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an element is a type or an instance.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Identifier_key_value_pair',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='key',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Key of the identifier</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the identifier with the corresponding key.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='external_subject_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The (external) subject the key belongs to or has meaning to.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='key',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='external_subject_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='key',\n  argument='key',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='external_subject_id',\n  argument='external_subject_id',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An <SymbolReference refuri=".Identifier_key_value_pair">.Identifier_key_value_pair</SymbolReference> describes a generic identifier as\nkey-value pair.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='submodel_elements',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>A submodel consists of zero or more submodel elements.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodel_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='submodel_elements',\n  argument='submodel_elements',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Short IDs need to be defined for all the submodel elements.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='submodel_elements',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='element',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='submodel_elements',\n        original_node=...),\n      original_node=...),\n    condition=IsNotNone(\n      value=Member(\n        instance=Name(\n          identifier='element',\n          original_node=...),\n        name='id_short',\n        original_node=...),\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='submodel_elements',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='id_shorts_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='submodel_elements',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel defines a specific aspect of the asset represented by the AAS.</paragraph>',
        remarks=[
          '<paragraph>A submodel is used to structure the digital representation and technical\nfunctionality of an Administration Shell into distinguishable parts. Each submodel\nrefers to a well-defined domain or subject matter. Submodels can become\nstandardized and, thus, become submodels templates.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Submodel_element',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Submodel_element',
        name='Submodel_element',
        inheritances=[
          'Reference to Interface Referable',
          'Reference to Interface Has_kind',
          'Reference to Interface Has_semantics',
          'Reference to Interface Qualifiable',
          'Reference to Interface Has_data_specification'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A submodel element is an element suitable for the description and differentiation of\nassets.</paragraph>',
          remarks=[
            '<paragraph>It is recommended to add a semantic ID to a submodel element.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element is an element suitable for the description and differentiation of\nassets.</paragraph>',
        remarks=[
          '<paragraph>It is recommended to add a semantic ID to a submodel element.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Relationship_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Relationship_element',
        name='Relationship_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...),
          Property(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...),
          Property(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A relationship element is used to define a relationship between two elements\nbeing either referable (model reference) or external (global reference).</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          16],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A relationship element is used to define a relationship between two elements\nbeing either referable (model reference) or external (global reference).</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_list',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='type_value_list_element',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element_elements',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The submodel element type of the submodel elements contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='order_relevant',
          type_annotation=OptionalTypeAnnotation(
            value=PrimitiveTypeAnnotation(
              a_type='BOOL',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Defines whether order in list is relevant. If <AttributeReference refuri="~order_relevant">~order_relevant</AttributeReference> = <literal>False</literal>\nthen the list is representing a set or a bag.</paragraph>',
            remarks=[
              '<paragraph>Default: <literal>True</literal></paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel element contained in the list.\nThe list is ordered.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='semantic_id_list_element',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The submodel element type of the submodel elements contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='value_type_list_element',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value type of the submodel element contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type_value_list_element',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='order_relevant',
            type_annotation=OptionalTypeAnnotation(
              value=PrimitiveTypeAnnotation(
                a_type='BOOL',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id_list_element',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type_list_element',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def_XSD',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='type_value_list_element',\n  argument='type_value_list_element',\n  default=None)",
          "AssignArgument(\n  name='order_relevant',\n  argument='order_relevant',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='semantic_id_list_element',\n  argument='semantic_id_list_element',\n  default=None)",
          "AssignArgument(\n  name='value_type_list_element',\n  argument='value_type_list_element',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-107: If a first level child element has a semantic ID it shall be identical to semantic ID list element.',
          body="Implication(\n  antecedent=And(\n    values=[\n      IsNotNone(\n        value=Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='value',\n          original_node=...),\n        original_node=...),\n      IsNotNone(\n        value=Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='semantic_id_list_element',\n          original_node=...),\n        original_node=...)],\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='child',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      original_node=...),\n    condition=Implication(\n      antecedent=IsNotNone(\n        value=Member(\n          instance=Name(\n            identifier='child',\n            original_node=...),\n          name='semantic_id',\n          original_node=...),\n        original_node=...),\n      consequent=Comparison(\n        left=Member(\n          instance=Name(\n            identifier='child',\n            original_node=...),\n          name='semantic_id',\n          original_node=...),\n        op='EQ',\n        right=Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='semantic_id_list_element',\n          original_node=...),\n        original_node=...),\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Invariant(
          description='Constraint AASd-114: If two first level child elements have a semantic ID then they shall be identical.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='submodel_elements_have_identical_semantic_ids',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Invariant(
          description='Constraint AASd-108: All first level child elements shall have the same submodel element type as specified in type value list element.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='element',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      original_node=...),\n    condition=FunctionCall(\n      name='submodel_element_is_of_type',\n      args=[\n        Name(\n          identifier='element',\n          original_node=...),\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='type_value_list_element',\n          original_node=...)],\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Invariant(
          description='Constraint AASd-109: If type value list element is equal to Property or Range value type list element shall be set and all first level child elements shall have the value type as specified in value type list element.',
          body="Implication(\n  antecedent=And(\n    values=[\n      IsNotNone(\n        value=Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='value',\n          original_node=...),\n        original_node=...),\n      Or(\n        values=[\n          Comparison(\n            left=Member(\n              instance=Name(\n                identifier='self',\n                original_node=...),\n              name='type_value_list_element',\n              original_node=...),\n            op='EQ',\n            right=Member(\n              instance=Name(\n                identifier='Submodel_element_elements',\n                original_node=...),\n              name='Property',\n              original_node=...),\n            original_node=...),\n          Comparison(\n            left=Member(\n              instance=Name(\n                identifier='self',\n                original_node=...),\n              name='type_value_list_element',\n              original_node=...),\n            op='EQ',\n            right=Member(\n              instance=Name(\n                identifier='Submodel_element_elements',\n                original_node=...),\n              name='Range',\n              original_node=...),\n            original_node=...)],\n        original_node=...)],\n    original_node=...),\n  consequent=And(\n    values=[\n      IsNotNone(\n        value=Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='value_type_list_element',\n          original_node=...),\n        original_node=...),\n      FunctionCall(\n        name='properties_or_ranges_have_value_type',\n        args=[\n          Member(\n            instance=Name(\n              identifier='self',\n              original_node=...),\n            name='value',\n            original_node=...),\n          Member(\n            instance=Name(\n              identifier='self',\n              original_node=...),\n            name='value_type_list_element',\n            original_node=...)],\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Invariant(
          description='Short IDs need to be defined for all the elements.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='element',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      original_node=...),\n    condition=IsNotNone(\n      value=Member(\n        instance=Name(\n          identifier='element',\n          original_node=...),\n        name='id_short',\n        original_node=...),\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='id_shorts_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          17],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element list is an ordered collection of submodel elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-107',
            '<field_body><paragraph>If a first level child element in a <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference> has\na <AttributeReference refuri="~Submodel_element.semantic_id">~Submodel_element.semantic_id</AttributeReference> it\nshall be identical to <AttributeReference refuri="~Submodel_element_list.semantic_id_list_element">~Submodel_element_list.semantic_id_list_element</AttributeReference>.</paragraph></field_body>'],
          [
            'AASd-114',
            '<field_body><paragraph>If two first level child elements in a <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference> have\na <AttributeReference refuri="~Submodel_element.semantic_id">~Submodel_element.semantic_id</AttributeReference> then they shall be identical.</paragraph></field_body>'],
          [
            'AASd-115',
            '<field_body><paragraph>If a first level child element in a <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference> does not\nspecify a <AttributeReference refuri="~Submodel_element.semantic_id">~Submodel_element.semantic_id</AttributeReference> then the value is assumed to be\nidentical to <AttributeReference refuri="~Submodel_element_list.semantic_id_list_element">~Submodel_element_list.semantic_id_list_element</AttributeReference>.</paragraph></field_body>'],
          [
            'AASd-108',
            '<field_body><paragraph>All first level child elements in a <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference> shall have\nthe same submodel element type as specified in <AttributeReference refuri="~type_value_list_element">~type_value_list_element</AttributeReference>.</paragraph></field_body>'],
          [
            'AASd-109',
            '<field_body><paragraph>If <AttributeReference refuri="~type_value_list_element">~type_value_list_element</AttributeReference> is equal to\n<AttributeReference refuri="Submodel_element_elements.Property">Submodel_element_elements.Property</AttributeReference> or\n<AttributeReference refuri="Submodel_element_elements.Range">Submodel_element_elements.Range</AttributeReference>\n<AttributeReference refuri="~value_type_list_element">~value_type_list_element</AttributeReference> shall be set and all first\nlevel child elements in the <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference> shall have\nthe value type as specified in <AttributeReference refuri="~value_type_list_element">~value_type_list_element</AttributeReference>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_struct',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel element contained in the struct.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_struct',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Short IDs need to be defined for all the elements.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='element',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      original_node=...),\n    condition=IsNotNone(\n      value=Member(\n        instance=Name(\n          identifier='element',\n          original_node=...),\n        name='id_short',\n        original_node=...),\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_struct',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='id_shorts_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Submodel_element_struct',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          18],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element struct is is a logical encapsulation of multiple values. It has\na number of of submodel elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Data_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Data_element',
        name='Data_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A data element is a submodel element that is not further composed out of\nother submodel elements.</paragraph>',
          remarks=[
            '<paragraph>A data element is a submodel element that has a value. The type of value differs\nfor different subtypes of data elements.</paragraph>',
            '<paragraph>A controlled value is a value whose meaning is given in an external source\n(see “ISO/TS 29002-10:2009(E)”).</paragraph>'],
          constraints_by_identifier=[
            [
              'AASd-090',
              '<field_body><paragraph>For data elements <AttributeReference refuri="~category">~category</AttributeReference> shall be one of the following\nvalues: <literal>CONSTANT</literal>, <literal>PARAMETER</literal> or <literal>VARIABLE</literal>.</paragraph></field_body>']],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A data element is a submodel element that is not further composed out of\nother submodel elements.</paragraph>',
        remarks=[
          '<paragraph>A data element is a submodel element that has a value. The type of value differs\nfor different subtypes of data elements.</paragraph>',
          '<paragraph>A controlled value is a value whose meaning is given in an external source\n(see “ISO/TS 29002-10:2009(E)”).</paragraph>'],
        constraints_by_identifier=[
          [
            'AASd-090',
            '<field_body><paragraph>For data elements <AttributeReference refuri="~category">~category</AttributeReference> shall be one of the following\nvalues: <literal>CONSTANT</literal>, <literal>PARAMETER</literal> or <literal>VARIABLE</literal>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the value</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the property instance.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_id',\n  argument='value_id',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='value',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='value_consistent_with_xsd_type',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value_type',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Property',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          13],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A property is a data element that has a single value.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-007',
            '<field_body><paragraph>If both, the <AttributeReference refuri="~value">~value</AttributeReference> and the <AttributeReference refuri="~value_id">~value_id</AttributeReference> are\npresent then the value of <AttributeReference refuri="~value">~value</AttributeReference> needs to be identical to\nthe value of the referenced coded value in <AttributeReference refuri="~value_id">~value_id</AttributeReference>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Multi_language_property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the property instance.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...),
        Property(
          name='value_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_id',\n  argument='value_id',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          11],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A property is a data element that has a multi-language value.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-012',
            '<field_body><paragraph>If both the <AttributeReference refuri="~value">~value</AttributeReference> and the <AttributeReference refuri="~value_id">~value_id</AttributeReference> are present then for each\nstring in a specific language the meaning must be the same as specified in\n<AttributeReference refuri="~value_id">~value_id</AttributeReference>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Range',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the min und max</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='min',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The minimum value of the range.\nIf the min value is missing, then the value is assumed to be negative infinite.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='max',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The maximum value of the range.\nIf the max value is missing,  then the value is assumed to be positive infinite.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='min',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='max',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='min',\n  argument='min',\n  default=None)",
          "AssignArgument(\n  name='max',\n  argument='max',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='max',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='value_consistent_with_xsd_type',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='max',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value_type',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Invariant(
          description=None,
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='min',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='value_consistent_with_xsd_type',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='min',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='value_type',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Range',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          14],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A range data element is a data element that defines a range with min and max.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Reference_element',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to an external object or entity or a logical reference to\nanother element within the same or another AAS (i.e. a model reference to\na Referable).</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Reference_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          15],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A reference element is a data element that defines a logical reference to another\nelement within the same or another AAS or a reference to an external object or\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Blob',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='MIME_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Content_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>MIME type of the content of the <SymbolReference refuri=".Blob">.Blob</SymbolReference>.</paragraph>',
            remarks=[
              '<paragraph>The MIME type states which file extensions the file can have.\nValid values are e.g. <literal>application/json</literal>, <literal>application/xls</literal>, <literal>image/jpg</literal>.\nThe allowed values are defined as in RFC2046.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Blob_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the <SymbolReference refuri=".Blob">.Blob</SymbolReference> instance of a blob data element.</paragraph>',
            remarks=[
              '<note><paragraph>In contrast to the file property the file content is stored directly as value\nin the <SymbolReference refuri=".Blob">.Blob</SymbolReference> data element.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='MIME_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Content_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Blob_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='MIME_type',\n  argument='MIME_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A <SymbolReference refuri=".Blob">.Blob</SymbolReference> is a data element that represents a file that is contained with its\nsource code in the value attribute.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='File',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='content_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Content_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Content type of the content of the file.</paragraph>',
            remarks=[
              '<paragraph>The content type states which file extensions the file can have.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Path_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Path and name of the referenced file (with file extension).\nThe path can be absolute or relative.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='content_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Content_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Path_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='content_type',\n  argument='content_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description='Constraint AASd-090: For data elements category shall be one of the following values: CONSTANT, PARAMETER or VARIABLE',
          body="Or(\n  values=[\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='CONSTANT',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='PARAMETER',\n        original_node=...),\n      original_node=...),\n    Comparison(\n      left=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...),\n      op='EQ',\n      right=Constant(\n        value='VARIABLE',\n        original_node=...),\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to AbstractClass Data_element',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A File is a data element that represents an address to a file.</paragraph>',
        remarks=[
          '<paragraph>The value is an URI that can represent an absolute or relative path.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Annotated_relationship_element',
      inheritances=[
        'Reference to AbstractClass Relationship_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='annotation',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Data_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>A data element that represents an annotation that holds for the relationship\nbetween the two elements</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Annotated_relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='annotation',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Data_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)",
          "AssignArgument(\n  name='annotation',\n  argument='annotation',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An annotated relationship element is a relationship element that can be annotated\nwith additional data elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Entity_type',
      literals=[
        EnumerationLiteral(
          name='Co_managed_entity',
          value='COMANAGEDENTITY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>For co-managed entities there is no separate AAS. Co-managed entities need to be\npart of a self-managed entity.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Self_managed_entity',
          value='SELFMANAGEDENTITY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Self-Managed Entities have their own AAS but can be part of the bill of material of\na composite self-managed entity. The asset of an I4.0 Component is a self-managed\nentity per definition."</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          6],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an entity is a self-managed entity or a co-managed\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Entity',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='entity_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Entity_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes whether the entity is a co- managed entity or a self-managed entity.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='statements',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes statements applicable to the entity by a set of submodel elements,\ntypically with a qualified value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='global_asset_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the asset the entity is representing.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='specific_asset_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an identifier key value pair representing a specific identifier\nof the asset represented by the asset administration shell.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='entity_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Entity_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='statements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='global_asset_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='statements',\n  argument='statements',\n  default=None)",
          "AssignArgument(\n  name='entity_type',\n  argument='entity_type',\n  default=None)",
          "AssignArgument(\n  name='global_asset_id',\n  argument='global_asset_id',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_id',\n  argument='specific_asset_id',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Invariant(
          description="Constraint AASd-014: Either the attribute global asset ID or specific asset ID must be set if entity type is set to 'SelfManagedEntity'. They are not existing otherwise.",
          body="Or(\n  values=[\n    And(\n      values=[\n        Comparison(\n          left=Member(\n            instance=Name(\n              identifier='self',\n              original_node=...),\n            name='entity_type',\n            original_node=...),\n          op='EQ',\n          right=Member(\n            instance=Name(\n              identifier='Entity_type',\n              original_node=...),\n            name='Self_managed_entity',\n            original_node=...),\n          original_node=...),\n        Or(\n          values=[\n            And(\n              values=[\n                IsNotNone(\n                  value=Member(\n                    instance=Name(\n                      identifier='self',\n                      original_node=...),\n                    name='global_asset_id',\n                    original_node=...),\n                  original_node=...),\n                IsNone(\n                  value=Member(\n                    instance=Name(\n                      identifier='self',\n                      original_node=...),\n                    name='global_asset_id',\n                    original_node=...),\n                  original_node=...)],\n              original_node=...),\n            And(\n              values=[\n                IsNone(\n                  value=Member(\n                    instance=Name(\n                      identifier='self',\n                      original_node=...),\n                    name='global_asset_id',\n                    original_node=...),\n                  original_node=...),\n                IsNotNone(\n                  value=Member(\n                    instance=Name(\n                      identifier='self',\n                      original_node=...),\n                    name='global_asset_id',\n                    original_node=...),\n                  original_node=...)],\n              original_node=...)],\n          original_node=...)],\n      original_node=...),\n    And(\n      values=[\n        IsNone(\n          value=Member(\n            instance=Name(\n              identifier='self',\n              original_node=...),\n            name='global_asset_id',\n            original_node=...),\n          original_node=...),\n        IsNone(\n          value=Member(\n            instance=Name(\n              identifier='self',\n              original_node=...),\n            name='specific_asset_id',\n            original_node=...),\n          original_node=...)],\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass Entity',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An entity is a submodel element that is used to model entities.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-014',
            '<field_body><paragraph>Either the attribute <AttributeReference refuri="~global_asset_id">~global_asset_id</AttributeReference> or <AttributeReference refuri="~specific_asset_id">~specific_asset_id</AttributeReference>\nof an <SymbolReference refuri=".Entity">.Entity</SymbolReference> must be set if <AttributeReference refuri="~entity_type">~entity_type</AttributeReference> is set to\n<literal>SelfManagedEntity</literal>. They are not existing otherwise.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Direction',
      literals=[
        EnumerationLiteral(
          name='input',
          value='INPUT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Input direction.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='output',
          value='OUTPUT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Output direction</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Direction</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='State_of_event',
      literals=[
        EnumerationLiteral(
          name='on',
          value='ON',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event is on</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='off',
          value='OFF',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event is off.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>State of an event</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Event_payload',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='source',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the source event element, including identification of\n<SymbolReference refuri=".Asset_administration_shell">.Asset_administration_shell</SymbolReference>, <SymbolReference refuri=".Submodel">.Submodel</SymbolReference>,\n<SymbolReference refuri=".Submodel_element">.Submodel_element</SymbolReference>\'s.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='source_semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph><AttributeReference refuri="~Has_semantics.semantic_id">~Has_semantics.semantic_id</AttributeReference> of the source event element, if available</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='observable_reference',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the referable, which defines the scope of the event.</paragraph>',
            remarks=[
              '<paragraph>Can be <SymbolReference refuri=".Asset_administration_shell">.Asset_administration_shell</SymbolReference>, <SymbolReference refuri=".Submodel">.Submodel</SymbolReference> or\n<SymbolReference refuri=".Submodel_element">.Submodel_element</SymbolReference>.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='observable_semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph><AttributeReference refuri="~Has_semantics.semantic_id">~Has_semantics.semantic_id</AttributeReference> of the referable which defines the scope of\nthe event, if available.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='topic',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information for the outer message infrastructure for scheduling the event to\nthe respective communication channel.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='subject_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Subject, who/which initiated the creation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='time_stamp',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Date_time_stamp_UTC',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Timestamp in UTC, when this event was triggered.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='payload',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Event specific payload.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='source',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='observable_reference',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='time_stamp',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Date_time_stamp_UTC',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='source_semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='observable_semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='topic',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='subject_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='payload',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='source',\n  argument='source',\n  default=None)",
          "AssignArgument(\n  name='observable_reference',\n  argument='observable_reference',\n  default=None)",
          "AssignArgument(\n  name='time_stamp',\n  argument='time_stamp',\n  default=None)",
          "AssignArgument(\n  name='source_semantic_id',\n  argument='source_semantic_id',\n  default=None)",
          "AssignArgument(\n  name='observable_semantic_id',\n  argument='observable_semantic_id',\n  default=None)",
          "AssignArgument(\n  name='topic',\n  argument='topic',\n  default=None)",
          "AssignArgument(\n  name='subject_id',\n  argument='subject_id',\n  default=None)",
          "AssignArgument(\n  name='payload',\n  argument='payload',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Defines the necessary information of an event instance sent out or received.</paragraph>',
        remarks=[
          '<note><paragraph>The payload is not part of the information model as exchanged via\nthe AASX package format but used in re-active Asset Administration Shells.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Event_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Event_element',
        name='Event_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Basic_event_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An event element.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Basic_event_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          7],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An event element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Basic_event_element',
      inheritances=[
        'Reference to AbstractClass Event_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='observed',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the <SymbolReference refuri=".Referable">.Referable</SymbolReference>, which defines the scope of the event.\nCan be <SymbolReference refuri=".Asset_administration_shell">.Asset_administration_shell</SymbolReference>, <SymbolReference refuri=".Submodel">.Submodel</SymbolReference>, or\n<SymbolReference refuri=".Submodel_element">.Submodel_element</SymbolReference>. Reference to a referable, e.g. a data element or\na submodel, that is being observed.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='direction',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Direction',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Direction of event.\nCan be <literal>{ Input, Output }</literal>.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='state',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol State_of_event',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>State of event.\nCan be <literal>{ On, Off }</literal>.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='message_topic',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information for the outer message infrastructure for scheduling the event to the\nrespective communication channel.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='message_broker',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information, which outer message infrastructure shall handle messages for\nthe <SymbolReference refuri=".Event_element">.Event_element</SymbolReference>.</paragraph>',
            remarks=[
              '<paragraph>Refers to a <SymbolReference refuri=".Submodel">.Submodel</SymbolReference>, <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference>,\n<SymbolReference refuri=".Submodel_element_struct">.Submodel_element_struct</SymbolReference> or <SymbolReference refuri=".Entity">.Entity</SymbolReference>, which contains\n<SymbolReference refuri=".Data_element">.Data_element</SymbolReference>\'s describing the proprietary specification for\nthe message broker.</paragraph>',
              '<note><paragraph>For different message infrastructure, e.g. OPC UA or MQTT or AMQP, these\nproprietary specification could be standardized by having respective Submodels.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='last_update',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time_stamp_UTC',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Timestamp in UTC, when the last event was received (input direction) or sent\n(output direction).</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='min_interval',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time_stamp_UTC',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>For input direction, reports on the maximum frequency, the software entity behind\nthe respective Referable can handle input events. For output events, specifies\nthe maximum frequency of outputting this event to an outer infrastructure.\nMight be not specified, that is, there is no minimum interval.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='max_interval',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time_stamp_UTC',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>For input direction: not applicable.\nFor output direction: maximum interval in time, the respective Referable shall send\nan update of the status of the event, even if no other trigger condition for\nthe event was not met. Might be not specified, that is, there is no maximum interval.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='observed',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='direction',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Direction',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='state',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol State_of_event',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='message_topic',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='message_broker',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='last_update',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time_stamp_UTC',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='min_interval',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time_stamp_UTC',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='max_interval',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time_stamp_UTC',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='observed',\n  argument='observed',\n  default=None)",
          "AssignArgument(\n  name='direction',\n  argument='direction',\n  default=None)",
          "AssignArgument(\n  name='state',\n  argument='state',\n  default=None)",
          "AssignArgument(\n  name='message_topic',\n  argument='message_topic',\n  default=None)",
          "AssignArgument(\n  name='message_broker',\n  argument='message_broker',\n  default=None)",
          "AssignArgument(\n  name='last_update',\n  argument='last_update',\n  default=None)",
          "AssignArgument(\n  name='min_interval',\n  argument='min_interval',\n  default=None)",
          "AssignArgument(\n  name='max_interval',\n  argument='max_interval',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A basic event element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='input_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Input parameter of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='output_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Output parameter of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='inoutput_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Parameter that is input and output of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='input_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='output_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='inoutput_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='input_variables',\n  argument='input_variables',\n  default=None)",
          "AssignArgument(\n  name='output_variables',\n  argument='output_variables',\n  default=None)",
          "AssignArgument(\n  name='inoutput_variables',\n  argument='inoutput_variables',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          12],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An operation is a submodel element with input and output variables.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation_variable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes the needed argument for an operation via a submodel element</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation_variable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          13],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An operation variable is a submodel element that is used as input or output variable\nof an operation.</paragraph>',
        remarks=[
          '<note><paragraph><SymbolReference refuri=".Operation_variable">.Operation_variable</SymbolReference> is introduced as separate class to enable future\nextensions, e.g. for adding a default value, cardinality (option/mandatory).</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Capability',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same\n<AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description='Constraint AASd-021: Every qualifiable can only have one qualifier with the same type.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='qualifiers',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='qualifier_types_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='qualifiers',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A capability is the implementation-independent description of the potential of an\nasset to achieve a certain effect in the physical or virtual world.</paragraph>',
        remarks=[
          '<note><paragraph>The <AttributeReference refuri="~semantic_id">~semantic_id</AttributeReference> of a capability is typically an ontology.\nThus, reasoning on capabilities is enabled.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Concept_description',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='is_case_of',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an external definition the concept is compatible to or was derived from</paragraph>',
            remarks=[
              '<note><paragraph>Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360"</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Concept_description',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='is_case_of',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='is_case_of',\n  argument='is_case_of',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Invariant(
          description="Constraint AASd-051: A concept description shall have one of the following categories: 'VALUE', 'PROPERTY', 'REFERENCE', 'DOCUMENT', 'CAPABILITY',; 'RELATIONSHIP', 'COLLECTION', 'FUNCTION', 'EVENT', 'ENTITY', 'APPLICATION_CLASS', 'QUALIFIER', 'VIEW'.",
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='category',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='concept_description_category_is_valid',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='category',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Concept_description',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>The semantics of a property or other elements that may have a semantic description\nis defined by a concept description. The description of the concept should follow a\nstandardized schema (realized as data specification template).</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-051',
            '<field_body><paragraph>A <SymbolReference refuri=".Concept_description">.Concept_description</SymbolReference> shall have one of the following categories\n<literal>VALUE</literal>, <literal>PROPERTY</literal>, <literal>REFERENCE</literal>, <literal>DOCUMENT</literal>, <literal>CAPABILITY</literal>,\n<literal>RELATIONSHIP</literal>, <literal>COLLECTION</literal>, <literal>FUNCTION</literal>, <literal>EVENT</literal>, <literal>ENTITY</literal>,\n<literal>APPLICATION_CLASS</literal>, <literal>QUALIFIER</literal>, <literal>VIEW</literal>.</paragraph><paragraph>Default: <literal>PROPERTY</literal>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='View',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='id_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the <AttributeReference refuri="~id_short">~id_short</AttributeReference>\nis typically identical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph><AttributeReference refuri="~id_short">~id_short</AttributeReference> of <SymbolReference refuri=".Referable">.Referable</SymbolReference>\'s shall have a maximum length\nof 128 characters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the <AttributeReference refuri="~id_short">~id_short</AttributeReference> of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated child elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='contained_elements',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to a referable element that is contained in the view.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass View',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='id_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='contained_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=None)",
          "AssignArgument(\n  name='id_short',\n  argument='id_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='semantic_id',\n  argument='semantic_id',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='contained_elements',\n  argument='contained_elements',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-077: The name of an extension within Has_extensions needs to be unique.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='extensions',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='extension_names_are_unique',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='extensions',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Invariant(
          description='Constraint AASd-027: ID-short shall have a maximum length of 128 characters.',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='id_short',\n      original_node=...),\n    original_node=...),\n  consequent=Comparison(\n    left=FunctionCall(\n      name='len',\n      args=[\n        Member(\n          instance=Name(\n            identifier='self',\n            original_node=...),\n          name='id_short',\n          original_node=...)],\n      original_node=...),\n    op='LE',\n    right=Constant(\n      value=128,\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A view is a collection of referable elements w.r.t. to a specific viewpoint of one\nor more stakeholders.</paragraph>',
        remarks=[
          '<note><paragraph>Views are a projection of submodel elements for a given perspective.\nThey are not equivalent to submodels.</paragraph></note>'],
        constraints_by_identifier=[
          [
            'AASd-064',
            '<field_body><paragraph>If the <AttributeReference refuri="~semantic_id">~semantic_id</AttributeReference> references a <SymbolReference refuri=".Concept_description">.Concept_description</SymbolReference>\nthen the <AttributeReference refuri="~Concept_description.category">~Concept_description.category</AttributeReference> of\nthe <SymbolReference refuri=".Concept_description">.Concept_description</SymbolReference> shall be <literal>VIEW</literal>.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Reference',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Reference',
        name='Reference',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Global_reference',
          'Reference to ConcreteClass Model_reference'],
        properties=[],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Reference to either a model element of the same or another AAs or to an external\nentity.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Global_reference',
        'Reference to ConcreteClass Model_reference'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to either a model element of the same or another AAs or to an external\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Global_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique identifier</paragraph>',
            remarks=[
              '<paragraph>The identifier can be a concatenation of different identifiers, for example\nrepresenting an IRDI path etc.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Global_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to an external entity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Model_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='keys',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Key',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique references in their name space.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...),
        Property(
          name='referred_semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph><AttributeReference refuri="Has_semantics.semantic_id">Has_semantics.semantic_id</AttributeReference> of the referenced model element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='keys',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Key',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='referred_semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='keys',\n  argument='keys',\n  default=None)",
          "AssignArgument(\n  name='referred_semantic_id',\n  argument='referred_semantic_id',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='keys',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to a model element of the same or another AAS.</paragraph>',
        remarks=[
          '<paragraph>A model reference is an ordered list of keys, each key referencing an element.\nThe complete list of keys may for example be concatenated to a path that then gives\nunique access to an element.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Key',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Denote which kind of entity is referenced.</paragraph>',
            remarks=[
              '<paragraph>In case type = FragmentReference the key represents a bookmark or a similar local\nidentifier within its parent element as specified by the key that precedes this key.</paragraph>',
              '<paragraph>In all other cases the key references a model element of the same or of another AAS.\nThe name of the model element is explicitly listed.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Key',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The key value, for example an IRDI or an URI</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Key',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Key_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A key is a reference to an element by its ID.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Identifiable_elements',
      literals=[
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=5,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all identifiable elements within an asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Submodel_element_elements',
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data Element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Data_element">~Data_element</AttributeReference>\nthe reference may be a <SymbolReference refuri=".Property">.Property</SymbolReference>, a <SymbolReference refuri=".File">.File</SymbolReference> etc.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event element</paragraph>',
            remarks=[
              '<note><paragraph><SymbolReference refuri=".Event_element">.Event_element</SymbolReference> is abstract.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, i.e. if a key uses\n<AttributeReference refuri="Submodel_element">Submodel_element</AttributeReference> the reference may be a <SymbolReference refuri=".Property">.Property</SymbolReference>,\na <SymbolReference refuri=".Submodel_element_list">.Submodel_element_list</SymbolReference>, an <SymbolReference refuri=".Operation">.Operation</SymbolReference> etc.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=4,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all referable elements within an asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Referable_elements',
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Data_element">~Data_element</AttributeReference>\nthe reference may be a <SymbolReference refuri=".Property">.Property</SymbolReference>, a <SymbolReference refuri=".File">.File</SymbolReference> <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event.</paragraph>',
            remarks=[
              '<note><paragraph><SymbolReference refuri=".Event_element">.Event_element</SymbolReference> is abstract.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Submodel_element">~Submodel_element</AttributeReference>\nthe reference may be a <SymbolReference refuri=".Property">.Property</SymbolReference>, an <SymbolReference refuri=".Operation">.Operation</SymbolReference> <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Submodel_element_elements',
        'Reference to Enumeration Identifiable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all referable elements within an asset administration shell</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Key_elements',
      literals=[
        EnumerationLiteral(
          name='Fragment_reference',
          value='FragmentReference',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Bookmark or a similar local identifier of a subordinate part of\na primary resource</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Global_reference',
          value='GlobalReference',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Data_element">~Data_element</AttributeReference>\nthe reference may be a Property, a File <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event.</paragraph>',
            remarks=[
              '<note><paragraph><SymbolReference refuri=".Event_element">.Event_element</SymbolReference> is abstract.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Submodel_element">~Submodel_element</AttributeReference>\nthe reference may be a <SymbolReference refuri=".Property">.Property</SymbolReference>, an <SymbolReference refuri=".Operation">.Operation</SymbolReference> <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Referable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of different key value types within a key.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def_XSD',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          11,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration listing all xsd anySimpleTypes</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def_RDF',
      literals=[
        EnumerationLiteral(
          name='Lang_string',
          value='rdf:langString',
          description=EnumerationLiteralDescription(
            summary='<paragraph>String with a language tag</paragraph>',
            remarks=[
              '<note><paragraph>RDF requires IETF BCP 47  language tags, i.e. simple two-letter language tags\nfor Locales like “de” conformant to ISO 639-1 are allowed as well as language\ntags plus extension like “de-DE” for country code, dialect etc. like in “en-US”\nor “en-GB” for English (United Kingdom) and English (United States).\nIETF language tags are referencing ISO 639, ISO 3166 and ISO 15924.</paragraph></note>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          3],
        index=4,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration listing all RDF types</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Lang_string',
          value='rdf:langString',
          description=None,
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Data_type_def_XSD',
        'Reference to Enumeration Data_type_def_RDF'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>string with values of enumerations <SymbolReference refuri=".Data_type_def_XSD">.Data_type_def_XSD</SymbolReference>,\n<SymbolReference refuri=".Data_type_def_RDF">.Data_type_def_RDF</SymbolReference></paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Lang_string',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='language',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol BCP_47_language_tag',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Language tag conforming to BCP 47</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Lang_string',
          parsed=...),
        Property(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Text in the <AttributeReference refuri="~language">~language</AttributeReference></paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Lang_string',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='language',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol BCP_47_language_tag',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='text',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='STR',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='language',\n  argument='language',\n  default=None)",
          "AssignArgument(\n  name='text',\n  argument='text',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Strings with language tags</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Lang_string_set',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='lang_strings',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Strings in different languages</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Lang_string_set',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='lang_strings',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='lang_strings',\n  argument='lang_strings',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='lang_strings',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Lang_string_set',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='lang_strings_have_unique_languages',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='lang_strings',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass Lang_string_set',
          parsed=...)],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Array of elements of type langString</paragraph>',
        remarks=[
          '<note><paragraph>langString is a RDF data type.</paragraph></note>',
          '<paragraph>A langString is a string value tagged with a language code.\nIt depends on the serialization rules for a technology how\nthis is realized.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Environment',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_administration_shells',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Asset_administration_shell',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Asset administration shell</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='concept_descriptions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Concept_description',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Concept description</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_administration_shells',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Asset_administration_shell',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='concept_descriptions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Concept_description',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_administration_shells',\n  argument='asset_administration_shells',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=None)",
          "AssignArgument(\n  name='concept_descriptions',\n  argument='concept_descriptions',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Container for the sets of different identifiables.</paragraph>',
        remarks=[
          '<note><paragraph>w.r.t. file exchange: There is exactly one environment independent on how many\nfiles the contained elements are split. If the file is split then there\nshall be no element with the same identifier in two different files.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  symbols_topologically_sorted=[
    'Reference to symbol Has_data_specification',
    'Reference to symbol Administrative_information',
    'Reference to symbol Has_extensions',
    'Reference to symbol Referable',
    'Reference to symbol Has_kind',
    'Reference to symbol Has_semantics',
    'Reference to symbol Qualifiable',
    'Reference to symbol Submodel_element',
    'Reference to symbol Relationship_element',
    'Reference to symbol Annotated_relationship_element',
    'Reference to symbol Identifiable',
    'Reference to symbol Asset_administration_shell',
    'Reference to symbol Asset_information',
    'Reference to symbol BCP_47_language_tag',
    'Reference to symbol Event_element',
    'Reference to symbol Basic_event_element',
    'Reference to symbol Data_element',
    'Reference to symbol Blob',
    'Reference to symbol Blob_type',
    'Reference to symbol Capability',
    'Reference to symbol Concept_description',
    'Reference to symbol Non_empty_string',
    'Reference to symbol Content_type',
    'Reference to symbol Date_time_stamp_UTC',
    'Reference to symbol Entity',
    'Reference to symbol Environment',
    'Reference to symbol Event_payload',
    'Reference to symbol Extension',
    'Reference to symbol File',
    'Reference to symbol Reference',
    'Reference to symbol Global_reference',
    'Reference to symbol Identifier',
    'Reference to symbol Identifier_key_value_pair',
    'Reference to symbol Key',
    'Reference to symbol Lang_string',
    'Reference to symbol Lang_string_set',
    'Reference to symbol Model_reference',
    'Reference to symbol Multi_language_property',
    'Reference to symbol Operation',
    'Reference to symbol Operation_variable',
    'Reference to symbol Path_type',
    'Reference to symbol Property',
    'Reference to symbol Qualifier',
    'Reference to symbol Qualifier_type',
    'Reference to symbol Range',
    'Reference to symbol Reference_element',
    'Reference to symbol Resource',
    'Reference to symbol Submodel',
    'Reference to symbol Submodel_element_list',
    'Reference to symbol Submodel_element_struct',
    'Reference to symbol Value_data_type',
    'Reference to symbol View'],
  verification_functions=[
    PatternVerification(
      name='matches_xs_date_time_stamp_utc',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:dateTimeStamp</literal>.</paragraph>',
        remarks=[
          '<paragraph>The time zone must be fixed to UTC. We verify only that the <literal>text</literal> matches\na pre-defined pattern. We <emphasis>do not</emphasis> verify that the day of month is\ncorrect nor do we check for leap seconds.</paragraph>',
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp">https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)Z$'),
    ImplementationSpecificVerification(
      name='is_xs_date_time_stamp_utc',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> is a <literal>xs:dateTimeStamp</literal> with time zone set to UTC.</paragraph>',
        remarks=[
          '<paragraph>The <literal>text</literal> is assumed to match a pre-defined pattern for <literal>xs:dateTimeStamp</literal> with\nthe time zone set to UTC. In this function, we check for days of month (<emphasis>e.g.</emphasis>,\nFebruary 29th).</paragraph>',
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp">https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> is a valid <literal>xs:dateTimeStamp</literal> in UTC</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    PatternVerification(
      name='matches_MIME_type',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of MIME type.</paragraph>',
        remarks=[
          '<paragraph>The definition has been taken from:\n<reference refuri="https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1">https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1</reference>,\n<reference refuri="https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3">https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3</reference> and\n<reference refuri="https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6">https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6</reference>.</paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+|"(([\t !#-\\[\\]-~]|[\\x80-\\xff])|\\\\([\t !-~]|[\\x80-\\xff]))*"))*$'),
    PatternVerification(
      name='matches_RFC_8089_path',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> is a path conforming to the pattern of RFC 8089.</paragraph>',
        remarks=[
          '<paragraph>The definition has been taken from:\n<reference refuri="https://datatracker.ietf.org/doc/html/rfc8089">https://datatracker.ietf.org/doc/html/rfc8089</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern="^file:(//((localhost|(\\[((([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|([0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){4}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){3}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){2}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){2}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){4}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(([0-9A-Fa-f]{1,4}:){6}[0-9A-Fa-f]{1,4})?::)|[vV][0-9A-Fa-f]+\\.([a-zA-Z0-9\\-._~]|[!$&'()*+,;=]|:)+)\\]|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=])*)))?/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?|/((([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/(([a-zA-Z0-9\\-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?)$"),
    PatternVerification(
      name='matches_BCP_47',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> is a valid BCP 47 language tag.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://en.wikipedia.org/wiki/IETF_language_tag">https://en.wikipedia.org/wiki/IETF_language_tag</reference></paragraph>'],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){2})?|[a-zA-Z]{4}|[a-zA-Z]{5,8})(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-(([a-zA-Z0-9]){5,8}|[0-9]([a-zA-Z0-9]){3}))*(-[0-9A-WY-Za-wy-z](-([a-zA-Z0-9]){2,8})+)*(-[xX](-([a-zA-Z0-9]){1,8})+)?|[xX](-([a-zA-Z0-9]){1,8})+|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$'),
    ImplementationSpecificVerification(
      name='lang_strings_have_unique_languages',
      arguments=[
        Argument(
          name='lang_strings',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the <ArgumentReference refuri="lang_strings">lang_strings</ArgumentReference> do not have overlapping\n<AttributeReference refuri="~Lang_string.language">~Lang_string.language</AttributeReference>\'s</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='qualifier_types_are_unique',
      arguments=[
        Argument(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>\'s of <ArgumentReference refuri="qualifiers">qualifiers</ArgumentReference> are unique.</paragraph>',
        remarks=[],
        arguments_by_name=[
          [
            'qualifiers',
            '<field_body><paragraph>to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if all <AttributeReference refuri="~Qualifier.type">~Qualifier.type</AttributeReference>\'s are unique</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    PatternVerification(
      name='matches_xs_any_URI',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:anyURI</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#anyURI">https://www.w3.org/TR/xmlschema11-2/#anyURI</reference> and\n<reference refuri="https://datatracker.ietf.org/doc/html/rfc3987">https://datatracker.ietf.org/doc/html/rfc3987</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern="^([a-zA-Z][a-zA-Z0-9+\\-.]*:(//((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:)*@)?(\\[((([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|([0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){4}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){3}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){2}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){2}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){4}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(([0-9A-Fa-f]{1,4}:){6}[0-9A-Fa-f]{1,4})?::)|[vV][0-9A-Fa-f]+\\.([a-zA-Z0-9\\-._~]|[!$&'()*+,;=]|:)+)\\]|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=])*)(:[0-9]*)?(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*|/(((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?|((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*|((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])){0})(\\?((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])|[\\ue000-\\uf8ff\\uf0000-\\uffffd\\u100000-\\u10fffd]|[/?])*)?(\\#((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])|[/?])*)?|(//((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:)*@)?(\\[((([0-9A-Fa-f]{1,4}:){6}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::([0-9A-Fa-f]{1,4}:){5}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|([0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){4}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){3}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){2}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:){2}([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){4}[0-9A-Fa-f]{1,4})?::([0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]{1,4}:){5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(([0-9A-Fa-f]{1,4}:){6}[0-9A-Fa-f]{1,4})?::)|[vV][0-9A-Fa-f]+\\.([a-zA-Z0-9\\-._~]|[!$&'()*+,;=]|:)+)\\]|([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=])*)(:[0-9]*)?(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*|/(((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))+(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*)?|(([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|@)+(/((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@]))*)*|((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])){0})(\\?((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])|[\\ue000-\\uf8ff\\uf0000-\\uffffd\\u100000-\\u10fffd]|[/?])*)?(\\#((([a-zA-Z0-9\\-._~]|[\\xa0-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\uffef\\u10000-\\u1fffd\\u20000-\\u2fffd\\u30000-\\u3fffd\\u40000-\\u4fffd\\u50000-\\u5fffd\\u60000-\\u6fffd\\u70000-\\u7fffd\\u80000-\\u8fffd\\u90000-\\u9fffd\\ua0000-\\uafffd\\ub0000-\\ubfffd\\uc0000-\\ucfffd\\ud0000-\\udfffd\\ue1000-\\uefffd])|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|[:@])|[/?])*)?)$"),
    PatternVerification(
      name='matches_xs_base_64_binary',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:base64Binary</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#base64Binary">https://www.w3.org/TR/xmlschema11-2/#base64Binary</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(([A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?)*(([A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?[A-Za-z0-9+/])|[A-Za-z0-9+/]\\x20?[A-Za-z0-9+/]\\x20?[AEIMQUYcgkosw048]\\x20?=|[A-Za-z0-9+/]\\x20?[AQgw]\\x20?= ?=))?$'),
    PatternVerification(
      name='matches_xs_boolean',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:boolean</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#boolean">https://www.w3.org/TR/xmlschema11-2/#boolean</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(true|false|1|0)$'),
    PatternVerification(
      name='matches_xs_date',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:date</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#date">https://www.w3.org/TR/xmlschema11-2/#date</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))(Z|(\\+|-)(0[0-9]|1[0-3]):[0-5][0-9]|14:00)?$'),
    PatternVerification(
      name='matches_xs_date_time',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:dateTime</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#dateTime">https://www.w3.org/TR/xmlschema11-2/#dateTime</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|(\\+|-)(0[0-9]|1[0-3]):[0-5][0-9]|14:00)?$'),
    PatternVerification(
      name='matches_xs_date_time_stamp',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:dateTimeStamp</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp">https://www.w3.org/TR/xmlschema11-2/#dateTimeStamp</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?(([1-9][0-9][0-9][0-9]+)|(0[0-9][0-9][0-9]))-((0[1-9])|(1[0-2]))-((0[1-9])|([12][0-9])|(3[01]))T(((([01][0-9])|(2[0-3])):[0-5][0-9]:([0-5][0-9])(\\.[0-9]+)?)|24:00:00(\\.0+)?)(Z|(\\+|-)(0[0-9]|1[0-3]):[0-5][0-9]|14:00)$'),
    PatternVerification(
      name='matches_xs_decimal',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:decimal</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#decimal">https://www.w3.org/TR/xmlschema11-2/#decimal</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^((\\+|-)?([0-9]+\\.[0-9]+|\\.[0-9]+)|(\\+|-)?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_double',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:double</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#double">https://www.w3.org/TR/xmlschema11-2/#double</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN$'),
    PatternVerification(
      name='matches_xs_duration',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:duration</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#duration">https://www.w3.org/TR/xmlschema11-2/#duration</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?P((([0-9]+Y([0-9]+M)?([0-9]+D)?|([0-9]+M)([0-9]+D)?|([0-9]+D))(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$'),
    PatternVerification(
      name='matches_xs_float',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:float</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#float">https://www.w3.org/TR/xmlschema11-2/#float</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN$'),
    PatternVerification(
      name='matches_xs_g_day',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:gDay</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#gDay">https://www.w3.org/TR/xmlschema11-2/#gDay</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^---(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_g_month',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:gMonth</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#gMonth">https://www.w3.org/TR/xmlschema11-2/#gMonth</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^--(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_g_month_day',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:gMonthDay</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#gMonthDay">https://www.w3.org/TR/xmlschema11-2/#gMonthDay</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^--(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_g_year',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:gYear</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#gYear">https://www.w3.org/TR/xmlschema11-2/#gYear</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?([1-9][0-9]{3,}|0[0-9]{3})(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_g_year_month',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:gYearMonth</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#gYearMonth">https://www.w3.org/TR/xmlschema11-2/#gYearMonth</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_hex_binary',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:hexBinary</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#hexBinary">https://www.w3.org/TR/xmlschema11-2/#hexBinary</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^([0-9a-fA-F]{2})*$'),
    PatternVerification(
      name='matches_xs_time',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:time</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#time">https://www.w3.org/TR/xmlschema11-2/#time</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?|(24:00:00(\\.0+)?))(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))?$'),
    PatternVerification(
      name='matches_xs_day_time_duration',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:dayTimeDuration</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#dayTimeDuration">https://www.w3.org/TR/xmlschema11-2/#dayTimeDuration</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?P((([0-9]+D)(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S)))?)|(T(([0-9]+H)([0-9]+M)?([0-9]+(\\.[0-9]+)?S)?|([0-9]+M)([0-9]+(\\.[0-9]+)?S)?|([0-9]+(\\.[0-9]+)?S))))$'),
    PatternVerification(
      name='matches_xs_year_month_duration',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:yearMonthDuration</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#yearMonthDuration">https://www.w3.org/TR/xmlschema11-2/#yearMonthDuration</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^-?P((([0-9]+Y)([0-9]+M)?)|([0-9]+M))$'),
    PatternVerification(
      name='matches_xs_integer',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:integer</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#integer">https://www.w3.org/TR/xmlschema11-2/#integer</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^[\\-+]?[0-9]+$'),
    PatternVerification(
      name='matches_xs_long',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:long</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#long">https://www.w3.org/TR/xmlschema11-2/#long</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^[\\-+]?[0-9]+$'),
    PatternVerification(
      name='matches_xs_int',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:int</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#int">https://www.w3.org/TR/xmlschema11-2/#int</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^[\\-+]?[0-9]+$'),
    PatternVerification(
      name='matches_xs_short',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:short</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#short">https://www.w3.org/TR/xmlschema11-2/#short</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^[\\-+]?[0-9]+$'),
    PatternVerification(
      name='matches_xs_byte',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:byte</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#byte">https://www.w3.org/TR/xmlschema11-2/#byte</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^[\\-+]?[0-9]+$'),
    PatternVerification(
      name='matches_xs_non_negative_integer',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:nonNegativeInteger</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger">https://www.w3.org/TR/xmlschema11-2/#nonNegativeInteger</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0|\\+?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_positive_integer',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:positiveInteger</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#positiveInteger">https://www.w3.org/TR/xmlschema11-2/#positiveInteger</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^\\+?0*[1-9][0-9]*$'),
    PatternVerification(
      name='matches_xs_unsigned_long',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:unsignedLong</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#unsignedLong">https://www.w3.org/TR/xmlschema11-2/#unsignedLong</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0|\\+?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_unsigned_int',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:unsignedInt</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#unsignedInt">https://www.w3.org/TR/xmlschema11-2/#unsignedInt</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0|\\+?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_unsigned_short',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:unsignedShort</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#unsignedShort">https://www.w3.org/TR/xmlschema11-2/#unsignedShort</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0|\\+?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_unsigned_byte',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:unsignedByte</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#unsignedByte">https://www.w3.org/TR/xmlschema11-2/#unsignedByte</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0|\\+?[0-9]+)$'),
    PatternVerification(
      name='matches_xs_non_positive_integer',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:nonPositiveInteger</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#nonPositiveInteger">https://www.w3.org/TR/xmlschema11-2/#nonPositiveInteger</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(\\+0|0|-[0-9]+)$'),
    PatternVerification(
      name='matches_xs_negative_integer',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of an <literal>xs:negativeInteger</literal>.</paragraph>',
        remarks=[
          '<paragraph>See: <reference refuri="https://www.w3.org/TR/xmlschema11-2/#negativeInteger">https://www.w3.org/TR/xmlschema11-2/#negativeInteger</reference></paragraph>'],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='^(-0*[1-9][0-9]*)$'),
    ImplementationSpecificVerification(
      name='value_consistent_with_xsd_type',
      arguments=[
        Argument(
          name='value',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the <ArgumentReference refuri="value">value</ArgumentReference> conforms to its <ArgumentReference refuri="value_type">value_type</ArgumentReference>.</paragraph>',
        remarks=[],
        arguments_by_name=[
          [
            'value',
            '<field_body><paragraph>which needs to conform</paragraph></field_body>'],
          [
            'value_type',
            '<field_body><paragraph>pre-defined value type</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="value">value</ArgumentReference> conforms</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='is_model_reference_to',
      arguments=[
        Argument(
          name='reference',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='expected_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the target of the model reference matches the expected <literal>target</literal>.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='id_shorts_are_unique',
      arguments=[
        Argument(
          name='namespace',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Referable',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the <AttributeReference refuri="~Referable.id_short">~Referable.id_short</AttributeReference>\'s in the <ArgumentReference refuri="namespace">namespace</ArgumentReference> are\nunique.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='extension_names_are_unique',
      arguments=[
        Argument(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the extension names are unique.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='submodel_elements_have_identical_semantic_ids',
      arguments=[
        Argument(
          name='elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that all semantic IDs are identical, if specified.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='submodel_element_is_of_type',
      arguments=[
        Argument(
          name='element',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element',
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='element_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element_elements',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the run-time type of the <ArgumentReference refuri="element">element</ArgumentReference> coincides with\n<ArgumentReference refuri="element_type">element_type</ArgumentReference>.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='properties_or_ranges_have_value_type',
      arguments=[
        Argument(
          name='elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that all the <ArgumentReference refuri="elements">elements</ArgumentReference> have the <ArgumentReference refuri="value_type">value_type</ArgumentReference>.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...),
    ImplementationSpecificVerification(
      name='concept_description_category_is_valid',
      arguments=[
        Argument(
          name='category',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the <ArgumentReference refuri="category">category</ArgumentReference> is a valid category for\na <SymbolReference refuri=".Concept_description">.Concept_description</SymbolReference>.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...)],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=MetaModelDescription(
      summary='<paragraph>Provide the meta model for Asset Administration Shell V3.0 Release Candidate 2.</paragraph>',
      remarks=[
        '<paragraph>We could not implement the following constraints since they depend on registry\nand can not be verified without it:</paragraph>',
        '<bullet_list bullet="*"><list_item><paragraph><ConstraintReference refuri="AASd-006">AASd-006</ConstraintReference></paragraph></list_item><list_item><paragraph><ConstraintReference refuri="AASd-007">AASd-007</ConstraintReference></paragraph></list_item><list_item><paragraph><ConstraintReference refuri="AASd-064">AASd-064</ConstraintReference></paragraph></list_item></bullet_list>',
        '<paragraph>Some of the constraints are not enforceable as they depend on the wider context\nsuch as language understanding, so we could not formalize them:</paragraph>',
        '<bullet_list bullet="*"><list_item><paragraph><ConstraintReference refuri="AASd-012">AASd-012</ConstraintReference></paragraph></list_item></bullet_list>',
        '<paragraph>We could not formalize the constraints which prescribed how to deal with\nthe default values as the semantic of the default values has not been defined\nin the meta-model:</paragraph>',
        '<bullet_list bullet="*"><list_item><paragraph><ConstraintReference refuri="AASd-115">AASd-115</ConstraintReference></paragraph></list_item></bullet_list>'],
      constraints_by_identifier=[],
      parsed=...),
    book_url='__book_url__',
    book_version='__book_version__'))