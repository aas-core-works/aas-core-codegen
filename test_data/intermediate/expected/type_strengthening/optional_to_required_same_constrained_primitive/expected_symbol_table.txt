SymbolTable(
  our_types=[
    ConstrainedPrimitive(
      name='SomeConstrainedPrimitive',
      inheritances=[],
      inheritance_id_set=...,
      ancestors=[],
      ancestor_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description='Length more than 10 characters',
          body=textwrap.dedent("""\
            Comparison(
              left=FunctionCall(
                name='len',
                args=[
                  Name(
                    identifier='self',
                    original_node=...)],
                original_node=...),
              op='GT',
              right=Constant(
                value=10,
                original_node=...),
              original_node=...)"""),
          specified_for='Reference to ConstrainedPrimitive SomeConstrainedPrimitive',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=None,
      parsed=...),
    AbstractClass(
      name='Abstract',
      inheritances=[],
      inheritance_id_set=...,
      ancestors=[],
      ancestor_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Abstract',
        name='Abstract',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Concrete'],
        properties=[
          Property(
            name='some_property',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                our_type='Reference to our type SomeConstrainedPrimitive',
                parsed=...),
              parsed=...),
            description=None,
            specified_for='Reference to AbstractClass Abstract',
            strengthening_of=None,
            parsed=...)],
        signatures=[],
        description=None,
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Concrete'],
      properties=[
        Property(
          name='some_property',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              our_type='Reference to our type SomeConstrainedPrimitive',
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass Abstract',
          strengthening_of=None,
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='some_property',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                our_type='Reference to our type SomeConstrainedPrimitive',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='some_property',
              argument='some_property',
              default=None)""")],
        inlined_statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='some_property',
              argument='some_property',
              default=None)""")]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Concrete',
      inheritances=[
        'Reference to AbstractClass Abstract'],
      inheritance_id_set=...,
      ancestors=[
        'Reference to AbstractClass Abstract'],
      ancestor_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='some_property',
          type_annotation=OurTypeAnnotation(
            our_type='Reference to our type SomeConstrainedPrimitive',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Concrete',
          strengthening_of='Reference to Property some_property from the class Abstract',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='some_property',
            type_annotation=OurTypeAnnotation(
              our_type='Reference to our type SomeConstrainedPrimitive',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          textwrap.dedent("""\
            CallSuperConstructor(
              super_name='Abstract')""")],
        inlined_statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='some_property',
              argument='some_property',
              default=None)""")]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  our_types_topologically_sorted=[
    'Reference to our type Abstract',
    'Reference to our type Concrete',
    'Reference to our type SomeConstrainedPrimitive'],
  constants=[],
  constants_by_name=...,
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    book_url='dummy',
    book_version='dummy',
    xml_namespace='https://dummy.com'))