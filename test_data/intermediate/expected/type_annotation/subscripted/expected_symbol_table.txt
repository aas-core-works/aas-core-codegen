SymbolTable(
  symbols=[
    ConcreteClass(
      name='SomeConcreteClass',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent something.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='SomeContainerClass',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='x',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol SomeConcreteClass',
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass SomeContainerClass',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='x',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol SomeConcreteClass',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='x',
              argument='x',
              default=None)""")]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  symbols_topologically_sorted=[
    'Reference to symbol SomeConcreteClass',
    'Reference to symbol SomeContainerClass'],
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    book_url='__book_url__',
    book_version='__book_version__'))