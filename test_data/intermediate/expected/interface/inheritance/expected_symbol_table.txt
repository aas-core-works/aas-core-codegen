SymbolTable(
  symbols=[
    AbstractClass(
      name='VeryAbstract',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass VeryAbstract',
        name='VeryAbstract',
        inheritances=[],
        implementers=[],
        properties=[
          Property(
            name='some_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            description=None,
            specified_for='Reference to AbstractClass VeryAbstract',
            parsed=...)],
        signatures=[
          Signature(
            name='some_func',
            arguments=[],
            returns=None,
            description=None,
            contracts=Contracts(
              preconditions=[],
              snapshots=[],
              postconditions=[]),
            parsed=...,
            arguments_by_name=...)],
        description=None,
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='some_property',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass VeryAbstract',
          parsed=...)],
      methods=[
        UnderstoodMethod(
          name='some_func',
          arguments=[],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          parsed=...,
          body=[],
          arguments_by_name=...)],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='some_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[
            Contract(
              args=[
                'some_property'],
              description=None,
              body="Comparison(\n  left=Name(\n    identifier='some_property',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=0,\n    original_node=...),\n  original_node=...)",
              parsed=...)],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='some_property',\n  argument='some_property',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Abstract',
      inheritances=[
        'Reference to AbstractClass VeryAbstract'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Abstract',
        name='Abstract',
        inheritances=[
          'Reference to Interface VeryAbstract'],
        implementers=[],
        properties=[
          Property(
            name='some_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            description=None,
            specified_for='Reference to AbstractClass VeryAbstract',
            parsed=...),
          Property(
            name='another_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            description=None,
            specified_for='Reference to AbstractClass Abstract',
            parsed=...)],
        signatures=[
          Signature(
            name='some_func',
            arguments=[],
            returns=None,
            description=None,
            contracts=Contracts(
              preconditions=[],
              snapshots=[],
              postconditions=[]),
            parsed=...,
            arguments_by_name=...),
          Signature(
            name='another_func',
            arguments=[],
            returns=None,
            description=None,
            contracts=Contracts(
              preconditions=[],
              snapshots=[],
              postconditions=[]),
            parsed=...,
            arguments_by_name=...)],
        description=None,
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='some_property',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass VeryAbstract',
          parsed=...),
        Property(
          name='another_property',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass Abstract',
          parsed=...)],
      methods=[
        UnderstoodMethod(
          name='some_func',
          arguments=[],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          parsed=...,
          body=[],
          arguments_by_name=...),
        UnderstoodMethod(
          name='another_func',
          arguments=[],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          parsed=...,
          body=[],
          arguments_by_name=...)],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='some_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='another_property',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[
            Contract(
              args=[
                'some_property'],
              description=None,
              body="Comparison(\n  left=Name(\n    identifier='some_property',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=0,\n    original_node=...),\n  original_node=...)",
              parsed=...),
            Contract(
              args=[
                'another_property'],
              description=None,
              body="Comparison(\n  left=Name(\n    identifier='another_property',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=0,\n    original_node=...),\n  original_node=...)",
              parsed=...)],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='some_property',\n  argument='some_property',\n  default=None)",
          "AssignArgument(\n  name='another_property',\n  argument='another_property',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  symbols_topologically_sorted=[
    'Reference to symbol VeryAbstract',
    'Reference to symbol Abstract'],
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    book_url='__book_url__',
    book_version='__book_version__'))