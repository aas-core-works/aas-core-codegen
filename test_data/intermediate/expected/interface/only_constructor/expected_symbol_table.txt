SymbolTable(
  our_types=[
    AbstractClass(
      name='SomethingAbstract',
      inheritances=[],
      inheritance_id_set=...,
      ancestors=[],
      ancestor_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass SomethingAbstract',
        name='SomethingAbstract',
        inheritances=[],
        implementers=[],
        properties=[
          Property(
            name='x',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            description=None,
            specified_for='Reference to AbstractClass SomethingAbstract',
            parsed=...)],
        signatures=[],
        description=None,
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      descendants=[],
      concrete_descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='x',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass SomethingAbstract',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='x',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='x',
              argument='x',
              default=None)""")],
        inlined_statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='x',
              argument='x',
              default=None)""")]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      method_id_set=...,
      invariant_id_set=...)],
  our_types_topologically_sorted=[
    'Reference to our type SomethingAbstract'],
  enumerations=[],
  constrained_primitives=[],
  concrete_classes=[],
  constants=[],
  constants_by_name=...,
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    version='dummy',
    xml_namespace='https://dummy.com'))