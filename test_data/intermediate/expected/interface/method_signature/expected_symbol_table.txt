SymbolTable(
  our_types=[
    AbstractClass(
      name='SomethingAbstract',
      inheritances=[],
      inheritance_id_set=...,
      ancestors=[],
      ancestor_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass SomethingAbstract',
        name='SomethingAbstract',
        inheritances=[],
        implementers=[],
        properties=[],
        signatures=[
          Signature(
            name='some_func',
            arguments=[
              Argument(
                name='x',
                type_annotation=PrimitiveTypeAnnotation(
                  a_type='INT',
                  parsed=...),
                default=None,
                parsed=...)],
            returns=PrimitiveTypeAnnotation(
              a_type='BOOL',
              parsed=...),
            description=None,
            contracts=Contracts(
              preconditions=[
                Contract(
                  args=[
                    'x'],
                  description=None,
                  body=textwrap.dedent("""\
                    Comparison(
                      left=Name(
                        identifier='x',
                        original_node=...),
                      op='GT',
                      right=Constant(
                        value=0,
                        original_node=...),
                      original_node=...)"""),
                  parsed=...)],
              snapshots=[],
              postconditions=[]),
            parsed=...,
            arguments_by_name=...)],
        description=None,
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      descendants=[],
      concrete_descendant_id_set=...,
      concrete_descendants=[],
      properties=[],
      methods=[
        UnderstoodMethod(
          name='some_func',
          arguments=[
            Argument(
              name='x',
              type_annotation=PrimitiveTypeAnnotation(
                a_type='INT',
                parsed=...),
              default=None,
              parsed=...)],
          returns=PrimitiveTypeAnnotation(
            a_type='BOOL',
            parsed=...),
          description=None,
          specified_for='Reference to AbstractClass SomethingAbstract',
          contracts=Contracts(
            preconditions=[
              Contract(
                args=[
                  'x'],
                description=None,
                body=textwrap.dedent("""\
                  Comparison(
                    left=Name(
                      identifier='x',
                      original_node=...),
                    op='GT',
                    right=Constant(
                      value=0,
                      original_node=...),
                    original_node=...)"""),
                parsed=...)],
            snapshots=[],
            postconditions=[]),
          non_mutating=False,
          parsed=...,
          body=[],
          arguments_by_name=...)],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[],
        inlined_statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      method_id_set=...,
      invariant_id_set=...)],
  our_types_topologically_sorted=[
    'Reference to our type SomethingAbstract'],
  enumerations=[],
  constrained_primitives=[],
  concrete_classes=[],
  constants=[],
  constants_by_name=...,
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    version='dummy',
    xml_namespace='https://dummy.com'))