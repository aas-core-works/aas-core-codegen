SymbolTable(
  symbols=[
    ConstrainedPrimitive(
      name='Non_empty_string',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=Description(
        document=...,
        node=...),
      parsed=...),
    ConstrainedPrimitive(
      name='MIME_typed',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive MIME_typed',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=Description(
        document=...,
        node=...),
      parsed=...),
    AbstractClass(
      name='Has_semantics',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_semantics',
        name='Has_semantics',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass Extension',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Identifier_key_value_pair',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Qualifier',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass Extension',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Identifier_key_value_pair',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Qualifier',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          6],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Extension',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='name',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='refers_to',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='name',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='refers_to',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='name',\n  argument='name',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='refers_to',\n  argument='refers_to',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          1],
        index=2,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_extensions',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_extensions',
        name='Has_extensions',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          1],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Referable',
      inheritances=[
        'Reference to AbstractClass Has_extensions'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Referable',
        name='Referable',
        inheritances=[
          'Reference to Interface Has_extensions'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          2],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Identifiable',
      inheritances=[
        'Reference to AbstractClass Referable'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Identifiable',
        name='Identifiable',
        inheritances=[
          'Reference to Interface Referable'],
        implementers=[
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Submodel'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...),
          Property(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Submodel'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          3],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Modeling_kind',
      literals=[
        EnumerationLiteral(
          name='Template',
          value='TEMPLATE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='INSTANCE',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          4],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    AbstractClass(
      name='Has_kind',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_kind',
        name='Has_kind',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          4],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_data_specification',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_data_specification',
        name='Has_data_specification',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Administrative_information',
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Administrative_information',
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          12],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Administrative_information',
      inheritances=[
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='version',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...),
        Property(
          name='revision',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='version',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='revision',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='version',\n  argument='version',\n  default=None)",
          "AssignArgument(\n  name='revision',\n  argument='revision',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-005',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='revision',\n      original_node=...),\n    original_node=...),\n  consequent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='version',\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          5],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Constraint',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Constraint',
        name='Constraint',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Formula',
          'Reference to ConcreteClass Qualifier'],
        properties=[],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Formula',
        'Reference to ConcreteClass Qualifier'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          8],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Qualifiable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Qualifiable',
        name='Qualifiable',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Constraint',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          7],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Qualifier',
      inheritances=[
        'Reference to AbstractClass Constraint',
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          10],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Formula',
      inheritances=[
        'Reference to AbstractClass Constraint'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='depends_on',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Formula',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='depends_on',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='depends_on',\n  argument='depends_on',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          2,
          11],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_administration_shell',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='derived_from',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='asset_information',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_information',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='asset_information',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_information',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='derived_from',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Model_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='derived_from',\n  argument='derived_from',\n  default=None)",
          "AssignArgument(\n  name='asset_information',\n  argument='asset_information',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=None)"]),
      invariants=[
        Invariant(
          description='derived_from points to an Asset Administration Shell',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='derived_from',\n      original_node=...),\n    original_node=...),\n  consequent=FunctionCall(\n    name='is_model_reference_to',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='derived_from',\n        original_node=...),\n      Member(\n        instance=Name(\n          identifier='Key_elements',\n          original_node=...),\n        name='Submodel',\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Invariant(
          description='Submodel references point to a submodel',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='submodels',\n      original_node=...),\n    original_node=...),\n  consequent=All(\n    for_each=ForEach(\n      variable=Name(\n        identifier='submodel',\n        original_node=...),\n      iteration=Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='submodels',\n        original_node=...),\n      original_node=...),\n    condition=FunctionCall(\n      name='is_model_reference_to',\n      args=[\n        Name(\n          identifier='submodel',\n          original_node=...),\n        Member(\n          instance=Name(\n            identifier='Key_elements',\n            original_node=...),\n          name='Submodel',\n          original_node=...)],\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          3],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_information',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_kind',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_kind',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='global_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='specific_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='default_thumbnail',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol File',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_kind',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_kind',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='global_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='default_thumbnail',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol File',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_kind',\n  argument='asset_kind',\n  default=None)",
          "AssignArgument(\n  name='global_asset_ID',\n  argument='global_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_ID',\n  argument='specific_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='default_thumbnail',\n  argument='default_thumbnail',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          4],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Asset_kind',
      literals=[
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='Instance',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          4],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Identifier_key_value_pair',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='key',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='external_subject_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='key',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='external_subject_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='key',\n  argument='key',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='external_subject_ID',\n  argument='external_subject_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          4],
        index=2,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='submodel_elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodel_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='submodel_elements',\n  argument='submodel_elements',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          5],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Submodel_element',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Submodel_element',
        name='Submodel_element',
        inheritances=[
          'Reference to Interface Referable',
          'Reference to Interface Has_kind',
          'Reference to Interface Has_semantics',
          'Reference to Interface Qualifiable',
          'Reference to Interface Has_data_specification'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Constraint',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          6],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Relationship_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Relationship_element',
        name='Relationship_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Constraint',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...),
          Property(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...),
          Property(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          14],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_list',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='submodel_element_type_values',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_elements',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='values',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='semantic_ID_values',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='value_type_values',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='submodel_element_type_values',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='values',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID_values',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type_values',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='submodel_element_type_values',\n  argument='submodel_element_type_values',\n  default=None)",
          "AssignArgument(\n  name='values',\n  argument='values',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='semantic_ID_values',\n  argument='semantic_ID_values',\n  default=None)",
          "AssignArgument(\n  name='value_type_values',\n  argument='value_type_values',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          15],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_struct',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='values',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Submodel_element_struct',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='values',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='values',\n  argument='values',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          16],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Data_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Data_element',
        name='Data_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Constraint',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          5],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          11],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Multi_language_property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          9],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Range',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='min',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='max',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='min',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='max',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='min',\n  argument='min',\n  default=None)",
          "AssignArgument(\n  name='max',\n  argument='max',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          12],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Reference_element',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Reference_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          13],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Blob',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='MIME_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol MIME_typed',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=PrimitiveTypeAnnotation(
              a_type='BYTEARRAY',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='MIME_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol MIME_typed',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=PrimitiveTypeAnnotation(
                a_type='BYTEARRAY',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='MIME_type',\n  argument='MIME_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='MIME_type',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass Blob',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          4],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='File',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='MIME_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol MIME_typed',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='MIME_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol MIME_typed',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='MIME_type',\n  argument='MIME_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='MIME_type',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass File',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          8],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Annotated_relationship_element',
      inheritances=[
        'Reference to AbstractClass Relationship_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='annotation',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Data_element',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Annotated_relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='annotation',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Data_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)",
          "AssignArgument(\n  name='annotation',\n  argument='annotation',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          1],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Entity_type',
      literals=[
        EnumerationLiteral(
          name='Co_managed_entity',
          value='COMANAGEDENTITY',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Self_managed_entity',
          value='SELFMANAGEDENTITY',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          6],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Entity',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='entity_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Entity_type',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='statements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='global_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='specific_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='entity_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Entity_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='statements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='global_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='statements',\n  argument='statements',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='entity_type',\n  argument='entity_type',\n  default=None)",
          "AssignArgument(\n  name='global_asset_ID',\n  argument='global_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_ID',\n  argument='specific_asset_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          6],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Event',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Event',
        name='Event',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Basic_Event'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Constraint',
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=Description(
              document=...,
              node=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Basic_Event'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          7],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Basic_Event',
      inheritances=[
        'Reference to AbstractClass Event'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='observed',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Basic_Event',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='observed',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='observed',\n  argument='observed',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          2],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='input_variables',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Operation_variable',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='output_variables',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Operation_variable',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='inoutput_variables',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Operation_variable',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='input_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='output_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='inoutput_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='input_variables',\n  argument='input_variables',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='output_variables',\n  argument='output_variables',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='inoutput_variables',\n  argument='inoutput_variables',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          10],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation_variable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Operation_variable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          10],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Capability',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Constraint',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Constraint',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          3],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Concept_description',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='is_case_of',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Concept_description',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='is_case_of',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='is_case_of',\n  argument='is_case_of',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          8],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='View',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='contained_elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass View',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='contained_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=None)",
          "AssignArgument(\n  name='contained_elements',\n  argument='contained_elements',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          9],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Reference',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Reference',
        name='Reference',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Global_reference',
          'Reference to ConcreteClass Model_reference'],
        properties=[],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Global_reference',
        'Reference to ConcreteClass Model_reference'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Global_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='values',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Global_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='values',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='values',\n  argument='values',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='values',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Global_reference',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Model_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='keys',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Key',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...),
        Property(
          name='referred_semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='keys',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Key',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='referred_semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='keys',\n  argument='keys',\n  default=None)",
          "AssignArgument(\n  name='referred_semantic_ID',\n  argument='referred_semantic_ID',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='keys',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=2,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Key',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Key',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Key',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Key_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=1,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Identifiable_elements',
      literals=[
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          11],
        index=8,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Referable_elements',
      literals=[
        EnumerationLiteral(
          name='Access_permission_rule',
          value='AccessPermissionRule',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Identifiable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=3,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Key_elements',
      literals=[
        EnumerationLiteral(
          name='Fragment_reference',
          value='FragmentReference',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Access_permission_rule',
          value='AccessPermissionRule',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Global_reference',
          value='GlobalReference',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Referable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=2,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Submodel_elements',
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          10],
        index=7,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Build_in_list_types',
      literals=[
        EnumerationLiteral(
          name='Entities',
          value='ENTITIES',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='ID_refs',
          value='IDREFS',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='N_M_tokens',
          value='NMTOKENS',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          1],
        index=1,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Decimal_build_in_types',
      literals=[
        EnumerationLiteral(
          name='Integer',
          value='integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_integer',
          value='unsignedInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='negativeInteger',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          1],
        index=2,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Duration_build_in_types',
      literals=[
        EnumerationLiteral(
          name='Day_time_duration',
          value='dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='yearMonthDuration',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          1],
        index=3,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Primitive_types',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hey_binary',
          value='heyBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Notation',
          value='NOTATION',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Q_name',
          value='QName',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='time',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          1],
        index=4,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='String_build_in_types',
      literals=[
        EnumerationLiteral(
          name='Normalized_string',
          value='normalizedString',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Token',
          value='token',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Language',
          value='Language',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='N_C_name',
          value='NCName',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='ENTITY',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='ID',
          value='ID',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='IDREF',
          value='IDREF',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          1],
        index=5,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def',
      literals=[
        EnumerationLiteral(
          name='Entities',
          value='ENTITIES',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='ID_refs',
          value='IDREFS',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='N_M_tokens',
          value='NMTOKENS',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_integer',
          value='unsignedInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='negativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Any_URI',
          value='anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hey_binary',
          value='heyBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Notation',
          value='NOTATION',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Q_name',
          value='QName',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Normalized_string',
          value='normalizedString',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Token',
          value='token',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Language',
          value='Language',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='N_C_name',
          value='NCName',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='ENTITY',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='ID',
          value='ID',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='IDREF',
          value='IDREF',
          description=None,
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Build_in_list_types',
        'Reference to Enumeration Decimal_build_in_types',
        'Reference to Enumeration Duration_build_in_types',
        'Reference to Enumeration Primitive_types',
        'Reference to Enumeration String_build_in_types'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          2],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Lang_string_set',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=True,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          12,
          2],
        index=2,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Data_specification_content',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Data_specification_content',
        name='Data_specification_content',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Data_specification_IEC61360',
          'Reference to ConcreteClass Data_specification_physical_unit'],
        properties=[],
        signatures=[],
        description=Description(
          document=...,
          node=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Data_specification_IEC61360',
        'Reference to ConcreteClass Data_specification_physical_unit'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          1],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Data_type_IEC61360',
      literals=[
        EnumerationLiteral(
          name='Date',
          value='DATE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='STRING',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='String_translatable',
          value='STRING_TRANSLATABLE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_Measure',
          value='INTEGER_MEASURE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_count',
          value='INTEGER_COUNT',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_currency',
          value='INTEGER_CURRENCY',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_measure',
          value='REAL_MEASURE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_count',
          value='REAL_COUNT',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_currency',
          value='REAL_CURRENCY',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='BOOLEAN',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='IRI',
          value='IRI',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='IRDI',
          value='IRDI',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Rational',
          value='RATIONAL',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Rational_measure',
          value='RATIONAL_MEASURE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='TIME',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Timestamp',
          value='TIMESTAMP',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='FILE',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='HTML',
          value='HTML',
          description=Description(
            document=...,
            node=...),
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='BLOB',
          description=Description(
            document=...,
            node=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=2,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Level_type',
      literals=[
        EnumerationLiteral(
          name='Min',
          value='Min',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Max',
          value='Max',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Nom',
          value='Nom',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=5,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Value_reference_pair',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Value_reference_pair',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Value_reference_pair',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=4,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Value_list',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value_reference_pairs',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Value_reference_pair',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Value_list',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_reference_pairs',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Value_reference_pair',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value_reference_pairs',\n  argument='value_reference_pairs',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=3,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Data_specification_IEC61360',
      inheritances=[
        'Reference to AbstractClass Data_specification_content'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='preferred_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='short_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='unit',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='unit_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='source_of_definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='symbol',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='data_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_IEC61360',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_format',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_list',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_list',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='level_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Level_type',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='preferred_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='short_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='source_of_definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='symbol',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_IEC61360',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_format',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_list',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_list',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='level_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Level_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='preferred_name',\n  argument='preferred_name',\n  default=None)",
          "AssignArgument(\n  name='short_name',\n  argument='short_name',\n  default=None)",
          "AssignArgument(\n  name='unit',\n  argument='unit',\n  default=None)",
          "AssignArgument(\n  name='unit_ID',\n  argument='unit_ID',\n  default=None)",
          "AssignArgument(\n  name='source_of_definition',\n  argument='source_of_definition',\n  default=None)",
          "AssignArgument(\n  name='symbol',\n  argument='symbol',\n  default=None)",
          "AssignArgument(\n  name='data_type',\n  argument='data_type',\n  default=None)",
          "AssignArgument(\n  name='definition',\n  argument='definition',\n  default=None)",
          "AssignArgument(\n  name='value_format',\n  argument='value_format',\n  default=None)",
          "AssignArgument(\n  name='value_list',\n  argument='value_list',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)",
          "AssignArgument(\n  name='level_type',\n  argument='level_type',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Data_specification_physical_unit',
      inheritances=[
        'Reference to AbstractClass Data_specification_content'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='unit_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='unit_symbol',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='SI_notation',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='DIN_notation',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='ECE_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='ECE_code',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='NIST_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='source_of_definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='conversion_factor',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='registration_authority_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='supplier',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=Description(
            document=...,
            node=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='unit_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit_symbol',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='SI_notation',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='DIN_notation',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ECE_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ECE_code',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='NIST_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='source_of_definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='conversion_factor',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='registration_authority_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='supplier',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='unit_name',\n  argument='unit_name',\n  default=None)",
          "AssignArgument(\n  name='unit_symbol',\n  argument='unit_symbol',\n  default=None)",
          "AssignArgument(\n  name='definition',\n  argument='definition',\n  default=None)",
          "AssignArgument(\n  name='SI_notation',\n  argument='SI_notation',\n  default=None)",
          "AssignArgument(\n  name='DIN_notation',\n  argument='DIN_notation',\n  default=None)",
          "AssignArgument(\n  name='ECE_name',\n  argument='ECE_name',\n  default=None)",
          "AssignArgument(\n  name='ECE_code',\n  argument='ECE_code',\n  default=None)",
          "AssignArgument(\n  name='NIST_name',\n  argument='NIST_name',\n  default=None)",
          "AssignArgument(\n  name='source_of_definition',\n  argument='source_of_definition',\n  default=None)",
          "AssignArgument(\n  name='conversion_factor',\n  argument='conversion_factor',\n  default=None)",
          "AssignArgument(\n  name='registration_authority_ID',\n  argument='registration_authority_ID',\n  default=None)",
          "AssignArgument(\n  name='supplier',\n  argument='supplier',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          3,
          2],
        index=0,
        fragment=None),
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Environment',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_administration_shells',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Asset_administration_shell',
                parsed=...),
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel',
                parsed=...),
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='concept_descriptions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Concept_description',
                parsed=...),
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Environment',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_administration_shells',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Asset_administration_shell',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='concept_descriptions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Concept_description',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_administration_shells',\n  argument='asset_administration_shells',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=None)",
          "AssignArgument(\n  name='concept_descriptions',\n  argument='concept_descriptions',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=Description(
        document=...,
        node=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  symbols_topologically_sorted=[
    'Reference to symbol Has_data_specification',
    'Reference to symbol Administrative_information',
    'Reference to symbol Has_extensions',
    'Reference to symbol Referable',
    'Reference to symbol Has_kind',
    'Reference to symbol Has_semantics',
    'Reference to symbol Qualifiable',
    'Reference to symbol Submodel_element',
    'Reference to symbol Relationship_element',
    'Reference to symbol Annotated_relationship_element',
    'Reference to symbol Identifiable',
    'Reference to symbol Asset_administration_shell',
    'Reference to symbol Asset_information',
    'Reference to symbol Event',
    'Reference to symbol Basic_Event',
    'Reference to symbol Data_element',
    'Reference to symbol Blob',
    'Reference to symbol Capability',
    'Reference to symbol Concept_description',
    'Reference to symbol Constraint',
    'Reference to symbol Data_specification_content',
    'Reference to symbol Data_specification_IEC61360',
    'Reference to symbol Data_specification_physical_unit',
    'Reference to symbol Entity',
    'Reference to symbol Environment',
    'Reference to symbol Extension',
    'Reference to symbol File',
    'Reference to symbol Formula',
    'Reference to symbol Reference',
    'Reference to symbol Global_reference',
    'Reference to symbol Identifier_key_value_pair',
    'Reference to symbol Key',
    'Reference to symbol Lang_string_set',
    'Reference to symbol Non_empty_string',
    'Reference to symbol MIME_typed',
    'Reference to symbol Model_reference',
    'Reference to symbol Multi_language_property',
    'Reference to symbol Operation',
    'Reference to symbol Operation_variable',
    'Reference to symbol Property',
    'Reference to symbol Qualifier',
    'Reference to symbol Range',
    'Reference to symbol Reference_element',
    'Reference to symbol Submodel',
    'Reference to symbol Submodel_element_list',
    'Reference to symbol Submodel_element_struct',
    'Reference to symbol Value_list',
    'Reference to symbol Value_reference_pair',
    'Reference to symbol View'],
  verification_functions=[
    PatternVerification(
      name='is_MIME_type',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=Description(
        document=...,
        node=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+|"(([\t !#-\\[\\]-~]|[\\x80-\\xff])|\\\\([\t !-~]|[\\x80-\\xff]))*"))*'),
    ImplementationSpecificVerification(
      name='is_model_reference_to',
      arguments=[
        Argument(
          name='reference',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='expected_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=Description(
        document=...,
        node=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...)],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=Description(
      document=...,
      node=...),
    book_url='__book_url__',
    book_version='__book_version__'))