SymbolTable(
  symbols=[
    ConcreteClass(
      name='Resource',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='path',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_kind',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Path and name of the resource (with file extension).\nThe path can be absolute or relative.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Resource',
          parsed=...),
        Property(
          name='content_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Content_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Content type of the content of the file.\nThe content type states which file extensions the file can have.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Resource',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='path',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_kind',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='content_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Content_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='path',\n  argument='path',\n  default=None)",
          "AssignArgument(\n  name='content_type',\n  argument='content_type',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Resource represents an address to a file (a locator). The value is an URI that\ncan represent an absolute or relative path</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConstrainedPrimitive(
      name='Date_time',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=None,
      parsed=...),
    ConstrainedPrimitive(
      name='Date_time_stamp',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=None,
      parsed=...),
    ConstrainedPrimitive(
      name='Non_empty_string',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent a string with at least one character.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Blob_type',
      inheritances=[],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='BYTEARRAY',
      is_implementation_specific=False,
      invariants=[],
      invariant_id_set=...,
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          11,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Group of bytes to represent file content (binaries and non-binaries)</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    Enumeration(
      name='Data_type_def_RDF',
      literals=[
        EnumerationLiteral(
          name='Lang_string',
          value='rdf:langString',
          description=EnumerationLiteralDescription(
            summary='<paragraph>String with a language tag</paragraph>',
            remarks=[
              '<note><paragraph>RDF requires IETF BCP 47  language tags, i.e. simple two-letter language tags\nfor Locales like “de” conformant to ISO 639-1 are allowed as well as language\ntags plus extension like “de-DE” for country code, dialect etc. like in “en-US”\nor “en-GB” for English (United Kingdom) and English (United States).\nIETF language tags are referencing ISO 639, ISO 3166 and ISO 15924.</paragraph></note>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          12,
          3],
        index=4,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration listing all RDF types</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Decimal_build_in_types',
      literals=[
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          7,
          7,
          11,
          3],
        index=1,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Duration_build_in_types',
      literals=[
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          11,
          3],
        index=2,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Primitive_types',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          11,
          3],
        index=3,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def_XSD',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Decimal_build_in_types',
        'Reference to Enumeration Duration_build_in_types',
        'Reference to Enumeration Primitive_types'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          11,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration listing all xsd anySimpleTypes</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Data_type_def',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Lang_string',
          value='rdf:langString',
          description=None,
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Data_type_def_XSD',
        'Reference to Enumeration Data_type_def_RDF'],
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>string with values of enumerations DataTypeDefXsd, Data_type_def_Rdf</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConstrainedPrimitive(
      name='Identifier',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Lang_string_set',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Array of elements of type langString</paragraph>',
        remarks=[
          '<note><paragraph>langString is a RDF data type.</paragraph></note>',
          '<paragraph>A langString is a string value tagged with a language code.\nIt depends on the serialization rules for a technology how\nthis is realized.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Content_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Content_type',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[
          '<note><paragraph>Any content type as in RFC2046.</paragraph></note>',
          '<paragraph>A media type (also MIME type and content type) […] is a two-part\nidentifier for file formats and format contents transmitted on\nthe Internet. The Internet Assigned Numbers Authority (IANA) is\nthe official authority for the standardization and publication of\nthese classifications. Media types were originally defined in\nRequest for Comments 2045 in November 1996 as a part of MIME\n(Multipurpose Internet Mail Extensions) specification, for denoting\ntype of email message content and attachments.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Path_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[
          '<note><paragraph>Any string conformant to RFC8089 , the “file” URI scheme (for\nrelative and absolute file paths)</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    ConstrainedPrimitive(
      name='Qualifier_type',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>string</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    Enumeration(
      name='Value_data_type',
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='xs:anyURI',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='xs:base64Binary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='xs:boolean',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date',
          value='xs:date',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time',
          value='xs:dateTime',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Date_time_stamp',
          value='xs:dateTimeStamp',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Decimal',
          value='xs:decimal',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Double',
          value='xs:double',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Duration',
          value='xs:duration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Float',
          value='xs:float',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_day',
          value='xs:gDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month',
          value='xs:gMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_month_day',
          value='xs:gMonthDay',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year',
          value='xs:gYear',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='G_year_month',
          value='xs:gYearMonth',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Hex_binary',
          value='xs:hexBinary',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='xs:string',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='xs:time',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='xs:dayTimeDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='xs:yearMonthDuration',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Integer',
          value='xs:integer',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Long',
          value='xs:long',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Int',
          value='xs:int',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Short',
          value='xs:short',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Byte',
          value='xs:byte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='xs:NonNegativeInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='xs:positiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='xs:unsignedLong',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='xs:unsignedInt',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='xs:unsignedShort',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='xs:unsignedByte',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='xs:nonPositiveInteger',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='xs:negativeInteger',
          description=None,
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Data_type_def_XSD'],
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>any xsd atomic type as specified via DataTypeDefXsd</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConstrainedPrimitive(
      name='MIME_typed',
      inheritances=[
        'Reference to ConstrainedPrimitive Non_empty_string'],
      inheritance_id_set=...,
      descendant_id_set=...,
      constrainee='STR',
      is_implementation_specific=False,
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive Non_empty_string',
          parsed=...),
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConstrainedPrimitive MIME_typed',
          parsed=...)],
      invariant_id_set=...,
      reference_in_the_book=None,
      description=SymbolDescription(
        summary='<paragraph>Represent a string that follows the pattern of a MIME type.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...),
    AbstractClass(
      name='Reference',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Reference',
        name='Reference',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Global_reference',
          'Reference to ConcreteClass Model_reference'],
        properties=[],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Reference to either a model element of the same or another AAs or to an external\nentity.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Global_reference',
        'Reference to ConcreteClass Model_reference'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to either a model element of the same or another AAs or to an external\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_extensions',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_extensions',
        name='Has_extensions',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can be extended by proprietary extensions.</paragraph>',
          remarks=[
            '<paragraph>Note: Extensions are proprietary, i.e. they do not support global interoperability.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can be extended by proprietary extensions.</paragraph>',
        remarks=[
          '<paragraph>Note: Extensions are proprietary, i.e. they do not support global interoperability.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Referable',
      inheritances=[
        'Reference to AbstractClass Has_extensions'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Referable',
        name='Referable',
        inheritances=[
          'Reference to Interface Has_extensions'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element that is referable by its <AttributeReference refuri="~ID_short">~ID_short</AttributeReference>.</paragraph>',
          remarks=[
            '<paragraph>This identifier is not globally unique.\nThis identifier is unique within the name space of the element.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element that is referable by its <AttributeReference refuri="~ID_short">~ID_short</AttributeReference>.</paragraph>',
        remarks=[
          '<paragraph>This identifier is not globally unique.\nThis identifier is unique within the name space of the element.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_kind',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_kind',
        name='Has_kind',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element with a kind is an element that can either represent a template or an\ninstance.</paragraph>',
          remarks=[
            '<paragraph>Default for an element is that it is representing an instance.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element with a kind is an element that can either represent a template or an\ninstance.</paragraph>',
        remarks=[
          '<paragraph>Default for an element is that it is representing an instance.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_semantics',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_semantics',
        name='Has_semantics',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass Extension',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Identifier_key_value_pair',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Qualifier',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can have a semantic definition.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass Extension',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Identifier_key_value_pair',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Qualifier',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can have a semantic definition.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Qualifiable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Qualifiable',
        name='Qualifiable',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>The value of a qualifiable element may be further qualified by one or more\nqualifiers or complex formulas.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          7],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>The value of a qualifiable element may be further qualified by one or more\nqualifiers or complex formulas.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Has_data_specification',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Has_data_specification',
        name='Has_data_specification',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Administrative_information',
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct',
          'Reference to ConcreteClass View'],
        properties=[
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Element that can be extended by using data specification templates.</paragraph>',
          remarks=[
            '<paragraph>A data specification template defines a named set of additional attributes an\nelement may or shall have. The data specifications used are explicitly specified\nwith their global ID.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Administrative_information',
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct',
        'Reference to ConcreteClass View'],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Element that can be extended by using data specification templates.</paragraph>',
        remarks=[
          '<paragraph>A data specification template defines a named set of additional attributes an\nelement may or shall have. The data specifications used are explicitly specified\nwith their global ID.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Submodel_element',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Submodel_element',
        name='Submodel_element',
        inheritances=[
          'Reference to Interface Referable',
          'Reference to Interface Has_kind',
          'Reference to Interface Has_semantics',
          'Reference to Interface Qualifiable',
          'Reference to Interface Has_data_specification'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element',
          'Reference to ConcreteClass Basic_Event',
          'Reference to ConcreteClass Basic_event_element',
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass Capability',
          'Reference to ConcreteClass Entity',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Operation',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element',
          'Reference to ConcreteClass Submodel_element_list',
          'Reference to ConcreteClass Submodel_element_struct'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A submodel element is an element suitable for the description and differentiation of\nassets.</paragraph>',
          remarks=[
            '<paragraph>It is recommended to add a semantic ID to a submodel element.</paragraph>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element',
        'Reference to ConcreteClass Basic_Event',
        'Reference to ConcreteClass Basic_event_element',
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass Capability',
        'Reference to ConcreteClass Entity',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Operation',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element',
        'Reference to ConcreteClass Submodel_element_list',
        'Reference to ConcreteClass Submodel_element_struct'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element is an element suitable for the description and differentiation of\nassets.</paragraph>',
        remarks=[
          '<paragraph>It is recommended to add a semantic ID to a submodel element.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Qualifier',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Qualifier_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The qualifier type describes the type of the qualifier that is applied to\nthe element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the qualifier value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The qualifier value is the value of the qualifier.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Qualifier',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A qualifier is a type-value-pair that makes additional statements w.r.t.  the value\nof the element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-006',
            '<field_body><paragraph>If both, the value and the valueId of a Qualifier are present then the value\nneeds to be identical to the value of the referenced coded value in\nQualifier/valueId.</paragraph></field_body>'],
          [
            'AASd-020',
            '<field_body><paragraph>The value of Qualifier/value shall be consistent to the data type as defined in\nQualifier/valueType</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Data_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Data_element',
        name='Data_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Blob',
          'Reference to ConcreteClass File',
          'Reference to ConcreteClass Multi_language_property',
          'Reference to ConcreteClass Property',
          'Reference to ConcreteClass Range',
          'Reference to ConcreteClass Reference_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A data element is a submodel element that is not further composed out of\nother submodel elements.</paragraph>',
          remarks=[
            '<paragraph>A data element is a submodel element that has a value. The type of value differs\nfor different subtypes of data elements.</paragraph>',
            '<paragraph>A controlled value is a value whose meaning is given in an external source\n(see “ISO/TS 29002-10:2009(E)”).</paragraph>'],
          constraints_by_identifier=[
            [
              'AASd-090',
              '<field_body><paragraph>For data elements DataElement/category shall be one of the following values:\nCONSTANT, PARAMETER or VARIABLE.</paragraph></field_body>']],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Blob',
        'Reference to ConcreteClass File',
        'Reference to ConcreteClass Multi_language_property',
        'Reference to ConcreteClass Property',
        'Reference to ConcreteClass Range',
        'Reference to ConcreteClass Reference_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A data element is a submodel element that is not further composed out of\nother submodel elements.</paragraph>',
        remarks=[
          '<paragraph>A data element is a submodel element that has a value. The type of value differs\nfor different subtypes of data elements.</paragraph>',
          '<paragraph>A controlled value is a value whose meaning is given in an external source\n(see “ISO/TS 29002-10:2009(E)”).</paragraph>'],
        constraints_by_identifier=[
          [
            'AASd-090',
            '<field_body><paragraph>For data elements DataElement/category shall be one of the following values:\nCONSTANT, PARAMETER or VARIABLE.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Reference_element',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to an external object or entity or a logical reference to\nanother element within the same or another AAS (i.e. a model reference to\na Referable).</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Reference_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          15],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A reference element is a data element that defines a logical reference to another\nelement within the same or another AAS or a reference to an external object or\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Global_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique identifier</paragraph>',
            remarks=[
              '<paragraph>The identifier can be a concatenation of different identifiers, for example\nrepresenting an IRDI path etc.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Global_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to an external entity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Model_reference',
      inheritances=[
        'Reference to AbstractClass Reference'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='keys',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Key',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique references in their name space.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...),
        Property(
          name='referred_semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>SemanticId of the referenced model element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='keys',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Key',
                parsed=...),
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='referred_semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='keys',\n  argument='keys',\n  default=None)",
          "AssignArgument(\n  name='referred_semantic_ID',\n  argument='referred_semantic_ID',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='keys',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Model_reference',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Reference to a model element of the same or another AAS.\nA model reference is an ordered list of keys, each key referencing an element.\nThe complete list of keys may for example be concatenated to a path that then gives\nunique access to an element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Key',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Denote which kind of entity is referenced.</paragraph>',
            remarks=[
              '<paragraph>In case type = <AttributeReference refuri="~Key_elements.Global_reference">~Key_elements.Global_reference</AttributeReference> then the key represents\na global unique id.</paragraph>',
              '<paragraph>In case type = <AttributeReference refuri="~Key_elements.Fragment_reference">~Key_elements.Fragment_reference</AttributeReference> the key represents\na bookmark or a similar local identifier within its parent element as specified by\nthe key that precedes this key.</paragraph>',
              '<paragraph>In all other cases the key references a model element of the same or of another AAS.\nThe name of the model element is explicitly listed.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Key',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Key',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Key_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='type',\n  argument='type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A key is a reference to an element by its ID.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Extension',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='name',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Name of the extension.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-077',
                '<field_body><paragraph>The name of an extension within HasExtensions needs to be unique.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Type of the value of the extension.</paragraph>',
            remarks=[
              '<paragraph>Default: xsd:string</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Value of the extension</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...),
        Property(
          name='refers_to',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an element the extension refers to.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Extension',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='name',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def_XSD',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='refers_to',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='name',\n  argument='name',\n  default=None)",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='refers_to',\n  argument='refers_to',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          1],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Single extension of an element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Identifiable',
      inheritances=[
        'Reference to AbstractClass Referable'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Identifiable',
        name='Identifiable',
        inheritances=[
          'Reference to Interface Referable'],
        implementers=[
          'Reference to ConcreteClass Asset_administration_shell',
          'Reference to ConcreteClass Concept_description',
          'Reference to ConcreteClass Submodel'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The globally unique identification of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...),
          Property(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
              remarks=[
                '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Identifiable',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An element that has a globally unique identifier.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Asset_administration_shell',
        'Reference to ConcreteClass Concept_description',
        'Reference to ConcreteClass Submodel'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An element that has a globally unique identifier.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Modeling_kind',
      literals=[
        EnumerationLiteral(
          name='Template',
          value='TEMPLATE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Software element which specifies the common attributes shared by all instances of\nthe template.</paragraph>',
            remarks=[
              '<paragraph>[SOURCE: IEC TR 62390:2005-01, 3.1.25] modified</paragraph>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='INSTANCE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Concrete, clearly identifiable component of a certain template.</paragraph>',
            remarks=[
              '<note><paragraph>It becomes an individual entity of a  template,  for example a\ndevice model, by defining specific property values.</paragraph></note>',
              '<note><paragraph>In an object oriented view,  an instance denotes an object of a\ntemplate (class).</paragraph></note>',
              '<paragraph>[SOURCE: IEC 62890:2016, 3.1.16 65/617/CDV]  modified</paragraph>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          4],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an element is a template or an instance.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Administrative_information',
      inheritances=[
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='version',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Version of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...),
        Property(
          name='revision',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Revision of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='version',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='revision',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='version',\n  argument='version',\n  default=None)",
          "AssignArgument(\n  name='revision',\n  argument='revision',\n  default=None)"]),
      invariants=[
        Invariant(
          description='Constraint AASd-005',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='revision',\n      original_node=...),\n    original_node=...),\n  consequent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='version',\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          specified_for='Reference to ConcreteClass Administrative_information',
          parsed=...)],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          2,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Administrative meta-information for an element like version\ninformation.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-005',
            '<field_body><paragraph>If AdministrativeInformation/version is not specified than also\nAdministrativeInformation/revision shall be unspecified. This means, a revision\nrequires a version. If there is no version there is no revision neither.\nRevision is optional.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_administration_shell',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='asset_information',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_information',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Meta-information about the asset the AAS is representing.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>References to submodels of the AAS.</paragraph>',
            remarks=[
              '<paragraph>A submodel is a description of an aspect of the asset the AAS is representing.\nThe asset of an AAS is typically described by one or more submodels.\nTemporarily no submodel might be assigned to the AAS.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...),
        Property(
          name='derived_from',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The reference to the AAS the AAS was derived from.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_administration_shell',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='asset_information',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_information',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Model_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='derived_from',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='derived_from',\n  argument='derived_from',\n  default=None)",
          "AssignArgument(\n  name='asset_information',\n  argument='asset_information',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Asset_information',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_kind',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Asset_kind',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Denotes whether the Asset is of kind "Type" or "Instance".</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='global_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to either an Asset object or a global reference to the asset the AAS is\nrepresenting.</paragraph>',
            remarks=[
              '<paragraph>This attribute is required as soon as the AAS is exchanged via partners in the life\ncycle of the asset. In a first phase of the life cycle the asset might not yet have\na global ID but already an internal identifier. The internal identifier would be\nmodelled via <AttributeReference refuri="~specific_asset_ID">~specific_asset_ID</AttributeReference>.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='specific_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional domain-specific, typically proprietary, Identifier for the asset.</paragraph>',
            remarks=[
              '<paragraph>For example, serial number.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...),
        Property(
          name='default_thumbnail',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Resource',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Thumbnail of the asset represented by the asset administration shell.</paragraph>',
            remarks=[
              '<paragraph>Used as default.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Asset_information',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_kind',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Asset_kind',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='global_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='default_thumbnail',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Resource',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_kind',\n  argument='asset_kind',\n  default=None)",
          "AssignArgument(\n  name='global_asset_ID',\n  argument='global_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_ID',\n  argument='specific_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='default_thumbnail',\n  argument='default_thumbnail',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>In AssetInformation identifying meta data of the asset that is represented by an AAS\nis defined.</paragraph>',
        remarks=[
          '<paragraph>The asset may either represent an asset type or an asset instance.\nThe asset has a globally unique identifier plus – if needed – additional domain\nspecific (proprietary) identifiers. However, to support the corner case of very\nfirst phase of lifecycle where a stabilised/constant global asset identifier does\nnot already exist, the corresponding attribute “globalAssetId” is optional.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Asset_kind',
      literals=[
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=EnumerationLiteralDescription(
            summary='<paragraph>hardware or software element which specifies the common attributes shared by all\ninstances of the type</paragraph>',
            remarks=[
              '<paragraph>[SOURCE: IEC TR 62390:2005-01, 3.1.25]</paragraph>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Instance',
          value='Instance',
          description=EnumerationLiteralDescription(
            summary='<paragraph>concrete, clearly identifiable component of a certain type</paragraph>',
            remarks=[
              '<note><paragraph>It becomes an individual entity of a type, for example a device, by defining\nspecific property values.</paragraph></note>',
              '<note><paragraph>In an object oriented view, an instance denotes an object of a class\n(of a type).</paragraph></note>',
              '<paragraph>[SOURCE: IEC 62890:2016, 3.1.16] 65/617/CDV</paragraph>'],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an element is a type or an instance.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Identifier_key_value_pair',
      inheritances=[
        'Reference to AbstractClass Has_semantics'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='key',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Key of the identifier</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the identifier with the corresponding key.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...),
        Property(
          name='external_subject_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The (external) subject the key belongs to or has meaning to.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Identifier_key_value_pair',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='key',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='external_subject_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='key',\n  argument='key',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='external_subject_ID',\n  argument='external_subject_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          4],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An IdentifierKeyValuePair describes a generic identifier as key-value pair.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_kind',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Qualifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='submodel_elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>A submodel consists of zero or more submodel elements.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodel_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='submodel_elements',\n  argument='submodel_elements',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          5],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel defines a specific aspect of the asset represented by the AAS.</paragraph>',
        remarks=[
          '<paragraph>A submodel is used to structure the digital representation and technical\nfunctionality of an Administration Shell into distinguishable parts. Each submodel\nrefers to a well-defined domain or subject matter. Submodels can become\nstandardized and, thus, become submodels templates.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Relationship_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Relationship_element',
        name='Relationship_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Annotated_relationship_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...),
          Property(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...),
          Property(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Relationship_element',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>A relationship element is used to define a relationship between two elements\nbeing either referable (model reference) or external (global reference).</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Annotated_relationship_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          16],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A relationship element is used to define a relationship between two elements\nbeing either referable (model reference) or external (global reference).</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_list',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='type_value_list_element',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element_elements',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The submodel element type of the submodel elements contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='order_relevant',
          type_annotation=OptionalTypeAnnotation(
            value=PrimitiveTypeAnnotation(
              a_type='BOOL',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Defines whether order in list is relevant. If orderRelevant = False then the list\nis representing a set or a bag.\nDefault: True</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='values',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel element contained in the list.\nThe list is ordered.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='semantic_id_list_element',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The submodel element type of the submodel elements contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...),
        Property(
          name='value_type_list_element',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value type of the submodel element contained in the list.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_list',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='type_value_list_element',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element_elements',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='order_relevant',
            type_annotation=OptionalTypeAnnotation(
              value=PrimitiveTypeAnnotation(
                a_type='BOOL',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='values',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_id_list_element',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_type_list_element',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_def_XSD',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='type_value_list_element',\n  argument='type_value_list_element',\n  default=None)",
          "AssignArgument(\n  name='order_relevant',\n  argument='order_relevant',\n  default=None)",
          "AssignArgument(\n  name='values',\n  argument='values',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='semantic_id_list_element',\n  argument='semantic_id_list_element',\n  default=None)",
          "AssignArgument(\n  name='value_type_list_element',\n  argument='value_type_list_element',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          17],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element list is an ordered collection of submodel elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-107',
            '<field_body><paragraph>If a first level child element in a SubmodelElementList has a semanticId it\nshall be identical to SubmodelElementList/semanticIdListElement.</paragraph></field_body>'],
          [
            'AASd-114',
            '<field_body><paragraph>If two first level child elements in a SubmodelElementList have a semanticId\nthen they shall be identical.</paragraph></field_body>'],
          [
            'AASd-115',
            '<field_body><paragraph>If a first level child element in a SubmodelElementList does not specify\na semanticId then the value is assumed to be identical to\nSubmodelElementList/semanticIdListElement.</paragraph></field_body>'],
          [
            'AASd-108',
            '<field_body><paragraph>All first level child elements in a SubmodelElementList shall have the same\nsubmodel element type as specified in SubmodelElementList/typeValueListElement.</paragraph></field_body>'],
          [
            'AASd-109',
            '<field_body><paragraph>If SubmodelElementList/typeValueListElement equal to Property or Range\nSubmodelElementList/valueTypeListElement shall be set and all first level\nchild elements in the SubmodelElementList shall have the the value type as\nspecified in SubmodelElementList/valueTypeListElement.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Submodel_element_struct',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='values',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel element contained in the struct.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Submodel_element_struct',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='values',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='values',\n  argument='values',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          18],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A submodel element struct is is a logical encapsulation of multiple values. It has\na number of of submodel elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the value</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the property instance.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          13],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A property is a data element that has a single value.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-007',
            '<field_body><paragraph>If both, the Property/value and the Property/valueId are present then the value\nof Property/value needs to be identical to the value of the referenced coded\nvalue in Property/valueId.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Multi_language_property',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the property instance.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the global unique ID of a coded value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Multi_language_property',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          11],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A property is a data element that has a multi-language value.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-012',
            '<field_body><paragraph>If both, the MultiLanguageProperty/value and the MultiLanguageProperty/valueId\nare present then for each string in a specific language the meaning must be\nthe same as specified in MultiLanguageProperty/valueId.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Range',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='value_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Data_type_def_XSD',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data type of the min und max</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='min',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The minimum value of the range.\nIf the min value is missing, then the value is assumed to be negative infinite.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...),
        Property(
          name='max',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_data_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The maximum value of the range.\nIf the max value is missing,  then the value is assumed to be positive infinite.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Range',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_def_XSD',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='min',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='max',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_data_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='value_type',\n  argument='value_type',\n  default=None)",
          "AssignArgument(\n  name='min',\n  argument='min',\n  default=None)",
          "AssignArgument(\n  name='max',\n  argument='max',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          14],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A range data element is a data element that defines a range with min and max.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Blob',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='MIME_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol MIME_typed',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Mime type of the content of the BLOB.\nThe mime type states which file extensions the file can have.\nValid values are e.g. “application/json”, “application/xls”, ”image/jpg”\nThe allowed values are defined as in RFC2046.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Blob_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the BLOB instance of a blob data element.</paragraph>',
            remarks=[
              '<note><paragraph>In contrast to the file property the file content is stored directly as value\nin the Blob data element.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Blob',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='MIME_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol MIME_typed',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Blob_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='MIME_type',\n  argument='MIME_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='MIME_type',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass Blob',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A BLOB is a data element that represents a file that is contained with its source\ncode in the value attribute.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='File',
      inheritances=[
        'Reference to AbstractClass Data_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='content_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Content_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Content type of the content of the file.</paragraph>',
            remarks=[
              '<paragraph>The content type states which file extensions the file can have.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Path_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Path and name of the referenced file (with file extension).\nThe path can be absolute or relative.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass File',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='content_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Content_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Path_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='content_type',\n  argument='content_type',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='content_type',\n      original_node=...)],\n  original_node=...)",
          specified_for='Reference to ConcreteClass File',
          parsed=...)],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A File is a data element that represents an address to a file.</paragraph>',
        remarks=[
          '<paragraph>The value is an URI that can represent an absolute or relative path.</paragraph>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Annotated_relationship_element',
      inheritances=[
        'Reference to AbstractClass Relationship_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='first',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the first element in the relationship taking the role of the subject.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='second',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the second element in the relationship taking the role of the object.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Relationship_element',
          parsed=...),
        Property(
          name='annotation',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Data_element',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>A data element that represents an annotation that holds for the relationship\nbetween the two elements</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Annotated_relationship_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='first',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='second',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='annotation',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Data_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='first',\n  argument='first',\n  default=None)",
          "AssignArgument(\n  name='second',\n  argument='second',\n  default=None)",
          "AssignArgument(\n  name='annotation',\n  argument='annotation',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An annotated relationship element is a relationship element that can be annotated\nwith additional data elements.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Direction',
      literals=[
        EnumerationLiteral(
          name='input',
          value='INPUT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Input direction.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='output',
          value='OUTPUT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Output direction</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Direction</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='State_of_event',
      literals=[
        EnumerationLiteral(
          name='on',
          value='ON',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event is on</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='off',
          value='OFF',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event is off.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>State of an event</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    AbstractClass(
      name='Event_element',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Event_element',
        name='Event_element',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Basic_event_element'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An event element.</paragraph>',
          remarks=[],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Basic_event_element'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          7],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An event element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Basic_event_element',
      inheritances=[
        'Reference to AbstractClass Event_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='observed',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the Referable, which defines the scope of the event. Can be AAS, Submodel\nor SubmodelElement. Reference to a referable, e.g. a data element or a submodel, that\nis being observed.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='direction',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Direction',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Direction of event.\nCan be { Input, Output }.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='state',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol State_of_event',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>State of event.\nCan be { On, Off }.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='message_topic',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information for the outer message infrastructure for scheduling the event to the\nrespective communication channel.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='message_broker',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information, which outer message infrastructure shall handle messages for\nthe EventElement. Refers to a Submodel, SubmodelElementList, SubmodelElementStruct or\nEntity, which contains DataElements describing the proprietary specification for\nthe message broker.</paragraph>',
            remarks=[
              '<note><paragraph>for different message infrastructure, e.g. OPC UA or MQTT or AMQP, these\nproprietary specification could be standardized by having respective Submodels.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='last_update',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Timestamp in UTC, when the last event was received (input direction) or sent\n(output direction).</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='min_interval',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>For input direction, reports on the maximum frequency, the software entity behind\nthe respective Referable can handle input events. For output events, specifies\nthe maximum frequency of outputting this event to an outer infrastructure.\nMight be not specified, that is, there is no minimum interval.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...),
        Property(
          name='max_interval',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Date_time',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>For input direction: not applicable.\nFor output direction: maximum interval in time, the respective Referable shall send\nan update of the status of the event, even if no other trigger condition for\nthe event was not met. Might be not specified, that is, there is no maximum interval.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_event_element',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='observed',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='direction',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Direction',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='state',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol State_of_event',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='message_topic',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='message_broker',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Model_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='last_update',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='min_interval',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='max_interval',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Date_time',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='observed',\n  argument='observed',\n  default=None)",
          "AssignArgument(\n  name='direction',\n  argument='direction',\n  default=None)",
          "AssignArgument(\n  name='state',\n  argument='state',\n  default=None)",
          "AssignArgument(\n  name='message_topic',\n  argument='message_topic',\n  default=None)",
          "AssignArgument(\n  name='message_broker',\n  argument='message_broker',\n  default=None)",
          "AssignArgument(\n  name='last_update',\n  argument='last_update',\n  default=None)",
          "AssignArgument(\n  name='min_interval',\n  argument='min_interval',\n  default=None)",
          "AssignArgument(\n  name='max_interval',\n  argument='max_interval',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A basic event element.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Event_payload',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='source',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the source event element, including identification of AAS, Submodel,\nSubmodelElements.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='source_semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>semanticId of the source event element, if available</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='observable_reference',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the referable, which defines the scope of the event.\nCan be AAS, Submodel or SubmodelElement.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='observable_semantic_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>semanticId of the referable which defines the scope of the event, if available.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='topic',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Information for the outer message infrastructure for scheduling the event to\nthe respective communication channel.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='subject_id',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Subject, who/which initiated the creation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='time_stamp',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Date_time_stamp',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Timestamp in UTC, when this event was triggered.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...),
        Property(
          name='payload',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Event specific payload.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Event_payload',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='source',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='observable_reference',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Model_reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='time_stamp',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Date_time_stamp',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='source_semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='observable_semantic_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='topic',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='subject_id',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='payload',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='source',\n  argument='source',\n  default=None)",
          "AssignArgument(\n  name='observable_reference',\n  argument='observable_reference',\n  default=None)",
          "AssignArgument(\n  name='time_stamp',\n  argument='time_stamp',\n  default=None)",
          "AssignArgument(\n  name='source_semantic_id',\n  argument='source_semantic_id',\n  default=None)",
          "AssignArgument(\n  name='observable_semantic_id',\n  argument='observable_semantic_id',\n  default=None)",
          "AssignArgument(\n  name='topic',\n  argument='topic',\n  default=None)",
          "AssignArgument(\n  name='subject_id',\n  argument='subject_id',\n  default=None)",
          "AssignArgument(\n  name='payload',\n  argument='payload',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          2],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Defines the necessary information of an event instance sent out or received.</paragraph>',
        remarks=[
          '<note><paragraph>the payload is not part of the information model as exchanged via\nthe AASX package format but used in re-active Asset Administration Shells.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Entity_type',
      literals=[
        EnumerationLiteral(
          name='Co_managed_entity',
          value='COMANAGEDENTITY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>For co-managed entities there is no separate AAS. Co-managed entities need to be\npart of a self-managed entity.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Self_managed_entity',
          value='SELFMANAGEDENTITY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Self-Managed Entities have their own AAS but can be part of the bill of material of\na composite self-managed entity. The asset of an I4.0 Component is a self-managed\nentity per definition."</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          6],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration for denoting whether an entity is a self-managed entity or a co-managed\nentity.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Entity',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='entity_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Entity_type',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes whether the entity is a co- managed entity or a self-managed entity.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='statements',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel_element',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes statements applicable to the entity by a set of submodel elements,\ntypically with a qualified value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='global_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to the asset the entity is representing.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...),
        Property(
          name='specific_asset_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Identifier_key_value_pair',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an identifier key value pair representing a specific identifier\nof the asset represented by the asset administration shell.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Entity',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='entity_type',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Entity_type',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='statements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel_element',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='global_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='specific_asset_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Identifier_key_value_pair',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='statements',\n  argument='statements',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='entity_type',\n  argument='entity_type',\n  default=None)",
          "AssignArgument(\n  name='global_asset_ID',\n  argument='global_asset_ID',\n  default=None)",
          "AssignArgument(\n  name='specific_asset_ID',\n  argument='specific_asset_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          6],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An entity is a submodel element that is used to model entities.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-014',
            '<field_body><paragraph>Either the attribute globalAssetId or specificAssetId of an Entity must be set\nif Entity/entityType is set to “SelfManagedEntity”. They are not existing\notherwise.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    AbstractClass(
      name='Event',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Event',
        name='Event',
        inheritances=[
          'Reference to Interface Submodel_element'],
        implementers=[
          'Reference to ConcreteClass Basic_Event'],
        properties=[
          Property(
            name='extensions',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Extension',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>An extension of the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_extensions',
            parsed=...),
          Property(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
              remarks=[
                '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
              constraints_by_identifier=[
                [
                  'AASd-027',
                  '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
              remarks=[
                '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
                '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
              remarks=[
                '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Description or comments on the element.</paragraph>',
              remarks=[
                '<paragraph>The description can be provided in several languages.</paragraph>',
                '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
                '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
              remarks=[
                "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Referable',
            parsed=...),
          Property(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
              remarks=[
                '<paragraph>Default Value = Instance</paragraph>'],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_kind',
            parsed=...),
          Property(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_semantics',
            parsed=...),
          Property(
            name='qualifiers',
            type_annotation=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Qualifier',
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[
                [
                  'AASd-021',
                  '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
              parsed=...),
            specified_for='Reference to AbstractClass Qualifiable',
            parsed=...),
          Property(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            description=PropertyDescription(
              summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
              remarks=[],
              constraints_by_identifier=[],
              parsed=...),
            specified_for='Reference to AbstractClass Has_data_specification',
            parsed=...)],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>An event.</paragraph>',
          remarks=[],
          constraints_by_identifier=[
            [
              'AASd-061',
              '<field_body><paragraph>If the semanticId of a Event submodel element references a ConceptDescription\nthen the category of the ConceptDescription shall be one of the following:\nEVENT.</paragraph></field_body>']],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Basic_Event'],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          7],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An event.</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-061',
            '<field_body><paragraph>If the semanticId of a Event submodel element references a ConceptDescription\nthen the category of the ConceptDescription shall be one of the following:\nEVENT.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Basic_Event',
      inheritances=[
        'Reference to AbstractClass Event'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='observed',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to a referable, e.g. a data element or a submodel, that is being\nobserved.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Basic_Event',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='observed',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='observed',\n  argument='observed',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          7,
          7,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A basic event.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='input_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Input parameter of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='output_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Output parameter of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...),
        Property(
          name='inoutput_variables',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Operation_variable',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Parameter that is input and output of the operation.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='input_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='output_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='inoutput_variables',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Operation_variable',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='input_variables',\n  argument='input_variables',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='output_variables',\n  argument='output_variables',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='inoutput_variables',\n  argument='inoutput_variables',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          12],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An operation is a submodel element with input and output variables.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Operation_variable',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Submodel_element',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Describes the needed argument for an operation via a submodel element</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Operation_variable',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Submodel_element',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          13],
        index=1,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>An operation variable is a submodel element that is used as input or output variable\nof an operation.</paragraph>',
        remarks=[
          '<note><paragraph>Note: OperationVariable is introduced as separate class to enable future extensions,\ne.g. for adding a default value, cardinality (option/mandatory).</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Capability',
      inheritances=[
        'Reference to AbstractClass Submodel_element'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='kind',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Modeling_kind',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Kind of the element: either type or instance.</paragraph>',
            remarks=[
              '<paragraph>Default Value = Instance</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_kind',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='qualifiers',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Qualifier',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Additional qualification of a qualifiable element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-021',
                '<field_body><paragraph>Every qualifiable can only have one qualifier with the same Qualifier/type.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Qualifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='kind',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Modeling_kind',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='qualifiers',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Qualifier',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='kind',\n  argument='kind',\n  default=DefaultEnumLiteral(\n    node=...,\n    enum='Reference to Enumeration Modeling_kind',\n    literal='Reference to EnumerationLiteral Instance'))",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='qualifiers',\n  argument='qualifiers',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          7,
          4],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A capability is the implementation-independent description of the potential of an\nasset to achieve a certain effect in the physical or virtual world.</paragraph>',
        remarks=[
          '<note><paragraph>The semanticId of a capability is typically an ontology. Thus, reasoning on\ncapabilities is enabled.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Concept_description',
      inheritances=[
        'Reference to AbstractClass Identifiable',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Identifiable',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='is_case_of',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to an external definition the concept is compatible to or was derived from</paragraph>',
            remarks=[
              '<note><paragraph>Compare to is-case-of relationship in ISO 13584-32 & IEC EN 61360"</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Concept_description',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='is_case_of',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='is_case_of',\n  argument='is_case_of',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          8],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>The semantics of a property or other elements that may have a semantic description\nis defined by a concept description. The description of the concept should follow a\nstandardized schema (realized as data specification template).</paragraph>',
        remarks=[],
        constraints_by_identifier=[
          [
            'AASd-051',
            '<field_body><paragraph>A ConceptDescription shall have one of the following categories\nVALUE, PROPERTY, REFERENCE, DOCUMENT, CAPABILITY, RELATIONSHIP, COLLECTION,\nFUNCTION, EVENT, ENTITY, APPLICATION_CLASS, QUALIFIER, VIEW.</paragraph><paragraph>Default: PROPERTY.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='View',
      inheritances=[
        'Reference to AbstractClass Referable',
        'Reference to AbstractClass Has_semantics',
        'Reference to AbstractClass Has_data_specification'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Extension',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>An extension of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_extensions',
          parsed=...),
        Property(
          name='ID_short',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>In case of identifiables this attribute is a short name of the element.\nIn case of referable this ID is an identifying string of\nthe element within its name space.</paragraph>',
            remarks=[
              '<note><paragraph>In case the element is a property and the property has a semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) conformant to IEC61360 the idShort is typically\nidentical to the short name in English.</paragraph></note>'],
            constraints_by_identifier=[
              [
                'AASd-027',
                '<field_body><paragraph>idShort of Referables shall have a maximum length of 128\ncharacters.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='display_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Display name. Can be provided in several languages.</paragraph>',
            remarks=[
              '<paragraph>If no display name is defined in the language requested by the application,\nthen the display name is selected in the following order if available:</paragraph>',
              '<bullet_list bullet="*"><list_item><paragraph>the preferred name in the requested language of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>If there is a default language list defined in the application,\nthen the corresponding preferred name in the language is chosen\naccording to this order.</paragraph></list_item><list_item><paragraph>the English preferred name of the concept description defining\nthe semantics of the element</paragraph></list_item><list_item><paragraph>the short name of the concept description</paragraph></list_item><list_item><paragraph>the idShort of the element</paragraph></list_item></bullet_list>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='category',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The category is a value that gives further meta information\nw.r.t. to the class of the element.\nIt affects the expected existence of attributes and the applicability of\nconstraints.</paragraph>',
            remarks=[
              '<note><paragraph>The category is not identical to the semantic definition\n(<SymbolReference refuri=".Has_semantics">.Has_semantics</SymbolReference>) of an element. The category\n<emphasis>e.g.</emphasis> could denote that the element is a measurement value whereas the\nsemantic definition of the element would\ndenote that it is the measured temperature.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='checksum',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Checksum to be used to determine if an Referable (including its\naggregated hild elements) has changed.</paragraph>',
            remarks=[
              "<paragraph>The checksum is calculated by the user's tool environment.\nThe checksum has no semantic meaning for an asset administration\nshell model and there is no requirement for asset administration\nshell tools to manage the checksum</paragraph>"],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Referable',
          parsed=...),
        Property(
          name='semantic_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Global_reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Identifier of the semantic definition of the element. It is called semantic ID\nof the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_semantics',
          parsed=...),
        Property(
          name='data_specifications',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global reference to the data specification template used by the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to AbstractClass Has_data_specification',
          parsed=...),
        Property(
          name='contained_elements',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Reference to a referable element that is contained in the view.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass View',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='extensions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Extension',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ID_short',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='display_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='category',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='checksum',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='semantic_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Global_reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specifications',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Global_reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='contained_elements',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Reference',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='extensions',\n  argument='extensions',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='ID_short',\n  argument='ID_short',\n  default=None)",
          "AssignArgument(\n  name='display_name',\n  argument='display_name',\n  default=None)",
          "AssignArgument(\n  name='category',\n  argument='category',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='checksum',\n  argument='checksum',\n  default=None)",
          "AssignArgument(\n  name='semantic_ID',\n  argument='semantic_ID',\n  default=None)",
          "AssignArgument(\n  name='data_specifications',\n  argument='data_specifications',\n  default=EmptyList(\n    node=...))",
          "AssignArgument(\n  name='contained_elements',\n  argument='contained_elements',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A view is a collection of referable elements w.r.t. to a specific viewpoint of one\nor more stakeholders.</paragraph>',
        remarks=[
          '<note><paragraph>Views are a projection of submodel elements for a given perspective.\nThey are not equivalent to submodels.</paragraph></note>'],
        constraints_by_identifier=[
          [
            'AASd-064',
            '<field_body><paragraph>If the semanticId of a View references a ConceptDescription\nthen the category of the ConceptDescription shall be VIEW.</paragraph></field_body>']],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Identifiable_elements',
      literals=[
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=5,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all identifiable elements within an asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Submodel_element_elements',
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data Element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses “DataElement” the reference may\nbe a Property, a File etc.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event element</paragraph>',
            remarks=[
              '<note><paragraph>Event is abstract</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, i.e. if a key uses “SubmodelElement”\nthe reference may be a Property, a SubmodelElementList,\nan Operation etc.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=4,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all referable elements within an asset administration shell.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Referable_elements',
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Data_element">~Data_element</AttributeReference>\nthe reference may be a Property, a File <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event.</paragraph>',
            remarks=[
              '<note><paragraph>Event Element is abstract.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Submodel_element">~Submodel_element</AttributeReference>\nthe reference may be a Property, a SubmodelElementCollection,\nan Operation <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Submodel_element_elements',
        'Reference to Enumeration Identifiable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of all referable elements within an asset administration shell</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Key_elements',
      literals=[
        EnumerationLiteral(
          name='Fragment_reference',
          value='FragmentReference',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Bookmark or a similar local identifier of a subordinate part of\na primary resource</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Global_reference',
          value='GlobalReference',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Basic_event_element',
          value='BasicEventElement',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Data element.</paragraph>',
            remarks=[
              '<note><paragraph>Data Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Data_element">~Data_element</AttributeReference>\nthe reference may be a Property, a File <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Event_element',
          value='EventElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Event.</paragraph>',
            remarks=[
              '<note><paragraph>Event element is abstract.</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Property with a value that can be provided in multiple languages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Range with min and max</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Reference</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Relationship</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Submodel Element</paragraph>',
            remarks=[
              '<note><paragraph>Submodel Element is abstract, <emphasis>i.e.</emphasis> if a key uses <AttributeReference refuri="~Submodel_element">~Submodel_element</AttributeReference>\nthe reference may be a Property, a SubmodelElementCollection`,\nan Operation <emphasis>etc.</emphasis></paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=EnumerationLiteralDescription(
            summary='<paragraph>List of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Struct of Submodel Elements</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[
        'Reference to Enumeration Referable_elements'],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          10,
          3],
        index=2,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Enumeration of different key value types within a key.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    AbstractClass(
      name='Data_specification_content',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=Interface(
        base='Reference to AbstractClass Data_specification_content',
        name='Data_specification_content',
        inheritances=[],
        implementers=[
          'Reference to ConcreteClass Data_specification_IEC61360',
          'Reference to ConcreteClass Data_specification_physical_unit'],
        properties=[],
        signatures=[],
        description=SymbolDescription(
          summary='<paragraph>Missing summary.</paragraph>',
          remarks=[
            '<note><paragraph>The Data Specification Templates do not belong to the meta-model of the Asset\nAdministration Shell. In serializations that choose specific templates\nthe corresponding data specification content may be directly incorporated.</paragraph></note>'],
          constraints_by_identifier=[],
          parsed=...),
        parsed=...,
        properties_by_name=...,
        property_id_set=...),
      descendant_id_set=...,
      concrete_descendants=[
        'Reference to ConcreteClass Data_specification_IEC61360',
        'Reference to ConcreteClass Data_specification_physical_unit'],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Missing summary.</paragraph>',
        remarks=[
          '<note><paragraph>The Data Specification Templates do not belong to the meta-model of the Asset\nAdministration Shell. In serializations that choose specific templates\nthe corresponding data specification content may be directly incorporated.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    Enumeration(
      name='Data_type_IEC61360',
      literals=[
        EnumerationLiteral(
          name='Date',
          value='DATE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd\nExample from IEC 61360-1:2017: "1999-05-31" is the [DATE] representation of:\n31 May 1999.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='String',
          value='STRING',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values consisting of sequence of characters but cannot be translated into other\nlanguages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='String_translatable',
          value='STRING_TRANSLATABLE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing string but shall be represented as different string in different\nlanguages</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_Measure',
          value='INTEGER_MEASURE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values that are measure of type INTEGER. In addition such a value\ncomes with a physical unit.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_count',
          value='INTEGER_COUNT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type INTEGER but are no currencies or measures</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Integer_currency',
          value='INTEGER_CURRENCY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type INTEGER that are currencies</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_measure',
          value='REAL_MEASURE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values that are measures of type REAL. In addition such a value\ncomes with a physical unit.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_count',
          value='REAL_COUNT',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing numbers that can be written as a terminating or non-terminating\ndecimal; a rational or irrational number but are no currencies or measures</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Real_currency',
          value='REAL_CURRENCY',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type REAL that are currencies</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Boolean',
          value='BOOLEAN',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values representing truth of logic or Boolean algebra (TRUE, FALSE)</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='IRI',
          value='IRI',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type STRING conformant to Rfc 3987</paragraph>',
            remarks=[
              '<note><paragraph>In IEC61360-1 (2017) only URI is supported. An Iri type allows in particular to\nexpress a URL or an URI</paragraph></note>'],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='IRDI',
          value='IRDI',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values conforming to ISO/IEC 11179 series global identifier sequences IRDI can be\nused instead of the more specific data types ICID or ISO29002_IRDI. ICID values are\nvalue conformant to an IRDI, where the delimiter between RAI and ID is “#” while the\ndelimiter between DI and VI is confined to “##” ISO29002_IRDI values are values\ncontaining a global identifier that identifies an administrated item in a registry.\nThe structure of this identifier complies with identifier syntax defined in ISO/TS\n29002-5. The identifier shall fulfill the requirements specified in ISO/TS 29002-5\nfor an "international registration data identifier" (IRDI).</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Rational',
          value='RATIONAL',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type rational</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Rational_measure',
          value='RATIONAL_MEASURE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing values of type rational.\nIn addition such a value comes with a physical unit.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Time',
          value='TIME',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing a time, conformant to ISO 8601:2004 but restricted to\nwhat is allowed in the corresponding type in xml.\nFormat hh:mm (ECLASS) Example from IEC 61360-1:2017: "13:20:00-05:00" is the [TIME]\nrepresentation of: 1.20 p.m. for Eastern Standard Time,\nwhich is 5 hours behind Coordinated Universal Time (UTC).</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Timestamp',
          value='TIMESTAMP',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing a time, conformant to ISO 8601:2004 but restricted to\nwhat is allowed in the corresponding type in xml. Format yyyy-mm-dd hh:mm (ECLASS)</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='File',
          value='FILE',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing an address to a file. The values are of type URI and can represent\nan absolute or relative path. IEC61360 does not support the file type.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='HTML',
          value='HTML',
          description=EnumerationLiteralDescription(
            summary='<paragraph>Values containing string with any sequence of characters, using the syntax of HTML5\n(see W3C Recommendation 28:2014)</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...),
        EnumerationLiteral(
          name='Blob',
          value='BLOB',
          description=EnumerationLiteralDescription(
            summary='<paragraph>values containing the content of a file. Values may be binaries.\nHTML conformant to HTML5 is a special blob. In IEC61360 binary is for a sequence of\nbits, each bit being represented by “0” and “1” only. A binary is a blob but a blob\nmay also contain other source code.</paragraph>',
            remarks=[],
            parsed=...),
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=2,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    Enumeration(
      name='Level_type',
      literals=[
        EnumerationLiteral(
          name='Min',
          value='Min',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Max',
          value='Max',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Nom',
          value='Nom',
          description=None,
          parsed=...),
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=None,
          parsed=...)],
      is_superset_of=[],
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=5,
        fragment=None),
      description=None,
      literals_by_name=...,
      literal_id_set=...,
      parsed=...),
    ConcreteClass(
      name='Value_reference_pair',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Non_empty_string',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The value of the referenced concept definition of the value in valueId.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Value_reference_pair',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Reference',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Global unique id of the value.</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-078',
                '<field_body><paragraph>If the valueId of a ValueReferencePair references a\nConceptDescription then the ConceptDescription/category shall be one of\nfollowing values: VALUE.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Value_reference_pair',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=4,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A value reference pair within a value list. Each value has a global unique id\ndefining its semantic.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Value_list',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='value_reference_pairs',
          type_annotation=ListTypeAnnotation(
            items=OurTypeAnnotation(
              symbol='Reference to symbol Value_reference_pair',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>A pair of a value together with its global unique id.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Value_list',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='value_reference_pairs',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Value_reference_pair',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='value_reference_pairs',\n  argument='value_reference_pairs',\n  default=EmptyList(\n    node=...))"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=3,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A set of value reference pairs.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Data_specification_IEC61360',
      inheritances=[
        'Reference to AbstractClass Data_specification_content'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='preferred_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Preferred name</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-076',
                '<field_body><paragraph>For all ConceptDescriptions using data specification template\nIEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>)\nat least a preferred name in English shall be defined.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='short_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Short name</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='unit',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unit</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='unit_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique unit id</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='source_of_definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Source of definition</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='symbol',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Symbol</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='data_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_type_IEC61360',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Data Type</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-070',
                '<field_body><paragraph>For a ConceptDescription with category PROPERTY or VALUE using\ndata specification template IEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>) -\nDataSpecificationIEC61360/dataType is mandatory and shall be defined.</paragraph></field_body>'],
              [
                'AASd-071',
                '<field_body><paragraph>For a ConceptDescription with category REFERENCE using data\nspecification template IEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>) -\nDataSpecificationIEC61360/dataType is STRING by default.</paragraph></field_body>'],
              [
                'AASd-072',
                '<field_body><paragraph>For a ConceptDescription with category DOCUMENT using data\nspecification template IEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>) -\nDataSpecificationIEC61360/dataType shall be one of the following values: STRING or\nURL.</paragraph></field_body>'],
              [
                'AASd-073',
                '<field_body><paragraph>For a ConceptDescription with category QUALIFIER using data\nspecification template IEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>) -\nDataSpecificationIEC61360/dataType is mandatory and shall be defined.</paragraph></field_body>'],
              [
                'AASd-103',
                '<field_body><paragraph>If DataSpecificationIEC61360/-dataType one of: INTEGER_MEASURE,\nREAL_MEASURE, RATIONAL_MEASURE, INTEGER_CURRENCY, REAL_CURRENCY, then\nDataSpecificationIEC61360/unit or DataSpecificationIEC61360/unitId shall be\ndefined.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Definition in different languages</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-074',
                '<field_body><paragraph>For all ConceptDescriptions except for ConceptDescriptions of\ncategory VALUE using data specification template IEC61360\n(<reference refuri="http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0">http://admin-shell.io/DataSpecificationTemplates/DataSpecificationIEC61360/2/0</reference>) -\nDataSpecificationIEC61360/definition is mandatory and shall be defined at least\nin English.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_format',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Value Format</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_list',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Value_list',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>List of allowed values</paragraph>',
            remarks=[
              '<paragraph>See <ConstraintReference refuri="AASd-102">AASd-102</ConstraintReference></paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Value</paragraph>',
            remarks=[],
            constraints_by_identifier=[
              [
                'AASd-101',
                '<field_body><paragraph>If DataSpecificationIEC61360/category equal to VALUE then\nDataSpecificationIEC61360/value shall be set.</paragraph></field_body>'],
              [
                'AASd-102',
                '<field_body><paragraph>If DataSpecificationIEC61360/value or\nDataSpecificationIEC61360/valueId is not empty then\nDataSpecificationIEC61360/valueList shall be empty and vice versa.</paragraph></field_body>']],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='value_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Reference',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unique value id</paragraph>',
            remarks=[
              '<paragraph>See <ConstraintReference refuri="AASd-102">AASd-102</ConstraintReference></paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...),
        Property(
          name='level_type',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Level_type',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Set of levels.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_IEC61360',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='preferred_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='short_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='source_of_definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='symbol',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_type_IEC61360',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_format',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_list',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Value_list',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='value_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Reference',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='level_type',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Level_type',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='preferred_name',\n  argument='preferred_name',\n  default=None)",
          "AssignArgument(\n  name='short_name',\n  argument='short_name',\n  default=None)",
          "AssignArgument(\n  name='unit',\n  argument='unit',\n  default=None)",
          "AssignArgument(\n  name='unit_ID',\n  argument='unit_ID',\n  default=None)",
          "AssignArgument(\n  name='source_of_definition',\n  argument='source_of_definition',\n  default=None)",
          "AssignArgument(\n  name='symbol',\n  argument='symbol',\n  default=None)",
          "AssignArgument(\n  name='data_type',\n  argument='data_type',\n  default=None)",
          "AssignArgument(\n  name='definition',\n  argument='definition',\n  default=None)",
          "AssignArgument(\n  name='value_format',\n  argument='value_format',\n  default=None)",
          "AssignArgument(\n  name='value_list',\n  argument='value_list',\n  default=None)",
          "AssignArgument(\n  name='value',\n  argument='value',\n  default=None)",
          "AssignArgument(\n  name='value_ID',\n  argument='value_ID',\n  default=None)",
          "AssignArgument(\n  name='level_type',\n  argument='level_type',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          2,
          3],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Content of data specification template for concept descriptions conformant to\nIEC 61360.</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Data_specification_physical_unit',
      inheritances=[
        'Reference to AbstractClass Data_specification_content'],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='unit_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unit Name</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='unit_symbol',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Unit Symbol</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Definition</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='SI_notation',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>SI Notation</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='DIN_notation',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>DIN Notation</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='ECE_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>ECE Name</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='ECE_code',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>ECE Code</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='NIST_name',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>NIST Name</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='source_of_definition',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Source Of Definition</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='conversion_factor',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Conversion Factor</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='registration_authority_ID',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Registration Authority ID</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...),
        Property(
          name='supplier',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Non_empty_string',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Supplier</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification_physical_unit',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='unit_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='unit_symbol',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='SI_notation',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='DIN_notation',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ECE_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='ECE_code',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='NIST_name',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='source_of_definition',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='conversion_factor',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='registration_authority_ID',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='supplier',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Non_empty_string',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='unit_name',\n  argument='unit_name',\n  default=None)",
          "AssignArgument(\n  name='unit_symbol',\n  argument='unit_symbol',\n  default=None)",
          "AssignArgument(\n  name='definition',\n  argument='definition',\n  default=None)",
          "AssignArgument(\n  name='SI_notation',\n  argument='SI_notation',\n  default=None)",
          "AssignArgument(\n  name='DIN_notation',\n  argument='DIN_notation',\n  default=None)",
          "AssignArgument(\n  name='ECE_name',\n  argument='ECE_name',\n  default=None)",
          "AssignArgument(\n  name='ECE_code',\n  argument='ECE_code',\n  default=None)",
          "AssignArgument(\n  name='NIST_name',\n  argument='NIST_name',\n  default=None)",
          "AssignArgument(\n  name='source_of_definition',\n  argument='source_of_definition',\n  default=None)",
          "AssignArgument(\n  name='conversion_factor',\n  argument='conversion_factor',\n  default=None)",
          "AssignArgument(\n  name='registration_authority_ID',\n  argument='registration_authority_ID',\n  default=None)",
          "AssignArgument(\n  name='supplier',\n  argument='supplier',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          8,
          3,
          2],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>TODO</paragraph>',
        remarks=[],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Environment',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='asset_administration_shells',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Asset_administration_shell',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Asset administration shell</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='submodels',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Submodel',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Submodel</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...),
        Property(
          name='concept_descriptions',
          type_annotation=OptionalTypeAnnotation(
            value=ListTypeAnnotation(
              items=OurTypeAnnotation(
                symbol='Reference to symbol Concept_description',
                parsed=...),
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Concept description</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Environment',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='asset_administration_shells',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Asset_administration_shell',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='submodels',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Submodel',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='concept_descriptions',
            type_annotation=OptionalTypeAnnotation(
              value=ListTypeAnnotation(
                items=OurTypeAnnotation(
                  symbol='Reference to symbol Concept_description',
                  parsed=...),
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='asset_administration_shells',\n  argument='asset_administration_shells',\n  default=None)",
          "AssignArgument(\n  name='submodels',\n  argument='submodels',\n  default=None)",
          "AssignArgument(\n  name='concept_descriptions',\n  argument='concept_descriptions',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          5,
          7,
          9],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>Container for the sets of different identifiables.</paragraph>',
        remarks=[
          '<note><paragraph>w.r.t. file exchange: There is exactly one environment independent on how many\nfiles the contained elements are splitted. If the file is splitted then there\nshall be no element with the same identifier in two different files.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Data_specification',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='ID',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Identifier',
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>The globally unique identification of the element.</paragraph>',
            remarks=[],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification',
          parsed=...),
        Property(
          name='administration',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Administrative_information',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Administrative information of an identifiable element.</paragraph>',
            remarks=[
              '<note><paragraph>Some of the administrative information like the version number might need to\nbe part of the identification.</paragraph></note>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification',
          parsed=...),
        Property(
          name='description',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Lang_string_set',
              parsed=...),
            parsed=...),
          description=PropertyDescription(
            summary='<paragraph>Description or comments on the element.</paragraph>',
            remarks=[
              '<paragraph>The description can be provided in several languages.</paragraph>',
              '<paragraph>If no description is defined, then the definition of the concept\ndescription that defines the semantics of the element is used.</paragraph>',
              '<paragraph>Additional information can be provided, <emphasis>e.g.</emphasis>, if the element is\nqualified and which qualifier types can be expected in which\ncontext or which additional data specification templates are\nprovided.</paragraph>'],
            constraints_by_identifier=[],
            parsed=...),
          specified_for='Reference to ConcreteClass Data_specification',
          parsed=...),
        Property(
          name='data_specification_content',
          type_annotation=OptionalTypeAnnotation(
            value=OurTypeAnnotation(
              symbol='Reference to symbol Data_specification_content',
              parsed=...),
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Data_specification',
          parsed=...)],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='ID',
            type_annotation=OurTypeAnnotation(
              symbol='Reference to symbol Identifier',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='administration',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Administrative_information',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='description',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Lang_string_set',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...),
          Argument(
            name='data_specification_content',
            type_annotation=OptionalTypeAnnotation(
              value=OurTypeAnnotation(
                symbol='Reference to symbol Data_specification_content',
                parsed=...),
              parsed=...),
            default=DefaultConstant(
              value=None,
              parsed=...),
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='ID',\n  argument='ID',\n  default=None)",
          "AssignArgument(\n  name='administration',\n  argument='administration',\n  default=None)",
          "AssignArgument(\n  name='description',\n  argument='description',\n  default=None)",
          "AssignArgument(\n  name='data_specification_content',\n  argument='data_specification_content',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=ReferenceInTheBook(
        section=[
          6,
          1],
        index=0,
        fragment=None),
      description=SymbolDescription(
        summary='<paragraph>A template consists of the DataSpecificationContent containing the additional attributes\nto be added to the element instance that references the data specification template and\nmeta information about the template itself.</paragraph>',
        remarks=[
          '<note><paragraph>The Data Specification Templates do not belong to the metamodel of the asset\nadministration shell. In serializations that choose specific templates\nthe corresponding data specification content may be directly incorporated.</paragraph></note>'],
        constraints_by_identifier=[],
        parsed=...),
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  symbols_topologically_sorted=[
    'Reference to symbol Has_data_specification',
    'Reference to symbol Administrative_information',
    'Reference to symbol Has_extensions',
    'Reference to symbol Referable',
    'Reference to symbol Has_kind',
    'Reference to symbol Has_semantics',
    'Reference to symbol Qualifiable',
    'Reference to symbol Submodel_element',
    'Reference to symbol Relationship_element',
    'Reference to symbol Annotated_relationship_element',
    'Reference to symbol Identifiable',
    'Reference to symbol Asset_administration_shell',
    'Reference to symbol Asset_information',
    'Reference to symbol Event',
    'Reference to symbol Basic_Event',
    'Reference to symbol Event_element',
    'Reference to symbol Basic_event_element',
    'Reference to symbol Data_element',
    'Reference to symbol Blob',
    'Reference to symbol Blob_type',
    'Reference to symbol Capability',
    'Reference to symbol Concept_description',
    'Reference to symbol Non_empty_string',
    'Reference to symbol Content_type',
    'Reference to symbol Data_specification',
    'Reference to symbol Data_specification_content',
    'Reference to symbol Data_specification_IEC61360',
    'Reference to symbol Data_specification_physical_unit',
    'Reference to symbol Date_time',
    'Reference to symbol Date_time_stamp',
    'Reference to symbol Entity',
    'Reference to symbol Environment',
    'Reference to symbol Event_payload',
    'Reference to symbol Extension',
    'Reference to symbol File',
    'Reference to symbol Reference',
    'Reference to symbol Global_reference',
    'Reference to symbol Identifier',
    'Reference to symbol Identifier_key_value_pair',
    'Reference to symbol Key',
    'Reference to symbol Lang_string_set',
    'Reference to symbol MIME_typed',
    'Reference to symbol Model_reference',
    'Reference to symbol Multi_language_property',
    'Reference to symbol Operation',
    'Reference to symbol Operation_variable',
    'Reference to symbol Path_type',
    'Reference to symbol Property',
    'Reference to symbol Qualifier',
    'Reference to symbol Qualifier_type',
    'Reference to symbol Range',
    'Reference to symbol Reference_element',
    'Reference to symbol Resource',
    'Reference to symbol Submodel',
    'Reference to symbol Submodel_element_list',
    'Reference to symbol Submodel_element_struct',
    'Reference to symbol Value_list',
    'Reference to symbol Value_reference_pair',
    'Reference to symbol View'],
  verification_functions=[
    PatternVerification(
      name='is_MIME_type',
      arguments=[
        Argument(
          name='text',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='STR',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern of MIME type.</paragraph>',
        remarks=[],
        arguments_by_name=[
          [
            'text',
            '<field_body><paragraph>Text to be checked</paragraph></field_body>']],
        returns='<field_body><paragraph>True if the <ArgumentReference refuri="text">text</ArgumentReference> conforms to the pattern</paragraph></field_body>',
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...,
      pattern='([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+/([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+([ \t]*;[ \t]*([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+=(([!#$%&\'*+\\-.^_`|~0-9a-zA-Z])+|"(([\t !#-\\[\\]-~]|[\\x80-\\xff])|\\\\([\t !-~]|[\\x80-\\xff]))*"))*'),
    ImplementationSpecificVerification(
      name='is_model_reference_to',
      arguments=[
        Argument(
          name='reference',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Model_reference',
            parsed=...),
          default=None,
          parsed=...),
        Argument(
          name='expected_type',
          type_annotation=OurTypeAnnotation(
            symbol='Reference to symbol Key_elements',
            parsed=...),
          default=None,
          parsed=...)],
      returns=PrimitiveTypeAnnotation(
        a_type='BOOL',
        parsed=...),
      description=SignatureDescription(
        summary='<paragraph>Check that the target of the model reference matches the expected <literal>target</literal>.</paragraph>',
        remarks=[],
        arguments_by_name=[],
        returns=None,
        parsed=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      parsed=...,
      arguments_by_name=...)],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=MetaModelDescription(
      summary='<paragraph>Provide the meta model for Asset Administration Shell V3.0 Release Candidate 2.</paragraph>',
      remarks=[],
      constraints_by_identifier=[],
      parsed=...),
    book_url='__book_url__',
    book_version='__book_version__'))