SymbolTable(
  symbols=[
    ConcreteClass(
      name='Concrete',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='x',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Concrete',
          parsed=...)],
      methods=[
        UnderstoodMethod(
          name='some_func',
          arguments=[
            Argument(
              name='number',
              type_annotation=PrimitiveTypeAnnotation(
                a_type='INT',
                parsed=...),
              default=None,
              parsed=...)],
          returns=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=Description(
            document=...,
            node=...),
          contracts=Contracts(
            preconditions=[
              Contract(
                args=[
                  'number'],
                description=None,
                body="Comparison(\n  left=Name(\n    identifier='number',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=0,\n    original_node=...),\n  original_node=...)",
                parsed=...),
              Contract(
                args=[
                  'self'],
                description=None,
                body="Comparison(\n  left=Member(\n    instance=Name(\n      identifier='self',\n      original_node=...),\n    name='x',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=2,\n    original_node=...),\n  original_node=...)",
                parsed=...)],
            snapshots=[],
            postconditions=[]),
          parsed=...,
          body=[],
          arguments_by_name=...)],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='x',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[
            Contract(
              args=[
                'x'],
              description=None,
              body="Comparison(\n  left=Name(\n    identifier='x',\n    original_node=...),\n  op='GT',\n  right=Constant(\n    value=0,\n    original_node=...),\n  original_node=...)",
              parsed=...)],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          "AssignArgument(\n  name='x',\n  argument='x',\n  default=None)"]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...),
    ConcreteClass(
      name='Reference',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[],
      methods=[],
      constructor=Constructor(
        name='__init__',
        arguments=[],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[],
          snapshots=[],
          postconditions=[]),
        parsed=None,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  verification_functions=[],
  verification_functions_by_name=...,
  ref_association='Reference to ConcreteClass Reference',
  meta_model=MetaModel(
    description=None,
    book_url='__book_url__',
    book_version='__book_version__'))