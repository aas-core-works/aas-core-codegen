SymbolTable(
  our_types=[
    ConcreteClass(
      name='Concrete',
      inheritances=[],
      inheritance_id_set=...,
      is_implementation_specific=False,
      interface=None,
      descendant_id_set=...,
      concrete_descendants=[],
      properties=[
        Property(
          name='x',
          type_annotation=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=None,
          specified_for='Reference to ConcreteClass Concrete',
          parsed=...)],
      methods=[
        UnderstoodMethod(
          name='some_func',
          arguments=[
            Argument(
              name='number',
              type_annotation=PrimitiveTypeAnnotation(
                a_type='INT',
                parsed=...),
              default=None,
              parsed=...)],
          returns=PrimitiveTypeAnnotation(
            a_type='INT',
            parsed=...),
          description=DescriptionOfSignature(
            summary='<paragraph>Do something.</paragraph>',
            remarks=[],
            arguments_by_name=[],
            returns=None,
            parsed=...),
          specified_for='Reference to ConcreteClass Concrete',
          contracts=Contracts(
            preconditions=[
              Contract(
                args=[
                  'number'],
                description=None,
                body=textwrap.dedent("""\
                  Comparison(
                    left=Name(
                      identifier='number',
                      original_node=...),
                    op='GT',
                    right=Constant(
                      value=0,
                      original_node=...),
                    original_node=...)"""),
                parsed=...),
              Contract(
                args=[
                  'self'],
                description=None,
                body=textwrap.dedent("""\
                  Comparison(
                    left=Member(
                      instance=Name(
                        identifier='self',
                        original_node=...),
                      name='x',
                      original_node=...),
                    op='GT',
                    right=Constant(
                      value=2,
                      original_node=...),
                    original_node=...)"""),
                parsed=...)],
            snapshots=[],
            postconditions=[]),
          parsed=...,
          body=[],
          arguments_by_name=...)],
      constructor=Constructor(
        name='__init__',
        arguments=[
          Argument(
            name='x',
            type_annotation=PrimitiveTypeAnnotation(
              a_type='INT',
              parsed=...),
            default=None,
            parsed=...)],
        returns=None,
        description=None,
        contracts=Contracts(
          preconditions=[
            Contract(
              args=[
                'x'],
              description=None,
              body=textwrap.dedent("""\
                Comparison(
                  left=Name(
                    identifier='x',
                    original_node=...),
                  op='GT',
                  right=Constant(
                    value=0,
                    original_node=...),
                  original_node=...)"""),
              parsed=...)],
          snapshots=[],
          postconditions=[]),
        parsed=...,
        arguments_by_name=...,
        is_implementation_specific=False,
        statements=[
          textwrap.dedent("""\
            AssignArgument(
              name='x',
              argument='x',
              default=None)""")]),
      invariants=[],
      serialization=Serialization(
        with_model_type=False),
      reference_in_the_book=None,
      description=None,
      parsed=...,
      properties_by_name=...,
      property_id_set=...,
      methods_by_name=...,
      invariant_id_set=...)],
  our_types_topologically_sorted=[
    'Reference to our type Concrete'],
  constants=[],
  constants_by_name=...,
  verification_functions=[],
  verification_functions_by_name=...,
  meta_model=MetaModel(
    description=None,
    book_url='dummy',
    book_version='dummy'))