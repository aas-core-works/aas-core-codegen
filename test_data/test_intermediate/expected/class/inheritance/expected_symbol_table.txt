SymbolTable(
  symbols=[
    Interface(
      name='VeryAbstract',
      inheritances=[],
      signatures=[
        Signature(
          name='some_func',
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              parsed=...)],
          returns=None,
          description=None,
          parsed=...)],
      properties=[
        Property(
          name='some_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='int',
            parsed=...),
          description=None,
          is_readonly=False,
          parsed=...)],
      is_implementation_specific=False,
      parsed=...),
    Interface(
      name='Abstract',
      inheritances=[
        'VeryAbstract'],
      signatures=[
        Signature(
          name='another_func',
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              parsed=...)],
          returns=None,
          description=None,
          parsed=...)],
      properties=[
        Property(
          name='another_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='int',
            parsed=...),
          description=None,
          is_readonly=False,
          parsed=...)],
      is_implementation_specific=False,
      parsed=...),
    Class(
      name='Concrete',
      interfaces=[
        'Abstract'],
      is_implementation_specific=False,
      properties=[
        Property(
          name='some_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='int',
            parsed=...),
          description=None,
          is_readonly=False,
          parsed=...),
        Property(
          name='another_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='int',
            parsed=...),
          description=None,
          is_readonly=False,
          parsed=...),
        Property(
          name='yet_another_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='int',
            parsed=...),
          description=None,
          is_readonly=False,
          parsed=...)],
      methods=[
        Method(
          name='some_func',
          is_implementation_specific=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              parsed=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          body=...,
          parsed=...),
        Method(
          name='another_func',
          is_implementation_specific=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              parsed=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          body=...,
          parsed=...),
        Method(
          name='yet_another_func',
          is_implementation_specific=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              parsed=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          body=...,
          parsed=...)],
      constructor=Constructor(
        arguments=[
          Argument(
            name='self',
            type_annotation=SelfTypeAnnotation(),
            default=None,
            parsed=...),
          Argument(
            name='some_property',
            type_annotation=AtomicTypeAnnotation(
              identifier='int',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='another_property',
            type_annotation=AtomicTypeAnnotation(
              identifier='int',
              parsed=...),
            default=None,
            parsed=...),
          Argument(
            name='yet_another_property',
            type_annotation=AtomicTypeAnnotation(
              identifier='int',
              parsed=...),
            default=None,
            parsed=...)],
        contracts=Contracts(
          preconditions=[
            Contract(
              args=[
                'some_property'],
              description=None,
              body=...,
              parsed=...),
            Contract(
              args=[
                'another_property'],
              description=None,
              body=...,
              parsed=...),
            Contract(
              args=[
                'yet_another_property'],
              description=None,
              body=...,
              parsed=...)],
          snapshots=[],
          postconditions=[]),
        is_implementation_specific=False,
        statements=...),
      description=None,
      parsed=...)])