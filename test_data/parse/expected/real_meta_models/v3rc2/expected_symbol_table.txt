UnverifiedSymbolTable(
  symbols=[
    ConcreteClass(
      name='Non_empty_string',
      is_implementation_specific=False,
      inheritances=[
        'str'],
      properties=[],
      methods=[],
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Name(\n        identifier='self',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          node=...)],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='MIME_typed',
      is_implementation_specific=False,
      inheritances=[
        'Non_empty_string'],
      properties=[],
      methods=[],
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Name(\n      identifier='self',\n      original_node=...)],\n  original_node=...)",
          node=...)],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Has_semantics',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='semantic_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Extension',
      is_implementation_specific=False,
      inheritances=[
        'Has_semantics'],
      properties=[
        Property(
          name='name',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_type',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Data_type_def',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='refers_to',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='name',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_type',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Data_type_def',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='refers_to',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Has_extensions',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='extensions',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Extension',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Referable',
      is_implementation_specific=False,
      inheritances=[
        'Has_extensions'],
      properties=[
        Property(
          name='ID_short',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='display_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='category',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='description',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Identifiable',
      is_implementation_specific=False,
      inheritances=[
        'Referable'],
      properties=[
        Property(
          name='ID',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='administration',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Administrative_information',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='administration',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Administrative_information',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    Enumeration(
      name='Modeling_kind',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Template',
          value='TEMPLATE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Instance',
          value='INSTANCE',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    AbstractClass(
      name='Has_kind',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='kind',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Modeling_kind',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Has_data_specification',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='data_specifications',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Administrative_information',
      is_implementation_specific=False,
      inheritances=[
        'Has_data_specification'],
      properties=[
        Property(
          name='version',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='revision',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='version',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='revision',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description='Constraint AASd-005',
          body="Implication(\n  antecedent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='revision',\n      original_node=...),\n    original_node=...),\n  consequent=IsNotNone(\n    value=Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='version',\n      original_node=...),\n    original_node=...),\n  original_node=...)",
          node=...)],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Constraint',
      is_implementation_specific=False,
      inheritances=[],
      properties=[],
      methods=[],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Qualifiable',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='qualifiers',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Constraint',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Qualifier',
      is_implementation_specific=False,
      inheritances=[
        'Constraint',
        'Has_semantics'],
      properties=[
        Property(
          name='type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Data_type_def',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Data_type_def',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Formula',
      is_implementation_specific=False,
      inheritances=[
        'Constraint'],
      properties=[
        Property(
          name='depends_on',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='depends_on',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Asset_administration_shell',
      is_implementation_specific=False,
      inheritances=[
        'Identifiable',
        'Has_data_specification'],
      properties=[
        Property(
          name='derived_from',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              SubscriptedTypeAnnotation(
                identifier='Ref',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Asset_administration_shell',
                    node=...)],
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='asset_information',
          type_annotation=AtomicTypeAnnotation(
            identifier='Asset_information',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='submodels',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              SubscriptedTypeAnnotation(
                identifier='Ref',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Submodel',
                    node=...)],
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='asset_information',
              type_annotation=AtomicTypeAnnotation(
                identifier='Asset_information',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='administration',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Administrative_information',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='derived_from',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='Ref',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Asset_administration_shell',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='submodels',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      SubscriptedTypeAnnotation(
                        identifier='Ref',
                        subscripts=[
                          AtomicTypeAnnotation(
                            identifier='Submodel',
                            node=...)],
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Asset_information',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='asset_kind',
          type_annotation=AtomicTypeAnnotation(
            identifier='Asset_kind',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='global_asset_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='specific_asset_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Identifier_key_value_pair',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='default_thumbnail',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='File',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='asset_kind',
              type_annotation=AtomicTypeAnnotation(
                identifier='Asset_kind',
                node=...),
              default=None,
              node=...),
            Argument(
              name='global_asset_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='specific_asset_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Identifier_key_value_pair',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='default_thumbnail',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='File',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    Enumeration(
      name='Asset_kind',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Instance',
          value='Instance',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    ConcreteClass(
      name='Identifier_key_value_pair',
      is_implementation_specific=False,
      inheritances=[
        'Has_semantics'],
      properties=[
        Property(
          name='key',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='external_subject_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='key',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='external_subject_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Submodel',
      is_implementation_specific=False,
      inheritances=[
        'Identifiable',
        'Has_kind',
        'Has_semantics',
        'Qualifiable',
        'Has_data_specification'],
      properties=[
        Property(
          name='submodel_elements',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Submodel_element',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='submodel_elements',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Submodel_element',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='administration',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Administrative_information',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Submodel_element',
      is_implementation_specific=False,
      inheritances=[
        'Referable',
        'Has_kind',
        'Has_semantics',
        'Qualifiable',
        'Has_data_specification'],
      properties=[],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Relationship_element',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[
        Property(
          name='first',
          type_annotation=AtomicTypeAnnotation(
            identifier='Reference',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='second',
          type_annotation=AtomicTypeAnnotation(
            identifier='Reference',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='first',
              type_annotation=AtomicTypeAnnotation(
                identifier='Reference',
                node=...),
              default=None,
              node=...),
            Argument(
              name='second',
              type_annotation=AtomicTypeAnnotation(
                identifier='Reference',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Submodel_element_list',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[
        Property(
          name='submodel_element_type_values',
          type_annotation=AtomicTypeAnnotation(
            identifier='Submodel_elements',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='values',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Submodel_element',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='semantic_ID_values',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_type_values',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Data_type_def',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='submodel_element_type_values',
              type_annotation=AtomicTypeAnnotation(
                identifier='Submodel_elements',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='values',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Submodel_element',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID_values',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_type_values',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Data_type_def',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Submodel_element_struct',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[
        Property(
          name='values',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Submodel_element',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='values',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Submodel_element',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Data_element',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Property',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='value_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Data_type_def',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Data_type_def',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Multi_language_property',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='translatable',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='translatable',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Range',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='value_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Data_type_def',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='min',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='max',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Data_type_def',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='min',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='max',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Reference_element',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='reference',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='reference',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Blob',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='MIME_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='MIME_typed',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='content',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='bytearray',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='MIME_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='MIME_typed',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='content',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='bytearray',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='MIME_type',\n      original_node=...)],\n  original_node=...)",
          node=...)],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='File',
      is_implementation_specific=False,
      inheritances=[
        'Data_element'],
      properties=[
        Property(
          name='MIME_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='MIME_typed',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='MIME_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='MIME_typed',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description=None,
          body="FunctionCall(\n  name='is_MIME_type',\n  args=[\n    Member(\n      instance=Name(\n        identifier='self',\n        original_node=...),\n      name='MIME_type',\n      original_node=...)],\n  original_node=...)",
          node=...)],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Annotated_relationship_element',
      is_implementation_specific=False,
      inheritances=[
        'Relationship_element'],
      properties=[
        Property(
          name='annotation',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Data_element',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='first',
              type_annotation=AtomicTypeAnnotation(
                identifier='Reference',
                node=...),
              default=None,
              node=...),
            Argument(
              name='second',
              type_annotation=AtomicTypeAnnotation(
                identifier='Reference',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='annotation',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Data_element',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    Enumeration(
      name='Entity_type',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Co_managed_entity',
          value='COMANAGEDENTITY',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Self_managed_entity',
          value='SELFMANAGEDENTITY',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    ConcreteClass(
      name='Entity',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[
        Property(
          name='entity_type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Entity_type',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='statements',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Submodel_element',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='global_asset_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='specific_asset_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Identifier_key_value_pair',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='entity_type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Entity_type',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='statements',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Submodel_element',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='global_asset_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='specific_asset_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Identifier_key_value_pair',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Event',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Basic_Event',
      is_implementation_specific=False,
      inheritances=[
        'Event'],
      properties=[
        Property(
          name='observed',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Ref',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Referable',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='observed',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Ref',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Referable',
                    node=...)],
                node=...),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Operation',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[
        Property(
          name='input_variables',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Operation_variable',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='output_variables',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Operation_variable',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='inoutput_variables',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Operation_variable',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='input_variables',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Operation_variable',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='output_variables',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Operation_variable',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='inoutput_variables',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Operation_variable',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Operation_variable',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='value',
          type_annotation=AtomicTypeAnnotation(
            identifier='Submodel_element',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='value',
              type_annotation=AtomicTypeAnnotation(
                identifier='Submodel_element',
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Capability',
      is_implementation_specific=False,
      inheritances=[
        'Submodel_element'],
      properties=[],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='kind',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Modeling_kind',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='qualifiers',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Constraint',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Concept_description',
      is_implementation_specific=False,
      inheritances=[
        'Identifiable',
        'Has_data_specification'],
      properties=[
        Property(
          name='is_case_of',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='ID',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='ID_short',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='administration',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Administrative_information',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='is_case_of',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='View',
      is_implementation_specific=False,
      inheritances=[
        'Referable',
        'Has_semantics',
        'Has_data_specification'],
      properties=[
        Property(
          name='contained_elements',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              SubscriptedTypeAnnotation(
                identifier='Ref',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Referable',
                    node=...)],
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='extensions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Extension',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ID_short',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='display_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='category',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='description',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_specifications',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Reference',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='contained_elements',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      SubscriptedTypeAnnotation(
                        identifier='Ref',
                        subscripts=[
                          AtomicTypeAnnotation(
                            identifier='Referable',
                            node=...)],
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Reference',
      is_implementation_specific=False,
      inheritances=[],
      properties=[],
      methods=[],
      invariants=[],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Global_reference',
      is_implementation_specific=False,
      inheritances=[
        'Reference'],
      properties=[
        Property(
          name='values',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='values',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='List',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='values',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          node=...)],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Model_reference',
      is_implementation_specific=False,
      inheritances=[
        'Reference'],
      properties=[
        Property(
          name='keys',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Key',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='referred_semantic_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='keys',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='List',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Key',
                    node=...)],
                node=...),
              default=None,
              node=...),
            Argument(
              name='referred_semantic_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description=None,
          body="Comparison(\n  left=FunctionCall(\n    name='len',\n    args=[\n      Member(\n        instance=Name(\n          identifier='self',\n          original_node=...),\n        name='keys',\n        original_node=...)],\n    original_node=...),\n  op='GE',\n  right=Constant(\n    value=1,\n    original_node=...),\n  original_node=...)",
          node=...)],
      serialization=Serialization(
        with_model_type=True),
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Key',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='type',
          type_annotation=AtomicTypeAnnotation(
            identifier='Key_elements',
            node=...),
          description=None,
          node=...),
        Property(
          name='value',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=None,
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='type',
              type_annotation=AtomicTypeAnnotation(
                identifier='Key_elements',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    Enumeration(
      name='Identifiable_elements',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Referable_elements',
      is_superset_of=[
        'Identifiable_elements'],
      literals=[
        EnumerationLiteral(
          name='Access_permission_rule',
          value='AccessPermissionRule',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Key_elements',
      is_superset_of=[
        'Referable_elements'],
      literals=[
        EnumerationLiteral(
          name='Fragment_reference',
          value='FragmentReference',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Access_permission_rule',
          value='AccessPermissionRule',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Global_reference',
          value='GlobalReference',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Submodel_elements',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Annotated_relationship_element',
          value='AnnotatedRelationshipElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Asset',
          value='Asset',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Asset_administration_shell',
          value='AssetAdministrationShell',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Basic_event',
          value='BasicEvent',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Blob',
          value='Blob',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Capability',
          value='Capability',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Concept_description',
          value='ConceptDescription',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Data_element',
          value='DataElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Entity',
          value='Entity',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Event',
          value='Event',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='File',
          value='File',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Multi_language_property',
          value='MultiLanguageProperty',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Operation',
          value='Operation',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Property',
          value='Property',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Range',
          value='Range',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Reference_element',
          value='ReferenceElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Relationship_element',
          value='RelationshipElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel',
          value='Submodel',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element',
          value='SubmodelElement',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_list',
          value='SubmodelElementList',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Submodel_element_struct',
          value='SubmodelElementStruct',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Build_in_list_types',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Entities',
          value='ENTITIES',
          description=None,
          node=...),
        EnumerationLiteral(
          name='ID_refs',
          value='IDREFS',
          description=None,
          node=...),
        EnumerationLiteral(
          name='N_M_tokens',
          value='NMTOKENS',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Decimal_build_in_types',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Integer',
          value='integer',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Long',
          value='long',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Int',
          value='int',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Short',
          value='short',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Byte',
          value='byte',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='NonNegativeInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='positiveInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_integer',
          value='unsignedInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='unsignedLong',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='unsignedInt',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='unsignedShort',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='unsignedByte',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='nonPositiveInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='negativeInteger',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Duration_build_in_types',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Day_time_duration',
          value='dayTimeDuration',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='yearMonthDuration',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Primitive_types',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Any_URI',
          value='anyURI',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='base64Binary',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Boolean',
          value='boolean',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Date',
          value='date',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Date_time',
          value='dateTime',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Decimal',
          value='decimal',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Double',
          value='double',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Duration',
          value='duration',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Float',
          value='float',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_day',
          value='gDay',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_month',
          value='gMonth',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_month_day',
          value='gMonthDay',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Hey_binary',
          value='heyBinary',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Notation',
          value='NOTATION',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Q_name',
          value='QName',
          description=None,
          node=...),
        EnumerationLiteral(
          name='String',
          value='string',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Time',
          value='time',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='String_build_in_types',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Normalized_string',
          value='normalizedString',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Token',
          value='token',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Language',
          value='Language',
          description=None,
          node=...),
        EnumerationLiteral(
          name='N_C_name',
          value='NCName',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Entity',
          value='ENTITY',
          description=None,
          node=...),
        EnumerationLiteral(
          name='ID',
          value='ID',
          description=None,
          node=...),
        EnumerationLiteral(
          name='IDREF',
          value='IDREF',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Data_type_def',
      is_superset_of=[
        'Build_in_list_types',
        'Decimal_build_in_types',
        'Duration_build_in_types',
        'Primitive_types',
        'String_build_in_types'],
      literals=[
        EnumerationLiteral(
          name='Entities',
          value='ENTITIES',
          description=None,
          node=...),
        EnumerationLiteral(
          name='ID_refs',
          value='IDREFS',
          description=None,
          node=...),
        EnumerationLiteral(
          name='N_M_tokens',
          value='NMTOKENS',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Integer',
          value='integer',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Long',
          value='long',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Int',
          value='int',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Short',
          value='short',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Byte',
          value='byte',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Non_negative_integer',
          value='NonNegativeInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Positive_integer',
          value='positiveInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_integer',
          value='unsignedInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_long',
          value='unsignedLong',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_int',
          value='unsignedInt',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_short',
          value='unsignedShort',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Unsigned_byte',
          value='unsignedByte',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Non_positive_integer',
          value='nonPositiveInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Negative_integer',
          value='negativeInteger',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Day_time_duration',
          value='dayTimeDuration',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Year_month_duration',
          value='yearMonthDuration',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Any_URI',
          value='anyURI',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Base_64_binary',
          value='base64Binary',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Boolean',
          value='boolean',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Date',
          value='date',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Date_time',
          value='dateTime',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Decimal',
          value='decimal',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Double',
          value='double',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Duration',
          value='duration',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Float',
          value='float',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_day',
          value='gDay',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_month',
          value='gMonth',
          description=None,
          node=...),
        EnumerationLiteral(
          name='G_month_day',
          value='gMonthDay',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Hey_binary',
          value='heyBinary',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Notation',
          value='NOTATION',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Q_name',
          value='QName',
          description=None,
          node=...),
        EnumerationLiteral(
          name='String',
          value='string',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Time',
          value='time',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Normalized_string',
          value='normalizedString',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Token',
          value='token',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Language',
          value='Language',
          description=None,
          node=...),
        EnumerationLiteral(
          name='N_C_name',
          value='NCName',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Entity',
          value='ENTITY',
          description=None,
          node=...),
        EnumerationLiteral(
          name='ID',
          value='ID',
          description=None,
          node=...),
        EnumerationLiteral(
          name='IDREF',
          value='IDREF',
          description=None,
          node=...)],
      description=Description(
        document=...,
        node=...),
      node=...,
      literals_by_name=...),
    ConcreteClass(
      name='Lang_string_set',
      is_implementation_specific=True,
      inheritances=[],
      properties=[],
      methods=[],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    AbstractClass(
      name='Data_specification_content',
      is_implementation_specific=False,
      inheritances=[],
      properties=[],
      methods=[],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    Enumeration(
      name='Data_type_IEC61360',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Date',
          value='DATE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='String',
          value='STRING',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='String_translatable',
          value='STRING_TRANSLATABLE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Integer_Measure',
          value='INTEGER_MEASURE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Integer_count',
          value='INTEGER_COUNT',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Integer_currency',
          value='INTEGER_CURRENCY',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Real_measure',
          value='REAL_MEASURE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Real_count',
          value='REAL_COUNT',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Real_currency',
          value='REAL_CURRENCY',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Boolean',
          value='BOOLEAN',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='IRI',
          value='IRI',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='IRDI',
          value='IRDI',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Rational',
          value='RATIONAL',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Rational_measure',
          value='RATIONAL_MEASURE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Time',
          value='TIME',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Timestamp',
          value='TIMESTAMP',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='File',
          value='FILE',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='HTML',
          value='HTML',
          description=Description(
            document=...,
            node=...),
          node=...),
        EnumerationLiteral(
          name='Blob',
          value='BLOB',
          description=Description(
            document=...,
            node=...),
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    Enumeration(
      name='Level_type',
      is_superset_of=[],
      literals=[
        EnumerationLiteral(
          name='Min',
          value='Min',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Max',
          value='Max',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Nom',
          value='Nom',
          description=None,
          node=...),
        EnumerationLiteral(
          name='Type',
          value='Type',
          description=None,
          node=...)],
      description=None,
      node=...,
      literals_by_name=...),
    ConcreteClass(
      name='Value_reference_pair',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='value',
          type_annotation=AtomicTypeAnnotation(
            identifier='Non_empty_string',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_ID',
          type_annotation=AtomicTypeAnnotation(
            identifier='Reference',
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='value',
              type_annotation=AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...),
              default=None,
              node=...),
            Argument(
              name='value_ID',
              type_annotation=AtomicTypeAnnotation(
                identifier='Reference',
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Value_list',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='value_reference_pairs',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Value_reference_pair',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='value_reference_pairs',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Value_reference_pair',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Data_specification_IEC61360',
      is_implementation_specific=False,
      inheritances=[
        'Data_specification_content'],
      properties=[
        Property(
          name='preferred_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='short_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='unit',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='unit_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='source_of_definition',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='symbol',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='data_type',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Data_type_IEC61360',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='definition',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_format',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_list',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Value_list',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='value_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Reference',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='level_type',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Level_type',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='preferred_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='short_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='unit',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='unit_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='source_of_definition',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='symbol',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='data_type',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Data_type_IEC61360',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='definition',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_format',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_list',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Value_list',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='value_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Reference',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='level_type',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Level_type',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Data_specification_physical_unit',
      is_implementation_specific=False,
      inheritances=[
        'Data_specification_content'],
      properties=[
        Property(
          name='unit_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='unit_symbol',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='definition',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Lang_string_set',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='SI_notation',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='DIN_notation',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='ECE_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='ECE_code',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='NIST_name',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='source_of_definition',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='conversion_factor',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='registration_authority_ID',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...),
        Property(
          name='supplier',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='Optional',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Non_empty_string',
                node=...)],
            node=...),
          description=Description(
            document=...,
            node=...),
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='unit_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='unit_symbol',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='definition',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Lang_string_set',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='SI_notation',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='DIN_notation',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ECE_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='ECE_code',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='NIST_name',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='source_of_definition',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='conversion_factor',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='registration_authority_ID',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='supplier',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  AtomicTypeAnnotation(
                    identifier='Non_empty_string',
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...),
    ConcreteClass(
      name='Environment',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='asset_administration_shells',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Asset_administration_shell',
                node=...)],
            node=...),
          description=None,
          node=...),
        Property(
          name='submodels',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Submodel',
                node=...)],
            node=...),
          description=None,
          node=...),
        Property(
          name='concept_descriptions',
          type_annotation=SubscriptedTypeAnnotation(
            identifier='List',
            subscripts=[
              AtomicTypeAnnotation(
                identifier='Concept_description',
                node=...)],
            node=...),
          description=None,
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='asset_administration_shells',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Asset_administration_shell',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='submodels',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Submodel',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...),
            Argument(
              name='concept_descriptions',
              type_annotation=SubscriptedTypeAnnotation(
                identifier='Optional',
                subscripts=[
                  SubscriptedTypeAnnotation(
                    identifier='List',
                    subscripts=[
                      AtomicTypeAnnotation(
                        identifier='Concept_description',
                        node=...)],
                    node=...)],
                node=...),
              default=Default(
                node=...),
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[],
      serialization=None,
      description=Description(
        document=...,
        node=...),
      node=...,
      properties_by_name=...,
      methods_by_name=...)],
  ref_association='Reference to AbstractClass Reference',
  verification_functions=[
    UnderstoodMethod(
      name='is_MIME_type',
      verification=True,
      arguments=[
        Argument(
          name='text',
          type_annotation=AtomicTypeAnnotation(
            identifier='str',
            node=...),
          default=None,
          node=...)],
      returns=AtomicTypeAnnotation(
        identifier='bool',
        node=...),
      description=Description(
        document=...,
        node=...),
      contracts=Contracts(
        preconditions=[],
        snapshots=[],
        postconditions=[]),
      body=[
        'Assignment(\n  target=Name(\n    identifier=\'tchar\',\n    original_node=...),\n  value=Constant(\n    value="[!#$%&\'*+\\\\-.^_`|~0-9a-zA-Z]",\n    original_node=...),\n  original_node=...)',
        "Assignment(\n  target=Name(\n    identifier='token',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      '(',\n      FormattedValue(\n        value=Name(\n          identifier='tchar',\n          original_node=...),\n        original_node=...),\n      ')+'],\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='type',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      FormattedValue(\n        value=Name(\n          identifier='token',\n          original_node=...),\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='subtype',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      FormattedValue(\n        value=Name(\n          identifier='token',\n          original_node=...),\n        original_node=...)],\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='ows',\n    original_node=...),\n  value=Constant(\n    value='[ \\t]*',\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='obs_text',\n    original_node=...),\n  value=Constant(\n    value='[\\\\x80-\\\\xff]',\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='qd_text',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      '([\\t !#-\\\\[\\\\]-~]|',\n      FormattedValue(\n        value=Name(\n          identifier='obs_text',\n          original_node=...),\n        original_node=...),\n      ')'],\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='quoted_pair',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      '\\\\\\\\([\\t !-~]|',\n      FormattedValue(\n        value=Name(\n          identifier='obs_text',\n          original_node=...),\n        original_node=...),\n      ')'],\n    original_node=...),\n  original_node=...)",
        'Assignment(\n  target=Name(\n    identifier=\'quoted_string\',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      \'"(\',\n      FormattedValue(\n        value=Name(\n          identifier=\'qd_text\',\n          original_node=...),\n        original_node=...),\n      \'|\',\n      FormattedValue(\n        value=Name(\n          identifier=\'quoted_pair\',\n          original_node=...),\n        original_node=...),\n      \')*"\'],\n    original_node=...),\n  original_node=...)',
        "Assignment(\n  target=Name(\n    identifier='parameter',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      FormattedValue(\n        value=Name(\n          identifier='token',\n          original_node=...),\n        original_node=...),\n      '=(',\n      FormattedValue(\n        value=Name(\n          identifier='token',\n          original_node=...),\n        original_node=...),\n      '|',\n      FormattedValue(\n        value=Name(\n          identifier='quoted_string',\n          original_node=...),\n        original_node=...),\n      ')'],\n    original_node=...),\n  original_node=...)",
        "Assignment(\n  target=Name(\n    identifier='media_type',\n    original_node=...),\n  value=JoinedStr(\n    values=[\n      FormattedValue(\n        value=Name(\n          identifier='type',\n          original_node=...),\n        original_node=...),\n      '/',\n      FormattedValue(\n        value=Name(\n          identifier='subtype',\n          original_node=...),\n        original_node=...),\n      '(',\n      FormattedValue(\n        value=Name(\n          identifier='ows',\n          original_node=...),\n        original_node=...),\n      ';',\n      FormattedValue(\n        value=Name(\n          identifier='ows',\n          original_node=...),\n        original_node=...),\n      FormattedValue(\n        value=Name(\n          identifier='parameter',\n          original_node=...),\n        original_node=...),\n      ')*'],\n    original_node=...),\n  original_node=...)",
        "Return(\n  value=IsNotNone(\n    value=FunctionCall(\n      name='match',\n      args=[\n        Name(\n          identifier='media_type',\n          original_node=...),\n        Name(\n          identifier='text',\n          original_node=...)],\n      original_node=...),\n    original_node=...),\n  original_node=...)"],
      node=...,
      arguments_by_name=...)],
  meta_model=MetaModel(
    description=Description(
      document=...,
      node=...),
    book_url='__book_url__',
    book_version='__book_version__'))