UnverifiedSymbolTable(
  our_types=[
    ConcreteClass(
      name='Something',
      is_implementation_specific=False,
      inheritances=[],
      properties=[
        Property(
          name='some_property',
          type_annotation=AtomicTypeAnnotation(
            identifier='str',
            node=...),
          description=None,
          node=...)],
      methods=[
        ConstructorToBeUnderstood(
          name='__init__',
          verification=False,
          arguments=[
            Argument(
              name='self',
              type_annotation=SelfTypeAnnotation(),
              default=None,
              node=...),
            Argument(
              name='some_property',
              type_annotation=AtomicTypeAnnotation(
                identifier='str',
                node=...),
              default=None,
              node=...)],
          returns=None,
          description=None,
          contracts=Contracts(
            preconditions=[],
            snapshots=[],
            postconditions=[]),
          node=...,
          arguments_by_name=...,
          body=...)],
      invariants=[
        Invariant(
          description='Some property must belong to Some set.',
          body=textwrap.dedent("""\
            IsIn(
              member=Member(
                instance=Name(
                  identifier='self',
                  original_node=...),
                name='some_property',
                original_node=...),
              container=Name(
                identifier='Some_set',
                original_node=...),
              original_node=...)"""),
          node=...)],
      serialization=None,
      reference_in_the_book=None,
      description=None,
      node=...,
      properties_by_name=...,
      methods_by_name=...)],
  constants=[
    ConstantSet(
      name='Some_set',
      items_type_annotation=AtomicTypeAnnotation(
        identifier='str',
        node=...),
      set_literals=[
        SetLiteral(
          node=...),
        SetLiteral(
          node=...)],
      subsets=[],
      reference_in_the_book=None,
      description=None,
      node=...)],
  verification_functions=[],
  meta_model=MetaModel(
    description=None,
    book_url='dummy',
    book_version='dummy',
    xml_namespace='https://dummy.com'))