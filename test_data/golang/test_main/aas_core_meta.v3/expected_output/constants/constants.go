// Package constants provides immutable values of the meta-model.
//
// These are not necessarily constants in the sense of Go language, but
// variables that are expected not to be mutated by the clients.
package constants

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

import (
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
)

// Categories for [aastypes.IDataElement] as defined in Constraint AASd-090
var ValidCategoriesForDataElement = map[string]struct{} {
	"CONSTANT": struct{}{},
	"PARAMETER": struct{}{},
	"VARIABLE": struct{}{},
}

// Enumeration of all identifiable elements within an asset administration shell.
var GenericFragmentKeys = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesFragmentReference: struct{}{},
}

// Enumeration of different key value types within a key.
var GenericGloballyIdentifiables = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesGlobalReference: struct{}{},
}

// Enumeration of different key value types within a key.
var AASIdentifiables = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesAssetAdministrationShell: struct{}{},
	aastypes.KeyTypesConceptDescription: struct{}{},
	aastypes.KeyTypesIdentifiable: struct{}{},
	aastypes.KeyTypesSubmodel: struct{}{},
}

// Enumeration of all submodel elements within an asset administration shell.
var AASSubmodelElementsAsKeys = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesAnnotatedRelationshipElement: struct{}{},
	aastypes.KeyTypesBasicEventElement: struct{}{},
	aastypes.KeyTypesBlob: struct{}{},
	aastypes.KeyTypesCapability: struct{}{},
	aastypes.KeyTypesDataElement: struct{}{},
	aastypes.KeyTypesEntity: struct{}{},
	aastypes.KeyTypesEventElement: struct{}{},
	aastypes.KeyTypesFile: struct{}{},
	aastypes.KeyTypesMultiLanguageProperty: struct{}{},
	aastypes.KeyTypesOperation: struct{}{},
	aastypes.KeyTypesProperty: struct{}{},
	aastypes.KeyTypesRange: struct{}{},
	aastypes.KeyTypesReferenceElement: struct{}{},
	aastypes.KeyTypesRelationshipElement: struct{}{},
	aastypes.KeyTypesSubmodelElement: struct{}{},
	aastypes.KeyTypesSubmodelElementCollection: struct{}{},
	aastypes.KeyTypesSubmodelElementList: struct{}{},
}

// Enumeration of different fragment key value types within a key.
var AASReferableNonIdentifiables = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesAnnotatedRelationshipElement: struct{}{},
	aastypes.KeyTypesBasicEventElement: struct{}{},
	aastypes.KeyTypesBlob: struct{}{},
	aastypes.KeyTypesCapability: struct{}{},
	aastypes.KeyTypesDataElement: struct{}{},
	aastypes.KeyTypesEntity: struct{}{},
	aastypes.KeyTypesEventElement: struct{}{},
	aastypes.KeyTypesFile: struct{}{},
	aastypes.KeyTypesMultiLanguageProperty: struct{}{},
	aastypes.KeyTypesOperation: struct{}{},
	aastypes.KeyTypesProperty: struct{}{},
	aastypes.KeyTypesRange: struct{}{},
	aastypes.KeyTypesReferenceElement: struct{}{},
	aastypes.KeyTypesRelationshipElement: struct{}{},
	aastypes.KeyTypesSubmodelElement: struct{}{},
	aastypes.KeyTypesSubmodelElementCollection: struct{}{},
	aastypes.KeyTypesSubmodelElementList: struct{}{},
}

// Enumeration of referables. We need this to check that model references refer to a Referable. For example, the observed attribute of the Basic Event Element object must be a model reference to a Referable.
var AASReferables = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesAssetAdministrationShell: struct{}{},
	aastypes.KeyTypesConceptDescription: struct{}{},
	aastypes.KeyTypesIdentifiable: struct{}{},
	aastypes.KeyTypesSubmodel: struct{}{},
	aastypes.KeyTypesAnnotatedRelationshipElement: struct{}{},
	aastypes.KeyTypesBasicEventElement: struct{}{},
	aastypes.KeyTypesBlob: struct{}{},
	aastypes.KeyTypesCapability: struct{}{},
	aastypes.KeyTypesDataElement: struct{}{},
	aastypes.KeyTypesEntity: struct{}{},
	aastypes.KeyTypesEventElement: struct{}{},
	aastypes.KeyTypesFile: struct{}{},
	aastypes.KeyTypesMultiLanguageProperty: struct{}{},
	aastypes.KeyTypesOperation: struct{}{},
	aastypes.KeyTypesProperty: struct{}{},
	aastypes.KeyTypesRange: struct{}{},
	aastypes.KeyTypesReferenceElement: struct{}{},
	aastypes.KeyTypesReferable: struct{}{},
	aastypes.KeyTypesRelationshipElement: struct{}{},
	aastypes.KeyTypesSubmodelElement: struct{}{},
	aastypes.KeyTypesSubmodelElementCollection: struct{}{},
	aastypes.KeyTypesSubmodelElementList: struct{}{},
}

// Enumeration of all referable elements within an asset administration shell
var GloballyIdentifiables = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesGlobalReference: struct{}{},
	aastypes.KeyTypesAssetAdministrationShell: struct{}{},
	aastypes.KeyTypesConceptDescription: struct{}{},
	aastypes.KeyTypesIdentifiable: struct{}{},
	aastypes.KeyTypesSubmodel: struct{}{},
}

// Enumeration of different key value types within a key.
var FragmentKeys = map[aastypes.KeyTypes]struct{} {
	aastypes.KeyTypesAnnotatedRelationshipElement: struct{}{},
	aastypes.KeyTypesBasicEventElement: struct{}{},
	aastypes.KeyTypesBlob: struct{}{},
	aastypes.KeyTypesCapability: struct{}{},
	aastypes.KeyTypesDataElement: struct{}{},
	aastypes.KeyTypesEntity: struct{}{},
	aastypes.KeyTypesEventElement: struct{}{},
	aastypes.KeyTypesFile: struct{}{},
	aastypes.KeyTypesFragmentReference: struct{}{},
	aastypes.KeyTypesMultiLanguageProperty: struct{}{},
	aastypes.KeyTypesOperation: struct{}{},
	aastypes.KeyTypesProperty: struct{}{},
	aastypes.KeyTypesRange: struct{}{},
	aastypes.KeyTypesReferenceElement: struct{}{},
	aastypes.KeyTypesRelationshipElement: struct{}{},
	aastypes.KeyTypesSubmodelElement: struct{}{},
	aastypes.KeyTypesSubmodelElementCollection: struct{}{},
	aastypes.KeyTypesSubmodelElementList: struct{}{},
}

// IEC 61360 data types for concept descriptions categorized with PROPERTY or VALUE.
var DataTypeIEC61360ForPropertyOrValue = map[aastypes.DataTypeIEC61360]struct{} {
	aastypes.DataTypeIEC61360Date: struct{}{},
	aastypes.DataTypeIEC61360String: struct{}{},
	aastypes.DataTypeIEC61360StringTranslatable: struct{}{},
	aastypes.DataTypeIEC61360IntegerMeasure: struct{}{},
	aastypes.DataTypeIEC61360IntegerCount: struct{}{},
	aastypes.DataTypeIEC61360IntegerCurrency: struct{}{},
	aastypes.DataTypeIEC61360RealMeasure: struct{}{},
	aastypes.DataTypeIEC61360RealCount: struct{}{},
	aastypes.DataTypeIEC61360RealCurrency: struct{}{},
	aastypes.DataTypeIEC61360Boolean: struct{}{},
	aastypes.DataTypeIEC61360Rational: struct{}{},
	aastypes.DataTypeIEC61360RationalMeasure: struct{}{},
	aastypes.DataTypeIEC61360Time: struct{}{},
	aastypes.DataTypeIEC61360Timestamp: struct{}{},
}

// IEC 61360 data types for concept descriptions categorized with REFERENCE.
var DataTypeIEC61360ForReference = map[aastypes.DataTypeIEC61360]struct{} {
	aastypes.DataTypeIEC61360String: struct{}{},
	aastypes.DataTypeIEC61360IRI: struct{}{},
	aastypes.DataTypeIEC61360IRDI: struct{}{},
}

// IEC 61360 data types for concept descriptions categorized with DOCUMENT.
var DataTypeIEC61360ForDocument = map[aastypes.DataTypeIEC61360]struct{} {
	aastypes.DataTypeIEC61360File: struct{}{},
	aastypes.DataTypeIEC61360Blob: struct{}{},
	aastypes.DataTypeIEC61360HTML: struct{}{},
}

// These data types imply that the unit is defined in the data specification.
var IEC61360DataTypesWithUnit = map[aastypes.DataTypeIEC61360]struct{} {
	aastypes.DataTypeIEC61360IntegerMeasure: struct{}{},
	aastypes.DataTypeIEC61360RealMeasure: struct{}{},
	aastypes.DataTypeIEC61360RationalMeasure: struct{}{},
	aastypes.DataTypeIEC61360IntegerCurrency: struct{}{},
	aastypes.DataTypeIEC61360RealCurrency: struct{}{},
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
