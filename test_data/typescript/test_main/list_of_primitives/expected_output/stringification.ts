/**
 * De/serialize enumerations from and to string representations.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

import * as AasTypes from "./types";

const MODEL_TYPE_FROM_STRING = new Map<string, AasTypes.ModelType>([
  [
    "ListOfPrimitives",
    AasTypes.ModelType.ListOfPrimitives
  ]
]);

/**
 * Parse `text` as a string representation of {@link types!ModelType}.
 *
 * @param text - string representation of {@link types!ModelType}
 * @returns literal of {@link types!ModelType}, if valid, and `null` otherwise
 */
export function modelTypeFromString(
  text: string
): AasTypes.ModelType | null {
  const result = MODEL_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const MODEL_TYPE_TO_STRING = new Map<AasTypes.ModelType, string>([
  [
    AasTypes.ModelType.ListOfPrimitives,
    "ListOfPrimitives"
  ]
]);

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType},
 * if `value` valid, and `null` otherwise
 */
export function modelTypeToString(
  value: AasTypes.ModelType
): string | null {
  const result = MODEL_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModelType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModelType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustModelTypeToString(
  value: AasTypes.ModelType
): string {
  const result = MODEL_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of ModelType: ${value}`
    );
  }
  return result;
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
