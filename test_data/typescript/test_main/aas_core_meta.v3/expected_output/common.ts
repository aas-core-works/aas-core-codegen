/**
 * Provide common functions shared among the modules.
 */


// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.


/**
 * Create an iterator over the given range of numbers.
 *
 * @param start - inclusive start of the range
 * @param end - exclusive end of the range
 * @returns iterator over the range
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function *range(start: number, end: number): IterableIterator<number> {
  for (let i = start; i < end; i++) {
    yield i;
  }
}


/**
 * Retrieve the `index`-th item from the `array`.
 *
 * @remarks
 * This is a fill for `Array.prototype.at`.
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 *
 * @param array - to get the element from
 * @param index - zero-based index of the `array`. Negative index counts back.
 * @returns item, or `undefined` if `index` out-of-bound
 * @typeParam T - type of the array items
 */
export function at<T>(
  array: Array<T>,
  index: number
) {
  if (index < 0) {
    return array[array.length + index];
  } else {
    return array[index];
  }
}


/**
 * Check that all the values of the iterable are `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if all values in `iterable` are set
 */
export function every<T>(
  iterable: Iterable<T>
): boolean {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.

  for (const item of iterable) {
    if (!item) {
      return false;
    }
  }

  return true;
}


/**
 * Check that at least one value of the iterable is `true`.
 *
 * @param iterable - to iterate over
 * @returns `true` if at least one value in `iterable` is set
 */
export function some<T>(
  iterable: Iterable<T>
): boolean {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional. Unfortunately, `every` and `some` are only available
  // in arrays and not in `IterableIterator`.

  for (const item of iterable) {
    if (item) {
      return true;
    }
  }

  return false;
}


/**
 * Map the items of an iterable.
 *
 * @param iterable - to be mapped
 * @param mappingFunction - to be applied on `iterable`
 * @returns mapped items of `iterable`
 * @typeParam S - type of an item of the `iterable`
 * @typeParam T - type of the transformed item of the `iterable`
 */
export function *map<S, T>(
  iterable: Iterable<S>,
  mappingFunction: (item: S) => T
): IterableIterator<T> {
  // NOTE (mristin, 2022-11-24):
  // We introduce this function so that we can keep the constraint verification
  // purely functional.

  for (const item of iterable) {
    yield mappingFunction(item);
  }
}


/**
 * Represent either a result, or an error.
 *
 * @typeParam ValueT - type of the resulting value
 * @typeParam ErrorT - type of the error
 */
export class Either<ValueT, ErrorT> {
  /**
   * value if something successful
   */
  readonly value: ValueT | null;

  /**
   * error if something failed
   */
  readonly error: ErrorT | null;

  /**
   * Assert that value is set and return it.
   *
   * @returns {@link value}, or throw if `null`
   */
  mustValue(): ValueT {
    if (this.value === null) {
      throw new Error("Expected value to be set, but it was null");
    }
    return this.value;
  }

  constructor(value: ValueT | null, error: ErrorT | null) {
    if (value === null && error === null) {
      throw new Error("Unexpected both value and error null in an Either");
    }

    if (value !== null && error !== null) {
      throw new Error("Unexpected both value and error non-null in an Either");
    }

    this.value = value;
    this.error = error;
  }
}


const BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const BASE64_LOOKUP = new Uint8Array(256);

// NOTE (mristin, 2022-11-25):
// Initialize to 255 so that we can detect invalid values in the input during decoding.
for (let i = 0; i < BASE64_LOOKUP.length; i++) {
  BASE64_LOOKUP[i] = 255;
}

// NOTE (mristin, 2022-11-25):
// Initialize valid values to the corresponding decoding points.
for (let i = 0; i < BASE64_CHARS.length; i++) {
  BASE64_LOOKUP[BASE64_CHARS.charCodeAt(i)] = i;
}

/**
 * Encode a byte array in base64.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param bytes - to be encoded
 * @returns `bytes` encoded as base64 text
 */
export function base64Encode(bytes: Uint8Array): string {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  // NOTE (mristin, 2022-11-25):
  // We assume that string concatenation is actually *faster* than joining an array
  // of strings, see:
  // https://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-javascript

  if (bytes.length === 0) {
    return "";
  }

  let encoded = '';
  const len = bytes.length;

  for (let i = 0; i < len; i += 3) {
    encoded += BASE64_CHARS[bytes[i] >> 2];
    encoded += BASE64_CHARS[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
    encoded += BASE64_CHARS[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
    encoded += BASE64_CHARS[bytes[i + 2] & 63];
  }

    // NOTE (mristin, 2022-11-25):
    // We assume here that `substring` will be optimized for cases where we do not keep
    // the original reference to the string. We tested a bit with
    // https://www.measurethat.net/.

  if (len % 3 === 2) {
    encoded = encoded.substring(0, encoded.length - 1) + '=';
  } else if (len % 3 === 1) {
    encoded = encoded.substring(0, encoded.length - 2) + '==';
  } else {
    // No padding is necessary.
  }

  return encoded;
}


/**
 * Decode a base64-encoded byte array.
 *
 * @remarks
 * We provide our own implementation so that we do not run into compatibility
 * issues with node.js, different browsers etc.
 * See:
 * https://stackoverflow.com/questions/21797299/convert-base64-string-to-arraybuffer
 *
 * @param text - to be decoded
 * @returns either the array or an error, if `text` is not a valid base64 encoding
 */
export function base64Decode(text: string): Either<Uint8Array, string> {
  // NOTE (mristin, 2022-11-25):
  // This implementation is vaguely based on:
  // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js,
  // https://github.com/niklasvh/base64-arraybuffer/blob/master/src/index.ts and
  // https://github.com/beatgammit/base64-js/blob/master/index.js.

  const len = text.length;
  let lenWoPad = len;

  // NOTE (mristin, 2022-11-25):
  // Some implementations forget the padding, so we try to be robust and check
  // for the padding manually.
  let bytesLength = text.length * 0.75;
  if (text[len - 1] === '=') {
    bytesLength--;
    lenWoPad--;
    if (text[len - 2] === '=') {
      bytesLength--;
      lenWoPad--;
    }
  }

  const bytes = new Uint8Array(bytesLength);

  const base64LookupLen = BASE64_LOOKUP.length;

  let pointer = 0;

  for (let i = 0; i < len; i += 4) {
    // NOTE (mristin, 2022-11-25):
    // Admittedly, this is very verbose code, but we want to be efficient, so we
    // opted for performance over readability here.

    const charCode0 = text.charCodeAt(i);
    if (charCode0 >= base64LookupLen) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i}: ${text[i]} (code: ${charCode0})`
      );
    }
    const encoded0 = BASE64_LOOKUP[charCode0];
    if (encoded0 === 255) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i}: ${text[i]} (code: ${charCode0})`
      );
    }

    const charCode1 = text.charCodeAt(i + 1);
    if (charCode1 >= base64LookupLen) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 1}: ${text[i + 1]} (code: ${charCode1})`
      );
    }
    const encoded1 = BASE64_LOOKUP[charCode1];
    if (encoded1 === 255) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 1}: ${text[i + 1]} (code: ${charCode1})`
      );
    }

    // We map padding to 65, which is the value of "A".
    const charCode2 = i + 2 < lenWoPad ? text.charCodeAt(i + 2) : 65;
    if (charCode2 >= base64LookupLen) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 2}: ${text[i + 2]} (code: ${charCode2})`
      );
    }
    const encoded2 = BASE64_LOOKUP[charCode2];
    if (encoded2 === 255) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 2}: ${text[i + 2]} (code: ${charCode2})`
      );
    }

    // We map padding to 65, which is the value of "A".
    const charCode3 = i + 3 < lenWoPad ? text.charCodeAt(i + 3) : 65;
    if (charCode3 >= base64LookupLen) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 3}: ${text[i + 3]} (code: ${charCode3})`
      );
    }
    const encoded3 = BASE64_LOOKUP[charCode3];
    if (encoded3 === 255) {
      return new Either<Uint8Array, string>(
        null,
        "Expected a valid character from base64-encoded string, " +
          `but got at index ${i + 3}: ${text[i + 3]} (code: ${charCode3})`
      );
    }

    bytes[pointer] = (encoded0 << 2) | (encoded1 >> 4);
    pointer++;

    bytes[pointer] = ((encoded1 & 15) << 4) | (encoded2 >> 2);
    pointer++;

    bytes[pointer] = ((encoded2 & 3) << 6) | (encoded3 & 63);
    pointer++;
  }

// NOTE (mristin, 2022-12-02):
// We expect Uint8Array to silently ignore writes outside of the buffer,
// but we still want to check here in case the underlying platform was flaky about it.
  if (bytes.length !== bytesLength) {
    throw new Error(
      `Expected bytes to have length ${bytesLength}, but got ${bytes.length}`
    );
  }

  return new Either<Uint8Array, string>(bytes, null);
}


// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
