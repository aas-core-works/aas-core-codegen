/**
 * De/serialize enumerations from and to string representations.
 */

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.

import * as AasTypes from "./types";

const MODELLING_KIND_FROM_STRING = new Map<string, AasTypes.ModellingKind>([
  ["Template", AasTypes.ModellingKind.Template],
  ["Instance", AasTypes.ModellingKind.Instance]
]);

/**
 * Parse `text` as a string representation of {@link types!ModellingKind}.
 *
 * @param text - string representation of {@link types!ModellingKind}
 * @returns literal of {@link types!ModellingKind}, if valid, and `null` otherwise
 */
export function modellingKindFromString(
  text: string
): AasTypes.ModellingKind | null {
  const result = MODELLING_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const MODELLING_KIND_TO_STRING = new Map<AasTypes.ModellingKind, string>([
  [AasTypes.ModellingKind.Template, "Template"],
  [AasTypes.ModellingKind.Instance, "Instance"]
]);

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}, if `value` valid, and `null` otherwise
 */
export function modellingKindToString(
  value: AasTypes.ModellingKind
): string | null {
  const result = MODELLING_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ModellingKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ModellingKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustModellingKindToString(
  value: AasTypes.ModellingKind
): string {
  const result = MODELLING_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of ModellingKind: ${value}`
    );
  }
  return result;
}

const QUALIFIER_KIND_FROM_STRING = new Map<string, AasTypes.QualifierKind>([
  ["ValueQualifier", AasTypes.QualifierKind.ValueQualifier],
  ["ConceptQualifier", AasTypes.QualifierKind.ConceptQualifier],
  ["TemplateQualifier", AasTypes.QualifierKind.TemplateQualifier]
]);

/**
 * Parse `text` as a string representation of {@link types!QualifierKind}.
 *
 * @param text - string representation of {@link types!QualifierKind}
 * @returns literal of {@link types!QualifierKind}, if valid, and `null` otherwise
 */
export function qualifierKindFromString(
  text: string
): AasTypes.QualifierKind | null {
  const result = QUALIFIER_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const QUALIFIER_KIND_TO_STRING = new Map<AasTypes.QualifierKind, string>([
  [AasTypes.QualifierKind.ValueQualifier, "ValueQualifier"],
  [AasTypes.QualifierKind.ConceptQualifier, "ConceptQualifier"],
  [AasTypes.QualifierKind.TemplateQualifier, "TemplateQualifier"]
]);

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}, if `value` valid, and `null` otherwise
 */
export function qualifierKindToString(
  value: AasTypes.QualifierKind
): string | null {
  const result = QUALIFIER_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!QualifierKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!QualifierKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustQualifierKindToString(
  value: AasTypes.QualifierKind
): string {
  const result = QUALIFIER_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of QualifierKind: ${value}`
    );
  }
  return result;
}

const ASSET_KIND_FROM_STRING = new Map<string, AasTypes.AssetKind>([
  ["Type", AasTypes.AssetKind.Type],
  ["Instance", AasTypes.AssetKind.Instance],
  ["NotApplicable", AasTypes.AssetKind.NotApplicable]
]);

/**
 * Parse `text` as a string representation of {@link types!AssetKind}.
 *
 * @param text - string representation of {@link types!AssetKind}
 * @returns literal of {@link types!AssetKind}, if valid, and `null` otherwise
 */
export function assetKindFromString(
  text: string
): AasTypes.AssetKind | null {
  const result = ASSET_KIND_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const ASSET_KIND_TO_STRING = new Map<AasTypes.AssetKind, string>([
  [AasTypes.AssetKind.Type, "Type"],
  [AasTypes.AssetKind.Instance, "Instance"],
  [AasTypes.AssetKind.NotApplicable, "NotApplicable"]
]);

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}, if `value` valid, and `null` otherwise
 */
export function assetKindToString(
  value: AasTypes.AssetKind
): string | null {
  const result = ASSET_KIND_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AssetKind} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AssetKind}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustAssetKindToString(
  value: AasTypes.AssetKind
): string {
  const result = ASSET_KIND_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of AssetKind: ${value}`
    );
  }
  return result;
}

const AAS_SUBMODEL_ELEMENTS_FROM_STRING = new Map<string, AasTypes.AasSubmodelElements>([
  ["AnnotatedRelationshipElement", AasTypes.AasSubmodelElements.AnnotatedRelationshipElement],
  ["BasicEventElement", AasTypes.AasSubmodelElements.BasicEventElement],
  ["Blob", AasTypes.AasSubmodelElements.Blob],
  ["Capability", AasTypes.AasSubmodelElements.Capability],
  ["DataElement", AasTypes.AasSubmodelElements.DataElement],
  ["Entity", AasTypes.AasSubmodelElements.Entity],
  ["EventElement", AasTypes.AasSubmodelElements.EventElement],
  ["File", AasTypes.AasSubmodelElements.File],
  ["MultiLanguageProperty", AasTypes.AasSubmodelElements.MultiLanguageProperty],
  ["Operation", AasTypes.AasSubmodelElements.Operation],
  ["Property", AasTypes.AasSubmodelElements.Property],
  ["Range", AasTypes.AasSubmodelElements.Range],
  ["ReferenceElement", AasTypes.AasSubmodelElements.ReferenceElement],
  ["RelationshipElement", AasTypes.AasSubmodelElements.RelationshipElement],
  ["SubmodelElement", AasTypes.AasSubmodelElements.SubmodelElement],
  ["SubmodelElementList", AasTypes.AasSubmodelElements.SubmodelElementList],
  ["SubmodelElementCollection", AasTypes.AasSubmodelElements.SubmodelElementCollection]
]);

/**
 * Parse `text` as a string representation of {@link types!AasSubmodelElements}.
 *
 * @param text - string representation of {@link types!AasSubmodelElements}
 * @returns literal of {@link types!AasSubmodelElements}, if valid, and `null` otherwise
 */
export function aasSubmodelElementsFromString(
  text: string
): AasTypes.AasSubmodelElements | null {
  const result = AAS_SUBMODEL_ELEMENTS_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const AAS_SUBMODEL_ELEMENTS_TO_STRING = new Map<AasTypes.AasSubmodelElements, string>([
  [AasTypes.AasSubmodelElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"],
  [AasTypes.AasSubmodelElements.BasicEventElement, "BasicEventElement"],
  [AasTypes.AasSubmodelElements.Blob, "Blob"],
  [AasTypes.AasSubmodelElements.Capability, "Capability"],
  [AasTypes.AasSubmodelElements.DataElement, "DataElement"],
  [AasTypes.AasSubmodelElements.Entity, "Entity"],
  [AasTypes.AasSubmodelElements.EventElement, "EventElement"],
  [AasTypes.AasSubmodelElements.File, "File"],
  [AasTypes.AasSubmodelElements.MultiLanguageProperty, "MultiLanguageProperty"],
  [AasTypes.AasSubmodelElements.Operation, "Operation"],
  [AasTypes.AasSubmodelElements.Property, "Property"],
  [AasTypes.AasSubmodelElements.Range, "Range"],
  [AasTypes.AasSubmodelElements.ReferenceElement, "ReferenceElement"],
  [AasTypes.AasSubmodelElements.RelationshipElement, "RelationshipElement"],
  [AasTypes.AasSubmodelElements.SubmodelElement, "SubmodelElement"],
  [AasTypes.AasSubmodelElements.SubmodelElementList, "SubmodelElementList"],
  [AasTypes.AasSubmodelElements.SubmodelElementCollection, "SubmodelElementCollection"]
]);

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}, if `value` valid, and `null` otherwise
 */
export function aasSubmodelElementsToString(
  value: AasTypes.AasSubmodelElements
): string | null {
  const result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!AasSubmodelElements} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!AasSubmodelElements}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustAasSubmodelElementsToString(
  value: AasTypes.AasSubmodelElements
): string {
  const result = AAS_SUBMODEL_ELEMENTS_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of AasSubmodelElements: ${value}`
    );
  }
  return result;
}

const ENTITY_TYPE_FROM_STRING = new Map<string, AasTypes.EntityType>([
  ["CoManagedEntity", AasTypes.EntityType.CoManagedEntity],
  ["SelfManagedEntity", AasTypes.EntityType.SelfManagedEntity]
]);

/**
 * Parse `text` as a string representation of {@link types!EntityType}.
 *
 * @param text - string representation of {@link types!EntityType}
 * @returns literal of {@link types!EntityType}, if valid, and `null` otherwise
 */
export function entityTypeFromString(
  text: string
): AasTypes.EntityType | null {
  const result = ENTITY_TYPE_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const ENTITY_TYPE_TO_STRING = new Map<AasTypes.EntityType, string>([
  [AasTypes.EntityType.CoManagedEntity, "CoManagedEntity"],
  [AasTypes.EntityType.SelfManagedEntity, "SelfManagedEntity"]
]);

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}, if `value` valid, and `null` otherwise
 */
export function entityTypeToString(
  value: AasTypes.EntityType
): string | null {
  const result = ENTITY_TYPE_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!EntityType} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!EntityType}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustEntityTypeToString(
  value: AasTypes.EntityType
): string {
  const result = ENTITY_TYPE_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of EntityType: ${value}`
    );
  }
  return result;
}

const DIRECTION_FROM_STRING = new Map<string, AasTypes.Direction>([
  ["input", AasTypes.Direction.Input],
  ["output", AasTypes.Direction.Output]
]);

/**
 * Parse `text` as a string representation of {@link types!Direction}.
 *
 * @param text - string representation of {@link types!Direction}
 * @returns literal of {@link types!Direction}, if valid, and `null` otherwise
 */
export function directionFromString(
  text: string
): AasTypes.Direction | null {
  const result = DIRECTION_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const DIRECTION_TO_STRING = new Map<AasTypes.Direction, string>([
  [AasTypes.Direction.Input, "input"],
  [AasTypes.Direction.Output, "output"]
]);

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}, if `value` valid, and `null` otherwise
 */
export function directionToString(
  value: AasTypes.Direction
): string | null {
  const result = DIRECTION_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!Direction} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!Direction}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustDirectionToString(
  value: AasTypes.Direction
): string {
  const result = DIRECTION_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of Direction: ${value}`
    );
  }
  return result;
}

const STATE_OF_EVENT_FROM_STRING = new Map<string, AasTypes.StateOfEvent>([
  ["on", AasTypes.StateOfEvent.On],
  ["off", AasTypes.StateOfEvent.Off]
]);

/**
 * Parse `text` as a string representation of {@link types!StateOfEvent}.
 *
 * @param text - string representation of {@link types!StateOfEvent}
 * @returns literal of {@link types!StateOfEvent}, if valid, and `null` otherwise
 */
export function stateOfEventFromString(
  text: string
): AasTypes.StateOfEvent | null {
  const result = STATE_OF_EVENT_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const STATE_OF_EVENT_TO_STRING = new Map<AasTypes.StateOfEvent, string>([
  [AasTypes.StateOfEvent.On, "on"],
  [AasTypes.StateOfEvent.Off, "off"]
]);

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}, if `value` valid, and `null` otherwise
 */
export function stateOfEventToString(
  value: AasTypes.StateOfEvent
): string | null {
  const result = STATE_OF_EVENT_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!StateOfEvent} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!StateOfEvent}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustStateOfEventToString(
  value: AasTypes.StateOfEvent
): string {
  const result = STATE_OF_EVENT_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of StateOfEvent: ${value}`
    );
  }
  return result;
}

const REFERENCE_TYPES_FROM_STRING = new Map<string, AasTypes.ReferenceTypes>([
  ["ExternalReference", AasTypes.ReferenceTypes.ExternalReference],
  ["ModelReference", AasTypes.ReferenceTypes.ModelReference]
]);

/**
 * Parse `text` as a string representation of {@link types!ReferenceTypes}.
 *
 * @param text - string representation of {@link types!ReferenceTypes}
 * @returns literal of {@link types!ReferenceTypes}, if valid, and `null` otherwise
 */
export function referenceTypesFromString(
  text: string
): AasTypes.ReferenceTypes | null {
  const result = REFERENCE_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const REFERENCE_TYPES_TO_STRING = new Map<AasTypes.ReferenceTypes, string>([
  [AasTypes.ReferenceTypes.ExternalReference, "ExternalReference"],
  [AasTypes.ReferenceTypes.ModelReference, "ModelReference"]
]);

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}, if `value` valid, and `null` otherwise
 */
export function referenceTypesToString(
  value: AasTypes.ReferenceTypes
): string | null {
  const result = REFERENCE_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!ReferenceTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!ReferenceTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustReferenceTypesToString(
  value: AasTypes.ReferenceTypes
): string {
  const result = REFERENCE_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of ReferenceTypes: ${value}`
    );
  }
  return result;
}

const KEY_TYPES_FROM_STRING = new Map<string, AasTypes.KeyTypes>([
  ["AnnotatedRelationshipElement", AasTypes.KeyTypes.AnnotatedRelationshipElement],
  ["AssetAdministrationShell", AasTypes.KeyTypes.AssetAdministrationShell],
  ["BasicEventElement", AasTypes.KeyTypes.BasicEventElement],
  ["Blob", AasTypes.KeyTypes.Blob],
  ["Capability", AasTypes.KeyTypes.Capability],
  ["ConceptDescription", AasTypes.KeyTypes.ConceptDescription],
  ["DataElement", AasTypes.KeyTypes.DataElement],
  ["Entity", AasTypes.KeyTypes.Entity],
  ["EventElement", AasTypes.KeyTypes.EventElement],
  ["File", AasTypes.KeyTypes.File],
  ["FragmentReference", AasTypes.KeyTypes.FragmentReference],
  ["GlobalReference", AasTypes.KeyTypes.GlobalReference],
  ["Identifiable", AasTypes.KeyTypes.Identifiable],
  ["MultiLanguageProperty", AasTypes.KeyTypes.MultiLanguageProperty],
  ["Operation", AasTypes.KeyTypes.Operation],
  ["Property", AasTypes.KeyTypes.Property],
  ["Range", AasTypes.KeyTypes.Range],
  ["Referable", AasTypes.KeyTypes.Referable],
  ["ReferenceElement", AasTypes.KeyTypes.ReferenceElement],
  ["RelationshipElement", AasTypes.KeyTypes.RelationshipElement],
  ["Submodel", AasTypes.KeyTypes.Submodel],
  ["SubmodelElement", AasTypes.KeyTypes.SubmodelElement],
  ["SubmodelElementCollection", AasTypes.KeyTypes.SubmodelElementCollection],
  ["SubmodelElementList", AasTypes.KeyTypes.SubmodelElementList]
]);

/**
 * Parse `text` as a string representation of {@link types!KeyTypes}.
 *
 * @param text - string representation of {@link types!KeyTypes}
 * @returns literal of {@link types!KeyTypes}, if valid, and `null` otherwise
 */
export function keyTypesFromString(
  text: string
): AasTypes.KeyTypes | null {
  const result = KEY_TYPES_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const KEY_TYPES_TO_STRING = new Map<AasTypes.KeyTypes, string>([
  [AasTypes.KeyTypes.AnnotatedRelationshipElement, "AnnotatedRelationshipElement"],
  [AasTypes.KeyTypes.AssetAdministrationShell, "AssetAdministrationShell"],
  [AasTypes.KeyTypes.BasicEventElement, "BasicEventElement"],
  [AasTypes.KeyTypes.Blob, "Blob"],
  [AasTypes.KeyTypes.Capability, "Capability"],
  [AasTypes.KeyTypes.ConceptDescription, "ConceptDescription"],
  [AasTypes.KeyTypes.DataElement, "DataElement"],
  [AasTypes.KeyTypes.Entity, "Entity"],
  [AasTypes.KeyTypes.EventElement, "EventElement"],
  [AasTypes.KeyTypes.File, "File"],
  [AasTypes.KeyTypes.FragmentReference, "FragmentReference"],
  [AasTypes.KeyTypes.GlobalReference, "GlobalReference"],
  [AasTypes.KeyTypes.Identifiable, "Identifiable"],
  [AasTypes.KeyTypes.MultiLanguageProperty, "MultiLanguageProperty"],
  [AasTypes.KeyTypes.Operation, "Operation"],
  [AasTypes.KeyTypes.Property, "Property"],
  [AasTypes.KeyTypes.Range, "Range"],
  [AasTypes.KeyTypes.Referable, "Referable"],
  [AasTypes.KeyTypes.ReferenceElement, "ReferenceElement"],
  [AasTypes.KeyTypes.RelationshipElement, "RelationshipElement"],
  [AasTypes.KeyTypes.Submodel, "Submodel"],
  [AasTypes.KeyTypes.SubmodelElement, "SubmodelElement"],
  [AasTypes.KeyTypes.SubmodelElementCollection, "SubmodelElementCollection"],
  [AasTypes.KeyTypes.SubmodelElementList, "SubmodelElementList"]
]);

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}, if `value` valid, and `null` otherwise
 */
export function keyTypesToString(
  value: AasTypes.KeyTypes
): string | null {
  const result = KEY_TYPES_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!KeyTypes} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!KeyTypes}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustKeyTypesToString(
  value: AasTypes.KeyTypes
): string {
  const result = KEY_TYPES_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of KeyTypes: ${value}`
    );
  }
  return result;
}

const DATA_TYPE_DEF_XSD_FROM_STRING = new Map<string, AasTypes.DataTypeDefXsd>([
  ["xs:anyURI", AasTypes.DataTypeDefXsd.AnyUri],
  ["xs:base64Binary", AasTypes.DataTypeDefXsd.Base64Binary],
  ["xs:boolean", AasTypes.DataTypeDefXsd.Boolean],
  ["xs:byte", AasTypes.DataTypeDefXsd.Byte],
  ["xs:date", AasTypes.DataTypeDefXsd.Date],
  ["xs:dateTime", AasTypes.DataTypeDefXsd.DateTime],
  ["xs:decimal", AasTypes.DataTypeDefXsd.Decimal],
  ["xs:double", AasTypes.DataTypeDefXsd.Double],
  ["xs:duration", AasTypes.DataTypeDefXsd.Duration],
  ["xs:float", AasTypes.DataTypeDefXsd.Float],
  ["xs:gDay", AasTypes.DataTypeDefXsd.GDay],
  ["xs:gMonth", AasTypes.DataTypeDefXsd.GMonth],
  ["xs:gMonthDay", AasTypes.DataTypeDefXsd.GMonthDay],
  ["xs:gYear", AasTypes.DataTypeDefXsd.GYear],
  ["xs:gYearMonth", AasTypes.DataTypeDefXsd.GYearMonth],
  ["xs:hexBinary", AasTypes.DataTypeDefXsd.HexBinary],
  ["xs:int", AasTypes.DataTypeDefXsd.Int],
  ["xs:integer", AasTypes.DataTypeDefXsd.Integer],
  ["xs:long", AasTypes.DataTypeDefXsd.Long],
  ["xs:negativeInteger", AasTypes.DataTypeDefXsd.NegativeInteger],
  ["xs:nonNegativeInteger", AasTypes.DataTypeDefXsd.NonNegativeInteger],
  ["xs:nonPositiveInteger", AasTypes.DataTypeDefXsd.NonPositiveInteger],
  ["xs:positiveInteger", AasTypes.DataTypeDefXsd.PositiveInteger],
  ["xs:short", AasTypes.DataTypeDefXsd.Short],
  ["xs:string", AasTypes.DataTypeDefXsd.String],
  ["xs:time", AasTypes.DataTypeDefXsd.Time],
  ["xs:unsignedByte", AasTypes.DataTypeDefXsd.UnsignedByte],
  ["xs:unsignedInt", AasTypes.DataTypeDefXsd.UnsignedInt],
  ["xs:unsignedLong", AasTypes.DataTypeDefXsd.UnsignedLong],
  ["xs:unsignedShort", AasTypes.DataTypeDefXsd.UnsignedShort]
]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeDefXsd}.
 *
 * @param text - string representation of {@link types!DataTypeDefXsd}
 * @returns literal of {@link types!DataTypeDefXsd}, if valid, and `null` otherwise
 */
export function dataTypeDefXsdFromString(
  text: string
): AasTypes.DataTypeDefXsd | null {
  const result = DATA_TYPE_DEF_XSD_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const DATA_TYPE_DEF_XSD_TO_STRING = new Map<AasTypes.DataTypeDefXsd, string>([
  [AasTypes.DataTypeDefXsd.AnyUri, "xs:anyURI"],
  [AasTypes.DataTypeDefXsd.Base64Binary, "xs:base64Binary"],
  [AasTypes.DataTypeDefXsd.Boolean, "xs:boolean"],
  [AasTypes.DataTypeDefXsd.Byte, "xs:byte"],
  [AasTypes.DataTypeDefXsd.Date, "xs:date"],
  [AasTypes.DataTypeDefXsd.DateTime, "xs:dateTime"],
  [AasTypes.DataTypeDefXsd.Decimal, "xs:decimal"],
  [AasTypes.DataTypeDefXsd.Double, "xs:double"],
  [AasTypes.DataTypeDefXsd.Duration, "xs:duration"],
  [AasTypes.DataTypeDefXsd.Float, "xs:float"],
  [AasTypes.DataTypeDefXsd.GDay, "xs:gDay"],
  [AasTypes.DataTypeDefXsd.GMonth, "xs:gMonth"],
  [AasTypes.DataTypeDefXsd.GMonthDay, "xs:gMonthDay"],
  [AasTypes.DataTypeDefXsd.GYear, "xs:gYear"],
  [AasTypes.DataTypeDefXsd.GYearMonth, "xs:gYearMonth"],
  [AasTypes.DataTypeDefXsd.HexBinary, "xs:hexBinary"],
  [AasTypes.DataTypeDefXsd.Int, "xs:int"],
  [AasTypes.DataTypeDefXsd.Integer, "xs:integer"],
  [AasTypes.DataTypeDefXsd.Long, "xs:long"],
  [AasTypes.DataTypeDefXsd.NegativeInteger, "xs:negativeInteger"],
  [AasTypes.DataTypeDefXsd.NonNegativeInteger, "xs:nonNegativeInteger"],
  [AasTypes.DataTypeDefXsd.NonPositiveInteger, "xs:nonPositiveInteger"],
  [AasTypes.DataTypeDefXsd.PositiveInteger, "xs:positiveInteger"],
  [AasTypes.DataTypeDefXsd.Short, "xs:short"],
  [AasTypes.DataTypeDefXsd.String, "xs:string"],
  [AasTypes.DataTypeDefXsd.Time, "xs:time"],
  [AasTypes.DataTypeDefXsd.UnsignedByte, "xs:unsignedByte"],
  [AasTypes.DataTypeDefXsd.UnsignedInt, "xs:unsignedInt"],
  [AasTypes.DataTypeDefXsd.UnsignedLong, "xs:unsignedLong"],
  [AasTypes.DataTypeDefXsd.UnsignedShort, "xs:unsignedShort"]
]);

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}, if `value` valid, and `null` otherwise
 */
export function dataTypeDefXsdToString(
  value: AasTypes.DataTypeDefXsd
): string | null {
  const result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeDefXsd} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeDefXsd}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustDataTypeDefXsdToString(
  value: AasTypes.DataTypeDefXsd
): string {
  const result = DATA_TYPE_DEF_XSD_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of DataTypeDefXsd: ${value}`
    );
  }
  return result;
}

const DATA_TYPE_IEC_61360_FROM_STRING = new Map<string, AasTypes.DataTypeIec61360>([
  ["DATE", AasTypes.DataTypeIec61360.Date],
  ["STRING", AasTypes.DataTypeIec61360.String],
  ["STRING_TRANSLATABLE", AasTypes.DataTypeIec61360.StringTranslatable],
  ["INTEGER_MEASURE", AasTypes.DataTypeIec61360.IntegerMeasure],
  ["INTEGER_COUNT", AasTypes.DataTypeIec61360.IntegerCount],
  ["INTEGER_CURRENCY", AasTypes.DataTypeIec61360.IntegerCurrency],
  ["REAL_MEASURE", AasTypes.DataTypeIec61360.RealMeasure],
  ["REAL_COUNT", AasTypes.DataTypeIec61360.RealCount],
  ["REAL_CURRENCY", AasTypes.DataTypeIec61360.RealCurrency],
  ["BOOLEAN", AasTypes.DataTypeIec61360.Boolean],
  ["IRI", AasTypes.DataTypeIec61360.Iri],
  ["IRDI", AasTypes.DataTypeIec61360.Irdi],
  ["RATIONAL", AasTypes.DataTypeIec61360.Rational],
  ["RATIONAL_MEASURE", AasTypes.DataTypeIec61360.RationalMeasure],
  ["TIME", AasTypes.DataTypeIec61360.Time],
  ["TIMESTAMP", AasTypes.DataTypeIec61360.Timestamp],
  ["FILE", AasTypes.DataTypeIec61360.File],
  ["HTML", AasTypes.DataTypeIec61360.Html],
  ["BLOB", AasTypes.DataTypeIec61360.Blob]
]);

/**
 * Parse `text` as a string representation of {@link types!DataTypeIec61360}.
 *
 * @param text - string representation of {@link types!DataTypeIec61360}
 * @returns literal of {@link types!DataTypeIec61360}, if valid, and `null` otherwise
 */
export function dataTypeIec61360FromString(
  text: string
): AasTypes.DataTypeIec61360 | null {
  const result = DATA_TYPE_IEC_61360_FROM_STRING.get(text);
  return result !== undefined ? result : null;
}

const DATA_TYPE_IEC_61360_TO_STRING = new Map<AasTypes.DataTypeIec61360, string>([
  [AasTypes.DataTypeIec61360.Date, "DATE"],
  [AasTypes.DataTypeIec61360.String, "STRING"],
  [AasTypes.DataTypeIec61360.StringTranslatable, "STRING_TRANSLATABLE"],
  [AasTypes.DataTypeIec61360.IntegerMeasure, "INTEGER_MEASURE"],
  [AasTypes.DataTypeIec61360.IntegerCount, "INTEGER_COUNT"],
  [AasTypes.DataTypeIec61360.IntegerCurrency, "INTEGER_CURRENCY"],
  [AasTypes.DataTypeIec61360.RealMeasure, "REAL_MEASURE"],
  [AasTypes.DataTypeIec61360.RealCount, "REAL_COUNT"],
  [AasTypes.DataTypeIec61360.RealCurrency, "REAL_CURRENCY"],
  [AasTypes.DataTypeIec61360.Boolean, "BOOLEAN"],
  [AasTypes.DataTypeIec61360.Iri, "IRI"],
  [AasTypes.DataTypeIec61360.Irdi, "IRDI"],
  [AasTypes.DataTypeIec61360.Rational, "RATIONAL"],
  [AasTypes.DataTypeIec61360.RationalMeasure, "RATIONAL_MEASURE"],
  [AasTypes.DataTypeIec61360.Time, "TIME"],
  [AasTypes.DataTypeIec61360.Timestamp, "TIMESTAMP"],
  [AasTypes.DataTypeIec61360.File, "FILE"],
  [AasTypes.DataTypeIec61360.Html, "HTML"],
  [AasTypes.DataTypeIec61360.Blob, "BLOB"]
]);

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}, if `value` valid, and `null` otherwise
 */
export function dataTypeIec61360ToString(
  value: AasTypes.DataTypeIec61360
): string | null {
  const result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  return result !== undefined ? result : null;
}

/**
 * Translate {@link types!DataTypeIec61360} to a string.
 *
 * @param value - to be stringified
 * @returns string representation of {@link types!DataTypeIec61360}
 * @throws
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error|Error}
 * if the `value` is invalid
 */
export function mustDataTypeIec61360ToString(
  value: AasTypes.DataTypeIec61360
): string {
  const result = DATA_TYPE_IEC_61360_TO_STRING.get(value);
  if (result === undefined) {
    throw new Error(
      `Invalid literal of DataTypeIec61360: ${value}`
    );
  }
  return result;
}

// This code has been automatically generated by aas-core-codegen.
// Do NOT edit or append.
