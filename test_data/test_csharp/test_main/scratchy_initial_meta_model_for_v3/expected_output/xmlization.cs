/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

/*
 * We implement a streaming-based XML de/serialization with 
 * <see cref="System.Xml.XmlReader" /> and <see cref="System.Xml.XmlWriter" /> 
 * due to performance reasons.
 * For more information, see:
 * <ul>
 * <li>https://bertwagner.com/posts/xmlreader-vs-xmldocument-performance/</li>
 * <li>https://www.erikthecoder.net/2019/08/02/xml-parsing-performance-csharp-versus-go/</li>
 * <li>https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-serializer-generator-tool-sgen-exe</li>
 * </ul>
 */

using Xml = System.Xml;
using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;
using Visitation = AasCore.Aas3.Visitation;

namespace AasCore.Aas3
{
    public static class Xmlization
    {
        public class Serializer : Visitation.Visitor 
        {    private readonly Xml.XmlWriter _writer;

            Serializer(Xml.XmlWriter writer)
            {
                _writer = writer;
            }

            public void Visit(IEntity that)
            {
                that.Accept(this);
            }

            public void Visit(LangString that) 
            {
                // Main tag
                _writer.WriteStartElement("langString");

                // Serialize Language
                _writer.WriteStartAttribute("language");
                _writer.WriteValue(that.Language);
                _writer.WriteEndAttribute();

                _writer.WriteValue(that.Text);

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(Identifier that) 
            {
                // Main tag
                _writer.WriteStartElement("identifier");

                // Serialize IdType
                _writer.WriteStartAttribute("idType");
                _writer.WriteValue(
                    Stringification.ToString(that.IdType)
                        ?? throw new System.ArgumentException(
                            $"Invalid IdentifierType: {that.IdType}");
                _writer.WriteEndAttribute();

                _writer.WriteValue(that.Id);

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(AdministrativeInformation that) 
            {
                // Main tag
                _writer.WriteStartElement("administrativeInformation");

                // Serialize Version
                if (that.Version != null)
                {
                    _writer.WriteStartElement("version");
                    _writer.WriteValue(that.Version);
                    _writer.WriteEndElement();
                }
                // Serialized Version.

                // Serialize Revision
                if (that.Revision != null)
                {
                    _writer.WriteStartElement("revision");
                    _writer.WriteValue(that.Revision);
                    _writer.WriteEndElement();
                }
                // Serialized Revision.

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(Key that) 
            {
                // Main tag
                _writer.WriteStartElement("key");

                // Serialize Type
                _writer.WriteStartAttribute("type");
                _writer.WriteValue(
                    Stringification.ToString(that.Type)
                        ?? throw new System.ArgumentException(
                            $"Invalid KeyElements: {that.Type}");
                _writer.WriteEndAttribute();

                // Serialize IdType
                _writer.WriteStartAttribute("idType");
                _writer.WriteValue(
                    Stringification.ToString(that.IdType)
                        ?? throw new System.ArgumentException(
                            $"Invalid KeyType: {that.IdType}");
                _writer.WriteEndAttribute();

                _writer.WriteValue(that.Value);

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(Reference that) 
            {
                // Main tag
                _writer.WriteStartElement("reference");

                // Serialize Keys
                _writer.WriteStartElement("keys");
                foreach (var anItem in that.Keys)
                {
                    Visit(anItem);
                }
                _writer.WriteEndElement();
                // Serialized Keys.

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(AssetAdministrationShell that) 
            {
                // Main tag
                _writer.WriteStartElement("assetAdministrationShell");

                // Serialize IdShort
                _writer.WriteStartElement("idShort");
                _writer.WriteValue(that.IdShort);
                _writer.WriteEndElement();
                // Serialized IdShort.

                // Serialize DisplayName
                if (that.DisplayName != null)
                {
                    _writer.WriteStartElement("displayName");
                    Visit(that.DisplayName);
                    _writer.WriteEndElement();
                }
                // Serialized DisplayName.

                // Serialize Category
                if (that.Category != null)
                {
                    _writer.WriteStartElement("category");
                    _writer.WriteValue(that.Category);
                    _writer.WriteEndElement();
                }
                // Serialized Category.

                // Serialize Description
                if (that.Description != null)
                {
                    _writer.WriteStartElement("description");
                    Visit(that.Description);
                    _writer.WriteEndElement();
                }
                // Serialized Description.

                // Serialize Identification
                _writer.WriteStartElement("identification");
                Visit(that.Identification);
                _writer.WriteEndElement();
                // Serialized Identification.

                // Serialize Administration
                if (that.Administration != null)
                {
                    _writer.WriteStartElement("administration");
                    Visit(that.Administration);
                    _writer.WriteEndElement();
                }
                // Serialized Administration.

                // Serialize DataSpecifications
                _writer.WriteStartElement("dataSpecifications");
                foreach (var anItem in that.DataSpecifications)
                {
                    Visit(anItem);
                }
                _writer.WriteEndElement();
                // Serialized DataSpecifications.

                // Serialize DerivedFrom
                if (that.DerivedFrom != null)
                {
                    _writer.WriteStartElement("derivedFrom");
                    Visit(that.DerivedFrom);
                    _writer.WriteEndElement();
                }
                // Serialized DerivedFrom.

                // Main tag
                _writer.WriteEndElement();
            }

            public void Visit(Environment that) 
            {
                // Main tag
                _writer.WriteStartElement("environment");

                // Serialize AssetAdministrationShells
                _writer.WriteStartElement("assetAdministrationShells");
                foreach (var anItem in that.AssetAdministrationShells)
                {
                    Visit(anItem);
                }
                _writer.WriteEndElement();
                // Serialized AssetAdministrationShells.

                // Main tag
                _writer.WriteEndElement();
            }
        }  // public class Serializer
    }  // public static class Xmlization
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
