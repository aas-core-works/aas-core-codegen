/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */

using Regex = System.Text.RegularExpressions.Regex;
using System.Collections.Generic;  // can't alias
using System.Collections.ObjectModel;  // can't alias
using System.Linq;  // can't alias"

using Aas = AasCore.Aas3;
using Visitation = AasCore.Aas3.Visitation;

namespace AasCore.Aas3
{
    public static class Verification
    {
        /// <summary>
        /// Represent a verification error traceable to an entity or a property.
        /// </summary>
        public class Error
        {
            /// <summary>
            /// JSON-like path to the related object (an entity or a property)
            /// </summary>
            public readonly string Path;

            /// <summary>
            /// Cause or description of the error
            /// </summary>
            public readonly string Message;

            public Error(string path, string message)
            {
                Path = path;
                Message = message;
            }
        }

        /// <summary>
        /// Contain multiple errors observed during a verification.
        /// </summary>
        public class Errors
        {
            /// <summary>
            /// The maximum capacity of the container
            /// </summary>
            public readonly int Capacity;

            /// <summary>
            /// Contained error items
            /// </summary>
            private readonly List<Verification.Error> _entries;

            /// <summary>
            /// Initialize the container with the given <paramref name="capacity" />.
            /// </summary>
            public Errors(int capacity)
            {
                if (capacity <= 0)
                {
                    throw new System.ArgumentException(
                        $"Expected a strictly positive capacity, but got: {capacity}");
                }

                Capacity = capacity;
                _entries = new List<Verification.Error>(Capacity);
            }

            /// <summary>
            /// Add the error to the container if the capacity has not been reached.
            /// </summary>
            public void Add(Verification.Error error)
            {
                if(_entries.Count <= Capacity)
                {
                    _entries.Add(error);
                }
            }

            /// <summary>
            /// True if the capacity has been reached.
            /// </summary>
            public bool Full()
            {
                return _entries.Count == Capacity;
            }

            /// <summary>
            /// Retrieve the contained error entries.
            /// </summary>
            /// <remarks>
            /// If you want to add a new error, use <see cref="Add" />.
            /// </remarks>
            public ReadOnlyCollection<Verification.Error> Entries()
            {
                var result = this._entries.AsReadOnly();
                if (result.Count > Capacity)
                {
                    throw new System.InvalidOperationException(
                        $"Post-condition violated: " +
                        $"result.Count (== {result.Count}) > Capacity (== {Capacity})");
                }
                return result;
            }
        }

        private static Regex _constructMimeTypeRegex()
        {
            var tchar = "[!#$%&'*+\\-.^_`|~0-9a-zA-Z]";
            var token = $"({tchar})+";
            var type = $"{token}";
            var subtype = $"{token}";
            var ows = "[ \t]*";
            var obsText = "[\\x80-\\xff]";
            var qdText = $"([\t !#-\\[\\]-~]|{obsText})";
            var quotedPair = $"\\\\([\t !-~]|{obsText})";
            var quotedString = $"\"({qdText}|{quotedPair})*\"";
            var parameter = $"{token}=({token}|{quotedString})";
            var mediaType = $"{type}/{subtype}({ows};{ows}{parameter})*";
 
            return new Regex(mediaType);
        }

        private static readonly Regex _MimeTypeRegex = _constructMimeTypeRegex();

        /// <summary>
        /// Check that the <paramref name="text"/> is a valid MIME type.
        /// </summary>
        /// <remarks>
        /// Related RFCs:
        /// <ul>
        /// <li>https://www.rfc-editor.org/rfc/rfc7231#section-3.1.1.1,</li>
        /// <li>https://www.rfc-editor.org/rfc/rfc7230#section-3.2.3 and</li>
        /// <li>https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6</li>
        /// </ul>
        /// </remarks>
        public static bool IsMimeType(string text)
        {
            return _MimeTypeRegex.IsMatch(text);
        }

        /// <summary>
        /// Verify the instances of the model classes non-recursively.
        /// </summary>
        /// <remarks>
        /// The methods provided by this class are re-used in the verification
        /// visitors.
        /// </remarks>
        private static class Implementation
        {
            /// <summary>
            /// Hash allowed enum values for efficient validation of enums.
            /// </summary> 
            private static class EnumValueSet
            {
                public static HashSet<int> ForModelingKind = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.ModelingKind)).Cast<int>());

                public static HashSet<int> ForAssetKind = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.AssetKind)).Cast<int>());

                public static HashSet<int> ForEntityType = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.EntityType)).Cast<int>());

                public static HashSet<int> ForIdentifiableElements = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.IdentifiableElements)).Cast<int>());

                public static HashSet<int> ForReferableElements = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.ReferableElements)).Cast<int>());

                public static HashSet<int> ForKeyElements = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.KeyElements)).Cast<int>());

                public static HashSet<int> ForSubmodelElements = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.SubmodelElements)).Cast<int>());

                public static HashSet<int> ForBuildInListTypes = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.BuildInListTypes)).Cast<int>());

                public static HashSet<int> ForDecimalBuildInTypes = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.DecimalBuildInTypes)).Cast<int>());

                public static HashSet<int> ForDurationBuildInTypes = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.DurationBuildInTypes)).Cast<int>());

                public static HashSet<int> ForPrimitiveTypes = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.PrimitiveTypes)).Cast<int>());

                public static HashSet<int> ForStringBuildInTypes = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.StringBuildInTypes)).Cast<int>());

                public static HashSet<int> ForDataTypeDef = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.DataTypeDef)).Cast<int>());

                public static HashSet<int> ForDataTypeIec61360 = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.DataTypeIec61360)).Cast<int>());

                public static HashSet<int> ForLevelType = new HashSet<int>(
                    System.Enum.GetValues(typeof(Aas.LevelType)).Cast<int>());
            }  // private static class EnumValueSet

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyExtension (
                Aas.Extension that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Extension.

                if (errors.Full()) return;

                if (that.ValueType != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForDataTypeDef.Contains(
                            (int)that.ValueType))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/ValueType",
                                $"Invalid {nameof(Aas.DataTypeDef)}: {that.ValueType}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyAdministrativeInformation (
                Aas.AdministrativeInformation that,
                string path,
                Verification.Errors errors)
            {
                if (!(
                    !(that.Revision != null)
                    || (that.Version != null)))
                {
                    errors.Add(
                        new Verification.Error(
                            path,
                            "Invariant violated:\n" +
                            "Constraint AASd-005\n" +
                            "!(that.Revision != null)\n" +
                            "|| (that.Version != null)"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyQualifier (
                Aas.Qualifier that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Qualifier.

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForDataTypeDef.Contains(
                        (int)that.ValueType))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/ValueType",
                            $"Invalid {nameof(Aas.DataTypeDef)}: {that.ValueType}"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyFormula (
                Aas.Formula that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Formula.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyAssetAdministrationShell (
                Aas.AssetAdministrationShell that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for AssetAdministrationShell.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyAssetInformation (
                Aas.AssetInformation that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for AssetInformation.

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForAssetKind.Contains(
                        (int)that.AssetKind))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/AssetKind",
                            $"Invalid {nameof(Aas.AssetKind)}: {that.AssetKind}"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyIdentifierKeyValuePair (
                Aas.IdentifierKeyValuePair that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for IdentifierKeyValuePair.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifySubmodel (
                Aas.Submodel that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Submodel.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifySubmodelElementList (
                Aas.SubmodelElementList that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for SubmodelElementList.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForSubmodelElements.Contains(
                        (int)that.SubmodelElementTypeValues))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/SubmodelElementTypeValues",
                            $"Invalid {nameof(Aas.SubmodelElements)}: {that.SubmodelElementTypeValues}"));
                }

                if (errors.Full()) return;

                if (that.ValueTypeValues != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForDataTypeDef.Contains(
                            (int)that.ValueTypeValues))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/ValueTypeValues",
                                $"Invalid {nameof(Aas.DataTypeDef)}: {that.ValueTypeValues}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifySubmodelElementStruct (
                Aas.SubmodelElementStruct that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for SubmodelElementStruct.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyProperty (
                Aas.Property that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Property.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForDataTypeDef.Contains(
                        (int)that.ValueType))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/ValueType",
                            $"Invalid {nameof(Aas.DataTypeDef)}: {that.ValueType}"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyMultiLanguageProperty (
                Aas.MultiLanguageProperty that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for MultiLanguageProperty.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyRange (
                Aas.Range that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Range.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForDataTypeDef.Contains(
                        (int)that.ValueType))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/ValueType",
                            $"Invalid {nameof(Aas.DataTypeDef)}: {that.ValueType}"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyReferenceElement (
                Aas.ReferenceElement that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for ReferenceElement.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyBlob (
                Aas.Blob that,
                string path,
                Verification.Errors errors)
            {
                if (!Verification.IsMimeType(that.MimeType))
                {
                    errors.Add(
                        new Verification.Error(
                            path,
                            "Invariant violated:\n" +
                            "Verification.IsMimeType(that.MimeType)"));
                }

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyFile (
                Aas.File that,
                string path,
                Verification.Errors errors)
            {
                if (!Verification.IsMimeType(that.MimeType))
                {
                    errors.Add(
                        new Verification.Error(
                            path,
                            "Invariant violated:\n" +
                            "Verification.IsMimeType(that.MimeType)"));
                }

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyAnnotatedRelationshipElement (
                Aas.AnnotatedRelationshipElement that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for AnnotatedRelationshipElement.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyEntity (
                Aas.Entity that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Entity.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForEntityType.Contains(
                        (int)that.EntityType))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/EntityType",
                            $"Invalid {nameof(Aas.EntityType)}: {that.EntityType}"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyBasicEvent (
                Aas.BasicEvent that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for BasicEvent.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyOperation (
                Aas.Operation that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Operation.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyOperationVariable (
                Aas.OperationVariable that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for OperationVariable.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyCapability (
                Aas.Capability that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Capability.

                if (errors.Full()) return;

                if (that.Kind != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForModelingKind.Contains(
                            (int)that.Kind))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/Kind",
                                $"Invalid {nameof(Aas.ModelingKind)}: {that.Kind}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyConceptDescription (
                Aas.ConceptDescription that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for ConceptDescription.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyView (
                Aas.View that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for View.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyGlobalReference (
                Aas.GlobalReference that,
                string path,
                Verification.Errors errors)
            {
                if (!(that.Values.Count >= 1))
                {
                    errors.Add(
                        new Verification.Error(
                            path,
                            "Invariant violated:\n" +
                            "that.Values.Count >= 1"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyModelReference (
                Aas.ModelReference that,
                string path,
                Verification.Errors errors)
            {
                if (!(that.Keys.Count >= 1))
                {
                    errors.Add(
                        new Verification.Error(
                            path,
                            "Invariant violated:\n" +
                            "that.Keys.Count >= 1"));
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyKey (
                Aas.Key that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Key.

                if (errors.Full()) return;

                if (!Verification.Implementation.EnumValueSet.ForKeyElements.Contains(
                        (int)that.Type))
                {
                    errors.Add(
                        new Verification.Error(
                            $"{path}/Type",
                            $"Invalid {nameof(Aas.KeyElements)}: {that.Type}"));
                }
            }

            /// <summary>
            /// Verify the given <paramref name="langStringSet" /> and
            /// append any errors to <paramref name="Errors" />.
            ///
            /// The <paramref name="path" /> localizes the <paramref name="langString" />.
            /// </summary>
            public static void VerifyLangStringSet (
                LangStringSet that,
                string path,
                Errors errors)
            {
                throw new System.NotImplementedException("TODO");
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyValueReferencePair (
                Aas.ValueReferencePair that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for ValueReferencePair.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyValueList (
                Aas.ValueList that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for ValueList.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyDataSpecificationIec61360 (
                Aas.DataSpecificationIec61360 that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for DataSpecificationIec61360.

                if (errors.Full()) return;

                if (that.DataType != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForDataTypeIec61360.Contains(
                            (int)that.DataType))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/DataType",
                                $"Invalid {nameof(Aas.DataTypeIec61360)}: {that.DataType}"));
                    }
                }

                if (errors.Full()) return;

                if (that.LevelType != null)
                {
                    if (!Verification.Implementation.EnumValueSet.ForLevelType.Contains(
                            (int)that.LevelType))
                    {
                        errors.Add(
                            new Verification.Error(
                                $"{path}/LevelType",
                                $"Invalid {nameof(Aas.LevelType)}: {that.LevelType}"));
                    }
                }
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyDataSpecificationPhysicalUnit (
                Aas.DataSpecificationPhysicalUnit that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for DataSpecificationPhysicalUnit.
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and 
            /// append any errors to <paramref name="Errors" />.
            /// 
            /// The <paramref name="path" /> localizes <paramref name="that" /> instance.
            /// </summary>
            public static void VerifyEnvironment (
                Aas.Environment that,
                string path,
                Verification.Errors errors)
            {
                // There are no invariants defined for Environment.
            }
        }  // private static class Implementation

        /// <summary>
        /// Verify the instances of the model classes non-recursively.
        /// </summary>
        public class NonRecursiveVerifier : 
            Visitation.IVisitorWithContext<string>
        {
            public readonly Verification.Errors Errors;

            /// <summary>
            /// Initialize the visitor with the given <paramref name="errors" />.
            ///
            /// The errors observed during the visitation will be appended to
            /// the <paramref name="errors" />.
            /// </summary>
            NonRecursiveVerifier(Verification.Errors errors)
            {
                Errors = errors;
            }

            public void Visit(Aas.IClass that, string context)
            {
                that.Accept(this, context);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Extension that, string context)
            {
                Implementation.VerifyExtension(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.AdministrativeInformation that, string context)
            {
                Implementation.VerifyAdministrativeInformation(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Qualifier that, string context)
            {
                Implementation.VerifyQualifier(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Formula that, string context)
            {
                Implementation.VerifyFormula(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.AssetAdministrationShell that, string context)
            {
                Implementation.VerifyAssetAdministrationShell(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.AssetInformation that, string context)
            {
                Implementation.VerifyAssetInformation(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.IdentifierKeyValuePair that, string context)
            {
                Implementation.VerifyIdentifierKeyValuePair(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Submodel that, string context)
            {
                Implementation.VerifySubmodel(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.SubmodelElementList that, string context)
            {
                Implementation.VerifySubmodelElementList(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.SubmodelElementStruct that, string context)
            {
                Implementation.VerifySubmodelElementStruct(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Property that, string context)
            {
                Implementation.VerifyProperty(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.MultiLanguageProperty that, string context)
            {
                Implementation.VerifyMultiLanguageProperty(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Range that, string context)
            {
                Implementation.VerifyRange(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.ReferenceElement that, string context)
            {
                Implementation.VerifyReferenceElement(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Blob that, string context)
            {
                Implementation.VerifyBlob(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.File that, string context)
            {
                Implementation.VerifyFile(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.AnnotatedRelationshipElement that, string context)
            {
                Implementation.VerifyAnnotatedRelationshipElement(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Entity that, string context)
            {
                Implementation.VerifyEntity(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.BasicEvent that, string context)
            {
                Implementation.VerifyBasicEvent(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Operation that, string context)
            {
                Implementation.VerifyOperation(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.OperationVariable that, string context)
            {
                Implementation.VerifyOperationVariable(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Capability that, string context)
            {
                Implementation.VerifyCapability(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.ConceptDescription that, string context)
            {
                Implementation.VerifyConceptDescription(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.View that, string context)
            {
                Implementation.VerifyView(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.GlobalReference that, string context)
            {
                Implementation.VerifyGlobalReference(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.ModelReference that, string context)
            {
                Implementation.VerifyModelReference(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Key that, string context)
            {
                Implementation.VerifyKey(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.LangStringSet that, string context)
            {
                Implementation.VerifyLangStringSet(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.ValueReferencePair that, string context)
            {
                Implementation.VerifyValueReferencePair(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.ValueList that, string context)
            {
                Implementation.VerifyValueList(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.DataSpecificationIec61360 that, string context)
            {
                Implementation.VerifyDataSpecificationIec61360(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.DataSpecificationPhysicalUnit that, string context)
            {
                Implementation.VerifyDataSpecificationPhysicalUnit(
                    that, context, Errors);
            }

            /// <summary>
            /// Verify <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Aas.Environment that, string context)
            {
                Implementation.VerifyEnvironment(
                    that, context, Errors);
            }
        }  // public class NonRecursiveVerifier

        /// <summary>
        /// Verify the instances of the model classes recursively.
        /// </summary>
        public class RecursiveVerifier : 
            Visitation.IVisitorWithContext<string>
        {
            public readonly Errors Errors;

            /// <summary>
            /// Initialize the visitor with the given <paramref name="errors" />.
            ///
            /// The errors observed during the visitation will be appended to
            /// the <paramref name="errors" />.
            /// </summary>
            RecursiveVerifier(Errors errors)
            {
                Errors = errors;
            }

            public void Visit(IClass that, string context)
            {
                that.Accept(this, context);
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Extension that, string context) 
            {
                Implementation.VerifyExtension(
                    that, context, Errors);

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                if (that.RefersTo != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.RefersTo,
                        $"{context}/RefersTo");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(AdministrativeInformation that, string context) 
            {
                Implementation.VerifyAdministrativeInformation(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Qualifier that, string context) 
            {
                Implementation.VerifyQualifier(
                    that, context, Errors);

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                if (that.ValueId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueId,
                        $"{context}/ValueId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Formula that, string context) 
            {
                Implementation.VerifyFormula(
                    that, context, Errors);

                for(var i = 0; i < that.DependsOn.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DependsOn[i],
                        $"{context}/DependsOn/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(AssetAdministrationShell that, string context) 
            {
                Implementation.VerifyAssetAdministrationShell(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.Administration != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Administration,
                        $"{context}/Administration");
                }

                if (that.DerivedFrom != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DerivedFrom,
                        $"{context}/DerivedFrom");
                }

                if (Errors.Full()) return;
                Visit(
                    that.AssetInformation,
                    $"{context}/AssetInformation");

                for(var i = 0; i < that.Submodels.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Submodels[i],
                        $"{context}/Submodels/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(AssetInformation that, string context) 
            {
                Implementation.VerifyAssetInformation(
                    that, context, Errors);

                if (that.GlobalAssetId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.GlobalAssetId,
                        $"{context}/GlobalAssetId");
                }

                if (that.SpecificAssetId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SpecificAssetId,
                        $"{context}/SpecificAssetId");
                }

                if (that.DefaultThumbnail != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DefaultThumbnail,
                        $"{context}/DefaultThumbnail");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(IdentifierKeyValuePair that, string context) 
            {
                Implementation.VerifyIdentifierKeyValuePair(
                    that, context, Errors);

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                if (that.ExternalSubjectId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ExternalSubjectId,
                        $"{context}/ExternalSubjectId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Submodel that, string context) 
            {
                Implementation.VerifySubmodel(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.Administration != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Administration,
                        $"{context}/Administration");
                }

                for(
                    var i = 0;
                    i < that.SubmodelElements.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SubmodelElements[i],
                        $"{context}/SubmodelElements/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(SubmodelElementList that, string context) 
            {
                Implementation.VerifySubmodelElementList(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                for(var i = 0; i < that.Values.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Values[i],
                        $"{context}/Values/{i}");
                }

                if (that.SemanticIdValues != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticIdValues,
                        $"{context}/SemanticIdValues");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(SubmodelElementStruct that, string context) 
            {
                Implementation.VerifySubmodelElementStruct(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                for(var i = 0; i < that.Values.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Values[i],
                        $"{context}/Values/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Property that, string context) 
            {
                Implementation.VerifyProperty(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                if (that.ValueId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueId,
                        $"{context}/ValueId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(MultiLanguageProperty that, string context) 
            {
                Implementation.VerifyMultiLanguageProperty(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                if (that.Translatable != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Translatable,
                        $"{context}/Translatable");
                }

                if (that.ValueId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueId,
                        $"{context}/ValueId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Range that, string context) 
            {
                Implementation.VerifyRange(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(ReferenceElement that, string context) 
            {
                Implementation.VerifyReferenceElement(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                if (that.Reference != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Reference,
                        $"{context}/Reference");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Blob that, string context) 
            {
                Implementation.VerifyBlob(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(File that, string context) 
            {
                Implementation.VerifyFile(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(AnnotatedRelationshipElement that, string context) 
            {
                Implementation.VerifyAnnotatedRelationshipElement(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                if (Errors.Full()) return;
                Visit(
                    that.First,
                    $"{context}/First");

                if (Errors.Full()) return;
                Visit(
                    that.Second,
                    $"{context}/Second");

                for(var i = 0; i < that.Annotation.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Annotation[i],
                        $"{context}/Annotation/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Entity that, string context) 
            {
                Implementation.VerifyEntity(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                for(var i = 0; i < that.Statements.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Statements[i],
                        $"{context}/Statements/{i}");
                }

                if (that.GlobalAssetId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.GlobalAssetId,
                        $"{context}/GlobalAssetId");
                }

                if (that.SpecificAssetId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SpecificAssetId,
                        $"{context}/SpecificAssetId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(BasicEvent that, string context) 
            {
                Implementation.VerifyBasicEvent(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                if (Errors.Full()) return;
                Visit(
                    that.Observed,
                    $"{context}/Observed");
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Operation that, string context) 
            {
                Implementation.VerifyOperation(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }

                for(var i = 0; i < that.InputVariables.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.InputVariables[i],
                        $"{context}/InputVariables/{i}");
                }

                for(
                    var i = 0;
                    i < that.OutputVariables.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.OutputVariables[i],
                        $"{context}/OutputVariables/{i}");
                }

                for(
                    var i = 0;
                    i < that.InoutputVariables.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.InoutputVariables[i],
                        $"{context}/InoutputVariables/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(OperationVariable that, string context) 
            {
                Implementation.VerifyOperationVariable(
                    that, context, Errors);

                if (Errors.Full()) return;
                Visit(
                    that.Value,
                    $"{context}/Value");
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Capability that, string context) 
            {
                Implementation.VerifyCapability(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(var i = 0; i < that.Qualifiers.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Qualifiers[i],
                        $"{context}/Qualifiers/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(ConceptDescription that, string context) 
            {
                Implementation.VerifyConceptDescription(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.Administration != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Administration,
                        $"{context}/Administration");
                }

                for(var i = 0; i < that.IsCaseOf.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.IsCaseOf[i],
                        $"{context}/IsCaseOf/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(View that, string context) 
            {
                Implementation.VerifyView(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.DataSpecifications.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DataSpecifications[i],
                        $"{context}/DataSpecifications/{i}");
                }

                for(var i = 0; i < that.Extensions.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Extensions[i],
                        $"{context}/Extensions/{i}");
                }

                if (that.DisplayName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.DisplayName,
                        $"{context}/DisplayName");
                }

                if (that.Description != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Description,
                        $"{context}/Description");
                }

                if (that.SemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.SemanticId,
                        $"{context}/SemanticId");
                }

                for(
                    var i = 0;
                    i < that.ContainedElements.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ContainedElements[i],
                        $"{context}/ContainedElements/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(GlobalReference that, string context) 
            {
                Implementation.VerifyGlobalReference(
                    that, context, Errors);

                // The recursion ends here.
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(ModelReference that, string context) 
            {
                Implementation.VerifyModelReference(
                    that, context, Errors);

                for(var i = 0; i < that.Keys.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Keys[i],
                        $"{context}/Keys/{i}");
                }

                if (that.ReferredSemanticId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ReferredSemanticId,
                        $"{context}/ReferredSemanticId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Key that, string context) 
            {
                Implementation.VerifyKey(
                    that, context, Errors);

                // The recursion ends here.
            }

            /// <summary>
            /// Verify recursively <paramref name="langStringSet" /> and
            /// append any error to <see cref="Errors" />
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(LangStringSet that, string context)
            {
                throw new System.NotImplementedException("TODO");
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(ValueReferencePair that, string context) 
            {
                Implementation.VerifyValueReferencePair(
                    that, context, Errors);

                if (Errors.Full()) return;
                Visit(
                    that.ValueId,
                    $"{context}/ValueId");
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(ValueList that, string context) 
            {
                Implementation.VerifyValueList(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.ValueReferencePairs.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueReferencePairs[i],
                        $"{context}/ValueReferencePairs/{i}");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(DataSpecificationIec61360 that, string context) 
            {
                Implementation.VerifyDataSpecificationIec61360(
                    that, context, Errors);

                if (that.PreferredName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.PreferredName,
                        $"{context}/PreferredName");
                }

                if (that.ShortName != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ShortName,
                        $"{context}/ShortName");
                }

                if (that.UnitId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.UnitId,
                        $"{context}/UnitId");
                }

                if (that.Definition != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Definition,
                        $"{context}/Definition");
                }

                if (that.ValueList != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueList,
                        $"{context}/ValueList");
                }

                if (that.ValueId != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ValueId,
                        $"{context}/ValueId");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(DataSpecificationPhysicalUnit that, string context) 
            {
                Implementation.VerifyDataSpecificationPhysicalUnit(
                    that, context, Errors);

                if (that.Definition != null)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Definition,
                        $"{context}/Definition");
                }
            }

            /// <summary>
            /// Verify recursively <paramref name="that" /> instance and
            /// append any error to <see cref="Errors" /> 
            /// where <paramref name="context" /> is used to localize the error.
            /// </summary>
            public void Visit(Environment that, string context) 
            {
                Implementation.VerifyEnvironment(
                    that, context, Errors);

                for(
                    var i = 0;
                    i < that.AssetAdministrationShells.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.AssetAdministrationShells[i],
                        $"{context}/AssetAdministrationShells/{i}");
                }

                for(var i = 0; i < that.Submodels.Count; i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.Submodels[i],
                        $"{context}/Submodels/{i}");
                }

                for(
                    var i = 0;
                    i < that.ConceptDescriptions.Count;
                    i++)
                {
                    if (Errors.Full()) return;
                    Visit(
                        that.ConceptDescriptions[i],
                        $"{context}/ConceptDescriptions/{i}");
                }
            }
        }  // public class RecursiveVerifier
    }  // public static class Verification
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-csharp-codegen.
 * Do NOT edit or append.
 */
