/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

using System.Collections.Generic;  // can't alias

using Aas = AasCore.Aas3;

namespace AasCore.Aas3
{
    public static class Stringification
    {
        private static readonly Dictionary<Aas.ModelingKind, string> _modelingKindToString = (
            new Dictionary<Aas.ModelingKind, string>()
            {
                { Aas.ModelingKind.Template, "TEMPLATE" },
                { Aas.ModelingKind.Instance, "INSTANCE" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.ModelingKind that)
        {
            if (_modelingKindToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.ModelingKind> _modelingKindFromString = (
            new Dictionary<string, Aas.ModelingKind>()
            {
                { "TEMPLATE", Aas.ModelingKind.Template },
                { "INSTANCE", Aas.ModelingKind.Instance }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ModelingKind" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="ModelingKind" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.ModelingKind? ModelingKindFromString(string text)
        {
            if (_modelingKindFromString.TryGetValue(text, out ModelingKind value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.AssetKind, string> _assetKindToString = (
            new Dictionary<Aas.AssetKind, string>()
            {
                { Aas.AssetKind.Type, "Type" },
                { Aas.AssetKind.Instance, "Instance" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.AssetKind that)
        {
            if (_assetKindToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.AssetKind> _assetKindFromString = (
            new Dictionary<string, Aas.AssetKind>()
            {
                { "Type", Aas.AssetKind.Type },
                { "Instance", Aas.AssetKind.Instance }
            });

        /// <summary>
        /// Parse the string representation of <see cref="AssetKind" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="AssetKind" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.AssetKind? AssetKindFromString(string text)
        {
            if (_assetKindFromString.TryGetValue(text, out AssetKind value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.EntityType, string> _entityTypeToString = (
            new Dictionary<Aas.EntityType, string>()
            {
                { Aas.EntityType.CoManagedEntity, "COMANAGEDENTITY" },
                { Aas.EntityType.SelfManagedEntity, "SELFMANAGEDENTITY" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.EntityType that)
        {
            if (_entityTypeToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.EntityType> _entityTypeFromString = (
            new Dictionary<string, Aas.EntityType>()
            {
                { "COMANAGEDENTITY", Aas.EntityType.CoManagedEntity },
                { "SELFMANAGEDENTITY", Aas.EntityType.SelfManagedEntity }
            });

        /// <summary>
        /// Parse the string representation of <see cref="EntityType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="EntityType" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.EntityType? EntityTypeFromString(string text)
        {
            if (_entityTypeFromString.TryGetValue(text, out EntityType value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.IdentifiableElements, string> _identifiableElementsToString = (
            new Dictionary<Aas.IdentifiableElements, string>()
            {
                { Aas.IdentifiableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.IdentifiableElements.ConceptDescription, "ConceptDescription" },
                { Aas.IdentifiableElements.Submodel, "Submodel" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.IdentifiableElements that)
        {
            if (_identifiableElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.IdentifiableElements> _identifiableElementsFromString = (
            new Dictionary<string, Aas.IdentifiableElements>()
            {
                { "AssetAdministrationShell", Aas.IdentifiableElements.AssetAdministrationShell },
                { "ConceptDescription", Aas.IdentifiableElements.ConceptDescription },
                { "Submodel", Aas.IdentifiableElements.Submodel }
            });

        /// <summary>
        /// Parse the string representation of <see cref="IdentifiableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="IdentifiableElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.IdentifiableElements? IdentifiableElementsFromString(string text)
        {
            if (_identifiableElementsFromString.TryGetValue(text, out IdentifiableElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.ReferableElements, string> _referableElementsToString = (
            new Dictionary<Aas.ReferableElements, string>()
            {
                { Aas.ReferableElements.AccessPermissionRule, "AccessPermissionRule" },
                { Aas.ReferableElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.ReferableElements.Asset, "Asset" },
                { Aas.ReferableElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.ReferableElements.BasicEvent, "BasicEvent" },
                { Aas.ReferableElements.Blob, "Blob" },
                { Aas.ReferableElements.Capability, "Capability" },
                { Aas.ReferableElements.ConceptDescription, "ConceptDescription" },
                { Aas.ReferableElements.DataElement, "DataElement" },
                { Aas.ReferableElements.Entity, "Entity" },
                { Aas.ReferableElements.Event, "Event" },
                { Aas.ReferableElements.File, "File" },
                { Aas.ReferableElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.ReferableElements.Operation, "Operation" },
                { Aas.ReferableElements.Property, "Property" },
                { Aas.ReferableElements.Range, "Range" },
                { Aas.ReferableElements.ReferenceElement, "ReferenceElement" },
                { Aas.ReferableElements.RelationshipElement, "RelationshipElement" },
                { Aas.ReferableElements.Submodel, "Submodel" },
                { Aas.ReferableElements.SubmodelElement, "SubmodelElement" },
                { Aas.ReferableElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.ReferableElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.ReferableElements that)
        {
            if (_referableElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.ReferableElements> _referableElementsFromString = (
            new Dictionary<string, Aas.ReferableElements>()
            {
                { "AccessPermissionRule", Aas.ReferableElements.AccessPermissionRule },
                { "AnnotatedRelationshipElement", Aas.ReferableElements.AnnotatedRelationshipElement },
                { "Asset", Aas.ReferableElements.Asset },
                { "AssetAdministrationShell", Aas.ReferableElements.AssetAdministrationShell },
                { "BasicEvent", Aas.ReferableElements.BasicEvent },
                { "Blob", Aas.ReferableElements.Blob },
                { "Capability", Aas.ReferableElements.Capability },
                { "ConceptDescription", Aas.ReferableElements.ConceptDescription },
                { "DataElement", Aas.ReferableElements.DataElement },
                { "Entity", Aas.ReferableElements.Entity },
                { "Event", Aas.ReferableElements.Event },
                { "File", Aas.ReferableElements.File },
                { "MultiLanguageProperty", Aas.ReferableElements.MultiLanguageProperty },
                { "Operation", Aas.ReferableElements.Operation },
                { "Property", Aas.ReferableElements.Property },
                { "Range", Aas.ReferableElements.Range },
                { "ReferenceElement", Aas.ReferableElements.ReferenceElement },
                { "RelationshipElement", Aas.ReferableElements.RelationshipElement },
                { "Submodel", Aas.ReferableElements.Submodel },
                { "SubmodelElement", Aas.ReferableElements.SubmodelElement },
                { "SubmodelElementList", Aas.ReferableElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.ReferableElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="ReferableElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="ReferableElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.ReferableElements? ReferableElementsFromString(string text)
        {
            if (_referableElementsFromString.TryGetValue(text, out ReferableElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.KeyElements, string> _keyElementsToString = (
            new Dictionary<Aas.KeyElements, string>()
            {
                { Aas.KeyElements.FragmentReference, "FragmentReference" },
                { Aas.KeyElements.AccessPermissionRule, "AccessPermissionRule" },
                { Aas.KeyElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.KeyElements.Asset, "Asset" },
                { Aas.KeyElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.KeyElements.BasicEvent, "BasicEvent" },
                { Aas.KeyElements.Blob, "Blob" },
                { Aas.KeyElements.Capability, "Capability" },
                { Aas.KeyElements.ConceptDescription, "ConceptDescription" },
                { Aas.KeyElements.DataElement, "DataElement" },
                { Aas.KeyElements.Entity, "Entity" },
                { Aas.KeyElements.Event, "Event" },
                { Aas.KeyElements.File, "File" },
                { Aas.KeyElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.KeyElements.Operation, "Operation" },
                { Aas.KeyElements.Property, "Property" },
                { Aas.KeyElements.Range, "Range" },
                { Aas.KeyElements.GlobalReference, "GlobalReference" },
                { Aas.KeyElements.ReferenceElement, "ReferenceElement" },
                { Aas.KeyElements.RelationshipElement, "RelationshipElement" },
                { Aas.KeyElements.Submodel, "Submodel" },
                { Aas.KeyElements.SubmodelElement, "SubmodelElement" },
                { Aas.KeyElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.KeyElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.KeyElements that)
        {
            if (_keyElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.KeyElements> _keyElementsFromString = (
            new Dictionary<string, Aas.KeyElements>()
            {
                { "FragmentReference", Aas.KeyElements.FragmentReference },
                { "AccessPermissionRule", Aas.KeyElements.AccessPermissionRule },
                { "AnnotatedRelationshipElement", Aas.KeyElements.AnnotatedRelationshipElement },
                { "Asset", Aas.KeyElements.Asset },
                { "AssetAdministrationShell", Aas.KeyElements.AssetAdministrationShell },
                { "BasicEvent", Aas.KeyElements.BasicEvent },
                { "Blob", Aas.KeyElements.Blob },
                { "Capability", Aas.KeyElements.Capability },
                { "ConceptDescription", Aas.KeyElements.ConceptDescription },
                { "DataElement", Aas.KeyElements.DataElement },
                { "Entity", Aas.KeyElements.Entity },
                { "Event", Aas.KeyElements.Event },
                { "File", Aas.KeyElements.File },
                { "MultiLanguageProperty", Aas.KeyElements.MultiLanguageProperty },
                { "Operation", Aas.KeyElements.Operation },
                { "Property", Aas.KeyElements.Property },
                { "Range", Aas.KeyElements.Range },
                { "GlobalReference", Aas.KeyElements.GlobalReference },
                { "ReferenceElement", Aas.KeyElements.ReferenceElement },
                { "RelationshipElement", Aas.KeyElements.RelationshipElement },
                { "Submodel", Aas.KeyElements.Submodel },
                { "SubmodelElement", Aas.KeyElements.SubmodelElement },
                { "SubmodelElementList", Aas.KeyElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.KeyElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="KeyElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="KeyElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.KeyElements? KeyElementsFromString(string text)
        {
            if (_keyElementsFromString.TryGetValue(text, out KeyElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.SubmodelElements, string> _submodelElementsToString = (
            new Dictionary<Aas.SubmodelElements, string>()
            {
                { Aas.SubmodelElements.AnnotatedRelationshipElement, "AnnotatedRelationshipElement" },
                { Aas.SubmodelElements.Asset, "Asset" },
                { Aas.SubmodelElements.AssetAdministrationShell, "AssetAdministrationShell" },
                { Aas.SubmodelElements.BasicEvent, "BasicEvent" },
                { Aas.SubmodelElements.Blob, "Blob" },
                { Aas.SubmodelElements.Capability, "Capability" },
                { Aas.SubmodelElements.ConceptDescription, "ConceptDescription" },
                { Aas.SubmodelElements.DataElement, "DataElement" },
                { Aas.SubmodelElements.Entity, "Entity" },
                { Aas.SubmodelElements.Event, "Event" },
                { Aas.SubmodelElements.File, "File" },
                { Aas.SubmodelElements.MultiLanguageProperty, "MultiLanguageProperty" },
                { Aas.SubmodelElements.Operation, "Operation" },
                { Aas.SubmodelElements.Property, "Property" },
                { Aas.SubmodelElements.Range, "Range" },
                { Aas.SubmodelElements.ReferenceElement, "ReferenceElement" },
                { Aas.SubmodelElements.RelationshipElement, "RelationshipElement" },
                { Aas.SubmodelElements.Submodel, "Submodel" },
                { Aas.SubmodelElements.SubmodelElement, "SubmodelElement" },
                { Aas.SubmodelElements.SubmodelElementList, "SubmodelElementList" },
                { Aas.SubmodelElements.SubmodelElementStruct, "SubmodelElementStruct" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.SubmodelElements that)
        {
            if (_submodelElementsToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.SubmodelElements> _submodelElementsFromString = (
            new Dictionary<string, Aas.SubmodelElements>()
            {
                { "AnnotatedRelationshipElement", Aas.SubmodelElements.AnnotatedRelationshipElement },
                { "Asset", Aas.SubmodelElements.Asset },
                { "AssetAdministrationShell", Aas.SubmodelElements.AssetAdministrationShell },
                { "BasicEvent", Aas.SubmodelElements.BasicEvent },
                { "Blob", Aas.SubmodelElements.Blob },
                { "Capability", Aas.SubmodelElements.Capability },
                { "ConceptDescription", Aas.SubmodelElements.ConceptDescription },
                { "DataElement", Aas.SubmodelElements.DataElement },
                { "Entity", Aas.SubmodelElements.Entity },
                { "Event", Aas.SubmodelElements.Event },
                { "File", Aas.SubmodelElements.File },
                { "MultiLanguageProperty", Aas.SubmodelElements.MultiLanguageProperty },
                { "Operation", Aas.SubmodelElements.Operation },
                { "Property", Aas.SubmodelElements.Property },
                { "Range", Aas.SubmodelElements.Range },
                { "ReferenceElement", Aas.SubmodelElements.ReferenceElement },
                { "RelationshipElement", Aas.SubmodelElements.RelationshipElement },
                { "Submodel", Aas.SubmodelElements.Submodel },
                { "SubmodelElement", Aas.SubmodelElements.SubmodelElement },
                { "SubmodelElementList", Aas.SubmodelElements.SubmodelElementList },
                { "SubmodelElementStruct", Aas.SubmodelElements.SubmodelElementStruct }
            });

        /// <summary>
        /// Parse the string representation of <see cref="SubmodelElements" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="SubmodelElements" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.SubmodelElements? SubmodelElementsFromString(string text)
        {
            if (_submodelElementsFromString.TryGetValue(text, out SubmodelElements value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.BuildInListTypes, string> _buildInListTypesToString = (
            new Dictionary<Aas.BuildInListTypes, string>()
            {
                { Aas.BuildInListTypes.Entities, "ENTITIES" },
                { Aas.BuildInListTypes.IdRefs, "IDREFS" },
                { Aas.BuildInListTypes.NMTokens, "NMTOKENS" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.BuildInListTypes that)
        {
            if (_buildInListTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.BuildInListTypes> _buildInListTypesFromString = (
            new Dictionary<string, Aas.BuildInListTypes>()
            {
                { "ENTITIES", Aas.BuildInListTypes.Entities },
                { "IDREFS", Aas.BuildInListTypes.IdRefs },
                { "NMTOKENS", Aas.BuildInListTypes.NMTokens }
            });

        /// <summary>
        /// Parse the string representation of <see cref="BuildInListTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="BuildInListTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.BuildInListTypes? BuildInListTypesFromString(string text)
        {
            if (_buildInListTypesFromString.TryGetValue(text, out BuildInListTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DecimalBuildInTypes, string> _decimalBuildInTypesToString = (
            new Dictionary<Aas.DecimalBuildInTypes, string>()
            {
                { Aas.DecimalBuildInTypes.Integer, "integer" },
                { Aas.DecimalBuildInTypes.Long, "long" },
                { Aas.DecimalBuildInTypes.Int, "int" },
                { Aas.DecimalBuildInTypes.Short, "short" },
                { Aas.DecimalBuildInTypes.Byte, "byte" },
                { Aas.DecimalBuildInTypes.NonNegativeInteger, "NonNegativeInteger" },
                { Aas.DecimalBuildInTypes.PositiveInteger, "positiveInteger" },
                { Aas.DecimalBuildInTypes.UnsignedInteger, "unsignedInteger" },
                { Aas.DecimalBuildInTypes.UnsignedLong, "unsignedLong" },
                { Aas.DecimalBuildInTypes.UnsignedInt, "unsignedInt" },
                { Aas.DecimalBuildInTypes.UnsignedShort, "unsignedShort" },
                { Aas.DecimalBuildInTypes.UnsignedByte, "unsignedByte" },
                { Aas.DecimalBuildInTypes.NonPositiveInteger, "nonPositiveInteger" },
                { Aas.DecimalBuildInTypes.NegativeInteger, "negativeInteger" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DecimalBuildInTypes that)
        {
            if (_decimalBuildInTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DecimalBuildInTypes> _decimalBuildInTypesFromString = (
            new Dictionary<string, Aas.DecimalBuildInTypes>()
            {
                { "integer", Aas.DecimalBuildInTypes.Integer },
                { "long", Aas.DecimalBuildInTypes.Long },
                { "int", Aas.DecimalBuildInTypes.Int },
                { "short", Aas.DecimalBuildInTypes.Short },
                { "byte", Aas.DecimalBuildInTypes.Byte },
                { "NonNegativeInteger", Aas.DecimalBuildInTypes.NonNegativeInteger },
                { "positiveInteger", Aas.DecimalBuildInTypes.PositiveInteger },
                { "unsignedInteger", Aas.DecimalBuildInTypes.UnsignedInteger },
                { "unsignedLong", Aas.DecimalBuildInTypes.UnsignedLong },
                { "unsignedInt", Aas.DecimalBuildInTypes.UnsignedInt },
                { "unsignedShort", Aas.DecimalBuildInTypes.UnsignedShort },
                { "unsignedByte", Aas.DecimalBuildInTypes.UnsignedByte },
                { "nonPositiveInteger", Aas.DecimalBuildInTypes.NonPositiveInteger },
                { "negativeInteger", Aas.DecimalBuildInTypes.NegativeInteger }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DecimalBuildInTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DecimalBuildInTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DecimalBuildInTypes? DecimalBuildInTypesFromString(string text)
        {
            if (_decimalBuildInTypesFromString.TryGetValue(text, out DecimalBuildInTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DurationBuildInTypes, string> _durationBuildInTypesToString = (
            new Dictionary<Aas.DurationBuildInTypes, string>()
            {
                { Aas.DurationBuildInTypes.DayTimeDuration, "dayTimeDuration" },
                { Aas.DurationBuildInTypes.YearMonthDuration, "yearMonthDuration" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DurationBuildInTypes that)
        {
            if (_durationBuildInTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DurationBuildInTypes> _durationBuildInTypesFromString = (
            new Dictionary<string, Aas.DurationBuildInTypes>()
            {
                { "dayTimeDuration", Aas.DurationBuildInTypes.DayTimeDuration },
                { "yearMonthDuration", Aas.DurationBuildInTypes.YearMonthDuration }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DurationBuildInTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DurationBuildInTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DurationBuildInTypes? DurationBuildInTypesFromString(string text)
        {
            if (_durationBuildInTypesFromString.TryGetValue(text, out DurationBuildInTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.PrimitiveTypes, string> _primitiveTypesToString = (
            new Dictionary<Aas.PrimitiveTypes, string>()
            {
                { Aas.PrimitiveTypes.AnyUri, "anyURI" },
                { Aas.PrimitiveTypes.Base64Binary, "base64Binary" },
                { Aas.PrimitiveTypes.Boolean, "boolean" },
                { Aas.PrimitiveTypes.Date, "date" },
                { Aas.PrimitiveTypes.DateTime, "dateTime" },
                { Aas.PrimitiveTypes.Decimal, "decimal" },
                { Aas.PrimitiveTypes.Double, "double" },
                { Aas.PrimitiveTypes.Duration, "duration" },
                { Aas.PrimitiveTypes.Float, "float" },
                { Aas.PrimitiveTypes.GDay, "gDay" },
                { Aas.PrimitiveTypes.GMonth, "gMonth" },
                { Aas.PrimitiveTypes.GMonthDay, "gMonthDay" },
                { Aas.PrimitiveTypes.HeyBinary, "heyBinary" },
                { Aas.PrimitiveTypes.Notation, "NOTATION" },
                { Aas.PrimitiveTypes.QName, "QName" },
                { Aas.PrimitiveTypes.String, "string" },
                { Aas.PrimitiveTypes.Time, "time" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.PrimitiveTypes that)
        {
            if (_primitiveTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.PrimitiveTypes> _primitiveTypesFromString = (
            new Dictionary<string, Aas.PrimitiveTypes>()
            {
                { "anyURI", Aas.PrimitiveTypes.AnyUri },
                { "base64Binary", Aas.PrimitiveTypes.Base64Binary },
                { "boolean", Aas.PrimitiveTypes.Boolean },
                { "date", Aas.PrimitiveTypes.Date },
                { "dateTime", Aas.PrimitiveTypes.DateTime },
                { "decimal", Aas.PrimitiveTypes.Decimal },
                { "double", Aas.PrimitiveTypes.Double },
                { "duration", Aas.PrimitiveTypes.Duration },
                { "float", Aas.PrimitiveTypes.Float },
                { "gDay", Aas.PrimitiveTypes.GDay },
                { "gMonth", Aas.PrimitiveTypes.GMonth },
                { "gMonthDay", Aas.PrimitiveTypes.GMonthDay },
                { "heyBinary", Aas.PrimitiveTypes.HeyBinary },
                { "NOTATION", Aas.PrimitiveTypes.Notation },
                { "QName", Aas.PrimitiveTypes.QName },
                { "string", Aas.PrimitiveTypes.String },
                { "time", Aas.PrimitiveTypes.Time }
            });

        /// <summary>
        /// Parse the string representation of <see cref="PrimitiveTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="PrimitiveTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.PrimitiveTypes? PrimitiveTypesFromString(string text)
        {
            if (_primitiveTypesFromString.TryGetValue(text, out PrimitiveTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.StringBuildInTypes, string> _stringBuildInTypesToString = (
            new Dictionary<Aas.StringBuildInTypes, string>()
            {
                { Aas.StringBuildInTypes.NormalizedString, "normalizedString" },
                { Aas.StringBuildInTypes.Token, "token" },
                { Aas.StringBuildInTypes.Language, "Language" },
                { Aas.StringBuildInTypes.NCName, "NCName" },
                { Aas.StringBuildInTypes.Entity, "ENTITY" },
                { Aas.StringBuildInTypes.Id, "ID" },
                { Aas.StringBuildInTypes.Idref, "IDREF" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.StringBuildInTypes that)
        {
            if (_stringBuildInTypesToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.StringBuildInTypes> _stringBuildInTypesFromString = (
            new Dictionary<string, Aas.StringBuildInTypes>()
            {
                { "normalizedString", Aas.StringBuildInTypes.NormalizedString },
                { "token", Aas.StringBuildInTypes.Token },
                { "Language", Aas.StringBuildInTypes.Language },
                { "NCName", Aas.StringBuildInTypes.NCName },
                { "ENTITY", Aas.StringBuildInTypes.Entity },
                { "ID", Aas.StringBuildInTypes.Id },
                { "IDREF", Aas.StringBuildInTypes.Idref }
            });

        /// <summary>
        /// Parse the string representation of <see cref="StringBuildInTypes" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="StringBuildInTypes" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.StringBuildInTypes? StringBuildInTypesFromString(string text)
        {
            if (_stringBuildInTypesFromString.TryGetValue(text, out StringBuildInTypes value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DataTypeDef, string> _dataTypeDefToString = (
            new Dictionary<Aas.DataTypeDef, string>()
            {
                { Aas.DataTypeDef.Entities, "ENTITIES" },
                { Aas.DataTypeDef.IdRefs, "IDREFS" },
                { Aas.DataTypeDef.NMTokens, "NMTOKENS" },
                { Aas.DataTypeDef.Integer, "integer" },
                { Aas.DataTypeDef.Long, "long" },
                { Aas.DataTypeDef.Int, "int" },
                { Aas.DataTypeDef.Short, "short" },
                { Aas.DataTypeDef.Byte, "byte" },
                { Aas.DataTypeDef.NonNegativeInteger, "NonNegativeInteger" },
                { Aas.DataTypeDef.PositiveInteger, "positiveInteger" },
                { Aas.DataTypeDef.UnsignedInteger, "unsignedInteger" },
                { Aas.DataTypeDef.UnsignedLong, "unsignedLong" },
                { Aas.DataTypeDef.UnsignedInt, "unsignedInt" },
                { Aas.DataTypeDef.UnsignedShort, "unsignedShort" },
                { Aas.DataTypeDef.UnsignedByte, "unsignedByte" },
                { Aas.DataTypeDef.NonPositiveInteger, "nonPositiveInteger" },
                { Aas.DataTypeDef.NegativeInteger, "negativeInteger" },
                { Aas.DataTypeDef.DayTimeDuration, "dayTimeDuration" },
                { Aas.DataTypeDef.YearMonthDuration, "yearMonthDuration" },
                { Aas.DataTypeDef.AnyUri, "anyURI" },
                { Aas.DataTypeDef.Base64Binary, "base64Binary" },
                { Aas.DataTypeDef.Boolean, "boolean" },
                { Aas.DataTypeDef.Date, "date" },
                { Aas.DataTypeDef.DateTime, "dateTime" },
                { Aas.DataTypeDef.Decimal, "decimal" },
                { Aas.DataTypeDef.Double, "double" },
                { Aas.DataTypeDef.Duration, "duration" },
                { Aas.DataTypeDef.Float, "float" },
                { Aas.DataTypeDef.GDay, "gDay" },
                { Aas.DataTypeDef.GMonth, "gMonth" },
                { Aas.DataTypeDef.GMonthDay, "gMonthDay" },
                { Aas.DataTypeDef.HeyBinary, "heyBinary" },
                { Aas.DataTypeDef.Notation, "NOTATION" },
                { Aas.DataTypeDef.QName, "QName" },
                { Aas.DataTypeDef.String, "string" },
                { Aas.DataTypeDef.Time, "time" },
                { Aas.DataTypeDef.NormalizedString, "normalizedString" },
                { Aas.DataTypeDef.Token, "token" },
                { Aas.DataTypeDef.Language, "Language" },
                { Aas.DataTypeDef.NCName, "NCName" },
                { Aas.DataTypeDef.Entity, "ENTITY" },
                { Aas.DataTypeDef.Id, "ID" },
                { Aas.DataTypeDef.Idref, "IDREF" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeDef that)
        {
            if (_dataTypeDefToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeDef> _dataTypeDefFromString = (
            new Dictionary<string, Aas.DataTypeDef>()
            {
                { "ENTITIES", Aas.DataTypeDef.Entities },
                { "IDREFS", Aas.DataTypeDef.IdRefs },
                { "NMTOKENS", Aas.DataTypeDef.NMTokens },
                { "integer", Aas.DataTypeDef.Integer },
                { "long", Aas.DataTypeDef.Long },
                { "int", Aas.DataTypeDef.Int },
                { "short", Aas.DataTypeDef.Short },
                { "byte", Aas.DataTypeDef.Byte },
                { "NonNegativeInteger", Aas.DataTypeDef.NonNegativeInteger },
                { "positiveInteger", Aas.DataTypeDef.PositiveInteger },
                { "unsignedInteger", Aas.DataTypeDef.UnsignedInteger },
                { "unsignedLong", Aas.DataTypeDef.UnsignedLong },
                { "unsignedInt", Aas.DataTypeDef.UnsignedInt },
                { "unsignedShort", Aas.DataTypeDef.UnsignedShort },
                { "unsignedByte", Aas.DataTypeDef.UnsignedByte },
                { "nonPositiveInteger", Aas.DataTypeDef.NonPositiveInteger },
                { "negativeInteger", Aas.DataTypeDef.NegativeInteger },
                { "dayTimeDuration", Aas.DataTypeDef.DayTimeDuration },
                { "yearMonthDuration", Aas.DataTypeDef.YearMonthDuration },
                { "anyURI", Aas.DataTypeDef.AnyUri },
                { "base64Binary", Aas.DataTypeDef.Base64Binary },
                { "boolean", Aas.DataTypeDef.Boolean },
                { "date", Aas.DataTypeDef.Date },
                { "dateTime", Aas.DataTypeDef.DateTime },
                { "decimal", Aas.DataTypeDef.Decimal },
                { "double", Aas.DataTypeDef.Double },
                { "duration", Aas.DataTypeDef.Duration },
                { "float", Aas.DataTypeDef.Float },
                { "gDay", Aas.DataTypeDef.GDay },
                { "gMonth", Aas.DataTypeDef.GMonth },
                { "gMonthDay", Aas.DataTypeDef.GMonthDay },
                { "heyBinary", Aas.DataTypeDef.HeyBinary },
                { "NOTATION", Aas.DataTypeDef.Notation },
                { "QName", Aas.DataTypeDef.QName },
                { "string", Aas.DataTypeDef.String },
                { "time", Aas.DataTypeDef.Time },
                { "normalizedString", Aas.DataTypeDef.NormalizedString },
                { "token", Aas.DataTypeDef.Token },
                { "Language", Aas.DataTypeDef.Language },
                { "NCName", Aas.DataTypeDef.NCName },
                { "ENTITY", Aas.DataTypeDef.Entity },
                { "ID", Aas.DataTypeDef.Id },
                { "IDREF", Aas.DataTypeDef.Idref }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeDef" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeDef" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeDef? DataTypeDefFromString(string text)
        {
            if (_dataTypeDefFromString.TryGetValue(text, out DataTypeDef value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.DataTypeIec61360, string> _dataTypeIec61360ToString = (
            new Dictionary<Aas.DataTypeIec61360, string>()
            {
                { Aas.DataTypeIec61360.Date, "DATE" },
                { Aas.DataTypeIec61360.String, "STRING" },
                { Aas.DataTypeIec61360.StringTranslatable, "STRING_TRANSLATABLE" },
                { Aas.DataTypeIec61360.IntegerMeasure, "INTEGER_MEASURE" },
                { Aas.DataTypeIec61360.IntegerCount, "INTEGER_COUNT" },
                { Aas.DataTypeIec61360.IntegerCurrency, "INTEGER_CURRENCY" },
                { Aas.DataTypeIec61360.RealMeasure, "REAL_MEASURE" },
                { Aas.DataTypeIec61360.RealCount, "REAL_COUNT" },
                { Aas.DataTypeIec61360.RealCurrency, "REAL_CURRENCY" },
                { Aas.DataTypeIec61360.Boolean, "BOOLEAN" },
                { Aas.DataTypeIec61360.Iri, "IRI" },
                { Aas.DataTypeIec61360.Irdi, "IRDI" },
                { Aas.DataTypeIec61360.Rational, "RATIONAL" },
                { Aas.DataTypeIec61360.RationalMeasure, "RATIONAL_MEASURE" },
                { Aas.DataTypeIec61360.Time, "TIME" },
                { Aas.DataTypeIec61360.Timestamp, "TIMESTAMP" },
                { Aas.DataTypeIec61360.File, "FILE" },
                { Aas.DataTypeIec61360.Html, "HTML" },
                { Aas.DataTypeIec61360.Blob, "BLOB" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.DataTypeIec61360 that)
        {
            if (_dataTypeIec61360ToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.DataTypeIec61360> _dataTypeIec61360FromString = (
            new Dictionary<string, Aas.DataTypeIec61360>()
            {
                { "DATE", Aas.DataTypeIec61360.Date },
                { "STRING", Aas.DataTypeIec61360.String },
                { "STRING_TRANSLATABLE", Aas.DataTypeIec61360.StringTranslatable },
                { "INTEGER_MEASURE", Aas.DataTypeIec61360.IntegerMeasure },
                { "INTEGER_COUNT", Aas.DataTypeIec61360.IntegerCount },
                { "INTEGER_CURRENCY", Aas.DataTypeIec61360.IntegerCurrency },
                { "REAL_MEASURE", Aas.DataTypeIec61360.RealMeasure },
                { "REAL_COUNT", Aas.DataTypeIec61360.RealCount },
                { "REAL_CURRENCY", Aas.DataTypeIec61360.RealCurrency },
                { "BOOLEAN", Aas.DataTypeIec61360.Boolean },
                { "IRI", Aas.DataTypeIec61360.Iri },
                { "IRDI", Aas.DataTypeIec61360.Irdi },
                { "RATIONAL", Aas.DataTypeIec61360.Rational },
                { "RATIONAL_MEASURE", Aas.DataTypeIec61360.RationalMeasure },
                { "TIME", Aas.DataTypeIec61360.Time },
                { "TIMESTAMP", Aas.DataTypeIec61360.Timestamp },
                { "FILE", Aas.DataTypeIec61360.File },
                { "HTML", Aas.DataTypeIec61360.Html },
                { "BLOB", Aas.DataTypeIec61360.Blob }
            });

        /// <summary>
        /// Parse the string representation of <see cref="DataTypeIec61360" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="DataTypeIec61360" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.DataTypeIec61360? DataTypeIec61360FromString(string text)
        {
            if (_dataTypeIec61360FromString.TryGetValue(text, out DataTypeIec61360 value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<Aas.LevelType, string> _levelTypeToString = (
            new Dictionary<Aas.LevelType, string>()
            {
                { Aas.LevelType.Min, "Min" },
                { Aas.LevelType.Max, "Max" },
                { Aas.LevelType.Nom, "Nom" },
                { Aas.LevelType.Type, "Type" }
            });

        /// <summary>
        /// Retrieve the string representation of <paramref name="that" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="that" /> is not a valid literal, return <c>null</c>.
        /// </remarks>
        public static string? ToString(Aas.LevelType that)
        {
            if (_levelTypeToString.TryGetValue(that, out string? value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }

        private static readonly Dictionary<string, Aas.LevelType> _levelTypeFromString = (
            new Dictionary<string, Aas.LevelType>()
            {
                { "Min", Aas.LevelType.Min },
                { "Max", Aas.LevelType.Max },
                { "Nom", Aas.LevelType.Nom },
                { "Type", Aas.LevelType.Type }
            });

        /// <summary>
        /// Parse the string representation of <see cref="LevelType" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="text" /> is not a valid string representation
        /// of a literal of <see cref="LevelType" />,
        /// return <c>null</c>.
        /// </remarks>
        public static Aas.LevelType? LevelTypeFromString(string text)
        {
            if (_levelTypeFromString.TryGetValue(text, out LevelType value))
            {
                return value;
            }
            else
            {
                return null;
            }
        }
    }  // public static class Stringification
}  // namespace AasCore.Aas3

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
