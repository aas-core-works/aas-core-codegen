/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

syntax = "proto3";

package aas_core3;


/// <summary>
/// Single extension of an element.
/// </summary>
message Extension {
  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 1;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 2;

  /// <summary>
  /// Name of the extension.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-077:
  ///     The name of an extension (Extension/name) within <see cref="Aas.HasExtensions" /> needs
  ///     to be unique.
  ///   </li>
  /// </ul>
  /// </remarks>
  string name = 3;

  /// <summary>
  /// Type of the value of the extension.
  /// </summary>
  /// <remarks>
  /// Default: <see cref="Aas.DataTypeDefXsd.STRING" />
  /// </remarks>
  optional DataTypeDefXsd value_type = 4;

  /// <summary>
  /// Value of the extension
  /// </summary>
  optional string value = 5;

  /// <summary>
  /// Reference to an element the extension refers to.
  /// </summary>
  repeated Reference refers_to = 6;
}

/// <summary>
/// Enumeration for denoting whether an element is a template or an instance.
/// </summary>
enum ModellingKind {
  Modellingkind_UNSPECIFIED = 0;

  /// <summary>
  /// Specification of the common features of a structured element in sufficient detail
  /// that such a instance can be instantiated using it
  /// </summary>
  Modellingkind_TEMPLATE = 1;

  /// <summary>
  /// Concrete, clearly identifiable element instance. Its creation and validation
  /// may be guided by a corresponding element template.
  /// </summary>
  Modellingkind_INSTANCE = 2;
}

/// <summary>
/// Administrative meta-information for an element like version
/// information.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-005:
///     If <see cref="Aas.AdministrativeInformation.version" /> is not specified then also <see cref="Aas.AdministrativeInformation.revision" /> shall be
///     unspecified. This means, a revision requires a version. If there is no version
///     there is no revision neither. Revision is optional.
///   </li>
/// </ul>
/// </remarks>
message AdministrativeInformation {
  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 1;

  /// <summary>
  /// Version of the element.
  /// </summary>
  optional string version = 2;

  /// <summary>
  /// Revision of the element.
  /// </summary>
  optional string revision = 3;

  /// <summary>
  /// The subject ID of the subject responsible for making the element.
  /// </summary>
  optional Reference creator = 4;

  /// <summary>
  /// Identifier of the template that guided the creation of the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// In case of a submodel the <see cref="Aas.AdministrativeInformation.template_id" /> is the identifier
  /// of the submodel template ID that guided the creation of the submodel
  /// </para>
  /// <para>
  /// The <see cref="Aas.AdministrativeInformation.template_id" /> is not relevant for validation in Submodels.
  /// For validation the <see cref="Aas.Submodel.semantic_id" /> shall be used.
  /// </para>
  /// <para>
  /// Usage of <see cref="Aas.AdministrativeInformation.template_id" /> is not restricted to submodel instances. So also
  /// the creation of submodel templates can be guided by another submodel template.
  /// </para>
  /// </remarks>
  optional string template_id = 5;
}

/// <summary>
/// Enumeration for kinds of qualifiers.
/// </summary>
/// <remarks>
/// This element is experimental and therefore may be subject to change or may be
/// removed completely in future versions of the meta-model.
/// </remarks>
enum QualifierKind {
  Qualifierkind_UNSPECIFIED = 0;

  /// <summary>
  /// qualifies the value of the element and can change during run-time.
  /// </summary>
  /// <remarks>
  /// Value qualifiers are only applicable to elements with kind
  /// <see cref="Aas.ModellingKind.INSTANCE" />.
  /// </remarks>
  Qualifierkind_VALUE_QUALIFIER = 1;

  /// <summary>
  /// qualifies the semantic definition the element is referring to
  /// (<see cref="Aas.HasSemantics.semantic_id" />)
  /// </summary>
  Qualifierkind_CONCEPT_QUALIFIER = 2;

  /// <summary>
  /// qualifies the elements within a specific submodel on concept level.
  /// </summary>
  /// <remarks>
  /// Template qualifiers are only applicable to elements with kind
  /// <see cref="Aas.ModellingKind.TEMPLATE" />.
  /// </remarks>
  Qualifierkind_TEMPLATE_QUALIFIER = 3;
}

/// <summary>
/// A qualifier is a type-value-pair that makes additional statements w.r.t. the value
/// of the element.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-006:
///     If both the <see cref="Aas.Qualifier.value" /> and the <see cref="Aas.Qualifier.value_id" /> of
///     a <see cref="Aas.Qualifier" /> are present then the <see cref="Aas.Qualifier.value" /> needs
///     to be identical to the value of the referenced coded value
///     in <see cref="Aas.Qualifier.value_id" />.
///   </li>
///   <li>
///     Constraint AASd-020:
///     The value of <see cref="Aas.Qualifier.value" /> shall be consistent to the data type as
///     defined in <see cref="Aas.Qualifier.value_type" />.
///   </li>
/// </ul>
/// </remarks>
message Qualifier {
  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 1;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 2;

  /// <summary>
  /// The qualifier kind describes the kind of the qualifier that is applied to the
  /// element.
  /// </summary>
  /// <remarks>
  /// Default: <see cref="Aas.QualifierKind.CONCEPT_QUALIFIER" />
  /// </remarks>
  optional QualifierKind kind = 3;

  /// <summary>
  /// The qualifier <em>type</em> describes the type of the qualifier that is applied to
  /// the element.
  /// </summary>
  string type = 4;

  /// <summary>
  /// Data type of the qualifier value.
  /// </summary>
  DataTypeDefXsd value_type = 5;

  /// <summary>
  /// The qualifier value is the value of the qualifier.
  /// </summary>
  optional string value = 6;

  /// <summary>
  /// Reference to the global unique ID of a coded value.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference value_id = 7;
}

/// <summary>
/// An asset administration shell.
/// </summary>
message AssetAdministrationShell {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Administrative information of an identifiable element.
  /// </summary>
  /// <remarks>
  /// Some of the administrative information like the version number might need to
  /// be part of the identification.
  /// </remarks>
  optional AdministrativeInformation administration = 6;

  /// <summary>
  /// The globally unique identification of the element.
  /// </summary>
  string id = 7;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 8;

  /// <summary>
  /// The reference to the AAS the AAS was derived from.
  /// </summary>
  optional Reference derived_from = 9;

  /// <summary>
  /// Meta-information about the asset the AAS is representing.
  /// </summary>
  AssetInformation asset_information = 10;

  /// <summary>
  /// References to submodels of the AAS.
  /// </summary>
  /// <remarks>
  /// <para>
  /// A submodel is a description of an aspect of the asset the AAS is representing.
  /// </para>
  /// <para>
  /// The asset of an AAS is typically described by one or more submodels.
  /// </para>
  /// <para>
  /// Temporarily no submodel might be assigned to the AAS.
  /// </para>
  /// </remarks>
  repeated Reference submodels = 11;
}

/// <summary>
/// In <see cref="Aas.AssetInformation" /> identifying meta data of the asset that is
/// represented by an AAS is defined.
/// </summary>
/// <remarks>
/// <para>
/// The asset may either represent an asset type or an asset instance.
/// </para>
/// <para>
/// The asset has a globally unique identifier plus – if needed – additional domain
/// specific (proprietary) identifiers. However, to support the corner case of very
/// first phase of lifecycle where a stabilised/constant_set global asset identifier
/// does not already exist, the corresponding attribute <see cref="Aas.AssetInformation.global_asset_id" /> is
/// optional.
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     <para>
///     Constraint AASd-116:
///     <c>globalAssetId</c> is a reserved key. If used as value for
///     <see cref="Aas.SpecificAssetId.name" /> then <see cref="Aas.SpecificAssetId.value" /> shall be
///     identical to <see cref="Aas.AssetInformation.global_asset_id" />.
///     </para>
///     <para>
///     Constraint AASd-116 is important to enable a generic search across
///     global and specific asset IDs.
///     </para>
///     <para>
///     <para>
///     In the book, Constraint AASd-116 imposes a
///     case-insensitive equality against <c>globalAssetId</c>. This is
///     culturally-dependent, and depends on the system settings.
///     For example, the case-folding for the letters "i" and "I" is
///     different in Turkish from English.
///     </para>
///     <para>
///     We implement the constraint as case-sensitive instead to allow
///     for interoperability across different culture settings.
///     </para>
///     </para>
///   </li>
///   <li>
///     Constraint AASd-131:
///     For <see cref="Aas.AssetInformation" /> either the <see cref="Aas.AssetInformation.global_asset_id" /> shall be
///     defined or at least one item in <see cref="Aas.AssetInformation.specific_asset_ids" />.
///   </li>
/// </ul>
/// </remarks>
message AssetInformation {
  /// <summary>
  /// Denotes whether the Asset is of kind <see cref="Aas.AssetKind.TYPE" /> or
  /// <see cref="Aas.AssetKind.INSTANCE" />.
  /// </summary>
  AssetKind asset_kind = 1;

  /// <summary>
  /// Global identifier of the asset the AAS is representing.
  /// </summary>
  /// <remarks>
  /// <para>
  /// This attribute is required as soon as the AAS is exchanged via partners in the life
  /// cycle of the asset. In a first phase of the life cycle the asset might not yet have
  /// a global ID but already an internal identifier. The internal identifier would be
  /// modelled via <see cref="Aas.AssetInformation.specific_asset_ids" />.
  /// </para>
  /// <para>
  /// This is a global reference.
  /// </para>
  /// </remarks>
  optional string global_asset_id = 2;

  /// <summary>
  /// Additional domain-specific, typically proprietary identifier for the asset like
  /// e.g., serial number etc.
  /// </summary>
  repeated SpecificAssetId specific_asset_ids = 3;

  /// <summary>
  /// In case <see cref="Aas.AssetInformation.asset_kind" /> is applicable the <see cref="Aas.AssetInformation.asset_type" /> is the asset ID
  /// of the type asset of the asset under consideration
  /// as identified by <see cref="Aas.AssetInformation.global_asset_id" />.
  /// </summary>
  /// <remarks>
  /// In case <see cref="Aas.AssetInformation.asset_kind" /> is "Instance" than the <see cref="Aas.AssetInformation.asset_type" /> denotes
  /// which "Type" the asset is of. But it is also possible
  /// to have an <see cref="Aas.AssetInformation.asset_type" /> of an asset of kind "Type".
  /// </remarks>
  optional string asset_type = 4;

  /// <summary>
  /// Thumbnail of the asset represented by the Asset Administration Shell.
  /// </summary>
  /// <remarks>
  /// Used as default.
  /// </remarks>
  optional Resource default_thumbnail = 5;
}

/// <summary>
/// Resource represents an address to a file (a locator). The value is an URI that
/// can represent an absolute or relative path
/// </summary>
message Resource {
  /// <summary>
  /// Path and name of the resource (with file extension).
  /// </summary>
  /// <remarks>
  /// The path can be absolute or relative.
  /// </remarks>
  string path = 1;

  /// <summary>
  /// Content type of the content of the file.
  /// </summary>
  /// <remarks>
  /// The content type states which file extensions the file can have.
  /// </remarks>
  optional string content_type = 2;
}

/// <summary>
/// Enumeration for denoting whether an asset is a type asset or an instance asset.
/// </summary>
enum AssetKind {
  Assetkind_UNSPECIFIED = 0;

  /// <summary>
  /// Type asset
  /// </summary>
  Assetkind_TYPE = 1;

  /// <summary>
  /// Instance asset
  /// </summary>
  Assetkind_INSTANCE = 2;

  /// <summary>
  /// Neither a type asset nor an instance asset
  /// </summary>
  Assetkind_NOT_APPLICABLE = 3;
}

/// <summary>
/// A specific asset ID describes a generic supplementary identifying attribute of the
/// asset.
/// </summary>
/// <remarks>
/// <para>
/// The specific asset ID is not necessarily globally unique.
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-133:
///     <see cref="Aas.SpecificAssetId.external_subject_id" /> shall be an external reference,
///     i.e. <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.EXTERNAL_REFERENCE" />.
///   </li>
/// </ul>
/// </remarks>
message SpecificAssetId {
  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 1;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 2;

  /// <summary>
  /// Name of the identifier
  /// </summary>
  string name = 3;

  /// <summary>
  /// The value of the specific asset identifier with the corresponding name.
  /// </summary>
  string value = 4;

  /// <summary>
  /// The (external) subject the key belongs to or has meaning to.
  /// </summary>
  /// <remarks>
  /// This is a global reference.
  /// </remarks>
  optional Reference external_subject_id = 5;
}

/// <summary>
/// A submodel defines a specific aspect of the asset represented by the AAS.
/// </summary>
/// <remarks>
/// A submodel is used to structure the digital representation and technical
/// functionality of an Administration Shell into distinguishable parts. Each submodel
/// refers to a well-defined domain or subject matter. Submodels can become
/// standardized and, thus, become submodels templates.
/// </remarks>
message Submodel {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Administrative information of an identifiable element.
  /// </summary>
  /// <remarks>
  /// Some of the administrative information like the version number might need to
  /// be part of the identification.
  /// </remarks>
  optional AdministrativeInformation administration = 6;

  /// <summary>
  /// The globally unique identification of the element.
  /// </summary>
  string id = 7;

  /// <summary>
  /// Kind of the element: either type or instance.
  /// </summary>
  /// <remarks>
  /// Default: <see cref="Aas.ModellingKind.INSTANCE" />
  /// </remarks>
  optional ModellingKind kind = 8;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 9;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 10;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 11;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 12;

  /// <summary>
  /// A submodel consists of zero or more submodel elements.
  /// </summary>
  repeated SubmodelElement_choice submodel_elements = 13;
}

/// <summary>
/// A relationship element is used to define a relationship between two elements
/// being either referable (model reference) or external (global reference).
/// </summary>
message RelationshipElement {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Reference to the first element in the relationship taking the role of the subject.
  /// </summary>
  Reference first = 10;

  /// <summary>
  /// Reference to the second element in the relationship taking the role of the object.
  /// </summary>
  Reference second = 11;
}

/// <summary>
/// Enumeration of all possible elements of a <see cref="Aas.SubmodelElementList" />.
/// </summary>
enum AasSubmodelElements {
  Aassubmodelelements_UNSPECIFIED = 0;

  Aassubmodelelements_ANNOTATED_RELATIONSHIP_ELEMENT = 1;

  Aassubmodelelements_BASIC_EVENT_ELEMENT = 2;

  Aassubmodelelements_BLOB = 3;

  Aassubmodelelements_CAPABILITY = 4;

  Aassubmodelelements_DATA_ELEMENT = 5;

  Aassubmodelelements_ENTITY = 6;

  Aassubmodelelements_EVENT_ELEMENT = 7;

  Aassubmodelelements_FILE = 8;

  Aassubmodelelements_MULTI_LANGUAGE_PROPERTY = 9;

  Aassubmodelelements_OPERATION = 10;

  Aassubmodelelements_PROPERTY = 11;

  Aassubmodelelements_RANGE = 12;

  Aassubmodelelements_REFERENCE_ELEMENT = 13;

  Aassubmodelelements_RELATIONSHIP_ELEMENT = 14;

  Aassubmodelelements_SUBMODEL_ELEMENT = 15;

  Aassubmodelelements_SUBMODEL_ELEMENT_LIST = 16;

  Aassubmodelelements_SUBMODEL_ELEMENT_COLLECTION = 17;
}

/// <summary>
/// A submodel element list is an ordered list of submodel elements.
/// </summary>
/// <remarks>
/// <para>
/// The numbering starts with zero (0).
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-107:
///     If a first level child element in a <see cref="Aas.SubmodelElementList" /> has
///     a <see cref="Aas.HasSemantics.semantic_id" /> it
///     shall be identical to <see cref="Aas.SubmodelElementList.semantic_id_list_element" />.
///   </li>
///   <li>
///     Constraint AASd-114:
///     If two first level child elements in a <see cref="Aas.SubmodelElementList" /> have
///     a <see cref="Aas.HasSemantics.semantic_id" /> then they shall be identical.
///   </li>
///   <li>
///     Constraint AASd-115:
///     If a first level child element in a <see cref="Aas.SubmodelElementList" /> does not
///     specify a <see cref="Aas.HasSemantics.semantic_id" /> then the value is assumed to be
///     identical to <see cref="Aas.SubmodelElementList.semantic_id_list_element" />.
///   </li>
///   <li>
///     Constraint AASd-120:
///     The <see cref="Aas.SubmodelElementList.id_short" /> of a <see cref="Aas.SubmodelElement" /> being a direct child of a
///     <see cref="Aas.SubmodelElementList" /> shall not be specified.
///   </li>
///   <li>
///     Constraint AASd-108:
///     All first level child elements in a <see cref="Aas.SubmodelElementList" /> shall have
///     the same submodel element type as specified in <see cref="Aas.SubmodelElementList.type_value_list_element" />.
///   </li>
///   <li>
///     Constraint AASd-109:
///     If <see cref="Aas.SubmodelElementList.type_value_list_element" /> is equal to
///     <see cref="Aas.AasSubmodelElements.PROPERTY" /> or
///     <see cref="Aas.AasSubmodelElements.RANGE" />
///     <see cref="Aas.SubmodelElementList.value_type_list_element" /> shall be set and all first
///     level child elements in the <see cref="Aas.SubmodelElementList" /> shall have
///     the value type as specified in <see cref="Aas.SubmodelElementList.value_type_list_element" />.
///   </li>
/// </ul>
/// </remarks>
message SubmodelElementList {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Defines whether order in list is relevant. If <see cref="Aas.SubmodelElementList.order_relevant" /> = <c>False</c>
  /// then the list is representing a set or a bag.
  /// </summary>
  /// <remarks>
  /// Default: <c>True</c>
  /// </remarks>
  optional bool order_relevant = 10;

  /// <summary>
  /// Semantic ID the submodel elements contained in the list match to.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id_list_element = 11;

  /// <summary>
  /// The submodel element type of the submodel elements contained in the list.
  /// </summary>
  AasSubmodelElements type_value_list_element = 12;

  /// <summary>
  /// The value type of the submodel element contained in the list.
  /// </summary>
  optional DataTypeDefXsd value_type_list_element = 13;

  /// <summary>
  /// Submodel element contained in the list.
  /// </summary>
  /// <remarks>
  /// The list is ordered.
  /// </remarks>
  repeated SubmodelElement_choice value = 14;
}

/// <summary>
/// A submodel element collection is a kind of struct, i.e. a a logical encapsulation
/// of multiple named values. It has a fixed number of submodel elements.
/// </summary>
message SubmodelElementCollection {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Submodel element contained in the collection.
  /// </summary>
  repeated SubmodelElement_choice value = 10;
}

/// <summary>
/// A property is a data element that has a single value.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-007:
///     If both, the <see cref="Aas.Property.value" /> and the <see cref="Aas.Property.value_id" /> are
///     present then the value of <see cref="Aas.Property.value" /> needs to be identical to
///     the value of the referenced coded value in <see cref="Aas.Property.value_id" />.
///   </li>
/// </ul>
/// </remarks>
message Property {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Data type of the value
  /// </summary>
  DataTypeDefXsd value_type = 10;

  /// <summary>
  /// The value of the property instance.
  /// </summary>
  optional string value = 11;

  /// <summary>
  /// Reference to the global unique ID of a coded value.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference value_id = 12;
}

/// <summary>
/// A property is a data element that has a multi-language value.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-012:
///     If both the <see cref="Aas.MultiLanguageProperty.value" /> and the <see cref="Aas.MultiLanguageProperty.value_id" /> are present then for each
///     string in a specific language the meaning must be the same as specified in
///     <see cref="Aas.MultiLanguageProperty.value_id" />.
///   </li>
/// </ul>
/// </remarks>
message MultiLanguageProperty {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// The value of the property instance.
  /// </summary>
  repeated LangStringTextType value = 10;

  /// <summary>
  /// Reference to the global unique ID of a coded value.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference value_id = 11;
}

/// <summary>
/// A range data element is a data element that defines a range with min and max.
/// </summary>
message Range {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Data type of the min und max
  /// </summary>
  DataTypeDefXsd value_type = 10;

  /// <summary>
  /// The minimum value of the range.
  /// </summary>
  /// <remarks>
  /// If the min value is missing, then the value is assumed to be negative infinite.
  /// </remarks>
  optional string min = 11;

  /// <summary>
  /// The maximum value of the range.
  /// </summary>
  /// <remarks>
  /// If the max value is missing, then the value is assumed to be positive infinite.
  /// </remarks>
  optional string max = 12;
}

/// <summary>
/// A reference element is a data element that defines a logical reference to another
/// element within the same or another AAS or a reference to an external object or
/// entity.
/// </summary>
message ReferenceElement {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Global reference to an external object or entity or a logical reference to
  /// another element within the same or another AAS (i.e. a model reference to
  /// a Referable).
  /// </summary>
  optional Reference value = 10;
}

/// <summary>
/// A <see cref="Aas.Blob" /> is a data element that represents a file that is contained with its
/// source code in the value attribute.
/// </summary>
message Blob {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// The value of the <see cref="Aas.Blob" /> instance of a blob data element.
  /// </summary>
  /// <remarks>
  /// In contrast to the file property the file content is stored directly as value
  /// in the <see cref="Aas.Blob" /> data element.
  /// </remarks>
  optional bytes value = 10;

  /// <summary>
  /// Content type of the content of the <see cref="Aas.Blob" />.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The content type (MIME type) states which file extensions the file can have.
  /// </para>
  /// <para>
  /// Valid values are content types like e.g. <c>application/json</c>, <c>application/xls</c>,
  /// <c>image/jpg</c>.
  /// </para>
  /// <para>
  /// The allowed values are defined as in RFC2046.
  /// </para>
  /// </remarks>
  string content_type = 11;
}

/// <summary>
/// A File is a data element that represents an address to a file (a locator).
/// </summary>
/// <remarks>
/// The value is an URI that can represent an absolute or relative path.
/// </remarks>
message File {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Path and name of the referenced file (with file extension).
  /// </summary>
  /// <remarks>
  /// The path can be absolute or relative.
  /// </remarks>
  optional string value = 10;

  /// <summary>
  /// Content type of the content of the file.
  /// </summary>
  /// <remarks>
  /// The content type states which file extensions the file can have.
  /// </remarks>
  string content_type = 11;
}

/// <summary>
/// An annotated relationship element is a relationship element that can be annotated
/// with additional data elements.
/// </summary>
message AnnotatedRelationshipElement {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Reference to the first element in the relationship taking the role of the subject.
  /// </summary>
  Reference first = 10;

  /// <summary>
  /// Reference to the second element in the relationship taking the role of the object.
  /// </summary>
  Reference second = 11;

  /// <summary>
  /// A data element that represents an annotation that holds for the relationship
  /// between the two elements
  /// </summary>
  repeated DataElement_choice annotations = 12;
}

/// <summary>
/// An entity is a submodel element that is used to model entities.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-014:
///     Either the attribute <see cref="Aas.Entity.global_asset_id" /> or <see cref="Aas.Entity.specific_asset_ids" />
///     of an <see cref="Aas.Entity" /> must be set if <see cref="Aas.Entity.entity_type" /> is set to
///     <see cref="Aas.EntityType.SELF_MANAGED_ENTITY" />. They are not existing otherwise.
///   </li>
/// </ul>
/// </remarks>
message Entity {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Describes statements applicable to the entity by a set of submodel elements,
  /// typically with a qualified value.
  /// </summary>
  repeated SubmodelElement_choice statements = 10;

  /// <summary>
  /// Describes whether the entity is a co-managed entity or a self-managed entity.
  /// </summary>
  EntityType entity_type = 11;

  /// <summary>
  /// Global identifier of the asset the entity is representing.
  /// </summary>
  /// <remarks>
  /// This is a global reference.
  /// </remarks>
  optional string global_asset_id = 12;

  /// <summary>
  /// Reference to a specific asset ID representing a supplementary identifier
  /// of the asset represented by the Asset Administration Shell.
  /// </summary>
  repeated SpecificAssetId specific_asset_ids = 13;
}

/// <summary>
/// Enumeration for denoting whether an entity is a self-managed entity or a co-managed
/// entity.
/// </summary>
enum EntityType {
  Entitytype_UNSPECIFIED = 0;

  /// <summary>
  /// For co-managed entities there is no separate AAS. Co-managed entities need to be
  /// part of a self-managed entity.
  /// </summary>
  Entitytype_CO_MANAGED_ENTITY = 1;

  /// <summary>
  /// Self-Managed Entities have their own AAS but can be part of the bill of material of
  /// a composite self-managed entity.
  /// </summary>
  /// <remarks>
  /// The asset of an I4.0 Component is a self-managed entity per definition.
  /// </remarks>
  Entitytype_SELF_MANAGED_ENTITY = 2;
}

/// <summary>
/// Direction
/// </summary>
/// <remarks>
/// This element is experimental and therefore may be subject to change or may be
/// removed completely in future versions of the meta-model.
/// </remarks>
enum Direction {
  Direction_UNSPECIFIED = 0;

  /// <summary>
  /// Input direction.
  /// </summary>
  Direction_INPUT = 1;

  /// <summary>
  /// Output direction
  /// </summary>
  Direction_OUTPUT = 2;
}

/// <summary>
/// State of an event
/// </summary>
/// <remarks>
/// This element is experimental and therefore may be subject to change or may be
/// removed completely in future versions of the meta-model.
/// </remarks>
enum StateOfEvent {
  Stateofevent_UNSPECIFIED = 0;

  /// <summary>
  /// Event is on
  /// </summary>
  Stateofevent_ON = 1;

  /// <summary>
  /// Event is off.
  /// </summary>
  Stateofevent_OFF = 2;
}

/// <summary>
/// Defines the necessary information of an event instance sent out or received.
/// </summary>
/// <remarks>
/// This element is experimental and therefore may be subject to change or may be
/// removed completely in future versions of the meta-model.
/// </remarks>
message EventPayload {
  /// <summary>
  /// Reference to the source event element, including identification of
  /// <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" />,
  /// <see cref="Aas.SubmodelElement" />'s.
  /// </summary>
  Reference source = 1;

  /// <summary>
  /// <see cref="Aas.HasSemantics.semantic_id" /> of the source event element, if available
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference source_semantic_id = 2;

  /// <summary>
  /// Reference to the referable, which defines the scope of the event.
  /// </summary>
  /// <remarks>
  /// Can be <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" /> or
  /// <see cref="Aas.SubmodelElement" />.
  /// </remarks>
  Reference observable_reference = 3;

  /// <summary>
  /// <see cref="Aas.HasSemantics.semantic_id" /> of the referable which defines the scope of
  /// the event, if available.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference observable_semantic_id = 4;

  /// <summary>
  /// Information for the outer message infrastructure for scheduling the event to
  /// the respective communication channel.
  /// </summary>
  optional string topic = 5;

  /// <summary>
  /// Subject, who/which initiated the creation.
  /// </summary>
  /// <remarks>
  /// This is an external reference.
  /// </remarks>
  optional Reference subject_id = 6;

  /// <summary>
  /// Timestamp in UTC, when this event was triggered.
  /// </summary>
  string time_stamp = 7;

  /// <summary>
  /// Event specific payload.
  /// </summary>
  optional bytes payload = 8;
}

/// <summary>
/// A basic event element.
/// </summary>
/// <remarks>
/// This element is experimental and therefore may be subject to change or may be
/// removed completely in future versions of the meta-model.
/// </remarks>
message BasicEventElement {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Reference to the <see cref="Aas.Referable" />, which defines the scope of the event.
  /// Can be <see cref="Aas.AssetAdministrationShell" />, <see cref="Aas.Submodel" />, or
  /// <see cref="Aas.SubmodelElement" />.
  /// </summary>
  /// <remarks>
  /// Reference to a referable, e.g., a data element or
  /// a submodel, that is being observed.
  /// </remarks>
  Reference observed = 10;

  /// <summary>
  /// Direction of event.
  /// </summary>
  /// <remarks>
  /// Can be <c>{ Input, Output }</c>.
  /// </remarks>
  Direction direction = 11;

  /// <summary>
  /// State of event.
  /// </summary>
  /// <remarks>
  /// Can be <c>{ On, Off }</c>.
  /// </remarks>
  StateOfEvent state = 12;

  /// <summary>
  /// Information for the outer message infrastructure for scheduling the event to the
  /// respective communication channel.
  /// </summary>
  optional string message_topic = 13;

  /// <summary>
  /// Information, which outer message infrastructure shall handle messages for
  /// the <see cref="Aas.EventElement" />. Refers to a <see cref="Aas.Submodel" />,
  /// <see cref="Aas.SubmodelElementList" />, <see cref="Aas.SubmodelElementCollection" /> or
  /// <see cref="Aas.Entity" />, which contains <see cref="Aas.DataElement" />'s describing
  /// the proprietary specification for the message broker.
  /// </summary>
  /// <remarks>
  /// For different message infrastructure, e.g., OPC UA or MQTT or AMQP, this
  /// proprietary specification could be standardized by having respective Submodels.
  /// </remarks>
  optional Reference message_broker = 14;

  /// <summary>
  /// Timestamp in UTC, when the last event was received (input direction) or sent
  /// (output direction).
  /// </summary>
  optional string last_update = 15;

  /// <summary>
  /// For input direction, reports on the maximum frequency, the software entity behind
  /// the respective Referable can handle input events.
  /// </summary>
  /// <remarks>
  /// <para>
  /// For output events, specifies the maximum frequency of outputting this event to
  /// an outer infrastructure.
  /// </para>
  /// <para>
  /// Might be not specified, that is, there is no minimum interval.
  /// </para>
  /// </remarks>
  optional string min_interval = 16;

  /// <summary>
  /// For input direction: not applicable.
  /// </summary>
  /// <remarks>
  /// <para>
  /// For output direction: maximum interval in time, the respective Referable shall send
  /// an update of the status of the event, even if no other trigger condition for
  /// the event was not met.
  /// </para>
  /// <para>
  /// Might be not specified, that is, there is no maximum interval
  /// </para>
  /// </remarks>
  optional string max_interval = 17;
}

/// <summary>
/// An operation is a submodel element with input and output variables.
/// </summary>
/// <remarks>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-134:
///     For an <see cref="Aas.Operation" /> the <see cref="Aas.Referable.id_short" /> of all
///     <see cref="Aas.OperationVariable.value" />'s in
///     <see cref="Aas.Operation.input_variables" />, <see cref="Aas.Operation.output_variables" />
///     and <see cref="Aas.Operation.inoutput_variables" /> shall be unique.
///   </li>
/// </ul>
/// </remarks>
message Operation {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;

  /// <summary>
  /// Input parameter of the operation.
  /// </summary>
  repeated OperationVariable input_variables = 10;

  /// <summary>
  /// Output parameter of the operation.
  /// </summary>
  repeated OperationVariable output_variables = 11;

  /// <summary>
  /// Parameter that is input and output of the operation.
  /// </summary>
  repeated OperationVariable inoutput_variables = 12;
}

/// <summary>
/// The value of an operation variable is a submodel element that is used as input
/// and/or output variable of an operation.
/// </summary>
message OperationVariable {
  /// <summary>
  /// Describes an argument or result of an operation via a submodel element
  /// </summary>
  SubmodelElement_choice value = 1;
}

/// <summary>
/// A capability is the implementation-independent description of the potential of an
/// asset to achieve a certain effect in the physical or virtual world.
/// </summary>
/// <remarks>
/// The <see cref="Aas.Capability.semantic_id" /> of a capability is typically an ontology.
/// Thus, reasoning on capabilities is enabled.
/// </remarks>
message Capability {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Identifier of the semantic definition of the element. It is called semantic ID
  /// of the element or also main semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  optional Reference semantic_id = 6;

  /// <summary>
  /// Identifier of a supplemental semantic definition of the element.
  /// It is called supplemental semantic ID of the element.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  repeated Reference supplemental_semantic_ids = 7;

  /// <summary>
  /// Additional qualification of a qualifiable element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASd-021:
  ///     Every qualifiable can only have one qualifier with the same
  ///     <see cref="Aas.Qualifier.type" />.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated Qualifier qualifiers = 8;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 9;
}

/// <summary>
/// The semantics of a property or other elements that may have a semantic description
/// is defined by a concept description.
/// </summary>
/// <remarks>
/// <para>
/// The description of the concept should follow a standardized schema (realized as
/// data specification template).
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     <para>
///     Constraint AASc-3a-004:
///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.category" /> <c>PROPERTY</c> or
///     <c>VALUE</c> using data specification IEC61360,
///     the <see cref="Aas.DataSpecificationIec61360.data_type" /> is mandatory and shall be
///     one of: <c>DATE</c>, <c>STRING</c>, <c>STRING_TRANSLATABLE</c>, <c>INTEGER_MEASURE</c>,
///     <c>INTEGER_COUNT</c>, <c>INTEGER_CURRENCY</c>, <c>REAL_MEASURE</c>, <c>REAL_COUNT</c>,
///     <c>REAL_CURRENCY</c>, <c>BOOLEAN</c>, <c>RATIONAL</c>, <c>RATIONAL_MEASURE</c>,
///     <c>TIME</c>, <c>TIMESTAMP</c>.
///     </para>
///     <para>
///     Note: categories are deprecated since V3.0 of Part 1a of the document series
///     "Details of the Asset Administration Shell".
///     </para>
///   </li>
///   <li>
///     <para>
///     Constraint AASc-3a-005:
///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.category" /> <c>REFERENCE</c>
///     using data specification template IEC61360,
///     the <see cref="Aas.DataSpecificationIec61360.data_type" /> shall be
///     one of: <c>STRING</c>, <c>IRI</c>, <c>IRDI</c>.
///     </para>
///     <para>
///     Note: categories are deprecated since V3.0 of Part 1a of the document series
///     "Details of the Asset Administration Shell".
///     </para>
///   </li>
///   <li>
///     <para>
///     Constraint AASc-3a-006:
///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.category" /> <c>DOCUMENT</c>
///     using data specification IEC61360,
///     the <see cref="Aas.DataSpecificationIec61360.data_type" /> shall be one of <c>FILE</c>,
///     <c>BLOB</c>, <c>HTML</c>
///     </para>
///     <para>
///     Categories are deprecated since V3.0 of Part 1a of the document series
///     "Details of the Asset Administration Shell".
///     </para>
///   </li>
///   <li>
///     <para>
///     Constraint AASc-3a-007:
///     For a <see cref="Aas.ConceptDescription" /> with <see cref="Aas.ConceptDescription.category" /> <c>QUALIFIER_TYPE</c>
///     using data specification IEC61360,
///     the <see cref="Aas.DataSpecificationIec61360.data_type" /> is mandatory and shall be
///     defined.
///     </para>
///     <para>
///     Categories are deprecated since V3.0 of Part 1a of the document series
///     "Details of the Asset Administration Shell".
///     </para>
///   </li>
///   <li>
///     <para>
///     Constraint AASc-3a-008:
///     For a <see cref="Aas.ConceptDescription" /> using data specification template IEC61360,
///     <see cref="Aas.DataSpecificationIec61360.definition" /> is mandatory and shall be
///     defined at least in English.
///     </para>
///     <para>
///     Exception: The concept description describes a value, i.e.
///     <see cref="Aas.DataSpecificationIec61360.value" /> is defined.
///     </para>
///   </li>
///   <li>
///     Constraint AASc-3a-003:
///     For a <see cref="Aas.ConceptDescription" /> using data specification template IEC61360,
///     referenced via <see cref="Aas.DataSpecificationIec61360.value_list" />
///     <see cref="Aas.ValueReferencePair.value_id" />
///     the <see cref="Aas.DataSpecificationIec61360.value" /> shall be set.
///   </li>
/// </ul>
/// </remarks>
message ConceptDescription {
  /// <summary>
  /// An extension of the element.
  /// </summary>
  repeated Extension extensions = 1;

  /// <summary>
  /// The category is a value that gives further meta information
  /// w.r.t. to the class of the element.
  /// It affects the expected existence of attributes and the applicability of
  /// constraints.
  /// </summary>
  /// <remarks>
  /// The category is not identical to the semantic definition
  /// (<see cref="Aas.HasSemantics" />) of an element. The category e.g. could denote that
  /// the element is a measurement value whereas the semantic definition of
  /// the element would denote that it is the measured temperature.
  /// </remarks>
  optional string category = 2;

  /// <summary>
  /// In case of identifiables this attribute is a short name of the element.
  /// In case of referable this ID is an identifying string of the element within
  /// its name space.
  /// </summary>
  /// <remarks>
  /// In case the element is a property and the property has a semantic definition
  /// (<see cref="Aas.HasSemantics.semantic_id" />) conformant to IEC61360
  /// the <see cref="Aas.Referable.id_short" /> is typically identical to the short name in English.
  /// </remarks>
  optional string id_short = 3;

  /// <summary>
  /// Display name. Can be provided in several languages.
  /// </summary>
  repeated LangStringNameType display_name = 4;

  /// <summary>
  /// Description or comments on the element.
  /// </summary>
  /// <remarks>
  /// <para>
  /// The description can be provided in several languages.
  /// </para>
  /// <para>
  /// If no description is defined, then the definition of the concept
  /// description that defines the semantics of the element is used.
  /// </para>
  /// <para>
  /// Additional information can be provided, e.g., if the element is
  /// qualified and which qualifier types can be expected in which
  /// context or which additional data specification templates are
  /// provided.
  /// </para>
  /// </remarks>
  repeated LangStringTextType description = 5;

  /// <summary>
  /// Administrative information of an identifiable element.
  /// </summary>
  /// <remarks>
  /// Some of the administrative information like the version number might need to
  /// be part of the identification.
  /// </remarks>
  optional AdministrativeInformation administration = 6;

  /// <summary>
  /// The globally unique identification of the element.
  /// </summary>
  string id = 7;

  /// <summary>
  /// Embedded data specification.
  /// </summary>
  repeated EmbeddedDataSpecification embedded_data_specifications = 8;

  /// <summary>
  /// Reference to an external definition the concept is compatible to or was derived
  /// from.
  /// </summary>
  /// <remarks>
  /// <para>
  /// It is recommended to use a global reference.
  /// </para>
  /// <para>
  /// Compare to is-case-of relationship in ISO 13584-32 &amp; IEC EN 61360
  /// </para>
  /// </remarks>
  repeated Reference is_case_of = 9;
}

/// <summary>
/// Reference types
/// </summary>
enum ReferenceTypes {
  Referencetypes_UNSPECIFIED = 0;

  /// <summary>
  /// External reference.
  /// </summary>
  Referencetypes_EXTERNAL_REFERENCE = 1;

  /// <summary>
  /// Model reference.
  /// </summary>
  Referencetypes_MODEL_REFERENCE = 2;
}

/// <summary>
/// Reference to either a model element of the same or another AAS or to an external
/// entity.
/// </summary>
/// <remarks>
/// <para>
/// A reference is an ordered list of keys.
/// </para>
/// <para>
/// A model reference is an ordered list of keys, each key referencing an element. The
/// complete list of keys may for example be concatenated to a path that then gives
/// unique access to an element.
/// </para>
/// <para>
/// An external reference is a reference to an external entity.
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     Constraint AASd-121:
///     For <see cref="Aas.Reference" />'s the value of <see cref="Aas.Key.type" /> of the first key of "
///     <see cref="Aas.Reference.keys" /> shall be one of <see cref="Aas.Constants.globally_identifiables" />.
///   </li>
///   <li>
///     Constraint AASd-122:
///     For external references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.EXTERNAL_REFERENCE" />, the value
///     of <see cref="Aas.Key.type" /> of the first key of <see cref="Aas.Reference.keys" /> shall be one of
///     <see cref="Aas.Constants.generic_globally_identifiables" />.
///   </li>
///   <li>
///     Constraint AASd-123:
///     For model references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />, the value
///     of <see cref="Aas.Key.type" /> of the first key of <see cref="Aas.Reference.keys" /> shall be one of
///     <see cref="Aas.Constants.aas_identifiables" />.
///   </li>
///   <li>
///     Constraint AASd-124:
///     For external references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.EXTERNAL_REFERENCE" />, the last
///     key of <see cref="Aas.Reference.keys" /> shall be either one of
///     <see cref="Aas.Constants.generic_globally_identifiables" /> or one of
///     <see cref="Aas.Constants.generic_fragment_keys" />.
///   </li>
///   <li>
///     <para>
///     Constraint AASd-125:
///     For model references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />, with more
///     than one key in <see cref="Aas.Reference.keys" /> the value of <see cref="Aas.Key.type" />
///     of each of the keys following the first
///     key of <see cref="Aas.Reference.keys" /> shall be one of <see cref="Aas.Constants.fragment_keys" />.
///     </para>
///     <para>
///     Constraint AASd-125 ensures that the shortest path is used.
///     </para>
///   </li>
///   <li>
///     Constraint AASd-126:
///     For model references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />, with more
///     than one key in <see cref="Aas.Reference.keys" /> the value of <see cref="Aas.Key.type" />
///     of the last key in the reference key chain may be
///     one of <see cref="Aas.Constants.generic_fragment_keys" /> or no key at all
///     shall have a value out of <see cref="Aas.Constants.generic_fragment_keys" />.
///   </li>
///   <li>
///     <para>
///     Constraint AASd-127:
///     For model references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />, with more
///     than one key in <see cref="Aas.Reference.keys" /> a key with <see cref="Aas.Key.type" />
///     <see cref="Aas.KeyTypes.FRAGMENT_REFERENCE" /> shall be preceded by a key with
///     <see cref="Aas.Key.type" /> <see cref="Aas.KeyTypes.FILE" /> or <see cref="Aas.KeyTypes.BLOB" />. All other
///     AAS fragments, i.e. <see cref="Aas.Key.type" /> values
///     out of <see cref="Aas.Constants.aas_submodel_elements_as_keys" />, do not support fragments.
///     </para>
///     <para>
///     Which kind of fragments are supported depends on the content type and the
///     specification of allowed fragment identifiers for the corresponding resource
///     being referenced via the reference.
///     </para>
///   </li>
///   <li>
///     Constraint AASd-128:
///     For model references, i.e. <see cref="Aas.Reference" />'s with
///     <see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />, the
///     <see cref="Aas.Key.value" /> of a <see cref="Aas.Key" /> preceded by a <see cref="Aas.Key" /> with
///     <see cref="Aas.Key.type" /> = <see cref="Aas.KeyTypes.SUBMODEL_ELEMENT_LIST" /> is an integer
///     number denoting the position in the array of the submodel element list.
///   </li>
/// </ul>
/// </remarks>
message Reference {
  /// <summary>
  /// Type of the reference.
  /// </summary>
  /// <remarks>
  /// Denotes, whether reference is an external reference or a model reference.
  /// </remarks>
  ReferenceTypes type = 1;

  /// <summary>
  /// <see cref="Aas.HasSemantics.semantic_id" /> of the referenced model element
  /// (<see cref="Aas.Reference.type" /> = <see cref="Aas.ReferenceTypes.MODEL_REFERENCE" />).
  /// </summary>
  /// <remarks>
  /// <para>
  /// For external references there typically is no semantic ID.
  /// </para>
  /// <para>
  /// It is recommended to use a external reference.
  /// </para>
  /// </remarks>
  optional Reference referred_semantic_id = 2;

  /// <summary>
  /// Unique references in their name space.
  /// </summary>
  repeated Key keys = 3;
}

/// <summary>
/// A key is a reference to an element by its ID.
/// </summary>
message Key {
  /// <summary>
  /// Denotes which kind of entity is referenced.
  /// </summary>
  /// <remarks>
  /// <para>
  /// In case <see cref="Aas.Key.type" /> = <see cref="Aas.KeyTypes.GLOBAL_REFERENCE" />,
  /// the key represents a reference to a source that can be globally identified.
  /// </para>
  /// <para>
  /// In case <see cref="Aas.Key.type" /> = <see cref="Aas.KeyTypes.FRAGMENT_REFERENCE" /> the key represents
  /// a bookmark or a similar local identifier within its parent element as specified
  /// by the key that precedes this key.
  /// </para>
  /// <para>
  /// In all other cases the key references a model element of the same or of another AAS.
  /// The name of the model element is explicitly listed.
  /// </para>
  /// </remarks>
  KeyTypes type = 1;

  /// <summary>
  /// The key value, for example an IRDI or an URI
  /// </summary>
  string value = 2;
}

/// <summary>
/// Enumeration of different key value types within a key.
/// </summary>
enum KeyTypes {
  Keytypes_UNSPECIFIED = 0;

  Keytypes_ANNOTATED_RELATIONSHIP_ELEMENT = 1;

  Keytypes_ASSET_ADMINISTRATION_SHELL = 2;

  Keytypes_BASIC_EVENT_ELEMENT = 3;

  Keytypes_BLOB = 4;

  Keytypes_CAPABILITY = 5;

  Keytypes_CONCEPT_DESCRIPTION = 6;

  /// <summary>
  /// Data element.
  /// </summary>
  /// <remarks>
  /// Data Element is abstract, <em>i.e.</em> if a key uses <see cref="Aas.KeyTypes.DATA_ELEMENT" />
  /// the reference may be a Property, a File etc.
  /// </remarks>
  Keytypes_DATA_ELEMENT = 7;

  Keytypes_ENTITY = 8;

  /// <summary>
  /// Event.
  /// </summary>
  /// <remarks>
  /// <see cref="Aas.EventElement" /> is abstract.
  /// </remarks>
  Keytypes_EVENT_ELEMENT = 9;

  Keytypes_FILE = 10;

  /// <summary>
  /// Bookmark or a similar local identifier of a subordinate part of
  /// a primary resource
  /// </summary>
  Keytypes_FRAGMENT_REFERENCE = 11;

  Keytypes_GLOBAL_REFERENCE = 12;

  /// <summary>
  /// Identifiable.
  /// </summary>
  /// <remarks>
  /// Identifiable is abstract, i.e. if a key uses “Identifiable” the reference
  /// may be an Asset Administration Shell, a Submodel or a Concept Description.
  /// </remarks>
  Keytypes_IDENTIFIABLE = 13;

  /// <summary>
  /// Property with a value that can be provided in multiple languages
  /// </summary>
  Keytypes_MULTI_LANGUAGE_PROPERTY = 14;

  Keytypes_OPERATION = 15;

  Keytypes_PROPERTY = 16;

  /// <summary>
  /// Range with min and max
  /// </summary>
  Keytypes_RANGE = 17;

  Keytypes_REFERABLE = 18;

  /// <summary>
  /// Reference
  /// </summary>
  Keytypes_REFERENCE_ELEMENT = 19;

  /// <summary>
  /// Relationship
  /// </summary>
  Keytypes_RELATIONSHIP_ELEMENT = 20;

  Keytypes_SUBMODEL = 21;

  /// <summary>
  /// Submodel Element
  /// </summary>
  /// <remarks>
  /// Submodel Element is abstract, <em>i.e.</em> if a key uses <see cref="Aas.KeyTypes.SUBMODEL_ELEMENT" />
  /// the reference may be a <see cref="Aas.Property" />, an <see cref="Aas.Operation" /> etc.
  /// </remarks>
  Keytypes_SUBMODEL_ELEMENT = 22;

  /// <summary>
  /// Struct of Submodel Elements
  /// </summary>
  Keytypes_SUBMODEL_ELEMENT_COLLECTION = 23;

  /// <summary>
  /// List of Submodel Elements
  /// </summary>
  Keytypes_SUBMODEL_ELEMENT_LIST = 24;
}

/// <summary>
/// Enumeration listing all XSD anySimpleTypes
/// </summary>
enum DataTypeDefXsd {
  Datatypedefxsd_UNSPECIFIED = 0;

  Datatypedefxsd_ANY_URI = 1;

  Datatypedefxsd_BASE_64_BINARY = 2;

  Datatypedefxsd_BOOLEAN = 3;

  Datatypedefxsd_BYTE = 4;

  Datatypedefxsd_DATE = 5;

  Datatypedefxsd_DATE_TIME = 6;

  Datatypedefxsd_DECIMAL = 7;

  Datatypedefxsd_DOUBLE = 8;

  Datatypedefxsd_DURATION = 9;

  Datatypedefxsd_FLOAT = 10;

  Datatypedefxsd_G_DAY = 11;

  Datatypedefxsd_G_MONTH = 12;

  Datatypedefxsd_G_MONTH_DAY = 13;

  Datatypedefxsd_G_YEAR = 14;

  Datatypedefxsd_G_YEAR_MONTH = 15;

  Datatypedefxsd_HEX_BINARY = 16;

  Datatypedefxsd_INT = 17;

  Datatypedefxsd_INTEGER = 18;

  Datatypedefxsd_LONG = 19;

  Datatypedefxsd_NEGATIVE_INTEGER = 20;

  Datatypedefxsd_NON_NEGATIVE_INTEGER = 21;

  Datatypedefxsd_NON_POSITIVE_INTEGER = 22;

  Datatypedefxsd_POSITIVE_INTEGER = 23;

  Datatypedefxsd_SHORT = 24;

  Datatypedefxsd_STRING = 25;

  Datatypedefxsd_TIME = 26;

  Datatypedefxsd_UNSIGNED_BYTE = 27;

  Datatypedefxsd_UNSIGNED_INT = 28;

  Datatypedefxsd_UNSIGNED_LONG = 29;

  Datatypedefxsd_UNSIGNED_SHORT = 30;
}

/// <summary>
/// String with length 128 maximum and minimum 1 characters and with language tags
/// </summary>
message LangStringNameType {
  /// <summary>
  /// Language tag conforming to BCP 47
  /// </summary>
  string language = 1;

  /// <summary>
  /// Text in the <see cref="Aas.AbstractLangString.language" />
  /// </summary>
  string text = 2;
}

/// <summary>
/// String with length 1023 maximum and minimum 1 characters and with language tags
/// </summary>
message LangStringTextType {
  /// <summary>
  /// Language tag conforming to BCP 47
  /// </summary>
  string language = 1;

  /// <summary>
  /// Text in the <see cref="Aas.AbstractLangString.language" />
  /// </summary>
  string text = 2;
}

/// <summary>
/// Container for the sets of different identifiables.
/// </summary>
/// <remarks>
/// w.r.t. file exchange: There is exactly one environment independent on how many
/// files the contained elements are split. If the file is split then there
/// shall be no element with the same identifier in two different files.
/// </remarks>
message Environment {
  /// <summary>
  /// Asset administration shell
  /// </summary>
  repeated AssetAdministrationShell asset_administration_shells = 1;

  /// <summary>
  /// Submodel
  /// </summary>
  repeated Submodel submodels = 2;

  /// <summary>
  /// Concept description
  /// </summary>
  repeated ConceptDescription concept_descriptions = 3;
}

/// <summary>
/// Embed the content of a data specification.
/// </summary>
message EmbeddedDataSpecification {
  /// <summary>
  /// Actual content of the data specification
  /// </summary>
  DataSpecificationContent_choice data_specification_content = 1;

  /// <summary>
  /// Reference to the data specification
  /// </summary>
  Reference data_specification = 2;
}

enum DataTypeIec61360 {
  Datatypeiec61360_UNSPECIFIED = 0;

  /// <summary>
  /// values containing a calendar date, conformant to ISO 8601:2004 Format yyyy-mm-dd
  /// Example from IEC 61360-1:2017: "1999-05-31" is the [DATE] representation of:
  /// "31 May 1999".
  /// </summary>
  Datatypeiec61360_DATE = 1;

  /// <summary>
  /// values consisting of sequence of characters but cannot be translated into other
  /// languages
  /// </summary>
  Datatypeiec61360_STRING = 2;

  /// <summary>
  /// values containing string but shall be represented as different string in different
  /// languages
  /// </summary>
  Datatypeiec61360_STRING_TRANSLATABLE = 3;

  /// <summary>
  /// values containing values that are measure of type INTEGER. In addition such a value
  /// comes with a physical unit.
  /// </summary>
  Datatypeiec61360_INTEGER_MEASURE = 4;

  /// <summary>
  /// values containing values of type INTEGER but are no currencies or measures
  /// </summary>
  Datatypeiec61360_INTEGER_COUNT = 5;

  /// <summary>
  /// values containing values of type INTEGER that are currencies
  /// </summary>
  Datatypeiec61360_INTEGER_CURRENCY = 6;

  /// <summary>
  /// values containing values that are measures of type REAL. In addition such a value
  /// comes with a physical unit.
  /// </summary>
  Datatypeiec61360_REAL_MEASURE = 7;

  /// <summary>
  /// values containing numbers that can be written as a terminating or non-terminating
  /// decimal; a rational or irrational number but are no currencies or measures
  /// </summary>
  Datatypeiec61360_REAL_COUNT = 8;

  /// <summary>
  /// values containing values of type REAL that are currencies
  /// </summary>
  Datatypeiec61360_REAL_CURRENCY = 9;

  /// <summary>
  /// values representing truth of logic or Boolean algebra (TRUE, FALSE)
  /// </summary>
  Datatypeiec61360_BOOLEAN = 10;

  /// <summary>
  /// values containing values of type STRING conformant to Rfc 3987
  /// </summary>
  /// <remarks>
  /// In IEC61360-1 (2017) only URI is supported.
  /// An IRI type allows in particular to express an URL or an URI.
  /// </remarks>
  Datatypeiec61360_IRI = 11;

  /// <summary>
  /// values conforming to ISO/IEC 11179 series global identifier sequences
  /// </summary>
  /// <remarks>
  /// <para>
  /// IRDI can be used instead of the more specific data types ICID or ISO29002_IRDI.
  /// </para>
  /// <para>
  /// ICID values are value conformant to an IRDI, where the delimiter between RAI and ID
  /// is “#” while the delimiter between DI and VI is confined to “##”
  /// </para>
  /// <para>
  /// ISO29002_IRDI values are values containing a global identifier that identifies an
  /// administrated item in a registry. The structure of this identifier complies with
  /// identifier syntax defined in ISO/TS 29002-5. The identifier shall fulfil the
  /// requirements specified in ISO/TS 29002-5 for an "international registration data
  /// identifier" (IRDI).
  /// </para>
  /// </remarks>
  Datatypeiec61360_IRDI = 12;

  /// <summary>
  /// values containing values of type rational
  /// </summary>
  Datatypeiec61360_RATIONAL = 13;

  /// <summary>
  /// values containing values of type rational. In addition such a value comes with a
  /// physical unit.
  /// </summary>
  Datatypeiec61360_RATIONAL_MEASURE = 14;

  /// <summary>
  /// values containing a time, conformant to ISO 8601:2004 but restricted to what is
  /// allowed in the corresponding type in xml.
  /// </summary>
  /// <remarks>
  /// <para>
  /// Format hh:mm (ECLASS)
  /// </para>
  /// <para>
  /// Example from IEC 61360-1:2017: "13:20:00-05:00" is the [TIME] representation of:
  /// 1.20 p.m. for Eastern Standard Time, which is 5 hours behind Coordinated
  /// Universal Time (UTC).
  /// </para>
  /// </remarks>
  Datatypeiec61360_TIME = 15;

  /// <summary>
  /// values containing a time, conformant to ISO 8601:2004 but restricted to what is
  /// allowed in the corresponding type in xml.
  /// </summary>
  /// <remarks>
  /// Format yyyy-mm-dd hh:mm (ECLASS)
  /// </remarks>
  Datatypeiec61360_TIMESTAMP = 16;

  /// <summary>
  /// values containing an address to a file. The values are of type URI and can represent
  /// an absolute or relative path.
  /// </summary>
  /// <remarks>
  /// IEC61360 does not support the file type.
  /// </remarks>
  Datatypeiec61360_FILE = 17;

  /// <summary>
  /// Values containing string with any sequence of characters, using the syntax of HTML5
  /// (see W3C Recommendation 28:2014)
  /// </summary>
  Datatypeiec61360_HTML = 18;

  /// <summary>
  /// values containing the content of a file. Values may be binaries.
  /// </summary>
  /// <remarks>
  /// <para>
  /// HTML conformant to HTML5 is a special blob.
  /// </para>
  /// <para>
  /// In IEC61360 binary is for a sequence of bits, each bit being represented by “0” and
  /// “1” only. A binary is a blob but a blob may also contain other source code.
  /// </para>
  /// </remarks>
  Datatypeiec61360_BLOB = 19;
}

/// <summary>
/// Value represented by up to four variants of a numeric value in a specific role:
/// <c>MIN</c>, <c>NOM</c>, <c>TYP</c> and <c>MAX</c>. True means that the value is available,
/// false means the value is not available.
/// </summary>
/// <remarks>
/// <para>
/// EXAMPLE from [IEC61360-1]: In the case of having a property which is
/// of the LEVEL_TYPE min/max − expressing a range − only those two values
/// need to be provided.
/// </para>
/// <para>
/// <para>
/// This is how AAS deals with the following combinations of level types:
/// </para>
/// <ul>
///   <li>
///     Either all attributes are false. In this case the concept is mapped
///     to a <see cref="Aas.Property" /> and level type is ignored.
///   </li>
///   <li>
///     At most one of the attributes is set to true. In this case
///     the concept is mapped to a <see cref="Aas.Property" />.
///   </li>
///   <li>
///     Min and max are set to true. In this case the concept is mapped
///     to a <see cref="Aas.Range" />.
///   </li>
///   <li>
///     More than one attribute is set to true but not min and max only
///     (see second case). In this case the concept is mapped
///     to a <see cref="Aas.SubmodelElementCollection" /> with the corresponding
///     number of Properties.
///     Example: If attribute <see cref="Aas.LevelType.min" /> and <see cref="Aas.LevelType.nom" /> are set to true
///     then the concept is mapped to a <see cref="Aas.SubmodelElementCollection" />
///     with two Properties within: min and nom.
///     The data type of both Properties is the same.
///   </li>
/// </ul>
/// </para>
/// <para>
/// In the cases 2. and 4. the <see cref="Aas.Property.semantic_id" /> of the Property
/// or Properties within the <see cref="Aas.SubmodelElementCollection" /> needs to include
/// information about the level type. Otherwise, the semantics is not described
/// in a unique way. Please refer to the specification.
/// </para>
/// </remarks>
message LevelType {
  /// <summary>
  /// Minimum of the value
  /// </summary>
  bool min = 1;

  /// <summary>
  /// Nominal value (value as designated)
  /// </summary>
  bool nom = 2;

  /// <summary>
  /// Value as typically present
  /// </summary>
  bool typ = 3;

  /// <summary>
  /// Maximum of the value
  /// </summary>
  bool max = 4;
}

/// <summary>
/// A value reference pair within a value list. Each value has a global unique id
/// defining its semantic.
/// </summary>
message ValueReferencePair {
  /// <summary>
  /// The value of the referenced concept definition of the value in <see cref="Aas.ValueReferencePair.value_id" />.
  /// </summary>
  string value = 1;

  /// <summary>
  /// Global unique id of the value.
  /// </summary>
  /// <remarks>
  /// It is recommended to use a global reference.
  /// </remarks>
  Reference value_id = 2;
}

/// <summary>
/// A set of value reference pairs.
/// </summary>
message ValueList {
  /// <summary>
  /// A pair of a value together with its global unique id.
  /// </summary>
  repeated ValueReferencePair value_reference_pairs = 1;
}

/// <summary>
/// String with length 255 maximum and minimum 1 characters and with language tags
/// </summary>
/// <remarks>
/// It is advised to keep the length of the name limited to 35 characters.
/// </remarks>
message LangStringPreferredNameTypeIec61360 {
  /// <summary>
  /// Language tag conforming to BCP 47
  /// </summary>
  string language = 1;

  /// <summary>
  /// Text in the <see cref="Aas.AbstractLangString.language" />
  /// </summary>
  string text = 2;
}

/// <summary>
/// String with length 18 maximum and minimum 1 characters and with language tags
/// </summary>
message LangStringShortNameTypeIec61360 {
  /// <summary>
  /// Language tag conforming to BCP 47
  /// </summary>
  string language = 1;

  /// <summary>
  /// Text in the <see cref="Aas.AbstractLangString.language" />
  /// </summary>
  string text = 2;
}

/// <summary>
/// String with length 1023 maximum and minimum 1 characters and with language tags
/// </summary>
message LangStringDefinitionTypeIec61360 {
  /// <summary>
  /// Language tag conforming to BCP 47
  /// </summary>
  string language = 1;

  /// <summary>
  /// Text in the <see cref="Aas.AbstractLangString.language" />
  /// </summary>
  string text = 2;
}

/// <summary>
/// Content of data specification template for concept descriptions for properties,
/// values and value lists conformant to IEC 61360.
/// </summary>
/// <remarks>
/// <para>
/// IEC61360 requires also a globally unique identifier for a concept
/// description. This ID is not part of the data specification template.
/// Instead the <see cref="Aas.ConceptDescription.id" /> as inherited via
/// <see cref="Aas.Identifiable" /> is used. Same holds for administrative
/// information like the version and revision.
/// </para>
/// <para>
/// <see cref="Aas.ConceptDescription.id_short" /> and <see cref="Aas.DataSpecificationIec61360.short_name" /> are very
/// similar. However, in this case the decision was to add
/// <see cref="Aas.DataSpecificationIec61360.short_name" /> explicitly to the data specification. Same holds for
/// <see cref="Aas.ConceptDescription.display_name" /> and
/// <see cref="Aas.DataSpecificationIec61360.preferred_name" />. Same holds for
/// <see cref="Aas.ConceptDescription.description" /> and <see cref="Aas.DataSpecificationIec61360.definition" />.
/// </para>
/// <para>
/// Constraints:
/// </para>
/// <ul>
///   <li>
///     <para>
///     Constraint AASc-3a-010:
///     If <see cref="Aas.DataSpecificationIec61360.value" /> is not empty then <see cref="Aas.DataSpecificationIec61360.value_list" /> shall be empty
///     and vice versa.
///     </para>
///     <para>
///     It is also possible that both <see cref="Aas.DataSpecificationIec61360.value" /> and <see cref="Aas.DataSpecificationIec61360.value_list" /> are
///     empty. This is the case for concept descriptions that define the semantics
///     of a property but do not have an enumeration (<see cref="Aas.DataSpecificationIec61360.value_list" />) as
///     data type.
///     </para>
///     <para>
///     Although it is possible to define a <see cref="Aas.ConceptDescription" /> for a
///     :attr:´value_list`,
///     it is not possible to reuse this <see cref="Aas.DataSpecificationIec61360.value_list" />.
///     It is only possible to directly add a <see cref="Aas.DataSpecificationIec61360.value_list" /> as data type
///     to a specific semantic definition of a property.
///     </para>
///   </li>
///   <li>
///     Constraint AASc-3a-009:
///     If <see cref="Aas.DataSpecificationIec61360.data_type" /> one of:
///     <see cref="Aas.DataTypeIec61360.INTEGER_MEASURE" />,
///     <see cref="Aas.DataTypeIec61360.REAL_MEASURE" />,
///     <see cref="Aas.DataTypeIec61360.RATIONAL_MEASURE" />,
///     <see cref="Aas.DataTypeIec61360.INTEGER_CURRENCY" />,
///     <see cref="Aas.DataTypeIec61360.REAL_CURRENCY" />, then <see cref="Aas.DataSpecificationIec61360.unit" /> or
///     <see cref="Aas.DataSpecificationIec61360.unit_id" /> shall be defined.
///   </li>
/// </ul>
/// </remarks>
message DataSpecificationIec61360 {
  /// <summary>
  /// Preferred name
  /// </summary>
  /// <remarks>
  /// <para>
  /// It is advised to keep the length of the name limited to 35 characters.
  /// </para>
  /// <para>
  /// Constraints:
  /// </para>
  /// <ul>
  ///   <li>
  ///     Constraint AASc-3a-002:
  ///     <see cref="Aas.DataSpecificationIec61360.preferred_name" /> shall be provided at least in English.
  ///   </li>
  /// </ul>
  /// </remarks>
  repeated LangStringPreferredNameTypeIec61360 preferred_name = 1;

  /// <summary>
  /// Short name
  /// </summary>
  repeated LangStringShortNameTypeIec61360 short_name = 2;

  /// <summary>
  /// Unit
  /// </summary>
  optional string unit = 3;

  /// <summary>
  /// Unique unit id
  /// </summary>
  /// <remarks>
  /// <para>
  /// <see cref="Aas.DataSpecificationIec61360.unit" /> and <see cref="Aas.DataSpecificationIec61360.unit_id" /> need to be consistent if both attributes
  /// are set
  /// </para>
  /// <para>
  /// It is recommended to use an external reference ID.
  /// </para>
  /// </remarks>
  optional Reference unit_id = 4;

  /// <summary>
  /// Source of definition
  /// </summary>
  optional string source_of_definition = 5;

  /// <summary>
  /// Symbol
  /// </summary>
  optional string symbol = 6;

  /// <summary>
  /// Data Type
  /// </summary>
  optional DataTypeIec61360 data_type = 7;

  /// <summary>
  /// Definition in different languages
  /// </summary>
  repeated LangStringDefinitionTypeIec61360 definition = 8;

  /// <summary>
  /// Value Format
  /// </summary>
  /// <remarks>
  /// The value format is based on ISO 13584-42 and IEC 61360-2.
  /// </remarks>
  optional string value_format = 9;

  /// <summary>
  /// List of allowed values
  /// </summary>
  optional ValueList value_list = 10;

  /// <summary>
  /// Value
  /// </summary>
  optional string value = 11;

  /// <summary>
  /// Set of levels.
  /// </summary>
  optional LevelType level_type = 12;
}

message HasSemantics_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
    BasicEventElement basic_event_element = 3;
    Blob blob = 4;
    Capability capability = 5;
    Entity entity = 6;
    Extension extension = 7;
    File file = 8;
    MultiLanguageProperty multi_language_property = 9;
    Operation operation = 10;
    Property property = 11;
    Qualifier qualifier = 12;
    Range range = 13;
    ReferenceElement reference_element = 14;
    SpecificAssetId specific_asset_id = 15;
    Submodel submodel = 16;
    SubmodelElementCollection submodel_element_collection = 17;
    SubmodelElementList submodel_element_list = 18;
  }
}

message HasExtensions_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
    AssetAdministrationShell asset_administration_shell = 3;
    BasicEventElement basic_event_element = 4;
    Blob blob = 5;
    Capability capability = 6;
    ConceptDescription concept_description = 7;
    Entity entity = 8;
    File file = 9;
    MultiLanguageProperty multi_language_property = 10;
    Operation operation = 11;
    Property property = 12;
    Range range = 13;
    ReferenceElement reference_element = 14;
    Submodel submodel = 15;
    SubmodelElementCollection submodel_element_collection = 16;
    SubmodelElementList submodel_element_list = 17;
  }
}

message Referable_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
    AssetAdministrationShell asset_administration_shell = 3;
    BasicEventElement basic_event_element = 4;
    Blob blob = 5;
    Capability capability = 6;
    ConceptDescription concept_description = 7;
    Entity entity = 8;
    File file = 9;
    MultiLanguageProperty multi_language_property = 10;
    Operation operation = 11;
    Property property = 12;
    Range range = 13;
    ReferenceElement reference_element = 14;
    Submodel submodel = 15;
    SubmodelElementCollection submodel_element_collection = 16;
    SubmodelElementList submodel_element_list = 17;
  }
}

message Identifiable_choice {
  oneof value {
    AssetAdministrationShell asset_administration_shell = 1;
    ConceptDescription concept_description = 2;
    Submodel submodel = 3;
  }
}

message HasKind_choice {
  oneof value {
    Submodel submodel = 1;
  }
}

message HasDataSpecification_choice {
  oneof value {
    AdministrativeInformation administrative_information = 1;
    RelationshipElement relationship_element = 2;
    AnnotatedRelationshipElement annotated_relationship_element = 3;
    AssetAdministrationShell asset_administration_shell = 4;
    BasicEventElement basic_event_element = 5;
    Blob blob = 6;
    Capability capability = 7;
    ConceptDescription concept_description = 8;
    Entity entity = 9;
    File file = 10;
    MultiLanguageProperty multi_language_property = 11;
    Operation operation = 12;
    Property property = 13;
    Range range = 14;
    ReferenceElement reference_element = 15;
    Submodel submodel = 16;
    SubmodelElementCollection submodel_element_collection = 17;
    SubmodelElementList submodel_element_list = 18;
  }
}

message Qualifiable_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
    BasicEventElement basic_event_element = 3;
    Blob blob = 4;
    Capability capability = 5;
    Entity entity = 6;
    File file = 7;
    MultiLanguageProperty multi_language_property = 8;
    Operation operation = 9;
    Property property = 10;
    Range range = 11;
    ReferenceElement reference_element = 12;
    Submodel submodel = 13;
    SubmodelElementCollection submodel_element_collection = 14;
    SubmodelElementList submodel_element_list = 15;
  }
}

message SubmodelElement_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
    BasicEventElement basic_event_element = 3;
    Blob blob = 4;
    Capability capability = 5;
    Entity entity = 6;
    File file = 7;
    MultiLanguageProperty multi_language_property = 8;
    Operation operation = 9;
    Property property = 10;
    Range range = 11;
    ReferenceElement reference_element = 12;
    SubmodelElementCollection submodel_element_collection = 13;
    SubmodelElementList submodel_element_list = 14;
  }
}

message RelationshipElement_choice {
  oneof value {
    RelationshipElement relationship_element = 1;
    AnnotatedRelationshipElement annotated_relationship_element = 2;
  }
}

message DataElement_choice {
  oneof value {
    Blob blob = 1;
    File file = 2;
    MultiLanguageProperty multi_language_property = 3;
    Property property = 4;
    Range range = 5;
    ReferenceElement reference_element = 6;
  }
}

message EventElement_choice {
  oneof value {
    BasicEventElement basic_event_element = 1;
  }
}

message AbstractLangString_choice {
  oneof value {
    LangStringDefinitionTypeIec61360 lang_string_definition_type_iec_61360 = 1;
    LangStringNameType lang_string_name_type = 2;
    LangStringPreferredNameTypeIec61360 lang_string_preferred_name_type_iec_61360 = 3;
    LangStringShortNameTypeIec61360 lang_string_short_name_type_iec_61360 = 4;
    LangStringTextType lang_string_text_type = 5;
  }
}

message DataSpecificationContent_choice {
  oneof value {
    DataSpecificationIec61360 data_specification_iec_61360 = 1;
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
