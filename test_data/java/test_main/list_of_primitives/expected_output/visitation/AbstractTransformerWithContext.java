/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package test.visitation;

import test.types.model.*;
import test.visitation.ITransformerWithContext;

/**
 * Perform double-dispatch to transform recursively
 * the instances into something else.
 *
 * <p>When you use the transformer, please always call the main dispatching method
 * {@link AbstractTransformerWithContext#transform}. You should most probably never call the {@code transform}
 * methods directly. They are only made public so that model classes can access them.
 *
 * @param <ContextT> structure of the context
 * @param <T> type of the transformation result
 */
public abstract class AbstractTransformerWithContext<ContextT, T>
  implements ITransformerWithContext<ContextT, T>
{
  public T transform(IClass that, ContextT context)
  {
    return that.transform(this, context);
  }

  public abstract T transformListOfPrimitives(
    IListOfPrimitives that,
    ContextT context
  );
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
