/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package test.types.impl;

import test.visitation.IVisitor;
import test.visitation.IVisitorWithContext;
import test.visitation.ITransformer;
import test.visitation.ITransformerWithContext;
import test.types.enums.*;
import test.types.impl.*;
import test.types.model.*;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Objects;
import test.types.model.IListOfPrimitives;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class ListOfPrimitives implements IListOfPrimitives {
  private List<String> strings;

  private List<Long> integers;

  private List<Boolean> booleans;

  public ListOfPrimitives(
    List<String> strings,
    List<Long> integers,
    List<Boolean> booleans) {
    this.strings = Objects.requireNonNull(
      strings,
      "Argument \"strings\" must be non-null.");
    this.integers = Objects.requireNonNull(
      integers,
      "Argument \"integers\" must be non-null.");
    this.booleans = Objects.requireNonNull(
      booleans,
      "Argument \"booleans\" must be non-null.");
  }

  @Override
  public List<String> getStrings() {
    return strings;
  }

  @Override
  public void setStrings(List<String> strings) {
    this.strings = Objects.requireNonNull(
      strings,
      "Argument \"strings\" must be non-null.");
  }

  @Override
  public List<Long> getIntegers() {
    return integers;
  }

  @Override
  public void setIntegers(List<Long> integers) {
    this.integers = Objects.requireNonNull(
      integers,
      "Argument \"integers\" must be non-null.");
  }

  @Override
  public List<Boolean> getBooleans() {
    return booleans;
  }

  @Override
  public void setBooleans(List<Boolean> booleans) {
    this.booleans = Objects.requireNonNull(
      booleans,
      "Argument \"booleans\" must be non-null.");
  }

  /**
   * Iterate recursively over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descend() {
    return Collections.emptyList();
  }

  /**
   * Iterate over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descendOnce() {
    return Collections.emptyList();
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch.
   **/
  @Override
  public void accept(IVisitor visitor) {
    visitor.visitListOfPrimitives(this);
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT> void accept(
      IVisitorWithContext<ContextT> visitor,
      ContextT context) {
    visitor.visitListOfPrimitives(this, context);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch.
   **/
  @Override
  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformListOfPrimitives(this);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT, T> T transform(
      ITransformerWithContext<ContextT, T> transformer,
      ContextT context) {
    return transformer.transformListOfPrimitives(this, context);
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
