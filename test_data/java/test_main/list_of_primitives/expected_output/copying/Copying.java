/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package test.copying;

import java.util.List;
import java.util.ArrayList;
import test.types.model.IClass;
import test.visitation.AbstractTransformer;
import test.types.impl.*;
import test.types.model.*;

/**
 * Allow for making shallow and deep copies of AAS model instances.
 */
public class Copying
{
    private static final ShallowCopier shallowCopierInstance = new ShallowCopier();

    private static final DeepCopier deepCopierInstance = new DeepCopier();

    /**
     * Make a shallow copy of {@code that}.
     *
     * <p>All the properties are copied by reference. This includes also the lists.
     * Hence, a list property is copied by reference, and not, as sometimes might be
     * expected, as a new list of underlying references.
     *
     * @param that to be copied in a shallow manner
     */
    @SuppressWarnings("unchecked")
    public static <T extends IClass> T shallow(T that) {
        return (T) shallowCopierInstance.transform(that);
    }

    /**
     * Make a recursively a deep copy of {@code that}.
     *
     * @param that to be deeply copied in a recursive manner
     */
    @SuppressWarnings("unchecked")
    public static <T extends IClass> T deep(T that) {
        return (T) deepCopierInstance.transform(that);
    }

    /**
     * Dispatch the making of shallow copies.
     */
    private static class ShallowCopier extends AbstractTransformer<IClass> {
        @Override
        public IClass transformListOfPrimitives(
            IListOfPrimitives that
        ) {
            return new ListOfPrimitives(
                that.getStrings(),
                that.getIntegers(),
                that.getBooleans());
        }
    }

    /** Dispatch the making of deep copies. */
    private static class DeepCopier extends AbstractTransformer<IClass> {
        @Override
        public IClass transformListOfPrimitives (
            IListOfPrimitives that
        ) {
            return new ListOfPrimitives(
                theStrings,
                theIntegers,
                theBooleans
            );
        }
    }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
