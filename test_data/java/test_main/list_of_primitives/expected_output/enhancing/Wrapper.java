/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package test.enhancing;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import test.types.model.*;
import test.visitation.AbstractTransformer;

class Wrapper<EnhancementT> extends AbstractTransformer<IClass> {
  private final Function<IClass, Optional<EnhancementT>> enhancementFactory;

  Wrapper(
    Function<IClass, Optional<EnhancementT>> enhancementFactory
  ) {
    this.enhancementFactory = enhancementFactory;
  }

  @Override
  public IClass transformListOfPrimitives(
    IListOfPrimitives that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    List<BAR> strings = that.getStrings();
    List<BAR> FOO = strings.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof BAR)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a BAR " +
            ", but got: " + transformed
          );
        }
        return (BAR) transformed;
      }).collect(Collectors.toList());
    that.setStrings(FOO);

    List<BAR> integers = that.getIntegers();
    List<BAR> FOO = integers.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof BAR)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a BAR " +
            ", but got: " + transformed
          );
        }
        return (BAR) transformed;
      }).collect(Collectors.toList());
    that.setIntegers(FOO);

    List<BAR> booleans = that.getBooleans();
    List<BAR> FOO = booleans.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof BAR)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a BAR " +
            ", but got: " + transformed
          );
        }
        return (BAR) transformed;
      }).collect(Collectors.toList());
    that.setBooleans(FOO);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedListOfPrimitives<>(
        that,
        enhancement.get()
      );
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
