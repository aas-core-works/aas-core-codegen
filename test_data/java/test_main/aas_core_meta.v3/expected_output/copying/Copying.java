/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.copying;

import java.util.List;
import java.util.ArrayList;
import aas_core.aas3_0.types.model.IClass;
import aas_core.aas3_0.visitation.AbstractTransformer;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;

/**
 * Allow for making shallow and deep copies of AAS model instances.
 */
public class Copying
{
    private static final ShallowCopier shallowCopierInstance = new ShallowCopier();

    private static final DeepCopier deepCopierInstance = new DeepCopier();

    /**
     * Make a shallow copy of {@code that}.
     *
     * <p>All the properties are copied by reference. This includes also the lists.
     * Hence, a list property is copied by reference, and not, as sometimes might be
     * expected, as a new list of underlying references.
     *
     * @param that to be copied in a shallow manner
     */
    @SuppressWarnings("unchecked")
    public static <T extends IClass> T shallow(T that) {
        return (T) shallowCopierInstance.transform(that);
    }

    /**
     * Make a recursively a deep copy of {@code that}.
     *
     * @param that to be deeply copied in a recursive manner
     */
    @SuppressWarnings("unchecked")
    public static <T extends IClass> T deep(T that) {
        return (T) deepCopierInstance.transform(that);
    }

    /**
     * Dispatch the making of shallow copies.
     */
    private static class ShallowCopier extends AbstractTransformer<IClass> {
        @Override
        public IClass transformExtension(
            IExtension that
        ) {
            return new Extension(
                that.getName(),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getValueType().orElse(null),
                that.getValue().orElse(null),
                that.getRefersTo().orElse(null));
        }

        @Override
        public IClass transformAdministrativeInformation(
            IAdministrativeInformation that
        ) {
            return new AdministrativeInformation(
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getVersion().orElse(null),
                that.getRevision().orElse(null),
                that.getCreator().orElse(null),
                that.getTemplateId().orElse(null));
        }

        @Override
        public IClass transformQualifier(
            IQualifier that
        ) {
            return new Qualifier(
                that.getType(),
                that.getValueType(),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getKind().orElse(null),
                that.getValue().orElse(null),
                that.getValueId().orElse(null));
        }

        @Override
        public IClass transformAssetAdministrationShell(
            IAssetAdministrationShell that
        ) {
            return new AssetAdministrationShell(
                that.getId(),
                that.getAssetInformation(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getAdministration().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getDerivedFrom().orElse(null),
                that.getSubmodels().orElse(null));
        }

        @Override
        public IClass transformAssetInformation(
            IAssetInformation that
        ) {
            return new AssetInformation(
                that.getAssetKind(),
                that.getGlobalAssetId().orElse(null),
                that.getSpecificAssetIds().orElse(null),
                that.getAssetType().orElse(null),
                that.getDefaultThumbnail().orElse(null));
        }

        @Override
        public IClass transformResource(
            IResource that
        ) {
            return new Resource(
                that.getPath(),
                that.getContentType().orElse(null));
        }

        @Override
        public IClass transformSpecificAssetId(
            ISpecificAssetId that
        ) {
            return new SpecificAssetId(
                that.getName(),
                that.getValue(),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getExternalSubjectId().orElse(null));
        }

        @Override
        public IClass transformSubmodel(
            ISubmodel that
        ) {
            return new Submodel(
                that.getId(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getAdministration().orElse(null),
                that.getKind().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getSubmodelElements().orElse(null));
        }

        @Override
        public IClass transformRelationshipElement(
            IRelationshipElement that
        ) {
            return new RelationshipElement(
                that.getFirst(),
                that.getSecond(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null));
        }

        @Override
        public IClass transformSubmodelElementList(
            ISubmodelElementList that
        ) {
            return new SubmodelElementList(
                that.getTypeValueListElement(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getOrderRelevant().orElse(null),
                that.getSemanticIdListElement().orElse(null),
                that.getValueTypeListElement().orElse(null),
                that.getValue().orElse(null));
        }

        @Override
        public IClass transformSubmodelElementCollection(
            ISubmodelElementCollection that
        ) {
            return new SubmodelElementCollection(
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null));
        }

        @Override
        public IClass transformProperty(
            IProperty that
        ) {
            return new Property(
                that.getValueType(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null),
                that.getValueId().orElse(null));
        }

        @Override
        public IClass transformMultiLanguageProperty(
            IMultiLanguageProperty that
        ) {
            return new MultiLanguageProperty(
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null),
                that.getValueId().orElse(null));
        }

        @Override
        public IClass transformRange(
            IRange that
        ) {
            return new Range(
                that.getValueType(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getMin().orElse(null),
                that.getMax().orElse(null));
        }

        @Override
        public IClass transformReferenceElement(
            IReferenceElement that
        ) {
            return new ReferenceElement(
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null));
        }

        @Override
        public IClass transformBlob(
            IBlob that
        ) {
            return new Blob(
                that.getContentType(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null));
        }

        @Override
        public IClass transformFile(
            IFile that
        ) {
            return new File(
                that.getContentType(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getValue().orElse(null));
        }

        @Override
        public IClass transformAnnotatedRelationshipElement(
            IAnnotatedRelationshipElement that
        ) {
            return new AnnotatedRelationshipElement(
                that.getFirst(),
                that.getSecond(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getAnnotations().orElse(null));
        }

        @Override
        public IClass transformEntity(
            IEntity that
        ) {
            return new Entity(
                that.getEntityType(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getStatements().orElse(null),
                that.getGlobalAssetId().orElse(null),
                that.getSpecificAssetIds().orElse(null));
        }

        @Override
        public IClass transformEventPayload(
            IEventPayload that
        ) {
            return new EventPayload(
                that.getSource(),
                that.getObservableReference(),
                that.getTimeStamp(),
                that.getSourceSemanticId().orElse(null),
                that.getObservableSemanticId().orElse(null),
                that.getTopic().orElse(null),
                that.getSubjectId().orElse(null),
                that.getPayload().orElse(null));
        }

        @Override
        public IClass transformBasicEventElement(
            IBasicEventElement that
        ) {
            return new BasicEventElement(
                that.getObserved(),
                that.getDirection(),
                that.getState(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getMessageTopic().orElse(null),
                that.getMessageBroker().orElse(null),
                that.getLastUpdate().orElse(null),
                that.getMinInterval().orElse(null),
                that.getMaxInterval().orElse(null));
        }

        @Override
        public IClass transformOperation(
            IOperation that
        ) {
            return new Operation(
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getInputVariables().orElse(null),
                that.getOutputVariables().orElse(null),
                that.getInoutputVariables().orElse(null));
        }

        @Override
        public IClass transformOperationVariable(
            IOperationVariable that
        ) {
            return new OperationVariable(that.getValue());
        }

        @Override
        public IClass transformCapability(
            ICapability that
        ) {
            return new Capability(
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getSemanticId().orElse(null),
                that.getSupplementalSemanticIds().orElse(null),
                that.getQualifiers().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null));
        }

        @Override
        public IClass transformConceptDescription(
            IConceptDescription that
        ) {
            return new ConceptDescription(
                that.getId(),
                that.getExtensions().orElse(null),
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                that.getDisplayName().orElse(null),
                that.getDescription().orElse(null),
                that.getAdministration().orElse(null),
                that.getEmbeddedDataSpecifications().orElse(null),
                that.getIsCaseOf().orElse(null));
        }

        @Override
        public IClass transformReference(
            IReference that
        ) {
            return new Reference(
                that.getType(),
                that.getKeys(),
                that.getReferredSemanticId().orElse(null));
        }

        @Override
        public IClass transformKey(
            IKey that
        ) {
            return new Key(that.getType(), that.getValue());
        }

        @Override
        public IClass transformLangStringNameType(
            ILangStringNameType that
        ) {
            return new LangStringNameType(that.getLanguage(), that.getText());
        }

        @Override
        public IClass transformLangStringTextType(
            ILangStringTextType that
        ) {
            return new LangStringTextType(that.getLanguage(), that.getText());
        }

        @Override
        public IClass transformEnvironment(
            IEnvironment that
        ) {
            return new Environment(
                that.getAssetAdministrationShells().orElse(null),
                that.getSubmodels().orElse(null),
                that.getConceptDescriptions().orElse(null));
        }

        @Override
        public IClass transformEmbeddedDataSpecification(
            IEmbeddedDataSpecification that
        ) {
            return new EmbeddedDataSpecification(
                that.getDataSpecification(),
                that.getDataSpecificationContent());
        }

        @Override
        public IClass transformLevelType(
            ILevelType that
        ) {
            return new LevelType(
                that.getMin(),
                that.getNom(),
                that.getTyp(),
                that.getMax());
        }

        @Override
        public IClass transformValueReferencePair(
            IValueReferencePair that
        ) {
            return new ValueReferencePair(that.getValue(), that.getValueId());
        }

        @Override
        public IClass transformValueList(
            IValueList that
        ) {
            return new ValueList(that.getValueReferencePairs());
        }

        @Override
        public IClass transformLangStringPreferredNameTypeIec61360(
            ILangStringPreferredNameTypeIec61360 that
        ) {
            return new LangStringPreferredNameTypeIec61360(
                that.getLanguage(),
                that.getText());
        }

        @Override
        public IClass transformLangStringShortNameTypeIec61360(
            ILangStringShortNameTypeIec61360 that
        ) {
            return new LangStringShortNameTypeIec61360(
                that.getLanguage(),
                that.getText());
        }

        @Override
        public IClass transformLangStringDefinitionTypeIec61360(
            ILangStringDefinitionTypeIec61360 that
        ) {
            return new LangStringDefinitionTypeIec61360(
                that.getLanguage(),
                that.getText());
        }

        @Override
        public IClass transformDataSpecificationIec61360(
            IDataSpecificationIec61360 that
        ) {
            return new DataSpecificationIec61360(
                that.getPreferredName(),
                that.getShortName().orElse(null),
                that.getUnit().orElse(null),
                that.getUnitId().orElse(null),
                that.getSourceOfDefinition().orElse(null),
                that.getSymbol().orElse(null),
                that.getDataType().orElse(null),
                that.getDefinition().orElse(null),
                that.getValueFormat().orElse(null),
                that.getValueList().orElse(null),
                that.getValue().orElse(null),
                that.getLevelType().orElse(null));
        }
    }

    /** Dispatch the making of deep copies. */
    private static class DeepCopier extends AbstractTransformer<IClass> {
        @Override
        public IClass transformExtension (
            IExtension that
        ) {
            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IReference> thatRefersTo =
                that.getRefersTo().orElse(null);
            List<IReference> theRefersTo = null;
            if (thatRefersTo != null) {
                theRefersTo = new ArrayList<>(
                    thatRefersTo.size());
                for (IReference item : thatRefersTo)
                {
                    theRefersTo.add(deep(item));
                }
            }

            return new Extension(
                that.getName(),
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                that.getValueType().orElse(null),
                that.getValue().orElse(null),
                theRefersTo
            );
        }

        @Override
        public IClass transformAdministrativeInformation (
            IAdministrativeInformation that
        ) {
            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new AdministrativeInformation(
                theEmbeddedDataSpecifications,
                that.getVersion().orElse(null),
                that.getRevision().orElse(null),
                that.getCreator().orElse(null),
                that.getTemplateId().orElse(null)
            );
        }

        @Override
        public IClass transformQualifier (
            IQualifier that
        ) {
            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            return new Qualifier(
                that.getType(),
                that.getValueType(),
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                that.getKind().orElse(null),
                that.getValue().orElse(null),
                that.getValueId().orElse(null)
            );
        }

        @Override
        public IClass transformAssetAdministrationShell (
            IAssetAdministrationShell that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<IReference> thatSubmodels =
                that.getSubmodels().orElse(null);
            List<IReference> theSubmodels = null;
            if (thatSubmodels != null) {
                theSubmodels = new ArrayList<>(
                    thatSubmodels.size());
                for (IReference item : thatSubmodels)
                {
                    theSubmodels.add(deep(item));
                }
            }

            return new AssetAdministrationShell(
                that.getId(),
                deep(that.getAssetInformation()),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getAdministration().orElse(null),
                theEmbeddedDataSpecifications,
                that.getDerivedFrom().orElse(null),
                theSubmodels
            );
        }

        @Override
        public IClass transformAssetInformation (
            IAssetInformation that
        ) {
            List<ISpecificAssetId> thatSpecificAssetIds =
                that.getSpecificAssetIds().orElse(null);
            List<ISpecificAssetId> theSpecificAssetIds = null;
            if (thatSpecificAssetIds != null) {
                theSpecificAssetIds = new ArrayList<>(
                    thatSpecificAssetIds.size());
                for (ISpecificAssetId item : thatSpecificAssetIds)
                {
                    theSpecificAssetIds.add(deep(item));
                }
            }

            return new AssetInformation(
                that.getAssetKind(),
                that.getGlobalAssetId().orElse(null),
                theSpecificAssetIds,
                that.getAssetType().orElse(null),
                that.getDefaultThumbnail().orElse(null)
            );
        }

        @Override
        public IClass transformResource (
            IResource that
        ) {
            return new Resource(
                that.getPath(),
                that.getContentType().orElse(null)
            );
        }

        @Override
        public IClass transformSpecificAssetId (
            ISpecificAssetId that
        ) {
            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            return new SpecificAssetId(
                that.getName(),
                that.getValue(),
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                that.getExternalSubjectId().orElse(null)
            );
        }

        @Override
        public IClass transformSubmodel (
            ISubmodel that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<ISubmodelElement> thatSubmodelElements =
                that.getSubmodelElements().orElse(null);
            List<ISubmodelElement> theSubmodelElements = null;
            if (thatSubmodelElements != null) {
                theSubmodelElements = new ArrayList<>(
                    thatSubmodelElements.size());
                for (ISubmodelElement item : thatSubmodelElements)
                {
                    theSubmodelElements.add(deep(item));
                }
            }

            return new Submodel(
                that.getId(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getAdministration().orElse(null),
                that.getKind().orElse(null),
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theSubmodelElements
            );
        }

        @Override
        public IClass transformRelationshipElement (
            IRelationshipElement that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new RelationshipElement(
                deep(that.getFirst()),
                deep(that.getSecond()),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications
            );
        }

        @Override
        public IClass transformSubmodelElementList (
            ISubmodelElementList that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<ISubmodelElement> thatValue =
                that.getValue().orElse(null);
            List<ISubmodelElement> theValue = null;
            if (thatValue != null) {
                theValue = new ArrayList<>(
                    thatValue.size());
                for (ISubmodelElement item : thatValue)
                {
                    theValue.add(deep(item));
                }
            }

            return new SubmodelElementList(
                that.getTypeValueListElement(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getOrderRelevant().orElse(null),
                that.getSemanticIdListElement().orElse(null),
                that.getValueTypeListElement().orElse(null),
                theValue
            );
        }

        @Override
        public IClass transformSubmodelElementCollection (
            ISubmodelElementCollection that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<ISubmodelElement> thatValue =
                that.getValue().orElse(null);
            List<ISubmodelElement> theValue = null;
            if (thatValue != null) {
                theValue = new ArrayList<>(
                    thatValue.size());
                for (ISubmodelElement item : thatValue)
                {
                    theValue.add(deep(item));
                }
            }

            return new SubmodelElementCollection(
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theValue
            );
        }

        @Override
        public IClass transformProperty (
            IProperty that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new Property(
                that.getValueType(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getValue().orElse(null),
                that.getValueId().orElse(null)
            );
        }

        @Override
        public IClass transformMultiLanguageProperty (
            IMultiLanguageProperty that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<ILangStringTextType> thatValue =
                that.getValue().orElse(null);
            List<ILangStringTextType> theValue = null;
            if (thatValue != null) {
                theValue = new ArrayList<>(
                    thatValue.size());
                for (ILangStringTextType item : thatValue)
                {
                    theValue.add(deep(item));
                }
            }

            return new MultiLanguageProperty(
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theValue,
                that.getValueId().orElse(null)
            );
        }

        @Override
        public IClass transformRange (
            IRange that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new Range(
                that.getValueType(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getMin().orElse(null),
                that.getMax().orElse(null)
            );
        }

        @Override
        public IClass transformReferenceElement (
            IReferenceElement that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new ReferenceElement(
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getValue().orElse(null)
            );
        }

        @Override
        public IClass transformBlob (
            IBlob that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new Blob(
                that.getContentType(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getValue().orElse(null)
            );
        }

        @Override
        public IClass transformFile (
            IFile that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new File(
                that.getContentType(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getValue().orElse(null)
            );
        }

        @Override
        public IClass transformAnnotatedRelationshipElement (
            IAnnotatedRelationshipElement that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<IDataElement> thatAnnotations =
                that.getAnnotations().orElse(null);
            List<IDataElement> theAnnotations = null;
            if (thatAnnotations != null) {
                theAnnotations = new ArrayList<>(
                    thatAnnotations.size());
                for (IDataElement item : thatAnnotations)
                {
                    theAnnotations.add(deep(item));
                }
            }

            return new AnnotatedRelationshipElement(
                deep(that.getFirst()),
                deep(that.getSecond()),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theAnnotations
            );
        }

        @Override
        public IClass transformEntity (
            IEntity that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<ISubmodelElement> thatStatements =
                that.getStatements().orElse(null);
            List<ISubmodelElement> theStatements = null;
            if (thatStatements != null) {
                theStatements = new ArrayList<>(
                    thatStatements.size());
                for (ISubmodelElement item : thatStatements)
                {
                    theStatements.add(deep(item));
                }
            }

            List<ISpecificAssetId> thatSpecificAssetIds =
                that.getSpecificAssetIds().orElse(null);
            List<ISpecificAssetId> theSpecificAssetIds = null;
            if (thatSpecificAssetIds != null) {
                theSpecificAssetIds = new ArrayList<>(
                    thatSpecificAssetIds.size());
                for (ISpecificAssetId item : thatSpecificAssetIds)
                {
                    theSpecificAssetIds.add(deep(item));
                }
            }

            return new Entity(
                that.getEntityType(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theStatements,
                that.getGlobalAssetId().orElse(null),
                theSpecificAssetIds
            );
        }

        @Override
        public IClass transformEventPayload (
            IEventPayload that
        ) {
            return new EventPayload(
                deep(that.getSource()),
                deep(that.getObservableReference()),
                that.getTimeStamp(),
                that.getSourceSemanticId().orElse(null),
                that.getObservableSemanticId().orElse(null),
                that.getTopic().orElse(null),
                that.getSubjectId().orElse(null),
                that.getPayload().orElse(null)
            );
        }

        @Override
        public IClass transformBasicEventElement (
            IBasicEventElement that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new BasicEventElement(
                deep(that.getObserved()),
                that.getDirection(),
                that.getState(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                that.getMessageTopic().orElse(null),
                that.getMessageBroker().orElse(null),
                that.getLastUpdate().orElse(null),
                that.getMinInterval().orElse(null),
                that.getMaxInterval().orElse(null)
            );
        }

        @Override
        public IClass transformOperation (
            IOperation that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<IOperationVariable> thatInputVariables =
                that.getInputVariables().orElse(null);
            List<IOperationVariable> theInputVariables = null;
            if (thatInputVariables != null) {
                theInputVariables = new ArrayList<>(
                    thatInputVariables.size());
                for (IOperationVariable item : thatInputVariables)
                {
                    theInputVariables.add(deep(item));
                }
            }

            List<IOperationVariable> thatOutputVariables =
                that.getOutputVariables().orElse(null);
            List<IOperationVariable> theOutputVariables = null;
            if (thatOutputVariables != null) {
                theOutputVariables = new ArrayList<>(
                    thatOutputVariables.size());
                for (IOperationVariable item : thatOutputVariables)
                {
                    theOutputVariables.add(deep(item));
                }
            }

            List<IOperationVariable> thatInoutputVariables =
                that.getInoutputVariables().orElse(null);
            List<IOperationVariable> theInoutputVariables = null;
            if (thatInoutputVariables != null) {
                theInoutputVariables = new ArrayList<>(
                    thatInoutputVariables.size());
                for (IOperationVariable item : thatInoutputVariables)
                {
                    theInoutputVariables.add(deep(item));
                }
            }

            return new Operation(
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications,
                theInputVariables,
                theOutputVariables,
                theInoutputVariables
            );
        }

        @Override
        public IClass transformOperationVariable (
            IOperationVariable that
        ) {
            return new OperationVariable(
                deep(that.getValue())
            );
        }

        @Override
        public IClass transformCapability (
            ICapability that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IReference> thatSupplementalSemanticIds =
                that.getSupplementalSemanticIds().orElse(null);
            List<IReference> theSupplementalSemanticIds = null;
            if (thatSupplementalSemanticIds != null) {
                theSupplementalSemanticIds = new ArrayList<>(
                    thatSupplementalSemanticIds.size());
                for (IReference item : thatSupplementalSemanticIds)
                {
                    theSupplementalSemanticIds.add(deep(item));
                }
            }

            List<IQualifier> thatQualifiers =
                that.getQualifiers().orElse(null);
            List<IQualifier> theQualifiers = null;
            if (thatQualifiers != null) {
                theQualifiers = new ArrayList<>(
                    thatQualifiers.size());
                for (IQualifier item : thatQualifiers)
                {
                    theQualifiers.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            return new Capability(
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getSemanticId().orElse(null),
                theSupplementalSemanticIds,
                theQualifiers,
                theEmbeddedDataSpecifications
            );
        }

        @Override
        public IClass transformConceptDescription (
            IConceptDescription that
        ) {
            List<IExtension> thatExtensions =
                that.getExtensions().orElse(null);
            List<IExtension> theExtensions = null;
            if (thatExtensions != null) {
                theExtensions = new ArrayList<>(
                    thatExtensions.size());
                for (IExtension item : thatExtensions)
                {
                    theExtensions.add(deep(item));
                }
            }

            List<ILangStringNameType> thatDisplayName =
                that.getDisplayName().orElse(null);
            List<ILangStringNameType> theDisplayName = null;
            if (thatDisplayName != null) {
                theDisplayName = new ArrayList<>(
                    thatDisplayName.size());
                for (ILangStringNameType item : thatDisplayName)
                {
                    theDisplayName.add(deep(item));
                }
            }

            List<ILangStringTextType> thatDescription =
                that.getDescription().orElse(null);
            List<ILangStringTextType> theDescription = null;
            if (thatDescription != null) {
                theDescription = new ArrayList<>(
                    thatDescription.size());
                for (ILangStringTextType item : thatDescription)
                {
                    theDescription.add(deep(item));
                }
            }

            List<IEmbeddedDataSpecification> thatEmbeddedDataSpecifications =
                that.getEmbeddedDataSpecifications().orElse(null);
            List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
            if (thatEmbeddedDataSpecifications != null) {
                theEmbeddedDataSpecifications = new ArrayList<>(
                    thatEmbeddedDataSpecifications.size());
                for (IEmbeddedDataSpecification item : thatEmbeddedDataSpecifications)
                {
                    theEmbeddedDataSpecifications.add(deep(item));
                }
            }

            List<IReference> thatIsCaseOf =
                that.getIsCaseOf().orElse(null);
            List<IReference> theIsCaseOf = null;
            if (thatIsCaseOf != null) {
                theIsCaseOf = new ArrayList<>(
                    thatIsCaseOf.size());
                for (IReference item : thatIsCaseOf)
                {
                    theIsCaseOf.add(deep(item));
                }
            }

            return new ConceptDescription(
                that.getId(),
                theExtensions,
                that.getCategory().orElse(null),
                that.getIdShort().orElse(null),
                theDisplayName,
                theDescription,
                that.getAdministration().orElse(null),
                theEmbeddedDataSpecifications,
                theIsCaseOf
            );
        }

        @Override
        public IClass transformReference (
            IReference that
        ) {
            List<IKey> theKeys = new ArrayList<>(
                that.getKeys().size());
            for (IKey item : that.getKeys()) {
                theKeys.add(deep(item));
            }

            return new Reference(
                that.getType(),
                theKeys,
                that.getReferredSemanticId().orElse(null)
            );
        }

        @Override
        public IClass transformKey (
            IKey that
        ) {
            return new Key(
                that.getType(),
                that.getValue()
            );
        }

        @Override
        public IClass transformLangStringNameType (
            ILangStringNameType that
        ) {
            return new LangStringNameType(
                that.getLanguage(),
                that.getText()
            );
        }

        @Override
        public IClass transformLangStringTextType (
            ILangStringTextType that
        ) {
            return new LangStringTextType(
                that.getLanguage(),
                that.getText()
            );
        }

        @Override
        public IClass transformEnvironment (
            IEnvironment that
        ) {
            List<IAssetAdministrationShell> thatAssetAdministrationShells =
                that.getAssetAdministrationShells().orElse(null);
            List<IAssetAdministrationShell> theAssetAdministrationShells = null;
            if (thatAssetAdministrationShells != null) {
                theAssetAdministrationShells = new ArrayList<>(
                    thatAssetAdministrationShells.size());
                for (IAssetAdministrationShell item : thatAssetAdministrationShells)
                {
                    theAssetAdministrationShells.add(deep(item));
                }
            }

            List<ISubmodel> thatSubmodels =
                that.getSubmodels().orElse(null);
            List<ISubmodel> theSubmodels = null;
            if (thatSubmodels != null) {
                theSubmodels = new ArrayList<>(
                    thatSubmodels.size());
                for (ISubmodel item : thatSubmodels)
                {
                    theSubmodels.add(deep(item));
                }
            }

            List<IConceptDescription> thatConceptDescriptions =
                that.getConceptDescriptions().orElse(null);
            List<IConceptDescription> theConceptDescriptions = null;
            if (thatConceptDescriptions != null) {
                theConceptDescriptions = new ArrayList<>(
                    thatConceptDescriptions.size());
                for (IConceptDescription item : thatConceptDescriptions)
                {
                    theConceptDescriptions.add(deep(item));
                }
            }

            return new Environment(
                theAssetAdministrationShells,
                theSubmodels,
                theConceptDescriptions
            );
        }

        @Override
        public IClass transformEmbeddedDataSpecification (
            IEmbeddedDataSpecification that
        ) {
            return new EmbeddedDataSpecification(
                deep(that.getDataSpecification()),
                deep(that.getDataSpecificationContent())
            );
        }

        @Override
        public IClass transformLevelType (
            ILevelType that
        ) {
            return new LevelType(
                that.getMin(),
                that.getNom(),
                that.getTyp(),
                that.getMax()
            );
        }

        @Override
        public IClass transformValueReferencePair (
            IValueReferencePair that
        ) {
            return new ValueReferencePair(
                that.getValue(),
                deep(that.getValueId())
            );
        }

        @Override
        public IClass transformValueList (
            IValueList that
        ) {
            List<IValueReferencePair> theValueReferencePairs = new ArrayList<>(
                that.getValueReferencePairs().size());
            for (IValueReferencePair item : that.getValueReferencePairs()) {
                theValueReferencePairs.add(deep(item));
            }

            return new ValueList(
                theValueReferencePairs
            );
        }

        @Override
        public IClass transformLangStringPreferredNameTypeIec61360 (
            ILangStringPreferredNameTypeIec61360 that
        ) {
            return new LangStringPreferredNameTypeIec61360(
                that.getLanguage(),
                that.getText()
            );
        }

        @Override
        public IClass transformLangStringShortNameTypeIec61360 (
            ILangStringShortNameTypeIec61360 that
        ) {
            return new LangStringShortNameTypeIec61360(
                that.getLanguage(),
                that.getText()
            );
        }

        @Override
        public IClass transformLangStringDefinitionTypeIec61360 (
            ILangStringDefinitionTypeIec61360 that
        ) {
            return new LangStringDefinitionTypeIec61360(
                that.getLanguage(),
                that.getText()
            );
        }

        @Override
        public IClass transformDataSpecificationIec61360 (
            IDataSpecificationIec61360 that
        ) {
            List<ILangStringPreferredNameTypeIec61360> thePreferredName = new ArrayList<>(
                that.getPreferredName().size());
            for (ILangStringPreferredNameTypeIec61360 item : that.getPreferredName()) {
                thePreferredName.add(deep(item));
            }

            List<ILangStringShortNameTypeIec61360> thatShortName =
                that.getShortName().orElse(null);
            List<ILangStringShortNameTypeIec61360> theShortName = null;
            if (thatShortName != null) {
                theShortName = new ArrayList<>(
                    thatShortName.size());
                for (ILangStringShortNameTypeIec61360 item : thatShortName)
                {
                    theShortName.add(deep(item));
                }
            }

            List<ILangStringDefinitionTypeIec61360> thatDefinition =
                that.getDefinition().orElse(null);
            List<ILangStringDefinitionTypeIec61360> theDefinition = null;
            if (thatDefinition != null) {
                theDefinition = new ArrayList<>(
                    thatDefinition.size());
                for (ILangStringDefinitionTypeIec61360 item : thatDefinition)
                {
                    theDefinition.add(deep(item));
                }
            }

            return new DataSpecificationIec61360(
                thePreferredName,
                theShortName,
                that.getUnit().orElse(null),
                that.getUnitId().orElse(null),
                that.getSourceOfDefinition().orElse(null),
                that.getSymbol().orElse(null),
                that.getDataType().orElse(null),
                theDefinition,
                that.getValueFormat().orElse(null),
                that.getValueList().orElse(null),
                that.getValue().orElse(null),
                that.getLevelType().orElse(null)
            );
        }
    }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
