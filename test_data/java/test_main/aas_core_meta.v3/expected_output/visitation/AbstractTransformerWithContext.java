/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.visitation;

import aas_core.aas3_0.types.model.*;
import aas_core.aas3_0.visitation.ITransformerWithContext;

/**
 * Perform double-dispatch to transform recursively
 * the instances into something else.
 *
 * <p>When you use the transformer, please always call the main dispatching method
 * {@link AbstractTransformerWithContext#transform}. You should most probably never call the {@code transform}
 * methods directly. They are only made public so that model classes can access them.
 *
 * @param <ContextT> structure of the context
 * @param <T> type of the transformation result
 */
public abstract class AbstractTransformerWithContext<ContextT, T>
  implements ITransformerWithContext<ContextT, T>
{
  public T transform(IClass that, ContextT context)
  {
    return that.transform(this, context);
  }

  public abstract T transformExtension(
    IExtension that,
    ContextT context
  );

  public abstract T transformAdministrativeInformation(
    IAdministrativeInformation that,
    ContextT context
  );

  public abstract T transformQualifier(
    IQualifier that,
    ContextT context
  );

  public abstract T transformAssetAdministrationShell(
    IAssetAdministrationShell that,
    ContextT context
  );

  public abstract T transformAssetInformation(
    IAssetInformation that,
    ContextT context
  );

  public abstract T transformResource(
    IResource that,
    ContextT context
  );

  public abstract T transformSpecificAssetId(
    ISpecificAssetId that,
    ContextT context
  );

  public abstract T transformSubmodel(
    ISubmodel that,
    ContextT context
  );

  public abstract T transformRelationshipElement(
    IRelationshipElement that,
    ContextT context
  );

  public abstract T transformSubmodelElementList(
    ISubmodelElementList that,
    ContextT context
  );

  public abstract T transformSubmodelElementCollection(
    ISubmodelElementCollection that,
    ContextT context
  );

  public abstract T transformProperty(
    IProperty that,
    ContextT context
  );

  public abstract T transformMultiLanguageProperty(
    IMultiLanguageProperty that,
    ContextT context
  );

  public abstract T transformRange(
    IRange that,
    ContextT context
  );

  public abstract T transformReferenceElement(
    IReferenceElement that,
    ContextT context
  );

  public abstract T transformBlob(
    IBlob that,
    ContextT context
  );

  public abstract T transformFile(
    IFile that,
    ContextT context
  );

  public abstract T transformAnnotatedRelationshipElement(
    IAnnotatedRelationshipElement that,
    ContextT context
  );

  public abstract T transformEntity(
    IEntity that,
    ContextT context
  );

  public abstract T transformEventPayload(
    IEventPayload that,
    ContextT context
  );

  public abstract T transformBasicEventElement(
    IBasicEventElement that,
    ContextT context
  );

  public abstract T transformOperation(
    IOperation that,
    ContextT context
  );

  public abstract T transformOperationVariable(
    IOperationVariable that,
    ContextT context
  );

  public abstract T transformCapability(
    ICapability that,
    ContextT context
  );

  public abstract T transformConceptDescription(
    IConceptDescription that,
    ContextT context
  );

  public abstract T transformReference(
    IReference that,
    ContextT context
  );

  public abstract T transformKey(
    IKey that,
    ContextT context
  );

  public abstract T transformLangStringNameType(
    ILangStringNameType that,
    ContextT context
  );

  public abstract T transformLangStringTextType(
    ILangStringTextType that,
    ContextT context
  );

  public abstract T transformEnvironment(
    IEnvironment that,
    ContextT context
  );

  public abstract T transformEmbeddedDataSpecification(
    IEmbeddedDataSpecification that,
    ContextT context
  );

  public abstract T transformLevelType(
    ILevelType that,
    ContextT context
  );

  public abstract T transformValueReferencePair(
    IValueReferencePair that,
    ContextT context
  );

  public abstract T transformValueList(
    IValueList that,
    ContextT context
  );

  public abstract T transformLangStringPreferredNameTypeIec61360(
    ILangStringPreferredNameTypeIec61360 that,
    ContextT context
  );

  public abstract T transformLangStringShortNameTypeIec61360(
    ILangStringShortNameTypeIec61360 that,
    ContextT context
  );

  public abstract T transformLangStringDefinitionTypeIec61360(
    ILangStringDefinitionTypeIec61360 that,
    ContextT context
  );

  public abstract T transformDataSpecificationIec61360(
    IDataSpecificationIec61360 that,
    ContextT context
  );
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
