/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.visitation;

import aas_core.aas3_0.types.model.*;
import aas_core.aas3_0.visitation.ITransformer;

/**
 * Perform double-dispatch to transform recursively
 * the instances into something else.
 *
 * @param <T> type of the transformation result
 */
public abstract class AbstractTransformer<T> implements ITransformer<T>
{
  public T transform(IClass that)
  {
    return that.transform(this);
  }

  public abstract T transformExtension(
    IExtension that
  );

  public abstract T transformAdministrativeInformation(
    IAdministrativeInformation that
  );

  public abstract T transformQualifier(
    IQualifier that
  );

  public abstract T transformAssetAdministrationShell(
    IAssetAdministrationShell that
  );

  public abstract T transformAssetInformation(
    IAssetInformation that
  );

  public abstract T transformResource(
    IResource that
  );

  public abstract T transformSpecificAssetId(
    ISpecificAssetId that
  );

  public abstract T transformSubmodel(
    ISubmodel that
  );

  public abstract T transformRelationshipElement(
    IRelationshipElement that
  );

  public abstract T transformSubmodelElementList(
    ISubmodelElementList that
  );

  public abstract T transformSubmodelElementCollection(
    ISubmodelElementCollection that
  );

  public abstract T transformProperty(
    IProperty that
  );

  public abstract T transformMultiLanguageProperty(
    IMultiLanguageProperty that
  );

  public abstract T transformRange(
    IRange that
  );

  public abstract T transformReferenceElement(
    IReferenceElement that
  );

  public abstract T transformBlob(
    IBlob that
  );

  public abstract T transformFile(
    IFile that
  );

  public abstract T transformAnnotatedRelationshipElement(
    IAnnotatedRelationshipElement that
  );

  public abstract T transformEntity(
    IEntity that
  );

  public abstract T transformEventPayload(
    IEventPayload that
  );

  public abstract T transformBasicEventElement(
    IBasicEventElement that
  );

  public abstract T transformOperation(
    IOperation that
  );

  public abstract T transformOperationVariable(
    IOperationVariable that
  );

  public abstract T transformCapability(
    ICapability that
  );

  public abstract T transformConceptDescription(
    IConceptDescription that
  );

  public abstract T transformReference(
    IReference that
  );

  public abstract T transformKey(
    IKey that
  );

  public abstract T transformLangStringNameType(
    ILangStringNameType that
  );

  public abstract T transformLangStringTextType(
    ILangStringTextType that
  );

  public abstract T transformEnvironment(
    IEnvironment that
  );

  public abstract T transformEmbeddedDataSpecification(
    IEmbeddedDataSpecification that
  );

  public abstract T transformLevelType(
    ILevelType that
  );

  public abstract T transformValueReferencePair(
    IValueReferencePair that
  );

  public abstract T transformValueList(
    IValueList that
  );

  public abstract T transformLangStringPreferredNameTypeIec61360(
    ILangStringPreferredNameTypeIec61360 that
  );

  public abstract T transformLangStringShortNameTypeIec61360(
    ILangStringShortNameTypeIec61360 that
  );

  public abstract T transformLangStringDefinitionTypeIec61360(
    ILangStringDefinitionTypeIec61360 that
  );

  public abstract T transformDataSpecificationIec61360(
    IDataSpecificationIec61360 that
  );
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
