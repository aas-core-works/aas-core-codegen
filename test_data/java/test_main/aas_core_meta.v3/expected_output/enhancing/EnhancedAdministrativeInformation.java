/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.enhancing;

import java.lang.Iterable;
import java.util.Optional;
import java.util.List;
import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;

public class EnhancedAdministrativeInformation<EnhancementT>
  extends Enhanced<EnhancementT>
  implements IAdministrativeInformation {
  private final IAdministrativeInformation instance;

  public EnhancedAdministrativeInformation(
    IAdministrativeInformation instance,
    EnhancementT enhancement
  ) {
    super(enhancement);
    this.instance = instance;
  }

  @Override
  public Optional<List<IEmbeddedDataSpecification>> getEmbeddedDataSpecifications() {
    return instance.getEmbeddedDataSpecifications();
  }

  @Override
  public void setEmbeddedDataSpecifications(List<IEmbeddedDataSpecification> embeddedDataSpecifications) {
    instance.setEmbeddedDataSpecifications(embeddedDataSpecifications);
  }

  @Override
  public Optional<String> getVersion() {
    return instance.getVersion();
  }

  @Override
  public void setVersion(String version) {
    instance.setVersion(version);
  }

  @Override
  public Optional<String> getRevision() {
    return instance.getRevision();
  }

  @Override
  public void setRevision(String revision) {
    instance.setRevision(revision);
  }

  @Override
  public Optional<IReference> getCreator() {
    return instance.getCreator();
  }

  @Override
  public void setCreator(IReference creator) {
    instance.setCreator(creator);
  }

  @Override
  public Optional<String> getTemplateId() {
    return instance.getTemplateId();
  }

  @Override
  public void setTemplateId(String templateId) {
    instance.setTemplateId(templateId);
  }

  public Iterable<IEmbeddedDataSpecification> overEmbeddedDataSpecificationsOrEmpty() {
    return instance.overEmbeddedDataSpecificationsOrEmpty();
  }

  public Iterable<IClass> descendOnce() {
    return instance.descendOnce();
  }

  public Iterable<IClass> descend() {
    return instance.descend();
  }

  public void accept(IVisitor visitor) {
    visitor.visitAdministrativeInformation(instance);
  }

  public <ContextT> void accept(
    IVisitorWithContext<ContextT> visitor,
    ContextT context
  ) {
    visitor.visitAdministrativeInformation(instance, context);
  }

  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformAdministrativeInformation(instance);
  }

  public <ContextT, T> T transform(
    ITransformerWithContext<ContextT, T> transformer,
    ContextT context
  ) {
    return transformer.transformAdministrativeInformation(instance, context);
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
