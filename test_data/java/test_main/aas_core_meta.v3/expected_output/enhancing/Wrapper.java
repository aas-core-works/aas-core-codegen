/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.enhancing;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import aas_core.aas3_0.types.model.*;
import aas_core.aas3_0.visitation.AbstractTransformer;

class Wrapper<EnhancementT> extends AbstractTransformer<IClass> {
  private final Function<IClass, Optional<EnhancementT>> enhancementFactory;

  Wrapper(
    Function<IClass, Optional<EnhancementT>> enhancementFactory
  ) {
    this.enhancementFactory = enhancementFactory;
  }

  @Override
  public IClass transformExtension(
    IExtension that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getRefersTo().isPresent()) {
      List<IReference> refersTo = that.getRefersTo().get();
      List<IReference> transformedRefersTo = refersTo.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setRefersTo(transformedRefersTo);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedExtension<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformAdministrativeInformation(
    IAdministrativeInformation that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getCreator().isPresent()) {
      IReference creator = that.getCreator().get();
      IClass transformedCreator = transform(creator);
      if (!(transformedCreator instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedCreator
        );
      }
      IReference castedCreator = (IReference) transformedCreator;
      that.setCreator(castedCreator);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedAdministrativeInformation<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformQualifier(
    IQualifier that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getValueId().isPresent()) {
      IReference valueId = that.getValueId().get();
      IClass transformedValueId = transform(valueId);
      if (!(transformedValueId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedValueId
        );
      }
      IReference castedValueId = (IReference) transformedValueId;
      that.setValueId(castedValueId);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedQualifier<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformAssetAdministrationShell(
    IAssetAdministrationShell that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getAdministration().isPresent()) {
      IAdministrativeInformation administration = that.getAdministration().get();
      IClass transformedAdministration = transform(administration);
      if (!(transformedAdministration instanceof IAdministrativeInformation)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IAdministrativeInformation " +
          ", but got: " + transformedAdministration
        );
      }
      IAdministrativeInformation castedAdministration = (IAdministrativeInformation) transformedAdministration;
      that.setAdministration(castedAdministration);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getDerivedFrom().isPresent()) {
      IReference derivedFrom = that.getDerivedFrom().get();
      IClass transformedDerivedFrom = transform(derivedFrom);
      if (!(transformedDerivedFrom instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedDerivedFrom
        );
      }
      IReference castedDerivedFrom = (IReference) transformedDerivedFrom;
      that.setDerivedFrom(castedDerivedFrom);
    }

    IAssetInformation assetInformation = that.getAssetInformation();
    IClass transformedAssetInformation = transform(assetInformation);
    if (!(transformedAssetInformation instanceof IAssetInformation)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IAssetInformation " +
        ", but got: " + transformedAssetInformation
      );
    }
    IAssetInformation castedAssetInformation = (IAssetInformation) transformedAssetInformation;
    that.setAssetInformation(castedAssetInformation);

    if (that.getSubmodels().isPresent()) {
      List<IReference> submodels = that.getSubmodels().get();
      List<IReference> transformedSubmodels = submodels.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSubmodels(transformedSubmodels);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedAssetAdministrationShell<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformAssetInformation(
    IAssetInformation that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getSpecificAssetIds().isPresent()) {
      List<ISpecificAssetId> specificAssetIds = that.getSpecificAssetIds().get();
      List<ISpecificAssetId> transformedSpecificAssetIds = specificAssetIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISpecificAssetId)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISpecificAssetId " +
              ", but got: " + transformed
            );
          }
          return (ISpecificAssetId) transformed;
        }).collect(Collectors.toList());
      that.setSpecificAssetIds(transformedSpecificAssetIds);
    }

    if (that.getDefaultThumbnail().isPresent()) {
      IResource defaultThumbnail = that.getDefaultThumbnail().get();
      IClass transformedDefaultThumbnail = transform(defaultThumbnail);
      if (!(transformedDefaultThumbnail instanceof IResource)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IResource " +
          ", but got: " + transformedDefaultThumbnail
        );
      }
      IResource castedDefaultThumbnail = (IResource) transformedDefaultThumbnail;
      that.setDefaultThumbnail(castedDefaultThumbnail);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedAssetInformation<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformResource(
    IResource that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedResource<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformSpecificAssetId(
    ISpecificAssetId that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getExternalSubjectId().isPresent()) {
      IReference externalSubjectId = that.getExternalSubjectId().get();
      IClass transformedExternalSubjectId = transform(externalSubjectId);
      if (!(transformedExternalSubjectId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedExternalSubjectId
        );
      }
      IReference castedExternalSubjectId = (IReference) transformedExternalSubjectId;
      that.setExternalSubjectId(castedExternalSubjectId);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedSpecificAssetId<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformSubmodel(
    ISubmodel that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getAdministration().isPresent()) {
      IAdministrativeInformation administration = that.getAdministration().get();
      IClass transformedAdministration = transform(administration);
      if (!(transformedAdministration instanceof IAdministrativeInformation)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IAdministrativeInformation " +
          ", but got: " + transformedAdministration
        );
      }
      IAdministrativeInformation castedAdministration = (IAdministrativeInformation) transformedAdministration;
      that.setAdministration(castedAdministration);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getSubmodelElements().isPresent()) {
      List<ISubmodelElement> submodelElements = that.getSubmodelElements().get();
      List<ISubmodelElement> transformedSubmodelElements = submodelElements.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISubmodelElement)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISubmodelElement " +
              ", but got: " + transformed
            );
          }
          return (ISubmodelElement) transformed;
        }).collect(Collectors.toList());
      that.setSubmodelElements(transformedSubmodelElements);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedSubmodel<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformRelationshipElement(
    IRelationshipElement that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    IReference first = that.getFirst();
    IClass transformedFirst = transform(first);
    if (!(transformedFirst instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedFirst
      );
    }
    IReference castedFirst = (IReference) transformedFirst;
    that.setFirst(castedFirst);

    IReference second = that.getSecond();
    IClass transformedSecond = transform(second);
    if (!(transformedSecond instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedSecond
      );
    }
    IReference castedSecond = (IReference) transformedSecond;
    that.setSecond(castedSecond);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedRelationshipElement<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformSubmodelElementList(
    ISubmodelElementList that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getSemanticIdListElement().isPresent()) {
      IReference semanticIdListElement = that.getSemanticIdListElement().get();
      IClass transformedSemanticIdListElement = transform(semanticIdListElement);
      if (!(transformedSemanticIdListElement instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticIdListElement
        );
      }
      IReference castedSemanticIdListElement = (IReference) transformedSemanticIdListElement;
      that.setSemanticIdListElement(castedSemanticIdListElement);
    }

    if (that.getValue().isPresent()) {
      List<ISubmodelElement> value = that.getValue().get();
      List<ISubmodelElement> transformedValue = value.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISubmodelElement)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISubmodelElement " +
              ", but got: " + transformed
            );
          }
          return (ISubmodelElement) transformed;
        }).collect(Collectors.toList());
      that.setValue(transformedValue);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedSubmodelElementList<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformSubmodelElementCollection(
    ISubmodelElementCollection that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getValue().isPresent()) {
      List<ISubmodelElement> value = that.getValue().get();
      List<ISubmodelElement> transformedValue = value.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISubmodelElement)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISubmodelElement " +
              ", but got: " + transformed
            );
          }
          return (ISubmodelElement) transformed;
        }).collect(Collectors.toList());
      that.setValue(transformedValue);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedSubmodelElementCollection<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformProperty(
    IProperty that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getValueId().isPresent()) {
      IReference valueId = that.getValueId().get();
      IClass transformedValueId = transform(valueId);
      if (!(transformedValueId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedValueId
        );
      }
      IReference castedValueId = (IReference) transformedValueId;
      that.setValueId(castedValueId);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedProperty<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformMultiLanguageProperty(
    IMultiLanguageProperty that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getValue().isPresent()) {
      List<ILangStringTextType> value = that.getValue().get();
      List<ILangStringTextType> transformedValue = value.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setValue(transformedValue);
    }

    if (that.getValueId().isPresent()) {
      IReference valueId = that.getValueId().get();
      IClass transformedValueId = transform(valueId);
      if (!(transformedValueId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedValueId
        );
      }
      IReference castedValueId = (IReference) transformedValueId;
      that.setValueId(castedValueId);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedMultiLanguageProperty<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformRange(
    IRange that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedRange<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformReferenceElement(
    IReferenceElement that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getValue().isPresent()) {
      IReference value = that.getValue().get();
      IClass transformedValue = transform(value);
      if (!(transformedValue instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedValue
        );
      }
      IReference castedValue = (IReference) transformedValue;
      that.setValue(castedValue);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedReferenceElement<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformBlob(
    IBlob that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedBlob<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformFile(
    IFile that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedFile<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformAnnotatedRelationshipElement(
    IAnnotatedRelationshipElement that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    IReference first = that.getFirst();
    IClass transformedFirst = transform(first);
    if (!(transformedFirst instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedFirst
      );
    }
    IReference castedFirst = (IReference) transformedFirst;
    that.setFirst(castedFirst);

    IReference second = that.getSecond();
    IClass transformedSecond = transform(second);
    if (!(transformedSecond instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedSecond
      );
    }
    IReference castedSecond = (IReference) transformedSecond;
    that.setSecond(castedSecond);

    if (that.getAnnotations().isPresent()) {
      List<IDataElement> annotations = that.getAnnotations().get();
      List<IDataElement> transformedAnnotations = annotations.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IDataElement)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IDataElement " +
              ", but got: " + transformed
            );
          }
          return (IDataElement) transformed;
        }).collect(Collectors.toList());
      that.setAnnotations(transformedAnnotations);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedAnnotatedRelationshipElement<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformEntity(
    IEntity that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getStatements().isPresent()) {
      List<ISubmodelElement> statements = that.getStatements().get();
      List<ISubmodelElement> transformedStatements = statements.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISubmodelElement)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISubmodelElement " +
              ", but got: " + transformed
            );
          }
          return (ISubmodelElement) transformed;
        }).collect(Collectors.toList());
      that.setStatements(transformedStatements);
    }

    if (that.getSpecificAssetIds().isPresent()) {
      List<ISpecificAssetId> specificAssetIds = that.getSpecificAssetIds().get();
      List<ISpecificAssetId> transformedSpecificAssetIds = specificAssetIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISpecificAssetId)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISpecificAssetId " +
              ", but got: " + transformed
            );
          }
          return (ISpecificAssetId) transformed;
        }).collect(Collectors.toList());
      that.setSpecificAssetIds(transformedSpecificAssetIds);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedEntity<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformEventPayload(
    IEventPayload that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    IReference source = that.getSource();
    IClass transformedSource = transform(source);
    if (!(transformedSource instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedSource
      );
    }
    IReference castedSource = (IReference) transformedSource;
    that.setSource(castedSource);

    if (that.getSourceSemanticId().isPresent()) {
      IReference sourceSemanticId = that.getSourceSemanticId().get();
      IClass transformedSourceSemanticId = transform(sourceSemanticId);
      if (!(transformedSourceSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSourceSemanticId
        );
      }
      IReference castedSourceSemanticId = (IReference) transformedSourceSemanticId;
      that.setSourceSemanticId(castedSourceSemanticId);
    }

    IReference observableReference = that.getObservableReference();
    IClass transformedObservableReference = transform(observableReference);
    if (!(transformedObservableReference instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedObservableReference
      );
    }
    IReference castedObservableReference = (IReference) transformedObservableReference;
    that.setObservableReference(castedObservableReference);

    if (that.getObservableSemanticId().isPresent()) {
      IReference observableSemanticId = that.getObservableSemanticId().get();
      IClass transformedObservableSemanticId = transform(observableSemanticId);
      if (!(transformedObservableSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedObservableSemanticId
        );
      }
      IReference castedObservableSemanticId = (IReference) transformedObservableSemanticId;
      that.setObservableSemanticId(castedObservableSemanticId);
    }

    if (that.getSubjectId().isPresent()) {
      IReference subjectId = that.getSubjectId().get();
      IClass transformedSubjectId = transform(subjectId);
      if (!(transformedSubjectId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSubjectId
        );
      }
      IReference castedSubjectId = (IReference) transformedSubjectId;
      that.setSubjectId(castedSubjectId);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedEventPayload<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformBasicEventElement(
    IBasicEventElement that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    IReference observed = that.getObserved();
    IClass transformedObserved = transform(observed);
    if (!(transformedObserved instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedObserved
      );
    }
    IReference castedObserved = (IReference) transformedObserved;
    that.setObserved(castedObserved);

    if (that.getMessageBroker().isPresent()) {
      IReference messageBroker = that.getMessageBroker().get();
      IClass transformedMessageBroker = transform(messageBroker);
      if (!(transformedMessageBroker instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedMessageBroker
        );
      }
      IReference castedMessageBroker = (IReference) transformedMessageBroker;
      that.setMessageBroker(castedMessageBroker);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedBasicEventElement<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformOperation(
    IOperation that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getInputVariables().isPresent()) {
      List<IOperationVariable> inputVariables = that.getInputVariables().get();
      List<IOperationVariable> transformedInputVariables = inputVariables.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IOperationVariable)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IOperationVariable " +
              ", but got: " + transformed
            );
          }
          return (IOperationVariable) transformed;
        }).collect(Collectors.toList());
      that.setInputVariables(transformedInputVariables);
    }

    if (that.getOutputVariables().isPresent()) {
      List<IOperationVariable> outputVariables = that.getOutputVariables().get();
      List<IOperationVariable> transformedOutputVariables = outputVariables.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IOperationVariable)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IOperationVariable " +
              ", but got: " + transformed
            );
          }
          return (IOperationVariable) transformed;
        }).collect(Collectors.toList());
      that.setOutputVariables(transformedOutputVariables);
    }

    if (that.getInoutputVariables().isPresent()) {
      List<IOperationVariable> inoutputVariables = that.getInoutputVariables().get();
      List<IOperationVariable> transformedInoutputVariables = inoutputVariables.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IOperationVariable)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IOperationVariable " +
              ", but got: " + transformed
            );
          }
          return (IOperationVariable) transformed;
        }).collect(Collectors.toList());
      that.setInoutputVariables(transformedInoutputVariables);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedOperation<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformOperationVariable(
    IOperationVariable that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    ISubmodelElement value = that.getValue();
    IClass transformedValue = transform(value);
    if (!(transformedValue instanceof ISubmodelElement)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a ISubmodelElement " +
        ", but got: " + transformedValue
      );
    }
    ISubmodelElement castedValue = (ISubmodelElement) transformedValue;
    that.setValue(castedValue);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedOperationVariable<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformCapability(
    ICapability that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getSemanticId().isPresent()) {
      IReference semanticId = that.getSemanticId().get();
      IClass transformedSemanticId = transform(semanticId);
      if (!(transformedSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedSemanticId
        );
      }
      IReference castedSemanticId = (IReference) transformedSemanticId;
      that.setSemanticId(castedSemanticId);
    }

    if (that.getSupplementalSemanticIds().isPresent()) {
      List<IReference> supplementalSemanticIds = that.getSupplementalSemanticIds().get();
      List<IReference> transformedSupplementalSemanticIds = supplementalSemanticIds.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setSupplementalSemanticIds(transformedSupplementalSemanticIds);
    }

    if (that.getQualifiers().isPresent()) {
      List<IQualifier> qualifiers = that.getQualifiers().get();
      List<IQualifier> transformedQualifiers = qualifiers.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IQualifier)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IQualifier " +
              ", but got: " + transformed
            );
          }
          return (IQualifier) transformed;
        }).collect(Collectors.toList());
      that.setQualifiers(transformedQualifiers);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedCapability<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformConceptDescription(
    IConceptDescription that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getExtensions().isPresent()) {
      List<IExtension> extensions = that.getExtensions().get();
      List<IExtension> transformedExtensions = extensions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IExtension)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IExtension " +
              ", but got: " + transformed
            );
          }
          return (IExtension) transformed;
        }).collect(Collectors.toList());
      that.setExtensions(transformedExtensions);
    }

    if (that.getDisplayName().isPresent()) {
      List<ILangStringNameType> displayName = that.getDisplayName().get();
      List<ILangStringNameType> transformedDisplayName = displayName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringNameType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringNameType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringNameType) transformed;
        }).collect(Collectors.toList());
      that.setDisplayName(transformedDisplayName);
    }

    if (that.getDescription().isPresent()) {
      List<ILangStringTextType> description = that.getDescription().get();
      List<ILangStringTextType> transformedDescription = description.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringTextType)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringTextType " +
              ", but got: " + transformed
            );
          }
          return (ILangStringTextType) transformed;
        }).collect(Collectors.toList());
      that.setDescription(transformedDescription);
    }

    if (that.getAdministration().isPresent()) {
      IAdministrativeInformation administration = that.getAdministration().get();
      IClass transformedAdministration = transform(administration);
      if (!(transformedAdministration instanceof IAdministrativeInformation)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IAdministrativeInformation " +
          ", but got: " + transformedAdministration
        );
      }
      IAdministrativeInformation castedAdministration = (IAdministrativeInformation) transformedAdministration;
      that.setAdministration(castedAdministration);
    }

    if (that.getEmbeddedDataSpecifications().isPresent()) {
      List<IEmbeddedDataSpecification> embeddedDataSpecifications = that.getEmbeddedDataSpecifications().get();
      List<IEmbeddedDataSpecification> transformedEmbeddedDataSpecifications = embeddedDataSpecifications.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IEmbeddedDataSpecification)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IEmbeddedDataSpecification " +
              ", but got: " + transformed
            );
          }
          return (IEmbeddedDataSpecification) transformed;
        }).collect(Collectors.toList());
      that.setEmbeddedDataSpecifications(transformedEmbeddedDataSpecifications);
    }

    if (that.getIsCaseOf().isPresent()) {
      List<IReference> isCaseOf = that.getIsCaseOf().get();
      List<IReference> transformedIsCaseOf = isCaseOf.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IReference)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IReference " +
              ", but got: " + transformed
            );
          }
          return (IReference) transformed;
        }).collect(Collectors.toList());
      that.setIsCaseOf(transformedIsCaseOf);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedConceptDescription<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformReference(
    IReference that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getReferredSemanticId().isPresent()) {
      IReference referredSemanticId = that.getReferredSemanticId().get();
      IClass transformedReferredSemanticId = transform(referredSemanticId);
      if (!(transformedReferredSemanticId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedReferredSemanticId
        );
      }
      IReference castedReferredSemanticId = (IReference) transformedReferredSemanticId;
      that.setReferredSemanticId(castedReferredSemanticId);
    }

    List<IKey> keys = that.getKeys();
    List<IKey> transformedKeys = keys.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof IKey)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a IKey " +
            ", but got: " + transformed
          );
        }
        return (IKey) transformed;
      }).collect(Collectors.toList());
    that.setKeys(transformedKeys);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedReference<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformKey(
    IKey that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedKey<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLangStringNameType(
    ILangStringNameType that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLangStringNameType<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLangStringTextType(
    ILangStringTextType that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLangStringTextType<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformEnvironment(
    IEnvironment that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    if (that.getAssetAdministrationShells().isPresent()) {
      List<IAssetAdministrationShell> assetAdministrationShells = that.getAssetAdministrationShells().get();
      List<IAssetAdministrationShell> transformedAssetAdministrationShells = assetAdministrationShells.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IAssetAdministrationShell)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IAssetAdministrationShell " +
              ", but got: " + transformed
            );
          }
          return (IAssetAdministrationShell) transformed;
        }).collect(Collectors.toList());
      that.setAssetAdministrationShells(transformedAssetAdministrationShells);
    }

    if (that.getSubmodels().isPresent()) {
      List<ISubmodel> submodels = that.getSubmodels().get();
      List<ISubmodel> transformedSubmodels = submodels.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ISubmodel)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ISubmodel " +
              ", but got: " + transformed
            );
          }
          return (ISubmodel) transformed;
        }).collect(Collectors.toList());
      that.setSubmodels(transformedSubmodels);
    }

    if (that.getConceptDescriptions().isPresent()) {
      List<IConceptDescription> conceptDescriptions = that.getConceptDescriptions().get();
      List<IConceptDescription> transformedConceptDescriptions = conceptDescriptions.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof IConceptDescription)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a IConceptDescription " +
              ", but got: " + transformed
            );
          }
          return (IConceptDescription) transformed;
        }).collect(Collectors.toList());
      that.setConceptDescriptions(transformedConceptDescriptions);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedEnvironment<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformEmbeddedDataSpecification(
    IEmbeddedDataSpecification that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    IReference dataSpecification = that.getDataSpecification();
    IClass transformedDataSpecification = transform(dataSpecification);
    if (!(transformedDataSpecification instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedDataSpecification
      );
    }
    IReference castedDataSpecification = (IReference) transformedDataSpecification;
    that.setDataSpecification(castedDataSpecification);

    IDataSpecificationContent dataSpecificationContent = that.getDataSpecificationContent();
    IClass transformedDataSpecificationContent = transform(dataSpecificationContent);
    if (!(transformedDataSpecificationContent instanceof IDataSpecificationContent)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IDataSpecificationContent " +
        ", but got: " + transformedDataSpecificationContent
      );
    }
    IDataSpecificationContent castedDataSpecificationContent = (IDataSpecificationContent) transformedDataSpecificationContent;
    that.setDataSpecificationContent(castedDataSpecificationContent);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedEmbeddedDataSpecification<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLevelType(
    ILevelType that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLevelType<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformValueReferencePair(
    IValueReferencePair that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    IReference valueId = that.getValueId();
    IClass transformedValueId = transform(valueId);
    if (!(transformedValueId instanceof IReference)) {
      throw new UnsupportedOperationException(
        "Expected the transformed value to be a IReference " +
        ", but got: " + transformedValueId
      );
    }
    IReference castedValueId = (IReference) transformedValueId;
    that.setValueId(castedValueId);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedValueReferencePair<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformValueList(
    IValueList that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    List<IValueReferencePair> valueReferencePairs = that.getValueReferencePairs();
    List<IValueReferencePair> transformedValueReferencePairs = valueReferencePairs.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof IValueReferencePair)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a IValueReferencePair " +
            ", but got: " + transformed
          );
        }
        return (IValueReferencePair) transformed;
      }).collect(Collectors.toList());
    that.setValueReferencePairs(transformedValueReferencePairs);

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedValueList<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLangStringPreferredNameTypeIec61360(
    ILangStringPreferredNameTypeIec61360 that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLangStringPreferredNameTypeIec61360<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLangStringShortNameTypeIec61360(
    ILangStringShortNameTypeIec61360 that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLangStringShortNameTypeIec61360<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformLangStringDefinitionTypeIec61360(
    ILangStringDefinitionTypeIec61360 that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedLangStringDefinitionTypeIec61360<>(
        that,
        enhancement.get()
      );
  }

  @Override
  public IClass transformDataSpecificationIec61360(
    IDataSpecificationIec61360 that
  ) {
    if (that instanceof Enhanced)
    {
      throw new IllegalArgumentException(
        "The instance has been already enhanced: " + that
      );
    }

    List<ILangStringPreferredNameTypeIec61360> preferredName = that.getPreferredName();
    List<ILangStringPreferredNameTypeIec61360> transformedPreferredName = preferredName.stream()
      .map(item -> {
        IClass transformed = transform(item);
        if (!(transformed instanceof ILangStringPreferredNameTypeIec61360)) {
          throw new UnsupportedOperationException(
            "Expected the transformed value to be a ILangStringPreferredNameTypeIec61360 " +
            ", but got: " + transformed
          );
        }
        return (ILangStringPreferredNameTypeIec61360) transformed;
      }).collect(Collectors.toList());
    that.setPreferredName(transformedPreferredName);

    if (that.getShortName().isPresent()) {
      List<ILangStringShortNameTypeIec61360> shortName = that.getShortName().get();
      List<ILangStringShortNameTypeIec61360> transformedShortName = shortName.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringShortNameTypeIec61360)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringShortNameTypeIec61360 " +
              ", but got: " + transformed
            );
          }
          return (ILangStringShortNameTypeIec61360) transformed;
        }).collect(Collectors.toList());
      that.setShortName(transformedShortName);
    }

    if (that.getUnitId().isPresent()) {
      IReference unitId = that.getUnitId().get();
      IClass transformedUnitId = transform(unitId);
      if (!(transformedUnitId instanceof IReference)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IReference " +
          ", but got: " + transformedUnitId
        );
      }
      IReference castedUnitId = (IReference) transformedUnitId;
      that.setUnitId(castedUnitId);
    }

    if (that.getDefinition().isPresent()) {
      List<ILangStringDefinitionTypeIec61360> definition = that.getDefinition().get();
      List<ILangStringDefinitionTypeIec61360> transformedDefinition = definition.stream()
        .map(item -> {
          IClass transformed = transform(item);
          if (!(transformed instanceof ILangStringDefinitionTypeIec61360)) {
            throw new UnsupportedOperationException(
              "Expected the transformed value to be a ILangStringDefinitionTypeIec61360 " +
              ", but got: " + transformed
            );
          }
          return (ILangStringDefinitionTypeIec61360) transformed;
        }).collect(Collectors.toList());
      that.setDefinition(transformedDefinition);
    }

    if (that.getValueList().isPresent()) {
      IValueList valueList = that.getValueList().get();
      IClass transformedValueList = transform(valueList);
      if (!(transformedValueList instanceof IValueList)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a IValueList " +
          ", but got: " + transformedValueList
        );
      }
      IValueList castedValueList = (IValueList) transformedValueList;
      that.setValueList(castedValueList);
    }

    if (that.getLevelType().isPresent()) {
      ILevelType levelType = that.getLevelType().get();
      IClass transformedLevelType = transform(levelType);
      if (!(transformedLevelType instanceof ILevelType)) {
        throw new UnsupportedOperationException(
          "Expected the transformed value to be a ILevelType " +
          ", but got: " + transformedLevelType
        );
      }
      ILevelType castedLevelType = (ILevelType) transformedLevelType;
      that.setLevelType(castedLevelType);
    }

    Optional<EnhancementT> enhancement = enhancementFactory.apply(that);
    return !enhancement.isPresent()
      ? that
      : new EnhancedDataSpecificationIec61360<>(
        that,
        enhancement.get()
      );
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
