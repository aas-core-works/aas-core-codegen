/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.enhancing;

import java.lang.Iterable;
import java.util.Optional;
import java.util.List;
import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;

public class EnhancedAssetInformation<EnhancementT>
  extends Enhanced<EnhancementT>
  implements IAssetInformation {
  private final IAssetInformation instance;

  public EnhancedAssetInformation(
    IAssetInformation instance,
    EnhancementT enhancement
  ) {
    super(enhancement);
    this.instance = instance;
  }

  @Override
  public AssetKind getAssetKind() {
    return instance.getAssetKind();
  }

  @Override
  public void setAssetKind(AssetKind assetKind) {
    instance.setAssetKind(assetKind);
  }

  @Override
  public Optional<String> getGlobalAssetId() {
    return instance.getGlobalAssetId();
  }

  @Override
  public void setGlobalAssetId(String globalAssetId) {
    instance.setGlobalAssetId(globalAssetId);
  }

  @Override
  public Optional<List<ISpecificAssetId>> getSpecificAssetIds() {
    return instance.getSpecificAssetIds();
  }

  @Override
  public void setSpecificAssetIds(List<ISpecificAssetId> specificAssetIds) {
    instance.setSpecificAssetIds(specificAssetIds);
  }

  @Override
  public Optional<String> getAssetType() {
    return instance.getAssetType();
  }

  @Override
  public void setAssetType(String assetType) {
    instance.setAssetType(assetType);
  }

  @Override
  public Optional<IResource> getDefaultThumbnail() {
    return instance.getDefaultThumbnail();
  }

  @Override
  public void setDefaultThumbnail(IResource defaultThumbnail) {
    instance.setDefaultThumbnail(defaultThumbnail);
  }

  public Iterable<ISpecificAssetId> overSpecificAssetIdsOrEmpty() {
    return instance.overSpecificAssetIdsOrEmpty();
  }

  public Iterable<IClass> descendOnce() {
    return instance.descendOnce();
  }

  public Iterable<IClass> descend() {
    return instance.descend();
  }

  public void accept(IVisitor visitor) {
    visitor.visitAssetInformation(instance);
  }

  public <ContextT> void accept(
    IVisitorWithContext<ContextT> visitor,
    ContextT context
  ) {
    visitor.visitAssetInformation(instance, context);
  }

  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformAssetInformation(instance);
  }

  public <ContextT, T> T transform(
    ITransformerWithContext<ContextT, T> transformer,
    ContextT context
  ) {
    return transformer.transformAssetInformation(instance, context);
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
