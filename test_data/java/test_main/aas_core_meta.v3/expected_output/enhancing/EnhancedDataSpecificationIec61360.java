/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.enhancing;

import java.lang.Iterable;
import java.util.Optional;
import java.util.List;
import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;

public class EnhancedDataSpecificationIec61360<EnhancementT>
  extends Enhanced<EnhancementT>
  implements IDataSpecificationIec61360 {
  private final IDataSpecificationIec61360 instance;

  public EnhancedDataSpecificationIec61360(
    IDataSpecificationIec61360 instance,
    EnhancementT enhancement
  ) {
    super(enhancement);
    this.instance = instance;
  }

  @Override
  public List<ILangStringPreferredNameTypeIec61360> getPreferredName() {
    return instance.getPreferredName();
  }

  @Override
  public void setPreferredName(List<ILangStringPreferredNameTypeIec61360> preferredName) {
    instance.setPreferredName(preferredName);
  }

  @Override
  public Optional<List<ILangStringShortNameTypeIec61360>> getShortName() {
    return instance.getShortName();
  }

  @Override
  public void setShortName(List<ILangStringShortNameTypeIec61360> shortName) {
    instance.setShortName(shortName);
  }

  @Override
  public Optional<String> getUnit() {
    return instance.getUnit();
  }

  @Override
  public void setUnit(String unit) {
    instance.setUnit(unit);
  }

  @Override
  public Optional<IReference> getUnitId() {
    return instance.getUnitId();
  }

  @Override
  public void setUnitId(IReference unitId) {
    instance.setUnitId(unitId);
  }

  @Override
  public Optional<String> getSourceOfDefinition() {
    return instance.getSourceOfDefinition();
  }

  @Override
  public void setSourceOfDefinition(String sourceOfDefinition) {
    instance.setSourceOfDefinition(sourceOfDefinition);
  }

  @Override
  public Optional<String> getSymbol() {
    return instance.getSymbol();
  }

  @Override
  public void setSymbol(String symbol) {
    instance.setSymbol(symbol);
  }

  @Override
  public Optional<DataTypeIec61360> getDataType() {
    return instance.getDataType();
  }

  @Override
  public void setDataType(DataTypeIec61360 dataType) {
    instance.setDataType(dataType);
  }

  @Override
  public Optional<List<ILangStringDefinitionTypeIec61360>> getDefinition() {
    return instance.getDefinition();
  }

  @Override
  public void setDefinition(List<ILangStringDefinitionTypeIec61360> definition) {
    instance.setDefinition(definition);
  }

  @Override
  public Optional<String> getValueFormat() {
    return instance.getValueFormat();
  }

  @Override
  public void setValueFormat(String valueFormat) {
    instance.setValueFormat(valueFormat);
  }

  @Override
  public Optional<IValueList> getValueList() {
    return instance.getValueList();
  }

  @Override
  public void setValueList(IValueList valueList) {
    instance.setValueList(valueList);
  }

  @Override
  public Optional<String> getValue() {
    return instance.getValue();
  }

  @Override
  public void setValue(String value) {
    instance.setValue(value);
  }

  @Override
  public Optional<ILevelType> getLevelType() {
    return instance.getLevelType();
  }

  @Override
  public void setLevelType(ILevelType levelType) {
    instance.setLevelType(levelType);
  }

  public Iterable<ILangStringShortNameTypeIec61360> overShortNameOrEmpty() {
    return instance.overShortNameOrEmpty();
  }

  public Iterable<ILangStringDefinitionTypeIec61360> overDefinitionOrEmpty() {
    return instance.overDefinitionOrEmpty();
  }

  public Iterable<IClass> descendOnce() {
    return instance.descendOnce();
  }

  public Iterable<IClass> descend() {
    return instance.descend();
  }

  public void accept(IVisitor visitor) {
    visitor.visitDataSpecificationIec61360(instance);
  }

  public <ContextT> void accept(
    IVisitorWithContext<ContextT> visitor,
    ContextT context
  ) {
    visitor.visitDataSpecificationIec61360(instance, context);
  }

  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformDataSpecificationIec61360(instance);
  }

  public <ContextT, T> T transform(
    ITransformerWithContext<ContextT, T> transformer,
    ContextT context
  ) {
    return transformer.transformDataSpecificationIec61360(instance, context);
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
