/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.impl;

import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Objects;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import aas_core.aas3_0.types.model.IExtension;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * Single extension of an element.
 */
public class Extension implements IExtension {
  /**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  private IReference semanticId;

  /**
   * Identifier of a supplemental semantic definition of the element.
   * It is called supplemental semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  private List<IReference> supplementalSemanticIds;

  /**
   * Name of the extension.
   *
   * <p>Constraints:
   * <ul>
   *   <li> Constraint AASd-077:
   *   The name of an extension (Extension/name) within {@link IHasExtensions} needs
   *   to be unique.
   * </ul>
   */
  private String name;

  /**
   * Type of the value of the extension.
   *
   * <p>Default: {@link DataTypeDefXsd#STRING}
   */
  private DataTypeDefXsd valueType;

  /**
   * Value of the extension
   */
  private String value;

  /**
   * Reference to an element the extension refers to.
   */
  private List<IReference> refersTo;

  public Extension(String name) {
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
  }

  public Extension(
    String name,
    IReference semanticId,
    List<IReference> supplementalSemanticIds,
    DataTypeDefXsd valueType,
    String value,
    List<IReference> refersTo) {
    this.semanticId = semanticId;
    this.supplementalSemanticIds = supplementalSemanticIds;
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
    this.valueType = valueType;
    this.value = value;
    this.refersTo = refersTo;
  }

  @Override
  public Optional<IReference> getSemanticId() {
    return Optional.ofNullable(semanticId);
  }

  @Override
  public void setSemanticId(IReference semanticId) {
    this.semanticId = semanticId;
  }

  @Override
  public Optional<List<IReference>> getSupplementalSemanticIds() {
    return Optional.ofNullable(supplementalSemanticIds);
  }

  @Override
  public void setSupplementalSemanticIds(List<IReference> supplementalSemanticIds) {
    this.supplementalSemanticIds = supplementalSemanticIds;
  }

  @Override
  public String getName() {
    return name;
  }

  @Override
  public void setName(String name) {
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
  }

  @Override
  public Optional<DataTypeDefXsd> getValueType() {
    return Optional.ofNullable(valueType);
  }

  @Override
  public void setValueType(DataTypeDefXsd valueType) {
    this.valueType = valueType;
  }

  @Override
  public Optional<String> getValue() {
    return Optional.ofNullable(value);
  }

  @Override
  public void setValue(String value) {
    this.value = value;
  }

  @Override
  public Optional<List<IReference>> getRefersTo() {
    return Optional.ofNullable(refersTo);
  }

  @Override
  public void setRefersTo(List<IReference> refersTo) {
    this.refersTo = refersTo;
  }

  /**
   * Iterate over {@link Extension#supplementalSemanticIds}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IReference> overSupplementalSemanticIdsOrEmpty() {
    return getSupplementalSemanticIds().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate over {@link Extension#refersTo}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IReference> overRefersToOrEmpty() {
    return getRefersTo().orElseGet(Collections::emptyList);
  }

  /**
   * @return the value type {@link DataTypeDefXsd} or the default value if it has not been set.
   */
  public DataTypeDefXsd valueTypeOrDefault() {
    return valueType != null ? valueType : DataTypeDefXsd.STRING;
  }

  /**
   * Iterate recursively over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descend() {
    return new ExtensionRecursiveIterable();
  }

  /**
   * Iterate over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descendOnce() {
    return new ExtensionIterable();
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch.
   **/
  @Override
  public void accept(IVisitor visitor) {
    visitor.visitExtension(this);
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT> void accept(
      IVisitorWithContext<ContextT> visitor,
      ContextT context) {
    visitor.visitExtension(this, context);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch.
   **/
  @Override
  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformExtension(this);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT, T> T transform(
      ITransformerWithContext<ContextT, T> transformer,
      ContextT context) {
    return transformer.transformExtension(this, context);
  }

  private class ExtensionIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (semanticId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.<IClass>of(Extension.this.semanticId));
      }

      if (supplementalSemanticIds != null) {
        memberStream = Stream.concat(memberStream,
          Extension.this.supplementalSemanticIds.stream());
      }

      if (refersTo != null) {
        memberStream = Stream.concat(memberStream,
          Extension.this.refersTo.stream());
      }

      return memberStream;
    }
  }

  private class ExtensionRecursiveIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (semanticId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.concat(Stream.<IClass>of(Extension.this.semanticId),
            StreamSupport.stream(Extension.this.semanticId.descend().spliterator(), false)));
      }

      if (supplementalSemanticIds != null) {
        memberStream = Stream.concat(memberStream,
          Extension.this.supplementalSemanticIds.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (refersTo != null) {
        memberStream = Stream.concat(memberStream,
          Extension.this.refersTo.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      return memberStream;
    }
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
