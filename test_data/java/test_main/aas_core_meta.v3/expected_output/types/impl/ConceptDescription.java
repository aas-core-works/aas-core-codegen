/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.impl;

import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Objects;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import aas_core.aas3_0.types.model.IConceptDescription;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * The semantics of a property or other elements that may have a semantic description
 * is defined by a concept description.
 *
 * <p>The description of the concept should follow a standardized schema (realized as
 * data specification template).
 *
 * <p>Constraints:
 * <ul>
 *   <li> Constraint AASc-3a-004:
 *   For a {@link ConceptDescription} with {@link ConceptDescription#getCategory category} {@literal PROPERTY} or
 *   {@literal VALUE} using data specification IEC61360,
 *   the {@link DataSpecificationIec61360#getDataType dataType} is mandatory and shall be
 *   one of: {@literal DATE}, {@literal STRING}, {@literal STRING_TRANSLATABLE}, {@literal INTEGER_MEASURE},
 *   {@literal INTEGER_COUNT}, {@literal INTEGER_CURRENCY}, {@literal REAL_MEASURE}, {@literal REAL_COUNT},
 *   {@literal REAL_CURRENCY}, {@literal BOOLEAN}, {@literal RATIONAL}, {@literal RATIONAL_MEASURE},
 *   {@literal TIME}, {@literal TIMESTAMP}.
 *
 *   <p>Note: categories are deprecated since V3.0 of Part 1a of the document series
 *   "Details of the Asset Administration Shell".
 *   <li> Constraint AASc-3a-005:
 *   For a {@link ConceptDescription} with {@link ConceptDescription#getCategory category} {@literal REFERENCE}
 *   using data specification template IEC61360,
 *   the {@link DataSpecificationIec61360#getDataType dataType} shall be
 *   one of: {@literal STRING}, {@literal IRI}, {@literal IRDI}.
 *
 *   <p>Note: categories are deprecated since V3.0 of Part 1a of the document series
 *   "Details of the Asset Administration Shell".
 *   <li> Constraint AASc-3a-006:
 *   For a {@link ConceptDescription} with {@link ConceptDescription#getCategory category} {@literal DOCUMENT}
 *   using data specification IEC61360,
 *   the {@link DataSpecificationIec61360#getDataType dataType} shall be one of {@literal FILE},
 *   {@literal BLOB}, {@literal HTML}
 *
 *   <p>Categories are deprecated since V3.0 of Part 1a of the document series
 *   "Details of the Asset Administration Shell".
 *   <li> Constraint AASc-3a-007:
 *   For a {@link ConceptDescription} with {@link ConceptDescription#getCategory category} {@literal QUALIFIER_TYPE}
 *   using data specification IEC61360,
 *   the {@link DataSpecificationIec61360#getDataType dataType} is mandatory and shall be
 *   defined.
 *
 *   <p>Categories are deprecated since V3.0 of Part 1a of the document series
 *   "Details of the Asset Administration Shell".
 *   <li> Constraint AASc-3a-008:
 *   For a {@link ConceptDescription} using data specification template IEC61360,
 *   {@link DataSpecificationIec61360#getDefinition definition} is mandatory and shall be
 *   defined at least in English.
 *
 *   <p>Exception: The concept description describes a value, i.e.
 *   {@link DataSpecificationIec61360#getValue value} is defined.
 *   <li> Constraint AASc-3a-003:
 *   For a {@link ConceptDescription} using data specification template IEC61360,
 *   referenced via {@link DataSpecificationIec61360#getValueList valueList}
 *   {@link ValueReferencePair#getValueId valueId}
 *   the {@link DataSpecificationIec61360#getValue value} shall be set.
 * </ul>
 */
public class ConceptDescription implements IConceptDescription {
  /**
   * An extension of the element.
   */
  private List<IExtension> extensions;

  /**
   * The category is a value that gives further meta information
   * w.r.t. to the class of the element.
   * It affects the expected existence of attributes and the applicability of
   * constraints.
   *
   * <p>The category is not identical to the semantic definition
   * ({@link IHasSemantics}) of an element. The category e.g. could denote that
   * the element is a measurement value whereas the semantic definition of
   * the element would denote that it is the measured temperature.
   */
  private String category;

  /**
   * In case of identifiables this attribute is a short name of the element.
   * In case of referable this ID is an identifying string of the element within
   * its name space.
   *
   * <p>In case the element is a property and the property has a semantic definition
   * ({@link IHasSemantics#getSemanticId semanticId}) conformant to IEC61360
   * the {@link IReferable#getIdShort idShort} is typically identical to the short name in English.
   */
  private String idShort;

  /**
   * Display name. Can be provided in several languages.
   */
  private List<ILangStringNameType> displayName;

  /**
   * Description or comments on the element.
   *
   * <p>The description can be provided in several languages.
   *
   * <p>If no description is defined, then the definition of the concept
   * description that defines the semantics of the element is used.
   *
   * <p>Additional information can be provided, e.g., if the element is
   * qualified and which qualifier types can be expected in which
   * context or which additional data specification templates are
   * provided.
   */
  private List<ILangStringTextType> description;

  /**
   * Administrative information of an identifiable element.
   *
   * <p>Some of the administrative information like the version number might need to
   * be part of the identification.
   */
  private IAdministrativeInformation administration;

  /**
   * The globally unique identification of the element.
   */
  private String id;

  /**
   * Embedded data specification.
   */
  private List<IEmbeddedDataSpecification> embeddedDataSpecifications;

  /**
   * Reference to an external definition the concept is compatible to or was derived
   * from.
   *
   * <p>It is recommended to use a global reference.
   *
   * <p>Compare to is-case-of relationship in ISO 13584-32 &amp; IEC EN 61360
   */
  private List<IReference> isCaseOf;

  public ConceptDescription(String id) {
    this.id = Objects.requireNonNull(
      id,
      "Argument \"id\" must be non-null.");
  }

  public ConceptDescription(
    String id,
    List<IExtension> extensions,
    String category,
    String idShort,
    List<ILangStringNameType> displayName,
    List<ILangStringTextType> description,
    IAdministrativeInformation administration,
    List<IEmbeddedDataSpecification> embeddedDataSpecifications,
    List<IReference> isCaseOf) {
    this.extensions = extensions;
    this.idShort = idShort;
    this.displayName = displayName;
    this.category = category;
    this.description = description;
    this.id = Objects.requireNonNull(
      id,
      "Argument \"id\" must be non-null.");
    this.administration = administration;
    this.embeddedDataSpecifications = embeddedDataSpecifications;
    this.isCaseOf = isCaseOf;
  }

  @Override
  public Optional<List<IExtension>> getExtensions() {
    return Optional.ofNullable(extensions);
  }

  @Override
  public void setExtensions(List<IExtension> extensions) {
    this.extensions = extensions;
  }

  @Override
  public Optional<String> getCategory() {
    return Optional.ofNullable(category);
  }

  @Override
  public void setCategory(String category) {
    this.category = category;
  }

  @Override
  public Optional<String> getIdShort() {
    return Optional.ofNullable(idShort);
  }

  @Override
  public void setIdShort(String idShort) {
    this.idShort = idShort;
  }

  @Override
  public Optional<List<ILangStringNameType>> getDisplayName() {
    return Optional.ofNullable(displayName);
  }

  @Override
  public void setDisplayName(List<ILangStringNameType> displayName) {
    this.displayName = displayName;
  }

  @Override
  public Optional<List<ILangStringTextType>> getDescription() {
    return Optional.ofNullable(description);
  }

  @Override
  public void setDescription(List<ILangStringTextType> description) {
    this.description = description;
  }

  @Override
  public Optional<IAdministrativeInformation> getAdministration() {
    return Optional.ofNullable(administration);
  }

  @Override
  public void setAdministration(IAdministrativeInformation administration) {
    this.administration = administration;
  }

  @Override
  public String getId() {
    return id;
  }

  @Override
  public void setId(String id) {
    this.id = Objects.requireNonNull(
      id,
      "Argument \"id\" must be non-null.");
  }

  @Override
  public Optional<List<IEmbeddedDataSpecification>> getEmbeddedDataSpecifications() {
    return Optional.ofNullable(embeddedDataSpecifications);
  }

  @Override
  public void setEmbeddedDataSpecifications(List<IEmbeddedDataSpecification> embeddedDataSpecifications) {
    this.embeddedDataSpecifications = embeddedDataSpecifications;
  }

  @Override
  public Optional<List<IReference>> getIsCaseOf() {
    return Optional.ofNullable(isCaseOf);
  }

  @Override
  public void setIsCaseOf(List<IReference> isCaseOf) {
    this.isCaseOf = isCaseOf;
  }

  /**
   * Iterate over {@link ConceptDescription#extensions}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IExtension> overExtensionsOrEmpty() {
    return getExtensions().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate over {@link ConceptDescription#displayName}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<ILangStringNameType> overDisplayNameOrEmpty() {
    return getDisplayName().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate over {@link ConceptDescription#description}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<ILangStringTextType> overDescriptionOrEmpty() {
    return getDescription().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate over {@link ConceptDescription#embeddedDataSpecifications}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IEmbeddedDataSpecification> overEmbeddedDataSpecificationsOrEmpty() {
    return getEmbeddedDataSpecifications().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate over {@link ConceptDescription#isCaseOf}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IReference> overIsCaseOfOrEmpty() {
    return getIsCaseOf().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate recursively over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descend() {
    return new ConceptDescriptionRecursiveIterable();
  }

  /**
   * Iterate over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descendOnce() {
    return new ConceptDescriptionIterable();
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch.
   **/
  @Override
  public void accept(IVisitor visitor) {
    visitor.visitConceptDescription(this);
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT> void accept(
      IVisitorWithContext<ContextT> visitor,
      ContextT context) {
    visitor.visitConceptDescription(this, context);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch.
   **/
  @Override
  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformConceptDescription(this);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT, T> T transform(
      ITransformerWithContext<ContextT, T> transformer,
      ContextT context) {
    return transformer.transformConceptDescription(this, context);
  }

  private class ConceptDescriptionIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (extensions != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.extensions.stream());
      }

      if (displayName != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.displayName.stream());
      }

      if (description != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.description.stream());
      }

      if (administration != null) {
        memberStream = Stream.concat(memberStream,
          Stream.<IClass>of(ConceptDescription.this.administration));
      }

      if (embeddedDataSpecifications != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.embeddedDataSpecifications.stream());
      }

      if (isCaseOf != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.isCaseOf.stream());
      }

      return memberStream;
    }
  }

  private class ConceptDescriptionRecursiveIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (extensions != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.extensions.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (displayName != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.displayName.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (description != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.description.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (administration != null) {
        memberStream = Stream.concat(memberStream,
          Stream.concat(Stream.<IClass>of(ConceptDescription.this.administration),
            StreamSupport.stream(ConceptDescription.this.administration.descend().spliterator(), false)));
      }

      if (embeddedDataSpecifications != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.embeddedDataSpecifications.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (isCaseOf != null) {
        memberStream = Stream.concat(memberStream,
          ConceptDescription.this.isCaseOf.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      return memberStream;
    }
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
