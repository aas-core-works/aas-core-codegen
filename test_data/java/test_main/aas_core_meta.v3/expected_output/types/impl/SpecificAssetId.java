/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.impl;

import aas_core.aas3_0.visitation.IVisitor;
import aas_core.aas3_0.visitation.IVisitorWithContext;
import aas_core.aas3_0.visitation.ITransformer;
import aas_core.aas3_0.visitation.ITransformerWithContext;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Objects;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import aas_core.aas3_0.types.model.ISpecificAssetId;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

/**
 * A specific asset ID describes a generic supplementary identifying attribute of the
 * asset.
 *
 * <p>The specific asset ID is not necessarily globally unique.
 *
 * <p>Constraints:
 * <ul>
 *   <li> Constraint AASd-133:
 *   {@link SpecificAssetId#getExternalSubjectId externalSubjectId} shall be an external reference,
 *   i.e. {@link Reference#getType type} = {@link ReferenceTypes#EXTERNAL_REFERENCE}.
 * </ul>
 */
public class SpecificAssetId implements ISpecificAssetId {
  /**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  private IReference semanticId;

  /**
   * Identifier of a supplemental semantic definition of the element.
   * It is called supplemental semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  private List<IReference> supplementalSemanticIds;

  /**
   * Name of the identifier
   */
  private String name;

  /**
   * The value of the specific asset identifier with the corresponding name.
   */
  private String value;

  /**
   * The (external) subject the key belongs to or has meaning to.
   *
   * <p>This is a global reference.
   */
  private IReference externalSubjectId;

  public SpecificAssetId(
    String name,
    String value) {
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
    this.value = Objects.requireNonNull(
      value,
      "Argument \"value\" must be non-null.");
  }

  public SpecificAssetId(
    String name,
    String value,
    IReference semanticId,
    List<IReference> supplementalSemanticIds,
    IReference externalSubjectId) {
    this.semanticId = semanticId;
    this.supplementalSemanticIds = supplementalSemanticIds;
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
    this.value = Objects.requireNonNull(
      value,
      "Argument \"value\" must be non-null.");
    this.externalSubjectId = externalSubjectId;
  }

  @Override
  public Optional<IReference> getSemanticId() {
    return Optional.ofNullable(semanticId);
  }

  @Override
  public void setSemanticId(IReference semanticId) {
    this.semanticId = semanticId;
  }

  @Override
  public Optional<List<IReference>> getSupplementalSemanticIds() {
    return Optional.ofNullable(supplementalSemanticIds);
  }

  @Override
  public void setSupplementalSemanticIds(List<IReference> supplementalSemanticIds) {
    this.supplementalSemanticIds = supplementalSemanticIds;
  }

  @Override
  public String getName() {
    return name;
  }

  @Override
  public void setName(String name) {
    this.name = Objects.requireNonNull(
      name,
      "Argument \"name\" must be non-null.");
  }

  @Override
  public String getValue() {
    return value;
  }

  @Override
  public void setValue(String value) {
    this.value = Objects.requireNonNull(
      value,
      "Argument \"value\" must be non-null.");
  }

  @Override
  public Optional<IReference> getExternalSubjectId() {
    return Optional.ofNullable(externalSubjectId);
  }

  @Override
  public void setExternalSubjectId(IReference externalSubjectId) {
    this.externalSubjectId = externalSubjectId;
  }

  /**
   * Iterate over {@link SpecificAssetId#supplementalSemanticIds}, if set,
   * and otherwise return an empty iterator.
   */
  public Iterable<IReference> overSupplementalSemanticIdsOrEmpty() {
    return getSupplementalSemanticIds().orElseGet(Collections::emptyList);
  }

  /**
   * Iterate recursively over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descend() {
    return new SpecificAssetIdRecursiveIterable();
  }

  /**
   * Iterate over all the class instances referenced from this instance.
   */
  public Iterable<IClass> descendOnce() {
    return new SpecificAssetIdIterable();
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch.
   **/
  @Override
  public void accept(IVisitor visitor) {
    visitor.visitSpecificAssetId(this);
  }

  /**
   * Accept the {@code visitor} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT> void accept(
      IVisitorWithContext<ContextT> visitor,
      ContextT context) {
    visitor.visitSpecificAssetId(this, context);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch.
   **/
  @Override
  public <T> T transform(ITransformer<T> transformer) {
    return transformer.transformSpecificAssetId(this);
  }

  /**
   * Accept the {@code transformer} to visit this instance for double dispatch
   * with the {@code context}.
   **/
  @Override
  public <ContextT, T> T transform(
      ITransformerWithContext<ContextT, T> transformer,
      ContextT context) {
    return transformer.transformSpecificAssetId(this, context);
  }

  private class SpecificAssetIdIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (semanticId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.<IClass>of(SpecificAssetId.this.semanticId));
      }

      if (supplementalSemanticIds != null) {
        memberStream = Stream.concat(memberStream,
          SpecificAssetId.this.supplementalSemanticIds.stream());
      }

      if (externalSubjectId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.<IClass>of(SpecificAssetId.this.externalSubjectId));
      }

      return memberStream;
    }
  }

  private class SpecificAssetIdRecursiveIterable implements Iterable<IClass> {
    @Override
    public Iterator<IClass> iterator() {
      Stream<IClass> stream = stream();

      return stream.iterator();
    }

    @Override
    public void forEach(Consumer<? super IClass> action) {
      Stream<IClass> stream = stream();

      stream.forEach(action);
    }

    @Override
    public Spliterator<IClass> spliterator() {
      Stream<IClass> stream = stream();

      return stream.spliterator();
    }

    private Stream<IClass> stream() {
      Stream<IClass> memberStream = Stream.empty();

      if (semanticId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.concat(Stream.<IClass>of(SpecificAssetId.this.semanticId),
            StreamSupport.stream(SpecificAssetId.this.semanticId.descend().spliterator(), false)));
      }

      if (supplementalSemanticIds != null) {
        memberStream = Stream.concat(memberStream,
          SpecificAssetId.this.supplementalSemanticIds.stream()
            .flatMap(item -> Stream.concat(Stream.<IClass>of(item),
              StreamSupport.stream(item.descend().spliterator(), false))));
      }

      if (externalSubjectId != null) {
        memberStream = Stream.concat(memberStream,
          Stream.concat(Stream.<IClass>of(SpecificAssetId.this.externalSubjectId),
            StreamSupport.stream(SpecificAssetId.this.externalSubjectId.descend().spliterator(), false)));
      }

      return memberStream;
    }
  }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
