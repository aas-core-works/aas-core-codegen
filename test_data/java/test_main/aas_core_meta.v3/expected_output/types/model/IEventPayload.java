/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.model;

import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.List;
import aas_core.aas3_0.types.model.IClass;
import java.util.Optional;

/**
 * Defines the necessary information of an event instance sent out or received.
 *
 * <p>This element is experimental and therefore may be subject to change or may be
 * removed completely in future versions of the meta-model.
 */
public interface IEventPayload extends IClass {
  /**
   * Reference to the source event element, including identification of
   * {@link aas_core.aas3_0.types.impl.AssetAdministrationShell}, {@link aas_core.aas3_0.types.impl.Submodel},
   * {@link aas_core.aas3_0.types.model.ISubmodelElement}'s.
   */
  IReference getSource();

  void setSource(IReference source);

  /**
   * {@link aas_core.aas3_0.types.model.IHasSemantics#getSemanticId()} of the source event element, if available
   *
   * <p>It is recommended to use a global reference.
   */
  Optional<IReference> getSourceSemanticId();

  void setSourceSemanticId(IReference sourceSemanticId);

  /**
   * Reference to the referable, which defines the scope of the event.
   *
   * <p>Can be {@link aas_core.aas3_0.types.impl.AssetAdministrationShell}, {@link aas_core.aas3_0.types.impl.Submodel} or
   * {@link aas_core.aas3_0.types.model.ISubmodelElement}.
   */
  IReference getObservableReference();

  void setObservableReference(IReference observableReference);

  /**
   * {@link aas_core.aas3_0.types.model.IHasSemantics#getSemanticId()} of the referable which defines the scope of
   * the event, if available.
   *
   * <p>It is recommended to use a global reference.
   */
  Optional<IReference> getObservableSemanticId();

  void setObservableSemanticId(IReference observableSemanticId);

  /**
   * Information for the outer message infrastructure for scheduling the event to
   * the respective communication channel.
   */
  Optional<String> getTopic();

  void setTopic(String topic);

  /**
   * Subject, who/which initiated the creation.
   *
   * <p>This is an external reference.
   */
  Optional<IReference> getSubjectId();

  void setSubjectId(IReference subjectId);

  /**
   * Timestamp in UTC, when this event was triggered.
   */
  String getTimeStamp();

  void setTimeStamp(String timeStamp);

  /**
   * Event specific payload.
   */
  Optional<byte[]> getPayload();

  void setPayload(byte[] payload);
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
