/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.model;

import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.List;
import aas_core.aas3_0.types.model.IHasExtensions;
import java.util.Optional;

/**
 * An element that is referable by its {@link #getIdShort()}.
 *
 * <p>This ID is not globally unique.
 * This ID is unique within the name space of the element.
 *
 * <p>Constraints:
 *
 * <ul>
 *   <li> Constraint AASd-022:
 *   {@link #getIdShort()} of non-identifiable referables
 *   within the same name space shall be unique (case-sensitive).
 * </ul>
 */
public interface IReferable extends IHasExtensions {
  /**
   * The category is a value that gives further meta information
   * w.r.t. to the class of the element.
   * It affects the expected existence of attributes and the applicability of
   * constraints.
   *
   * <p>The category is not identical to the semantic definition
   * ({@link aas_core.aas3_0.types.model.IHasSemantics}) of an element. The category e.g. could denote that
   * the element is a measurement value whereas the semantic definition of
   * the element would denote that it is the measured temperature.
   */
  Optional<String> getCategory();

  void setCategory(String category);

  /**
   * In case of identifiables this attribute is a short name of the element.
   * In case of referable this ID is an identifying string of the element within
   * its name space.
   *
   * <p>In case the element is a property and the property has a semantic definition
   * ({@link aas_core.aas3_0.types.model.IHasSemantics#getSemanticId()}) conformant to IEC61360
   * the {@link #getIdShort()} is typically identical to the short name in English.
   */
  Optional<String> getIdShort();

  void setIdShort(String idShort);

  /**
   * Display name. Can be provided in several languages.
   */
  Optional<List<ILangStringNameType>> getDisplayName();

  void setDisplayName(List<ILangStringNameType> displayName);

  /**
   * Description or comments on the element.
   *
   * <p>The description can be provided in several languages.
   *
   * <p>If no description is defined, then the definition of the concept
   * description that defines the semantics of the element is used.
   *
   * <p>Additional information can be provided, e.g., if the element is
   * qualified and which qualifier types can be expected in which
   * context or which additional data specification templates are
   * provided.
   */
  Optional<List<ILangStringTextType>> getDescription();

  void setDescription(List<ILangStringTextType> description);

  /**
   * Iterate over displayName, if set, and otherwise return an empty enumerable.
   */
  Iterable<ILangStringNameType> overDisplayNameOrEmpty();

  /**
   * Iterate over description, if set, and otherwise return an empty enumerable.
   */
  Iterable<ILangStringTextType> overDescriptionOrEmpty();
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
