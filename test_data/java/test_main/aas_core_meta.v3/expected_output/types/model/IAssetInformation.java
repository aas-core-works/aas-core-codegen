/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.model;

import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.List;
import aas_core.aas3_0.types.model.IClass;
import java.util.Optional;

/**
 * In {@link AssetInformation} identifying meta data of the asset that is
 * represented by an AAS is defined.
 *
 * <p>The asset may either represent an asset type or an asset instance.
 *
 * <p>The asset has a globally unique identifier plus – if needed – additional domain
 * specific (proprietary) identifiers. However, to support the corner case of very
 * first phase of lifecycle where a stabilised/constant_set global asset identifier
 * does not already exist, the corresponding attribute {@link AssetInformation#getGlobalAssetId globalAssetId} is
 * optional.
 *
 * <p>Constraints:
 * <ul>
 *   <li> Constraint AASd-116:
 *   {@literal globalAssetId} is a reserved key. If used as value for
 *   {@link SpecificAssetId#getName name} then {@link SpecificAssetId#getValue value} shall be
 *   identical to {@link AssetInformation#getGlobalAssetId globalAssetId}.
 *
 *   <p>Constraint AASd-116 is important to enable a generic search across
 *   global and specific asset IDs.
 *
 *   <p>In the book, Constraint AASd-116 imposes a
 *   case-insensitive equality against {@literal globalAssetId}. This is
 *   culturally-dependent, and depends on the system settings.
 *   For example, the case-folding for the letters "i" and "I" is
 *   different in Turkish from English.
 *
 *   <p>We implement the constraint as case-sensitive instead to allow
 *   for interoperability across different culture settings.
 *   <li> Constraint AASd-131:
 *   For {@link AssetInformation} either the {@link AssetInformation#getGlobalAssetId globalAssetId} shall be
 *   defined or at least one item in {@link AssetInformation#getSpecificAssetIds specificAssetIds}.
 * </ul>
 */
public interface IAssetInformation extends IClass {
  /**
   * Denotes whether the Asset is of kind {@link AssetKind#TYPE} or
   * {@link AssetKind#INSTANCE}.
   */
  AssetKind getAssetKind();

  void setAssetKind(AssetKind assetKind);

  /**
   * Global identifier of the asset the AAS is representing.
   *
   * <p>This attribute is required as soon as the AAS is exchanged via partners in the life
   * cycle of the asset. In a first phase of the life cycle the asset might not yet have
   * a global ID but already an internal identifier. The internal identifier would be
   * modelled via {@link AssetInformation#getSpecificAssetIds specificAssetIds}.
   *
   * <p>This is a global reference.
   */
  Optional<String> getGlobalAssetId();

  void setGlobalAssetId(String globalAssetId);

  /**
   * Additional domain-specific, typically proprietary identifier for the asset like
   * e.g., serial number etc.
   */
  Optional<List<ISpecificAssetId>> getSpecificAssetIds();

  void setSpecificAssetIds(List<ISpecificAssetId> specificAssetIds);

  /**
   * In case {@link AssetInformation#getAssetKind assetKind} is applicable the {@link AssetInformation#getAssetType assetType} is the asset ID
   * of the type asset of the asset under consideration
   * as identified by {@link AssetInformation#getGlobalAssetId globalAssetId}.
   *
   * <p>In case {@link AssetInformation#getAssetKind assetKind} is "Instance" than the {@link AssetInformation#getAssetType assetType} denotes
   * which "Type" the asset is of. But it is also possible
   * to have an {@link AssetInformation#getAssetType assetType} of an asset of kind "Type".
   */
  Optional<String> getAssetType();

  void setAssetType(String assetType);

  /**
   * Thumbnail of the asset represented by the Asset Administration Shell.
   *
   * <p>Used as default.
   */
  Optional<IResource> getDefaultThumbnail();

  void setDefaultThumbnail(IResource defaultThumbnail);

  /**
   * Iterate over specificAssetIds, if set, and otherwise return an empty enumerable.
   */
  Iterable<ISpecificAssetId> overSpecificAssetIdsOrEmpty();
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
