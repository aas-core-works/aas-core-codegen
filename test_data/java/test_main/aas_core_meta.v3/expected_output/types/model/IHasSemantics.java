/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.types.model;

import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import java.util.List;
import aas_core.aas3_0.types.model.IClass;
import java.util.Optional;

/**
 * Element that can have a semantic definition plus some supplemental semantic
 * definitions.
 *
 * <p>Constraints:
 *
 * <ul>
 *   <li> Constraint AASd-118:
 *   If there are ID {@link #getSupplementalSemanticIds()} defined
 *   then there shall be also a main semantic ID {@link #getSemanticId()}.
 * </ul>
 */
public interface IHasSemantics extends IClass {
  /**
   * Identifier of the semantic definition of the element. It is called semantic ID
   * of the element or also main semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  Optional<IReference> getSemanticId();

  void setSemanticId(IReference semanticId);

  /**
   * Identifier of a supplemental semantic definition of the element.
   * It is called supplemental semantic ID of the element.
   *
   * <p>It is recommended to use a global reference.
   */
  Optional<List<IReference>> getSupplementalSemanticIds();

  void setSupplementalSemanticIds(List<IReference> supplementalSemanticIds);

  /**
   * Iterate over supplementalSemanticIds, if set, and otherwise return an empty enumerable.
   */
  Iterable<IReference> overSupplementalSemanticIdsOrEmpty();
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
