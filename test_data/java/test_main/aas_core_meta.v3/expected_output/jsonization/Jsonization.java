/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */

package aas_core.aas3_0.jsonization;

import aas_core.aas3_0.reporting.Reporting;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import aas_core.aas3_0.stringification.Stringification;
import aas_core.aas3_0.visitation.AbstractTransformer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.*;
import java.util.function.Function;

/**
 * Provide de/serialization of meta-model classes to/from JSON.
 *
 * <p>We can not use one-pass deserialization for JSON since the object
 * properties do not have fixed order, and hence we can not read
 * {@code modelType} property ahead of the remaining properties.
 */
public class Jsonization {
    /**
     * Implement the deserialization of meta-model classes from JSON nodes.
     *
     * <p>The implementation propagates an {@link Reporting.Error} instead
     * of relying on exceptions. Under the assumption that incorrect data is much
     * less frequent than correct data, this makes the deserialization more
     * efficient.
     *
     * However, we do not want to force the client to deal with
     * the {@link Reporting.Error} class as this is not intuitive. Therefore
     * we distinguish the implementation, realized in
     * {@link DeserializeImplementation}, and the facade given in
     * {@link Deserialize} class.
     */
    private static class DeserializeImplementation {
      /** Convert {@code value} to a string.
       * @param node JSON node to be parsed
       */
      private static Result<String> tryStringFrom(JsonNode value) {
        if (!value.isTextual()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonValue of String, but got " + value.getNodeType());
          return Result.failure(error);
        }
        return Result.success(value.asText());
      }

      /** Convert {@code value} to a boolean.
       * @param node JSON node to be parsed
       */
      private static Result<Boolean> tryBooleanFrom(JsonNode value) {
        if (!value.isBoolean()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonValue of Boolean, but got " + value.getNodeType());
          return Result.failure(error);
        }
        return Result.success(value.asBoolean());
      }

      /** Convert {@code value} to a long 64-bit integer.
       * @param node JSON node to be parsed
       */
      private static Result<Long> tryLongFrom(JsonNode value) {
        if (!value.isLong()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonValue of Long, but got " + value.getNodeType());
          return Result.failure(error);
        }
        return Result.success(value.asLong());
      }

      /** Convert {@code value} to a double-precision 64-bit float.
       * @param node JSON node to be parsed
       */
      private static Result<Double> tryDoubleFrom(JsonNode value) {
        if (!value.isDouble()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonValue of Double, but got " + value.getNodeType());
          return Result.failure(error);
        }
        return Result.success(value.asDouble());
      }

      private static Result<byte[]> tryBytesFrom(JsonNode value) {
        if (!value.isTextual()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonValue of String, but got " + value.getNodeType());
          return Result.failure(error);
        }
        final byte[] decodedData;
        Base64.Decoder decoder = Base64.getDecoder();

        try {
          decodedData = decoder.decode(value.textValue());
        } catch (Exception exception) {
          final Reporting.Error error = new Reporting.Error(
            "Expected Base-64 encoded bytes, but the conversion failed " +
              "because: " + exception.getMessage());
          return Result.failure(error);
        }

        return Result.success(decodedData);
      }

      /**
       * Deserialize an instance of IHasSemantics by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IHasSemantics> tryIHasSemanticsFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IHasSemantics.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "Extension": {
            return tryExtensionFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Qualifier": {
            return tryQualifierFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "SpecificAssetId": {
            return trySpecificAssetIdFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IHasSemantics: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of Extension from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Extension> tryExtensionFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theName = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        DataTypeDefXsd theValueType = null;
        String theValue = null;
        List<IReference> theRefersTo = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "name": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theNameResult = tryStringFrom(currentNode.getValue());
              if (theNameResult.isError()) {
                theNameResult.getError()
                  .prependSegment(new Reporting.NameSegment("name"));
                return theNameResult.castTo(Extension.class);
              }
              theName = theNameResult.getResult();
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Extension.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Extension.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "valueType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeDefXsd> theValueTypeResult = tryDataTypeDefXsdFrom(currentNode.getValue());
              if (theValueTypeResult.isError()) {
                theValueTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueType"));
                return theValueTypeResult.castTo(Extension.class);
              }
              theValueType = theValueTypeResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(Extension.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "refersTo": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayRefersTo = currentNode.getValue();
              if (!arrayRefersTo.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayRefersTo.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "refersTo"));
                return Result.failure(error);
              }
              theRefersTo = new ArrayList<>(
                arrayRefersTo.size());
              int indexRefersTo = 0;
              for (JsonNode item : arrayRefersTo) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexRefersTo));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "refersTo"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexRefersTo));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "refersTo"));
                  return parsedItemResult.castTo(Extension.class);
                }
                theRefersTo.add(
                  parsedItemResult.getResult());
                indexRefersTo++;
              }
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theName == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"name\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Extension(
          theName,
          theSemanticId,
          theSupplementalSemanticIds,
          theValueType,
          theValue,
          theRefersTo));
      }

      /**
       * Deserialize an instance of IHasExtensions by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IHasExtensions> tryIHasExtensionsFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IHasExtensions.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "AssetAdministrationShell": {
            return tryAssetAdministrationShellFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "ConceptDescription": {
            return tryConceptDescriptionFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IHasExtensions: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of IReferable by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IReferable> tryIReferableFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IReferable.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "AssetAdministrationShell": {
            return tryAssetAdministrationShellFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "ConceptDescription": {
            return tryConceptDescriptionFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IReferable: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of IIdentifiable by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IIdentifiable> tryIIdentifiableFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IIdentifiable.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "AssetAdministrationShell": {
            return tryAssetAdministrationShellFrom(node);
        }  case "ConceptDescription": {
            return tryConceptDescriptionFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IIdentifiable: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize the enumeration ModellingKind from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<ModellingKind> tryModellingKindFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(ModellingKind.class);
        }
        final Optional<ModellingKind> modellingKind = Stringification.modellingKindFromString(textResult.getResult());
        if (!modellingKind.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of ModellingKind");
          return Result.failure(error);
        }
        return Result.success(modellingKind.get());
      }

      /**
       * Deserialize an instance of IHasKind by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IHasKind> tryIHasKindFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IHasKind.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "Submodel": {
            return trySubmodelFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IHasKind: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of IHasDataSpecification by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IHasDataSpecification> tryIHasDataSpecificationFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IHasDataSpecification.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "AdministrativeInformation": {
            return tryAdministrativeInformationFrom(node);
        }  case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "AssetAdministrationShell": {
            return tryAssetAdministrationShellFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "ConceptDescription": {
            return tryConceptDescriptionFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IHasDataSpecification: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of AdministrativeInformation from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<AdministrativeInformation> tryAdministrativeInformationFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        String theVersion = null;
        String theRevision = null;
        IReference theCreator = null;
        String theTemplateId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(AdministrativeInformation.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "version": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theVersionResult = tryStringFrom(currentNode.getValue());
              if (theVersionResult.isError()) {
                theVersionResult.getError()
                  .prependSegment(new Reporting.NameSegment("version"));
                return theVersionResult.castTo(AdministrativeInformation.class);
              }
              theVersion = theVersionResult.getResult();
              break;
            }
            case "revision": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theRevisionResult = tryStringFrom(currentNode.getValue());
              if (theRevisionResult.isError()) {
                theRevisionResult.getError()
                  .prependSegment(new Reporting.NameSegment("revision"));
                return theRevisionResult.castTo(AdministrativeInformation.class);
              }
              theRevision = theRevisionResult.getResult();
              break;
            }
            case "creator": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theCreatorResult = tryReferenceFrom(currentNode.getValue());
              if (theCreatorResult.isError()) {
                theCreatorResult.getError()
                  .prependSegment(new Reporting.NameSegment("creator"));
                return theCreatorResult.castTo(AdministrativeInformation.class);
              }
              theCreator = theCreatorResult.getResult();
              break;
            }
            case "templateId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTemplateIdResult = tryStringFrom(currentNode.getValue());
              if (theTemplateIdResult.isError()) {
                theTemplateIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("templateId"));
                return theTemplateIdResult.castTo(AdministrativeInformation.class);
              }
              theTemplateId = theTemplateIdResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new AdministrativeInformation(
          theEmbeddedDataSpecifications,
          theVersion,
          theRevision,
          theCreator,
          theTemplateId));
      }

      /**
       * Deserialize an instance of IQualifiable by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IQualifiable> tryIQualifiableFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IQualifiable.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "Submodel": {
            return trySubmodelFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IQualifiable: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize the enumeration QualifierKind from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<QualifierKind> tryQualifierKindFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(QualifierKind.class);
        }
        final Optional<QualifierKind> qualifierKind = Stringification.qualifierKindFromString(textResult.getResult());
        if (!qualifierKind.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of QualifierKind");
          return Result.failure(error);
        }
        return Result.success(qualifierKind.get());
      }

      /**
       * Deserialize an instance of Qualifier from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Qualifier> tryQualifierFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theType = null;
        DataTypeDefXsd theValueType = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        QualifierKind theKind = null;
        String theValue = null;
        IReference theValueId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "type": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTypeResult = tryStringFrom(currentNode.getValue());
              if (theTypeResult.isError()) {
                theTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("type"));
                return theTypeResult.castTo(Qualifier.class);
              }
              theType = theTypeResult.getResult();
              break;
            }
            case "valueType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeDefXsd> theValueTypeResult = tryDataTypeDefXsdFrom(currentNode.getValue());
              if (theValueTypeResult.isError()) {
                theValueTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueType"));
                return theValueTypeResult.castTo(Qualifier.class);
              }
              theValueType = theValueTypeResult.getResult();
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Qualifier.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Qualifier.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "kind": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends QualifierKind> theKindResult = tryQualifierKindFrom(currentNode.getValue());
              if (theKindResult.isError()) {
                theKindResult.getError()
                  .prependSegment(new Reporting.NameSegment("kind"));
                return theKindResult.castTo(Qualifier.class);
              }
              theKind = theKindResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(Qualifier.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "valueId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theValueIdResult = tryReferenceFrom(currentNode.getValue());
              if (theValueIdResult.isError()) {
                theValueIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueId"));
                return theValueIdResult.castTo(Qualifier.class);
              }
              theValueId = theValueIdResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"type\" is missing");
          return Result.failure(error);
        }

        if (theValueType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"valueType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Qualifier(
          theType,
          theValueType,
          theSemanticId,
          theSupplementalSemanticIds,
          theKind,
          theValue,
          theValueId));
      }

      /**
       * Deserialize an instance of AssetAdministrationShell from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<AssetAdministrationShell> tryAssetAdministrationShellFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theId = null;
        IAssetInformation theAssetInformation = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IAdministrativeInformation theAdministration = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        IReference theDerivedFrom = null;
        List<IReference> theSubmodels = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "id": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdResult = tryStringFrom(currentNode.getValue());
              if (theIdResult.isError()) {
                theIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("id"));
                return theIdResult.castTo(AssetAdministrationShell.class);
              }
              theId = theIdResult.getResult();
              break;
            }
            case "assetInformation": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IAssetInformation> theAssetInformationResult = tryAssetInformationFrom(currentNode.getValue());
              if (theAssetInformationResult.isError()) {
                theAssetInformationResult.getError()
                  .prependSegment(new Reporting.NameSegment("assetInformation"));
                return theAssetInformationResult.castTo(AssetAdministrationShell.class);
              }
              theAssetInformation = theAssetInformationResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(AssetAdministrationShell.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(AssetAdministrationShell.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(AssetAdministrationShell.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(AssetAdministrationShell.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(AssetAdministrationShell.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "administration": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IAdministrativeInformation> theAdministrationResult = tryAdministrativeInformationFrom(currentNode.getValue());
              if (theAdministrationResult.isError()) {
                theAdministrationResult.getError()
                  .prependSegment(new Reporting.NameSegment("administration"));
                return theAdministrationResult.castTo(AssetAdministrationShell.class);
              }
              theAdministration = theAdministrationResult.getResult();
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(AssetAdministrationShell.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "derivedFrom": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theDerivedFromResult = tryReferenceFrom(currentNode.getValue());
              if (theDerivedFromResult.isError()) {
                theDerivedFromResult.getError()
                  .prependSegment(new Reporting.NameSegment("derivedFrom"));
                return theDerivedFromResult.castTo(AssetAdministrationShell.class);
              }
              theDerivedFrom = theDerivedFromResult.getResult();
              break;
            }
            case "submodels": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySubmodels = currentNode.getValue();
              if (!arraySubmodels.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySubmodels.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "submodels"));
                return Result.failure(error);
              }
              theSubmodels = new ArrayList<>(
                arraySubmodels.size());
              int indexSubmodels = 0;
              for (JsonNode item : arraySubmodels) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodels));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "submodels"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodels));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "submodels"));
                  return parsedItemResult.castTo(AssetAdministrationShell.class);
                }
                theSubmodels.add(
                  parsedItemResult.getResult());
                indexSubmodels++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theId == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"id\" is missing");
          return Result.failure(error);
        }

        if (theAssetInformation == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"assetInformation\" is missing");
          return Result.failure(error);
        }

        return Result.success(new AssetAdministrationShell(
          theId,
          theAssetInformation,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theAdministration,
          theEmbeddedDataSpecifications,
          theDerivedFrom,
          theSubmodels));
      }

      /**
       * Deserialize an instance of AssetInformation from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<AssetInformation> tryAssetInformationFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        AssetKind theAssetKind = null;
        String theGlobalAssetId = null;
        List<ISpecificAssetId> theSpecificAssetIds = null;
        String theAssetType = null;
        IResource theDefaultThumbnail = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "assetKind": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends AssetKind> theAssetKindResult = tryAssetKindFrom(currentNode.getValue());
              if (theAssetKindResult.isError()) {
                theAssetKindResult.getError()
                  .prependSegment(new Reporting.NameSegment("assetKind"));
                return theAssetKindResult.castTo(AssetInformation.class);
              }
              theAssetKind = theAssetKindResult.getResult();
              break;
            }
            case "globalAssetId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theGlobalAssetIdResult = tryStringFrom(currentNode.getValue());
              if (theGlobalAssetIdResult.isError()) {
                theGlobalAssetIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("globalAssetId"));
                return theGlobalAssetIdResult.castTo(AssetInformation.class);
              }
              theGlobalAssetId = theGlobalAssetIdResult.getResult();
              break;
            }
            case "specificAssetIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySpecificAssetIds = currentNode.getValue();
              if (!arraySpecificAssetIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySpecificAssetIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "specificAssetIds"));
                return Result.failure(error);
              }
              theSpecificAssetIds = new ArrayList<>(
                arraySpecificAssetIds.size());
              int indexSpecificAssetIds = 0;
              for (JsonNode item : arraySpecificAssetIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSpecificAssetIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "specificAssetIds"));
                  return Result.failure(error);
                }
                final Result<? extends ISpecificAssetId> parsedItemResult =
                  trySpecificAssetIdFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSpecificAssetIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "specificAssetIds"));
                  return parsedItemResult.castTo(AssetInformation.class);
                }
                theSpecificAssetIds.add(
                  parsedItemResult.getResult());
                indexSpecificAssetIds++;
              }
              break;
            }
            case "assetType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theAssetTypeResult = tryStringFrom(currentNode.getValue());
              if (theAssetTypeResult.isError()) {
                theAssetTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("assetType"));
                return theAssetTypeResult.castTo(AssetInformation.class);
              }
              theAssetType = theAssetTypeResult.getResult();
              break;
            }
            case "defaultThumbnail": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IResource> theDefaultThumbnailResult = tryResourceFrom(currentNode.getValue());
              if (theDefaultThumbnailResult.isError()) {
                theDefaultThumbnailResult.getError()
                  .prependSegment(new Reporting.NameSegment("defaultThumbnail"));
                return theDefaultThumbnailResult.castTo(AssetInformation.class);
              }
              theDefaultThumbnail = theDefaultThumbnailResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theAssetKind == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"assetKind\" is missing");
          return Result.failure(error);
        }

        return Result.success(new AssetInformation(
          theAssetKind,
          theGlobalAssetId,
          theSpecificAssetIds,
          theAssetType,
          theDefaultThumbnail));
      }

      /**
       * Deserialize an instance of Resource from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Resource> tryResourceFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String thePath = null;
        String theContentType = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "path": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> thePathResult = tryStringFrom(currentNode.getValue());
              if (thePathResult.isError()) {
                thePathResult.getError()
                  .prependSegment(new Reporting.NameSegment("path"));
                return thePathResult.castTo(Resource.class);
              }
              thePath = thePathResult.getResult();
              break;
            }
            case "contentType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theContentTypeResult = tryStringFrom(currentNode.getValue());
              if (theContentTypeResult.isError()) {
                theContentTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("contentType"));
                return theContentTypeResult.castTo(Resource.class);
              }
              theContentType = theContentTypeResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (thePath == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"path\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Resource(
          thePath,
          theContentType));
      }

      /**
       * Deserialize the enumeration AssetKind from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<AssetKind> tryAssetKindFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(AssetKind.class);
        }
        final Optional<AssetKind> assetKind = Stringification.assetKindFromString(textResult.getResult());
        if (!assetKind.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of AssetKind");
          return Result.failure(error);
        }
        return Result.success(assetKind.get());
      }

      /**
       * Deserialize an instance of SpecificAssetId from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<SpecificAssetId> trySpecificAssetIdFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theName = null;
        String theValue = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        IReference theExternalSubjectId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "name": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theNameResult = tryStringFrom(currentNode.getValue());
              if (theNameResult.isError()) {
                theNameResult.getError()
                  .prependSegment(new Reporting.NameSegment("name"));
                return theNameResult.castTo(SpecificAssetId.class);
              }
              theName = theNameResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(SpecificAssetId.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(SpecificAssetId.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(SpecificAssetId.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "externalSubjectId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theExternalSubjectIdResult = tryReferenceFrom(currentNode.getValue());
              if (theExternalSubjectIdResult.isError()) {
                theExternalSubjectIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("externalSubjectId"));
                return theExternalSubjectIdResult.castTo(SpecificAssetId.class);
              }
              theExternalSubjectId = theExternalSubjectIdResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theName == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"name\" is missing");
          return Result.failure(error);
        }

        if (theValue == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"value\" is missing");
          return Result.failure(error);
        }

        return Result.success(new SpecificAssetId(
          theName,
          theValue,
          theSemanticId,
          theSupplementalSemanticIds,
          theExternalSubjectId));
      }

      /**
       * Deserialize an instance of Submodel from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Submodel> trySubmodelFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theId = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IAdministrativeInformation theAdministration = null;
        ModellingKind theKind = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<ISubmodelElement> theSubmodelElements = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "id": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdResult = tryStringFrom(currentNode.getValue());
              if (theIdResult.isError()) {
                theIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("id"));
                return theIdResult.castTo(Submodel.class);
              }
              theId = theIdResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Submodel.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Submodel.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "administration": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IAdministrativeInformation> theAdministrationResult = tryAdministrativeInformationFrom(currentNode.getValue());
              if (theAdministrationResult.isError()) {
                theAdministrationResult.getError()
                  .prependSegment(new Reporting.NameSegment("administration"));
                return theAdministrationResult.castTo(Submodel.class);
              }
              theAdministration = theAdministrationResult.getResult();
              break;
            }
            case "kind": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends ModellingKind> theKindResult = tryModellingKindFrom(currentNode.getValue());
              if (theKindResult.isError()) {
                theKindResult.getError()
                  .prependSegment(new Reporting.NameSegment("kind"));
                return theKindResult.castTo(Submodel.class);
              }
              theKind = theKindResult.getResult();
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Submodel.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "submodelElements": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySubmodelElements = currentNode.getValue();
              if (!arraySubmodelElements.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySubmodelElements.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "submodelElements"));
                return Result.failure(error);
              }
              theSubmodelElements = new ArrayList<>(
                arraySubmodelElements.size());
              int indexSubmodelElements = 0;
              for (JsonNode item : arraySubmodelElements) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodelElements));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "submodelElements"));
                  return Result.failure(error);
                }
                final Result<? extends ISubmodelElement> parsedItemResult =
                  tryISubmodelElementFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodelElements));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "submodelElements"));
                  return parsedItemResult.castTo(Submodel.class);
                }
                theSubmodelElements.add(
                  parsedItemResult.getResult());
                indexSubmodelElements++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theId == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"id\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Submodel(
          theId,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theAdministration,
          theKind,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theSubmodelElements));
      }

      /**
       * Deserialize an instance of ISubmodelElement by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends ISubmodelElement> tryISubmodelElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(ISubmodelElement.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  case "Blob": {
            return tryBlobFrom(node);
        }  case "Capability": {
            return tryCapabilityFrom(node);
        }  case "Entity": {
            return tryEntityFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Operation": {
            return tryOperationFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  case "SubmodelElementCollection": {
            return trySubmodelElementCollectionFrom(node);
        }  case "SubmodelElementList": {
            return trySubmodelElementListFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for ISubmodelElement: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of IRelationshipElement by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IRelationshipElement> tryIRelationshipElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IRelationshipElement.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "AnnotatedRelationshipElement": {
            return tryAnnotatedRelationshipElementFrom(node);
        }  case "RelationshipElement": {
            return tryRelationshipElementFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IRelationshipElement: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of RelationshipElement from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<RelationshipElement> tryRelationshipElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        IReference theFirst = null;
        IReference theSecond = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "first": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theFirstResult = tryReferenceFrom(currentNode.getValue());
              if (theFirstResult.isError()) {
                theFirstResult.getError()
                  .prependSegment(new Reporting.NameSegment("first"));
                return theFirstResult.castTo(RelationshipElement.class);
              }
              theFirst = theFirstResult.getResult();
              break;
            }
            case "second": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSecondResult = tryReferenceFrom(currentNode.getValue());
              if (theSecondResult.isError()) {
                theSecondResult.getError()
                  .prependSegment(new Reporting.NameSegment("second"));
                return theSecondResult.castTo(RelationshipElement.class);
              }
              theSecond = theSecondResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(RelationshipElement.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(RelationshipElement.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(RelationshipElement.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(RelationshipElement.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theFirst == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"first\" is missing");
          return Result.failure(error);
        }

        if (theSecond == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"second\" is missing");
          return Result.failure(error);
        }

        return Result.success(new RelationshipElement(
          theFirst,
          theSecond,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications));
      }

      /**
       * Deserialize the enumeration AasSubmodelElements from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<AasSubmodelElements> tryAasSubmodelElementsFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(AasSubmodelElements.class);
        }
        final Optional<AasSubmodelElements> aasSubmodelElements = Stringification.aasSubmodelElementsFromString(textResult.getResult());
        if (!aasSubmodelElements.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of AasSubmodelElements");
          return Result.failure(error);
        }
        return Result.success(aasSubmodelElements.get());
      }

      /**
       * Deserialize an instance of SubmodelElementList from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<SubmodelElementList> trySubmodelElementListFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        AasSubmodelElements theTypeValueListElement = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        Boolean theOrderRelevant = null;
        IReference theSemanticIdListElement = null;
        DataTypeDefXsd theValueTypeListElement = null;
        List<ISubmodelElement> theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "typeValueListElement": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends AasSubmodelElements> theTypeValueListElementResult = tryAasSubmodelElementsFrom(currentNode.getValue());
              if (theTypeValueListElementResult.isError()) {
                theTypeValueListElementResult.getError()
                  .prependSegment(new Reporting.NameSegment("typeValueListElement"));
                return theTypeValueListElementResult.castTo(SubmodelElementList.class);
              }
              theTypeValueListElement = theTypeValueListElementResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(SubmodelElementList.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(SubmodelElementList.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(SubmodelElementList.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "orderRelevant": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Boolean> theOrderRelevantResult = tryBooleanFrom(currentNode.getValue());
              if (theOrderRelevantResult.isError()) {
                theOrderRelevantResult.getError()
                  .prependSegment(new Reporting.NameSegment("orderRelevant"));
                return theOrderRelevantResult.castTo(SubmodelElementList.class);
              }
              theOrderRelevant = theOrderRelevantResult.getResult();
              break;
            }
            case "semanticIdListElement": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdListElementResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdListElementResult.isError()) {
                theSemanticIdListElementResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticIdListElement"));
                return theSemanticIdListElementResult.castTo(SubmodelElementList.class);
              }
              theSemanticIdListElement = theSemanticIdListElementResult.getResult();
              break;
            }
            case "valueTypeListElement": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeDefXsd> theValueTypeListElementResult = tryDataTypeDefXsdFrom(currentNode.getValue());
              if (theValueTypeListElementResult.isError()) {
                theValueTypeListElementResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueTypeListElement"));
                return theValueTypeListElementResult.castTo(SubmodelElementList.class);
              }
              theValueTypeListElement = theValueTypeListElementResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayValue = currentNode.getValue();
              if (!arrayValue.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayValue.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "value"));
                return Result.failure(error);
              }
              theValue = new ArrayList<>(
                arrayValue.size());
              int indexValue = 0;
              for (JsonNode item : arrayValue) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return Result.failure(error);
                }
                final Result<? extends ISubmodelElement> parsedItemResult =
                  tryISubmodelElementFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return parsedItemResult.castTo(SubmodelElementList.class);
                }
                theValue.add(
                  parsedItemResult.getResult());
                indexValue++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theTypeValueListElement == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"typeValueListElement\" is missing");
          return Result.failure(error);
        }

        return Result.success(new SubmodelElementList(
          theTypeValueListElement,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theOrderRelevant,
          theSemanticIdListElement,
          theValueTypeListElement,
          theValue));
      }

      /**
       * Deserialize an instance of SubmodelElementCollection from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<SubmodelElementCollection> trySubmodelElementCollectionFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<ISubmodelElement> theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(SubmodelElementCollection.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(SubmodelElementCollection.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(SubmodelElementCollection.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayValue = currentNode.getValue();
              if (!arrayValue.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayValue.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "value"));
                return Result.failure(error);
              }
              theValue = new ArrayList<>(
                arrayValue.size());
              int indexValue = 0;
              for (JsonNode item : arrayValue) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return Result.failure(error);
                }
                final Result<? extends ISubmodelElement> parsedItemResult =
                  tryISubmodelElementFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return parsedItemResult.castTo(SubmodelElementCollection.class);
                }
                theValue.add(
                  parsedItemResult.getResult());
                indexValue++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new SubmodelElementCollection(
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue));
      }

      /**
       * Deserialize an instance of IDataElement by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IDataElement> tryIDataElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IDataElement.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "Blob": {
            return tryBlobFrom(node);
        }  case "File": {
            return tryFileFrom(node);
        }  case "MultiLanguageProperty": {
            return tryMultiLanguagePropertyFrom(node);
        }  case "Property": {
            return tryPropertyFrom(node);
        }  case "Range": {
            return tryRangeFrom(node);
        }  case "ReferenceElement": {
            return tryReferenceElementFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IDataElement: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of Property from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Property> tryPropertyFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        DataTypeDefXsd theValueType = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        String theValue = null;
        IReference theValueId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "valueType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeDefXsd> theValueTypeResult = tryDataTypeDefXsdFrom(currentNode.getValue());
              if (theValueTypeResult.isError()) {
                theValueTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueType"));
                return theValueTypeResult.castTo(Property.class);
              }
              theValueType = theValueTypeResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Property.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Property.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Property.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Property.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Property.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Property.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Property.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Property.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Property.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(Property.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "valueId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theValueIdResult = tryReferenceFrom(currentNode.getValue());
              if (theValueIdResult.isError()) {
                theValueIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueId"));
                return theValueIdResult.castTo(Property.class);
              }
              theValueId = theValueIdResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theValueType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"valueType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Property(
          theValueType,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue,
          theValueId));
      }

      /**
       * Deserialize an instance of MultiLanguageProperty from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<MultiLanguageProperty> tryMultiLanguagePropertyFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<ILangStringTextType> theValue = null;
        IReference theValueId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(MultiLanguageProperty.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(MultiLanguageProperty.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(MultiLanguageProperty.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayValue = currentNode.getValue();
              if (!arrayValue.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayValue.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "value"));
                return Result.failure(error);
              }
              theValue = new ArrayList<>(
                arrayValue.size());
              int indexValue = 0;
              for (JsonNode item : arrayValue) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexValue));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "value"));
                  return parsedItemResult.castTo(MultiLanguageProperty.class);
                }
                theValue.add(
                  parsedItemResult.getResult());
                indexValue++;
              }
              break;
            }
            case "valueId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theValueIdResult = tryReferenceFrom(currentNode.getValue());
              if (theValueIdResult.isError()) {
                theValueIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueId"));
                return theValueIdResult.castTo(MultiLanguageProperty.class);
              }
              theValueId = theValueIdResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new MultiLanguageProperty(
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue,
          theValueId));
      }

      /**
       * Deserialize an instance of Range from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Range> tryRangeFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        DataTypeDefXsd theValueType = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        String theMin = null;
        String theMax = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "valueType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeDefXsd> theValueTypeResult = tryDataTypeDefXsdFrom(currentNode.getValue());
              if (theValueTypeResult.isError()) {
                theValueTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueType"));
                return theValueTypeResult.castTo(Range.class);
              }
              theValueType = theValueTypeResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Range.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Range.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Range.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Range.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Range.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Range.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Range.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Range.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Range.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "min": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theMinResult = tryStringFrom(currentNode.getValue());
              if (theMinResult.isError()) {
                theMinResult.getError()
                  .prependSegment(new Reporting.NameSegment("min"));
                return theMinResult.castTo(Range.class);
              }
              theMin = theMinResult.getResult();
              break;
            }
            case "max": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theMaxResult = tryStringFrom(currentNode.getValue());
              if (theMaxResult.isError()) {
                theMaxResult.getError()
                  .prependSegment(new Reporting.NameSegment("max"));
                return theMaxResult.castTo(Range.class);
              }
              theMax = theMaxResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theValueType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"valueType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Range(
          theValueType,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theMin,
          theMax));
      }

      /**
       * Deserialize an instance of ReferenceElement from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<ReferenceElement> tryReferenceElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        IReference theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(ReferenceElement.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(ReferenceElement.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(ReferenceElement.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(ReferenceElement.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theValueResult = tryReferenceFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(ReferenceElement.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new ReferenceElement(
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue));
      }

      /**
       * Deserialize an instance of Blob from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Blob> tryBlobFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theContentType = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        byte[] theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "contentType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theContentTypeResult = tryStringFrom(currentNode.getValue());
              if (theContentTypeResult.isError()) {
                theContentTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("contentType"));
                return theContentTypeResult.castTo(Blob.class);
              }
              theContentType = theContentTypeResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Blob.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Blob.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Blob.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Blob.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends byte[]> theValueResult = tryBytesFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(Blob.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theContentType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"contentType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Blob(
          theContentType,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue));
      }

      /**
       * Deserialize an instance of File from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<File> tryFileFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theContentType = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        String theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "contentType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theContentTypeResult = tryStringFrom(currentNode.getValue());
              if (theContentTypeResult.isError()) {
                theContentTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("contentType"));
                return theContentTypeResult.castTo(File.class);
              }
              theContentType = theContentTypeResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(File.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(File.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(File.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(File.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(File.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(File.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(File.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(File.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(File.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(File.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theContentType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"contentType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new File(
          theContentType,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theValue));
      }

      /**
       * Deserialize an instance of AnnotatedRelationshipElement from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<AnnotatedRelationshipElement> tryAnnotatedRelationshipElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        IReference theFirst = null;
        IReference theSecond = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<IDataElement> theAnnotations = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "first": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theFirstResult = tryReferenceFrom(currentNode.getValue());
              if (theFirstResult.isError()) {
                theFirstResult.getError()
                  .prependSegment(new Reporting.NameSegment("first"));
                return theFirstResult.castTo(AnnotatedRelationshipElement.class);
              }
              theFirst = theFirstResult.getResult();
              break;
            }
            case "second": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSecondResult = tryReferenceFrom(currentNode.getValue());
              if (theSecondResult.isError()) {
                theSecondResult.getError()
                  .prependSegment(new Reporting.NameSegment("second"));
                return theSecondResult.castTo(AnnotatedRelationshipElement.class);
              }
              theSecond = theSecondResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(AnnotatedRelationshipElement.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(AnnotatedRelationshipElement.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(AnnotatedRelationshipElement.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "annotations": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayAnnotations = currentNode.getValue();
              if (!arrayAnnotations.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayAnnotations.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "annotations"));
                return Result.failure(error);
              }
              theAnnotations = new ArrayList<>(
                arrayAnnotations.size());
              int indexAnnotations = 0;
              for (JsonNode item : arrayAnnotations) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexAnnotations));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "annotations"));
                  return Result.failure(error);
                }
                final Result<? extends IDataElement> parsedItemResult =
                  tryIDataElementFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexAnnotations));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "annotations"));
                  return parsedItemResult.castTo(AnnotatedRelationshipElement.class);
                }
                theAnnotations.add(
                  parsedItemResult.getResult());
                indexAnnotations++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theFirst == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"first\" is missing");
          return Result.failure(error);
        }

        if (theSecond == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"second\" is missing");
          return Result.failure(error);
        }

        return Result.success(new AnnotatedRelationshipElement(
          theFirst,
          theSecond,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theAnnotations));
      }

      /**
       * Deserialize an instance of Entity from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Entity> tryEntityFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        EntityType theEntityType = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<ISubmodelElement> theStatements = null;
        String theGlobalAssetId = null;
        List<ISpecificAssetId> theSpecificAssetIds = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "entityType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends EntityType> theEntityTypeResult = tryEntityTypeFrom(currentNode.getValue());
              if (theEntityTypeResult.isError()) {
                theEntityTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("entityType"));
                return theEntityTypeResult.castTo(Entity.class);
              }
              theEntityType = theEntityTypeResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Entity.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Entity.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Entity.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "statements": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayStatements = currentNode.getValue();
              if (!arrayStatements.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayStatements.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "statements"));
                return Result.failure(error);
              }
              theStatements = new ArrayList<>(
                arrayStatements.size());
              int indexStatements = 0;
              for (JsonNode item : arrayStatements) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexStatements));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "statements"));
                  return Result.failure(error);
                }
                final Result<? extends ISubmodelElement> parsedItemResult =
                  tryISubmodelElementFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexStatements));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "statements"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theStatements.add(
                  parsedItemResult.getResult());
                indexStatements++;
              }
              break;
            }
            case "globalAssetId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theGlobalAssetIdResult = tryStringFrom(currentNode.getValue());
              if (theGlobalAssetIdResult.isError()) {
                theGlobalAssetIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("globalAssetId"));
                return theGlobalAssetIdResult.castTo(Entity.class);
              }
              theGlobalAssetId = theGlobalAssetIdResult.getResult();
              break;
            }
            case "specificAssetIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySpecificAssetIds = currentNode.getValue();
              if (!arraySpecificAssetIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySpecificAssetIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "specificAssetIds"));
                return Result.failure(error);
              }
              theSpecificAssetIds = new ArrayList<>(
                arraySpecificAssetIds.size());
              int indexSpecificAssetIds = 0;
              for (JsonNode item : arraySpecificAssetIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSpecificAssetIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "specificAssetIds"));
                  return Result.failure(error);
                }
                final Result<? extends ISpecificAssetId> parsedItemResult =
                  trySpecificAssetIdFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSpecificAssetIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "specificAssetIds"));
                  return parsedItemResult.castTo(Entity.class);
                }
                theSpecificAssetIds.add(
                  parsedItemResult.getResult());
                indexSpecificAssetIds++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theEntityType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"entityType\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Entity(
          theEntityType,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theStatements,
          theGlobalAssetId,
          theSpecificAssetIds));
      }

      /**
       * Deserialize the enumeration EntityType from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<EntityType> tryEntityTypeFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(EntityType.class);
        }
        final Optional<EntityType> entityType = Stringification.entityTypeFromString(textResult.getResult());
        if (!entityType.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of EntityType");
          return Result.failure(error);
        }
        return Result.success(entityType.get());
      }

      /**
       * Deserialize the enumeration Direction from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<Direction> tryDirectionFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(Direction.class);
        }
        final Optional<Direction> direction = Stringification.directionFromString(textResult.getResult());
        if (!direction.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of Direction");
          return Result.failure(error);
        }
        return Result.success(direction.get());
      }

      /**
       * Deserialize the enumeration StateOfEvent from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<StateOfEvent> tryStateOfEventFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(StateOfEvent.class);
        }
        final Optional<StateOfEvent> stateOfEvent = Stringification.stateOfEventFromString(textResult.getResult());
        if (!stateOfEvent.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of StateOfEvent");
          return Result.failure(error);
        }
        return Result.success(stateOfEvent.get());
      }

      /**
       * Deserialize an instance of EventPayload from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<EventPayload> tryEventPayloadFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        IReference theSource = null;
        IReference theObservableReference = null;
        String theTimeStamp = null;
        IReference theSourceSemanticId = null;
        IReference theObservableSemanticId = null;
        String theTopic = null;
        IReference theSubjectId = null;
        byte[] thePayload = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "source": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSourceResult = tryReferenceFrom(currentNode.getValue());
              if (theSourceResult.isError()) {
                theSourceResult.getError()
                  .prependSegment(new Reporting.NameSegment("source"));
                return theSourceResult.castTo(EventPayload.class);
              }
              theSource = theSourceResult.getResult();
              break;
            }
            case "observableReference": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theObservableReferenceResult = tryReferenceFrom(currentNode.getValue());
              if (theObservableReferenceResult.isError()) {
                theObservableReferenceResult.getError()
                  .prependSegment(new Reporting.NameSegment("observableReference"));
                return theObservableReferenceResult.castTo(EventPayload.class);
              }
              theObservableReference = theObservableReferenceResult.getResult();
              break;
            }
            case "timeStamp": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTimeStampResult = tryStringFrom(currentNode.getValue());
              if (theTimeStampResult.isError()) {
                theTimeStampResult.getError()
                  .prependSegment(new Reporting.NameSegment("timeStamp"));
                return theTimeStampResult.castTo(EventPayload.class);
              }
              theTimeStamp = theTimeStampResult.getResult();
              break;
            }
            case "sourceSemanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSourceSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSourceSemanticIdResult.isError()) {
                theSourceSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("sourceSemanticId"));
                return theSourceSemanticIdResult.castTo(EventPayload.class);
              }
              theSourceSemanticId = theSourceSemanticIdResult.getResult();
              break;
            }
            case "observableSemanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theObservableSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theObservableSemanticIdResult.isError()) {
                theObservableSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("observableSemanticId"));
                return theObservableSemanticIdResult.castTo(EventPayload.class);
              }
              theObservableSemanticId = theObservableSemanticIdResult.getResult();
              break;
            }
            case "topic": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTopicResult = tryStringFrom(currentNode.getValue());
              if (theTopicResult.isError()) {
                theTopicResult.getError()
                  .prependSegment(new Reporting.NameSegment("topic"));
                return theTopicResult.castTo(EventPayload.class);
              }
              theTopic = theTopicResult.getResult();
              break;
            }
            case "subjectId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSubjectIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSubjectIdResult.isError()) {
                theSubjectIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("subjectId"));
                return theSubjectIdResult.castTo(EventPayload.class);
              }
              theSubjectId = theSubjectIdResult.getResult();
              break;
            }
            case "payload": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends byte[]> thePayloadResult = tryBytesFrom(currentNode.getValue());
              if (thePayloadResult.isError()) {
                thePayloadResult.getError()
                  .prependSegment(new Reporting.NameSegment("payload"));
                return thePayloadResult.castTo(EventPayload.class);
              }
              thePayload = thePayloadResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theSource == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"source\" is missing");
          return Result.failure(error);
        }

        if (theObservableReference == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"observableReference\" is missing");
          return Result.failure(error);
        }

        if (theTimeStamp == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"timeStamp\" is missing");
          return Result.failure(error);
        }

        return Result.success(new EventPayload(
          theSource,
          theObservableReference,
          theTimeStamp,
          theSourceSemanticId,
          theObservableSemanticId,
          theTopic,
          theSubjectId,
          thePayload));
      }

      /**
       * Deserialize an instance of IEventElement by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IEventElement> tryIEventElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IEventElement.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "BasicEventElement": {
            return tryBasicEventElementFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IEventElement: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of BasicEventElement from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<BasicEventElement> tryBasicEventElementFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        IReference theObserved = null;
        Direction theDirection = null;
        StateOfEvent theState = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        String theMessageTopic = null;
        IReference theMessageBroker = null;
        String theLastUpdate = null;
        String theMinInterval = null;
        String theMaxInterval = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "observed": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theObservedResult = tryReferenceFrom(currentNode.getValue());
              if (theObservedResult.isError()) {
                theObservedResult.getError()
                  .prependSegment(new Reporting.NameSegment("observed"));
                return theObservedResult.castTo(BasicEventElement.class);
              }
              theObserved = theObservedResult.getResult();
              break;
            }
            case "direction": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Direction> theDirectionResult = tryDirectionFrom(currentNode.getValue());
              if (theDirectionResult.isError()) {
                theDirectionResult.getError()
                  .prependSegment(new Reporting.NameSegment("direction"));
                return theDirectionResult.castTo(BasicEventElement.class);
              }
              theDirection = theDirectionResult.getResult();
              break;
            }
            case "state": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends StateOfEvent> theStateResult = tryStateOfEventFrom(currentNode.getValue());
              if (theStateResult.isError()) {
                theStateResult.getError()
                  .prependSegment(new Reporting.NameSegment("state"));
                return theStateResult.castTo(BasicEventElement.class);
              }
              theState = theStateResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(BasicEventElement.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(BasicEventElement.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(BasicEventElement.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(BasicEventElement.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "messageTopic": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theMessageTopicResult = tryStringFrom(currentNode.getValue());
              if (theMessageTopicResult.isError()) {
                theMessageTopicResult.getError()
                  .prependSegment(new Reporting.NameSegment("messageTopic"));
                return theMessageTopicResult.castTo(BasicEventElement.class);
              }
              theMessageTopic = theMessageTopicResult.getResult();
              break;
            }
            case "messageBroker": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theMessageBrokerResult = tryReferenceFrom(currentNode.getValue());
              if (theMessageBrokerResult.isError()) {
                theMessageBrokerResult.getError()
                  .prependSegment(new Reporting.NameSegment("messageBroker"));
                return theMessageBrokerResult.castTo(BasicEventElement.class);
              }
              theMessageBroker = theMessageBrokerResult.getResult();
              break;
            }
            case "lastUpdate": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLastUpdateResult = tryStringFrom(currentNode.getValue());
              if (theLastUpdateResult.isError()) {
                theLastUpdateResult.getError()
                  .prependSegment(new Reporting.NameSegment("lastUpdate"));
                return theLastUpdateResult.castTo(BasicEventElement.class);
              }
              theLastUpdate = theLastUpdateResult.getResult();
              break;
            }
            case "minInterval": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theMinIntervalResult = tryStringFrom(currentNode.getValue());
              if (theMinIntervalResult.isError()) {
                theMinIntervalResult.getError()
                  .prependSegment(new Reporting.NameSegment("minInterval"));
                return theMinIntervalResult.castTo(BasicEventElement.class);
              }
              theMinInterval = theMinIntervalResult.getResult();
              break;
            }
            case "maxInterval": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theMaxIntervalResult = tryStringFrom(currentNode.getValue());
              if (theMaxIntervalResult.isError()) {
                theMaxIntervalResult.getError()
                  .prependSegment(new Reporting.NameSegment("maxInterval"));
                return theMaxIntervalResult.castTo(BasicEventElement.class);
              }
              theMaxInterval = theMaxIntervalResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theObserved == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"observed\" is missing");
          return Result.failure(error);
        }

        if (theDirection == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"direction\" is missing");
          return Result.failure(error);
        }

        if (theState == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"state\" is missing");
          return Result.failure(error);
        }

        return Result.success(new BasicEventElement(
          theObserved,
          theDirection,
          theState,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theMessageTopic,
          theMessageBroker,
          theLastUpdate,
          theMinInterval,
          theMaxInterval));
      }

      /**
       * Deserialize an instance of Operation from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Operation> tryOperationFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<IOperationVariable> theInputVariables = null;
        List<IOperationVariable> theOutputVariables = null;
        List<IOperationVariable> theInoutputVariables = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Operation.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Operation.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Operation.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "inputVariables": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayInputVariables = currentNode.getValue();
              if (!arrayInputVariables.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayInputVariables.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "inputVariables"));
                return Result.failure(error);
              }
              theInputVariables = new ArrayList<>(
                arrayInputVariables.size());
              int indexInputVariables = 0;
              for (JsonNode item : arrayInputVariables) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexInputVariables));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "inputVariables"));
                  return Result.failure(error);
                }
                final Result<? extends IOperationVariable> parsedItemResult =
                  tryOperationVariableFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexInputVariables));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "inputVariables"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theInputVariables.add(
                  parsedItemResult.getResult());
                indexInputVariables++;
              }
              break;
            }
            case "outputVariables": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayOutputVariables = currentNode.getValue();
              if (!arrayOutputVariables.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayOutputVariables.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "outputVariables"));
                return Result.failure(error);
              }
              theOutputVariables = new ArrayList<>(
                arrayOutputVariables.size());
              int indexOutputVariables = 0;
              for (JsonNode item : arrayOutputVariables) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexOutputVariables));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "outputVariables"));
                  return Result.failure(error);
                }
                final Result<? extends IOperationVariable> parsedItemResult =
                  tryOperationVariableFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexOutputVariables));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "outputVariables"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theOutputVariables.add(
                  parsedItemResult.getResult());
                indexOutputVariables++;
              }
              break;
            }
            case "inoutputVariables": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayInoutputVariables = currentNode.getValue();
              if (!arrayInoutputVariables.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayInoutputVariables.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "inoutputVariables"));
                return Result.failure(error);
              }
              theInoutputVariables = new ArrayList<>(
                arrayInoutputVariables.size());
              int indexInoutputVariables = 0;
              for (JsonNode item : arrayInoutputVariables) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexInoutputVariables));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "inoutputVariables"));
                  return Result.failure(error);
                }
                final Result<? extends IOperationVariable> parsedItemResult =
                  tryOperationVariableFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexInoutputVariables));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "inoutputVariables"));
                  return parsedItemResult.castTo(Operation.class);
                }
                theInoutputVariables.add(
                  parsedItemResult.getResult());
                indexInoutputVariables++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new Operation(
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications,
          theInputVariables,
          theOutputVariables,
          theInoutputVariables));
      }

      /**
       * Deserialize an instance of OperationVariable from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<OperationVariable> tryOperationVariableFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        ISubmodelElement theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends ISubmodelElement> theValueResult = tryISubmodelElementFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(OperationVariable.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theValue == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"value\" is missing");
          return Result.failure(error);
        }

        return Result.success(new OperationVariable(
          theValue));
      }

      /**
       * Deserialize an instance of Capability from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Capability> tryCapabilityFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IReference theSemanticId = null;
        List<IReference> theSupplementalSemanticIds = null;
        List<IQualifier> theQualifiers = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(Capability.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(Capability.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "semanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theSemanticIdResult.isError()) {
                theSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("semanticId"));
                return theSemanticIdResult.castTo(Capability.class);
              }
              theSemanticId = theSemanticIdResult.getResult();
              break;
            }
            case "supplementalSemanticIds": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySupplementalSemanticIds = currentNode.getValue();
              if (!arraySupplementalSemanticIds.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySupplementalSemanticIds.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "supplementalSemanticIds"));
                return Result.failure(error);
              }
              theSupplementalSemanticIds = new ArrayList<>(
                arraySupplementalSemanticIds.size());
              int indexSupplementalSemanticIds = 0;
              for (JsonNode item : arraySupplementalSemanticIds) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSupplementalSemanticIds));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "supplementalSemanticIds"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theSupplementalSemanticIds.add(
                  parsedItemResult.getResult());
                indexSupplementalSemanticIds++;
              }
              break;
            }
            case "qualifiers": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayQualifiers = currentNode.getValue();
              if (!arrayQualifiers.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayQualifiers.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "qualifiers"));
                return Result.failure(error);
              }
              theQualifiers = new ArrayList<>(
                arrayQualifiers.size());
              int indexQualifiers = 0;
              for (JsonNode item : arrayQualifiers) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return Result.failure(error);
                }
                final Result<? extends IQualifier> parsedItemResult =
                  tryQualifierFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexQualifiers));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "qualifiers"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theQualifiers.add(
                  parsedItemResult.getResult());
                indexQualifiers++;
              }
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(Capability.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new Capability(
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theSemanticId,
          theSupplementalSemanticIds,
          theQualifiers,
          theEmbeddedDataSpecifications));
      }

      /**
       * Deserialize an instance of ConceptDescription from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<ConceptDescription> tryConceptDescriptionFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theId = null;
        List<IExtension> theExtensions = null;
        String theCategory = null;
        String theIdShort = null;
        List<ILangStringNameType> theDisplayName = null;
        List<ILangStringTextType> theDescription = null;
        IAdministrativeInformation theAdministration = null;
        List<IEmbeddedDataSpecification> theEmbeddedDataSpecifications = null;
        List<IReference> theIsCaseOf = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "id": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdResult = tryStringFrom(currentNode.getValue());
              if (theIdResult.isError()) {
                theIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("id"));
                return theIdResult.castTo(ConceptDescription.class);
              }
              theId = theIdResult.getResult();
              break;
            }
            case "extensions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayExtensions = currentNode.getValue();
              if (!arrayExtensions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayExtensions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "extensions"));
                return Result.failure(error);
              }
              theExtensions = new ArrayList<>(
                arrayExtensions.size());
              int indexExtensions = 0;
              for (JsonNode item : arrayExtensions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return Result.failure(error);
                }
                final Result<? extends IExtension> parsedItemResult =
                  tryExtensionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexExtensions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "extensions"));
                  return parsedItemResult.castTo(ConceptDescription.class);
                }
                theExtensions.add(
                  parsedItemResult.getResult());
                indexExtensions++;
              }
              break;
            }
            case "category": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theCategoryResult = tryStringFrom(currentNode.getValue());
              if (theCategoryResult.isError()) {
                theCategoryResult.getError()
                  .prependSegment(new Reporting.NameSegment("category"));
                return theCategoryResult.castTo(ConceptDescription.class);
              }
              theCategory = theCategoryResult.getResult();
              break;
            }
            case "idShort": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theIdShortResult = tryStringFrom(currentNode.getValue());
              if (theIdShortResult.isError()) {
                theIdShortResult.getError()
                  .prependSegment(new Reporting.NameSegment("idShort"));
                return theIdShortResult.castTo(ConceptDescription.class);
              }
              theIdShort = theIdShortResult.getResult();
              break;
            }
            case "displayName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDisplayName = currentNode.getValue();
              if (!arrayDisplayName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDisplayName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "displayName"));
                return Result.failure(error);
              }
              theDisplayName = new ArrayList<>(
                arrayDisplayName.size());
              int indexDisplayName = 0;
              for (JsonNode item : arrayDisplayName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringNameType> parsedItemResult =
                  tryLangStringNameTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDisplayName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "displayName"));
                  return parsedItemResult.castTo(ConceptDescription.class);
                }
                theDisplayName.add(
                  parsedItemResult.getResult());
                indexDisplayName++;
              }
              break;
            }
            case "description": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDescription = currentNode.getValue();
              if (!arrayDescription.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDescription.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "description"));
                return Result.failure(error);
              }
              theDescription = new ArrayList<>(
                arrayDescription.size());
              int indexDescription = 0;
              for (JsonNode item : arrayDescription) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringTextType> parsedItemResult =
                  tryLangStringTextTypeFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDescription));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "description"));
                  return parsedItemResult.castTo(ConceptDescription.class);
                }
                theDescription.add(
                  parsedItemResult.getResult());
                indexDescription++;
              }
              break;
            }
            case "administration": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IAdministrativeInformation> theAdministrationResult = tryAdministrativeInformationFrom(currentNode.getValue());
              if (theAdministrationResult.isError()) {
                theAdministrationResult.getError()
                  .prependSegment(new Reporting.NameSegment("administration"));
                return theAdministrationResult.castTo(ConceptDescription.class);
              }
              theAdministration = theAdministrationResult.getResult();
              break;
            }
            case "embeddedDataSpecifications": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayEmbeddedDataSpecifications = currentNode.getValue();
              if (!arrayEmbeddedDataSpecifications.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayEmbeddedDataSpecifications.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "embeddedDataSpecifications"));
                return Result.failure(error);
              }
              theEmbeddedDataSpecifications = new ArrayList<>(
                arrayEmbeddedDataSpecifications.size());
              int indexEmbeddedDataSpecifications = 0;
              for (JsonNode item : arrayEmbeddedDataSpecifications) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return Result.failure(error);
                }
                final Result<? extends IEmbeddedDataSpecification> parsedItemResult =
                  tryEmbeddedDataSpecificationFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexEmbeddedDataSpecifications));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "embeddedDataSpecifications"));
                  return parsedItemResult.castTo(ConceptDescription.class);
                }
                theEmbeddedDataSpecifications.add(
                  parsedItemResult.getResult());
                indexEmbeddedDataSpecifications++;
              }
              break;
            }
            case "isCaseOf": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayIsCaseOf = currentNode.getValue();
              if (!arrayIsCaseOf.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayIsCaseOf.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "isCaseOf"));
                return Result.failure(error);
              }
              theIsCaseOf = new ArrayList<>(
                arrayIsCaseOf.size());
              int indexIsCaseOf = 0;
              for (JsonNode item : arrayIsCaseOf) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexIsCaseOf));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "isCaseOf"));
                  return Result.failure(error);
                }
                final Result<? extends IReference> parsedItemResult =
                  tryReferenceFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexIsCaseOf));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "isCaseOf"));
                  return parsedItemResult.castTo(ConceptDescription.class);
                }
                theIsCaseOf.add(
                  parsedItemResult.getResult());
                indexIsCaseOf++;
              }
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theId == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"id\" is missing");
          return Result.failure(error);
        }

        return Result.success(new ConceptDescription(
          theId,
          theExtensions,
          theCategory,
          theIdShort,
          theDisplayName,
          theDescription,
          theAdministration,
          theEmbeddedDataSpecifications,
          theIsCaseOf));
      }

      /**
       * Deserialize the enumeration ReferenceTypes from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<ReferenceTypes> tryReferenceTypesFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(ReferenceTypes.class);
        }
        final Optional<ReferenceTypes> referenceTypes = Stringification.referenceTypesFromString(textResult.getResult());
        if (!referenceTypes.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of ReferenceTypes");
          return Result.failure(error);
        }
        return Result.success(referenceTypes.get());
      }

      /**
       * Deserialize an instance of Reference from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Reference> tryReferenceFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        ReferenceTypes theType = null;
        List<IKey> theKeys = null;
        IReference theReferredSemanticId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "type": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends ReferenceTypes> theTypeResult = tryReferenceTypesFrom(currentNode.getValue());
              if (theTypeResult.isError()) {
                theTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("type"));
                return theTypeResult.castTo(Reference.class);
              }
              theType = theTypeResult.getResult();
              break;
            }
            case "keys": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayKeys = currentNode.getValue();
              if (!arrayKeys.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayKeys.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "keys"));
                return Result.failure(error);
              }
              theKeys = new ArrayList<>(
                arrayKeys.size());
              int indexKeys = 0;
              for (JsonNode item : arrayKeys) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexKeys));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "keys"));
                  return Result.failure(error);
                }
                final Result<? extends IKey> parsedItemResult =
                  tryKeyFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexKeys));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "keys"));
                  return parsedItemResult.castTo(Reference.class);
                }
                theKeys.add(
                  parsedItemResult.getResult());
                indexKeys++;
              }
              break;
            }
            case "referredSemanticId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theReferredSemanticIdResult = tryReferenceFrom(currentNode.getValue());
              if (theReferredSemanticIdResult.isError()) {
                theReferredSemanticIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("referredSemanticId"));
                return theReferredSemanticIdResult.castTo(Reference.class);
              }
              theReferredSemanticId = theReferredSemanticIdResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"type\" is missing");
          return Result.failure(error);
        }

        if (theKeys == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"keys\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Reference(
          theType,
          theKeys,
          theReferredSemanticId));
      }

      /**
       * Deserialize an instance of Key from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Key> tryKeyFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        KeyTypes theType = null;
        String theValue = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "type": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends KeyTypes> theTypeResult = tryKeyTypesFrom(currentNode.getValue());
              if (theTypeResult.isError()) {
                theTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("type"));
                return theTypeResult.castTo(Key.class);
              }
              theType = theTypeResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(Key.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theType == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"type\" is missing");
          return Result.failure(error);
        }

        if (theValue == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"value\" is missing");
          return Result.failure(error);
        }

        return Result.success(new Key(
          theType,
          theValue));
      }

      /**
       * Deserialize the enumeration KeyTypes from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<KeyTypes> tryKeyTypesFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(KeyTypes.class);
        }
        final Optional<KeyTypes> keyTypes = Stringification.keyTypesFromString(textResult.getResult());
        if (!keyTypes.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of KeyTypes");
          return Result.failure(error);
        }
        return Result.success(keyTypes.get());
      }

      /**
       * Deserialize the enumeration DataTypeDefXsd from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<DataTypeDefXsd> tryDataTypeDefXsdFrom(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(DataTypeDefXsd.class);
        }
        final Optional<DataTypeDefXsd> dataTypeDefXsd = Stringification.dataTypeDefXsdFromString(textResult.getResult());
        if (!dataTypeDefXsd.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of DataTypeDefXsd");
          return Result.failure(error);
        }
        return Result.success(dataTypeDefXsd.get());
      }

      /**
       * Deserialize an instance of IAbstractLangString by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IAbstractLangString> tryIAbstractLangStringFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IAbstractLangString.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "LangStringDefinitionTypeIec61360": {
            return tryLangStringDefinitionTypeIec61360From(node);
        }  case "LangStringNameType": {
            return tryLangStringNameTypeFrom(node);
        }  case "LangStringPreferredNameTypeIec61360": {
            return tryLangStringPreferredNameTypeIec61360From(node);
        }  case "LangStringShortNameTypeIec61360": {
            return tryLangStringShortNameTypeIec61360From(node);
        }  case "LangStringTextType": {
            return tryLangStringTextTypeFrom(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IAbstractLangString: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of LangStringNameType from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LangStringNameType> tryLangStringNameTypeFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theLanguage = null;
        String theText = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "language": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLanguageResult = tryStringFrom(currentNode.getValue());
              if (theLanguageResult.isError()) {
                theLanguageResult.getError()
                  .prependSegment(new Reporting.NameSegment("language"));
                return theLanguageResult.castTo(LangStringNameType.class);
              }
              theLanguage = theLanguageResult.getResult();
              break;
            }
            case "text": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTextResult = tryStringFrom(currentNode.getValue());
              if (theTextResult.isError()) {
                theTextResult.getError()
                  .prependSegment(new Reporting.NameSegment("text"));
                return theTextResult.castTo(LangStringNameType.class);
              }
              theText = theTextResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theLanguage == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"language\" is missing");
          return Result.failure(error);
        }

        if (theText == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"text\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LangStringNameType(
          theLanguage,
          theText));
      }

      /**
       * Deserialize an instance of LangStringTextType from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LangStringTextType> tryLangStringTextTypeFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theLanguage = null;
        String theText = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "language": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLanguageResult = tryStringFrom(currentNode.getValue());
              if (theLanguageResult.isError()) {
                theLanguageResult.getError()
                  .prependSegment(new Reporting.NameSegment("language"));
                return theLanguageResult.castTo(LangStringTextType.class);
              }
              theLanguage = theLanguageResult.getResult();
              break;
            }
            case "text": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTextResult = tryStringFrom(currentNode.getValue());
              if (theTextResult.isError()) {
                theTextResult.getError()
                  .prependSegment(new Reporting.NameSegment("text"));
                return theTextResult.castTo(LangStringTextType.class);
              }
              theText = theTextResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theLanguage == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"language\" is missing");
          return Result.failure(error);
        }

        if (theText == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"text\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LangStringTextType(
          theLanguage,
          theText));
      }

      /**
       * Deserialize an instance of Environment from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<Environment> tryEnvironmentFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IAssetAdministrationShell> theAssetAdministrationShells = null;
        List<ISubmodel> theSubmodels = null;
        List<IConceptDescription> theConceptDescriptions = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "assetAdministrationShells": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayAssetAdministrationShells = currentNode.getValue();
              if (!arrayAssetAdministrationShells.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayAssetAdministrationShells.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "assetAdministrationShells"));
                return Result.failure(error);
              }
              theAssetAdministrationShells = new ArrayList<>(
                arrayAssetAdministrationShells.size());
              int indexAssetAdministrationShells = 0;
              for (JsonNode item : arrayAssetAdministrationShells) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexAssetAdministrationShells));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "assetAdministrationShells"));
                  return Result.failure(error);
                }
                final Result<? extends IAssetAdministrationShell> parsedItemResult =
                  tryAssetAdministrationShellFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexAssetAdministrationShells));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "assetAdministrationShells"));
                  return parsedItemResult.castTo(Environment.class);
                }
                theAssetAdministrationShells.add(
                  parsedItemResult.getResult());
                indexAssetAdministrationShells++;
              }
              break;
            }
            case "submodels": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arraySubmodels = currentNode.getValue();
              if (!arraySubmodels.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arraySubmodels.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "submodels"));
                return Result.failure(error);
              }
              theSubmodels = new ArrayList<>(
                arraySubmodels.size());
              int indexSubmodels = 0;
              for (JsonNode item : arraySubmodels) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodels));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "submodels"));
                  return Result.failure(error);
                }
                final Result<? extends ISubmodel> parsedItemResult =
                  trySubmodelFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexSubmodels));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "submodels"));
                  return parsedItemResult.castTo(Environment.class);
                }
                theSubmodels.add(
                  parsedItemResult.getResult());
                indexSubmodels++;
              }
              break;
            }
            case "conceptDescriptions": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayConceptDescriptions = currentNode.getValue();
              if (!arrayConceptDescriptions.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayConceptDescriptions.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "conceptDescriptions"));
                return Result.failure(error);
              }
              theConceptDescriptions = new ArrayList<>(
                arrayConceptDescriptions.size());
              int indexConceptDescriptions = 0;
              for (JsonNode item : arrayConceptDescriptions) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexConceptDescriptions));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "conceptDescriptions"));
                  return Result.failure(error);
                }
                final Result<? extends IConceptDescription> parsedItemResult =
                  tryConceptDescriptionFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexConceptDescriptions));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "conceptDescriptions"));
                  return parsedItemResult.castTo(Environment.class);
                }
                theConceptDescriptions.add(
                  parsedItemResult.getResult());
                indexConceptDescriptions++;
              }
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }



        return Result.success(new Environment(
          theAssetAdministrationShells,
          theSubmodels,
          theConceptDescriptions));
      }

      /**
       * Deserialize an instance of IDataSpecificationContent by dispatching
       * based on {@code modelType} property of the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Result<? extends IDataSpecificationContent> tryIDataSpecificationContentFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        final JsonNode modelTypeNode = node.get("modelType");
        if (modelTypeNode == null) {
          final Reporting.Error error = new Reporting.Error(
              "Expected a model type, but none is present");
          return Result.failure(error);
        }
        final Result<String> modelTypeResult = tryStringFrom(modelTypeNode);
        if (modelTypeResult.isError()) {
          return modelTypeResult.castTo(IDataSpecificationContent.class);
        }

        switch (modelTypeResult.getResult())
        {
          case "DataSpecificationIec61360": {
            return tryDataSpecificationIec61360From(node);
        }  default: {
            final Reporting.Error error = new Reporting.Error(
              "Unexpected model type for IDataSpecificationContent: " + modelTypeResult.getResult());
            return Result.failure(error);
          }
        }
      }

      /**
       * Deserialize an instance of EmbeddedDataSpecification from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<EmbeddedDataSpecification> tryEmbeddedDataSpecificationFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        IReference theDataSpecification = null;
        IDataSpecificationContent theDataSpecificationContent = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "dataSpecification": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theDataSpecificationResult = tryReferenceFrom(currentNode.getValue());
              if (theDataSpecificationResult.isError()) {
                theDataSpecificationResult.getError()
                  .prependSegment(new Reporting.NameSegment("dataSpecification"));
                return theDataSpecificationResult.castTo(EmbeddedDataSpecification.class);
              }
              theDataSpecification = theDataSpecificationResult.getResult();
              break;
            }
            case "dataSpecificationContent": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IDataSpecificationContent> theDataSpecificationContentResult = tryIDataSpecificationContentFrom(currentNode.getValue());
              if (theDataSpecificationContentResult.isError()) {
                theDataSpecificationContentResult.getError()
                  .prependSegment(new Reporting.NameSegment("dataSpecificationContent"));
                return theDataSpecificationContentResult.castTo(EmbeddedDataSpecification.class);
              }
              theDataSpecificationContent = theDataSpecificationContentResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theDataSpecification == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"dataSpecification\" is missing");
          return Result.failure(error);
        }

        if (theDataSpecificationContent == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"dataSpecificationContent\" is missing");
          return Result.failure(error);
        }

        return Result.success(new EmbeddedDataSpecification(
          theDataSpecification,
          theDataSpecificationContent));
      }

      /**
       * Deserialize the enumeration DataTypeIec61360 from the {@code node}.
       *
       * @param node JSON node to be parsed
       */
      private static Result<DataTypeIec61360> tryDataTypeIec61360From(JsonNode node) {
        final Result<String> textResult = tryStringFrom(node);
        if (textResult.isError()) {
          return textResult.castTo(DataTypeIec61360.class);
        }
        final Optional<DataTypeIec61360> dataTypeIec61360 = Stringification.dataTypeIec61360FromString(textResult.getResult());
        if (!dataTypeIec61360.isPresent()) {
          final Reporting.Error error = new Reporting.Error("Not a valid JSON representation of DataTypeIec61360");
          return Result.failure(error);
        }
        return Result.success(dataTypeIec61360.get());
      }

      /**
       * Deserialize an instance of LevelType from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LevelType> tryLevelTypeFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        Boolean theMin = null;
        Boolean theNom = null;
        Boolean theTyp = null;
        Boolean theMax = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "min": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Boolean> theMinResult = tryBooleanFrom(currentNode.getValue());
              if (theMinResult.isError()) {
                theMinResult.getError()
                  .prependSegment(new Reporting.NameSegment("min"));
                return theMinResult.castTo(LevelType.class);
              }
              theMin = theMinResult.getResult();
              break;
            }
            case "nom": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Boolean> theNomResult = tryBooleanFrom(currentNode.getValue());
              if (theNomResult.isError()) {
                theNomResult.getError()
                  .prependSegment(new Reporting.NameSegment("nom"));
                return theNomResult.castTo(LevelType.class);
              }
              theNom = theNomResult.getResult();
              break;
            }
            case "typ": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Boolean> theTypResult = tryBooleanFrom(currentNode.getValue());
              if (theTypResult.isError()) {
                theTypResult.getError()
                  .prependSegment(new Reporting.NameSegment("typ"));
                return theTypResult.castTo(LevelType.class);
              }
              theTyp = theTypResult.getResult();
              break;
            }
            case "max": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends Boolean> theMaxResult = tryBooleanFrom(currentNode.getValue());
              if (theMaxResult.isError()) {
                theMaxResult.getError()
                  .prependSegment(new Reporting.NameSegment("max"));
                return theMaxResult.castTo(LevelType.class);
              }
              theMax = theMaxResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theMin == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"min\" is missing");
          return Result.failure(error);
        }

        if (theNom == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"nom\" is missing");
          return Result.failure(error);
        }

        if (theTyp == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"typ\" is missing");
          return Result.failure(error);
        }

        if (theMax == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"max\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LevelType(
          theMin,
          theNom,
          theTyp,
          theMax));
      }

      /**
       * Deserialize an instance of ValueReferencePair from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<ValueReferencePair> tryValueReferencePairFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theValue = null;
        IReference theValueId = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(ValueReferencePair.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "valueId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theValueIdResult = tryReferenceFrom(currentNode.getValue());
              if (theValueIdResult.isError()) {
                theValueIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueId"));
                return theValueIdResult.castTo(ValueReferencePair.class);
              }
              theValueId = theValueIdResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theValue == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"value\" is missing");
          return Result.failure(error);
        }

        if (theValueId == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"valueId\" is missing");
          return Result.failure(error);
        }

        return Result.success(new ValueReferencePair(
          theValue,
          theValueId));
      }

      /**
       * Deserialize an instance of ValueList from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<ValueList> tryValueListFrom(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<IValueReferencePair> theValueReferencePairs = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "valueReferencePairs": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayValueReferencePairs = currentNode.getValue();
              if (!arrayValueReferencePairs.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayValueReferencePairs.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "valueReferencePairs"));
                return Result.failure(error);
              }
              theValueReferencePairs = new ArrayList<>(
                arrayValueReferencePairs.size());
              int indexValueReferencePairs = 0;
              for (JsonNode item : arrayValueReferencePairs) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexValueReferencePairs));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "valueReferencePairs"));
                  return Result.failure(error);
                }
                final Result<? extends IValueReferencePair> parsedItemResult =
                  tryValueReferencePairFrom(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexValueReferencePairs));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "valueReferencePairs"));
                  return parsedItemResult.castTo(ValueList.class);
                }
                theValueReferencePairs.add(
                  parsedItemResult.getResult());
                indexValueReferencePairs++;
              }
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theValueReferencePairs == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"valueReferencePairs\" is missing");
          return Result.failure(error);
        }

        return Result.success(new ValueList(
          theValueReferencePairs));
      }

      /**
       * Deserialize an instance of LangStringPreferredNameTypeIec61360 from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LangStringPreferredNameTypeIec61360> tryLangStringPreferredNameTypeIec61360From(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theLanguage = null;
        String theText = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "language": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLanguageResult = tryStringFrom(currentNode.getValue());
              if (theLanguageResult.isError()) {
                theLanguageResult.getError()
                  .prependSegment(new Reporting.NameSegment("language"));
                return theLanguageResult.castTo(LangStringPreferredNameTypeIec61360.class);
              }
              theLanguage = theLanguageResult.getResult();
              break;
            }
            case "text": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTextResult = tryStringFrom(currentNode.getValue());
              if (theTextResult.isError()) {
                theTextResult.getError()
                  .prependSegment(new Reporting.NameSegment("text"));
                return theTextResult.castTo(LangStringPreferredNameTypeIec61360.class);
              }
              theText = theTextResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theLanguage == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"language\" is missing");
          return Result.failure(error);
        }

        if (theText == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"text\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LangStringPreferredNameTypeIec61360(
          theLanguage,
          theText));
      }

      /**
       * Deserialize an instance of LangStringShortNameTypeIec61360 from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LangStringShortNameTypeIec61360> tryLangStringShortNameTypeIec61360From(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theLanguage = null;
        String theText = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "language": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLanguageResult = tryStringFrom(currentNode.getValue());
              if (theLanguageResult.isError()) {
                theLanguageResult.getError()
                  .prependSegment(new Reporting.NameSegment("language"));
                return theLanguageResult.castTo(LangStringShortNameTypeIec61360.class);
              }
              theLanguage = theLanguageResult.getResult();
              break;
            }
            case "text": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTextResult = tryStringFrom(currentNode.getValue());
              if (theTextResult.isError()) {
                theTextResult.getError()
                  .prependSegment(new Reporting.NameSegment("text"));
                return theTextResult.castTo(LangStringShortNameTypeIec61360.class);
              }
              theText = theTextResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theLanguage == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"language\" is missing");
          return Result.failure(error);
        }

        if (theText == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"text\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LangStringShortNameTypeIec61360(
          theLanguage,
          theText));
      }

      /**
       * Deserialize an instance of LangStringDefinitionTypeIec61360 from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<LangStringDefinitionTypeIec61360> tryLangStringDefinitionTypeIec61360From(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        String theLanguage = null;
        String theText = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "language": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theLanguageResult = tryStringFrom(currentNode.getValue());
              if (theLanguageResult.isError()) {
                theLanguageResult.getError()
                  .prependSegment(new Reporting.NameSegment("language"));
                return theLanguageResult.castTo(LangStringDefinitionTypeIec61360.class);
              }
              theLanguage = theLanguageResult.getResult();
              break;
            }
            case "text": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theTextResult = tryStringFrom(currentNode.getValue());
              if (theTextResult.isError()) {
                theTextResult.getError()
                  .prependSegment(new Reporting.NameSegment("text"));
                return theTextResult.castTo(LangStringDefinitionTypeIec61360.class);
              }
              theText = theTextResult.getResult();
              break;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (theLanguage == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"language\" is missing");
          return Result.failure(error);
        }

        if (theText == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"text\" is missing");
          return Result.failure(error);
        }

        return Result.success(new LangStringDefinitionTypeIec61360(
          theLanguage,
          theText));
      }

      /**
       * Deserialize an instance of DataSpecificationIec61360 from {@param node}.
       *
       * @param node JSON node to be parsed
       * @param elem Error, if any, during the deserialization
       */
      private static Result<DataSpecificationIec61360> tryDataSpecificationIec61360From(JsonNode node) {
        if (node == null || !node.isObject()) {
          final Reporting.Error error = new Reporting.Error(
            "Expected a JsonObject, but got " + (node == null ? "null" : node.getNodeType()));
          return Result.failure(error);
        }

        List<ILangStringPreferredNameTypeIec61360> thePreferredName = null;
        List<ILangStringShortNameTypeIec61360> theShortName = null;
        String theUnit = null;
        IReference theUnitId = null;
        String theSourceOfDefinition = null;
        String theSymbol = null;
        DataTypeIec61360 theDataType = null;
        List<ILangStringDefinitionTypeIec61360> theDefinition = null;
        String theValueFormat = null;
        IValueList theValueList = null;
        String theValue = null;
        ILevelType theLevelType = null;

        for (Iterator<Map.Entry<String, JsonNode>> iterator = node.fields(); iterator.hasNext(); ) {
          Map.Entry<String, JsonNode> currentNode = iterator.next();

          switch (currentNode.getKey()) {
            case "preferredName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayPreferredName = currentNode.getValue();
              if (!arrayPreferredName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayPreferredName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "preferredName"));
                return Result.failure(error);
              }
              thePreferredName = new ArrayList<>(
                arrayPreferredName.size());
              int indexPreferredName = 0;
              for (JsonNode item : arrayPreferredName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexPreferredName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "preferredName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringPreferredNameTypeIec61360> parsedItemResult =
                  tryLangStringPreferredNameTypeIec61360From(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexPreferredName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "preferredName"));
                  return parsedItemResult.castTo(DataSpecificationIec61360.class);
                }
                thePreferredName.add(
                  parsedItemResult.getResult());
                indexPreferredName++;
              }
              break;
            }
            case "shortName": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayShortName = currentNode.getValue();
              if (!arrayShortName.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayShortName.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "shortName"));
                return Result.failure(error);
              }
              theShortName = new ArrayList<>(
                arrayShortName.size());
              int indexShortName = 0;
              for (JsonNode item : arrayShortName) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexShortName));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "shortName"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringShortNameTypeIec61360> parsedItemResult =
                  tryLangStringShortNameTypeIec61360From(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexShortName));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "shortName"));
                  return parsedItemResult.castTo(DataSpecificationIec61360.class);
                }
                theShortName.add(
                  parsedItemResult.getResult());
                indexShortName++;
              }
              break;
            }
            case "unit": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theUnitResult = tryStringFrom(currentNode.getValue());
              if (theUnitResult.isError()) {
                theUnitResult.getError()
                  .prependSegment(new Reporting.NameSegment("unit"));
                return theUnitResult.castTo(DataSpecificationIec61360.class);
              }
              theUnit = theUnitResult.getResult();
              break;
            }
            case "unitId": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IReference> theUnitIdResult = tryReferenceFrom(currentNode.getValue());
              if (theUnitIdResult.isError()) {
                theUnitIdResult.getError()
                  .prependSegment(new Reporting.NameSegment("unitId"));
                return theUnitIdResult.castTo(DataSpecificationIec61360.class);
              }
              theUnitId = theUnitIdResult.getResult();
              break;
            }
            case "sourceOfDefinition": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theSourceOfDefinitionResult = tryStringFrom(currentNode.getValue());
              if (theSourceOfDefinitionResult.isError()) {
                theSourceOfDefinitionResult.getError()
                  .prependSegment(new Reporting.NameSegment("sourceOfDefinition"));
                return theSourceOfDefinitionResult.castTo(DataSpecificationIec61360.class);
              }
              theSourceOfDefinition = theSourceOfDefinitionResult.getResult();
              break;
            }
            case "symbol": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theSymbolResult = tryStringFrom(currentNode.getValue());
              if (theSymbolResult.isError()) {
                theSymbolResult.getError()
                  .prependSegment(new Reporting.NameSegment("symbol"));
                return theSymbolResult.castTo(DataSpecificationIec61360.class);
              }
              theSymbol = theSymbolResult.getResult();
              break;
            }
            case "dataType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends DataTypeIec61360> theDataTypeResult = tryDataTypeIec61360From(currentNode.getValue());
              if (theDataTypeResult.isError()) {
                theDataTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("dataType"));
                return theDataTypeResult.castTo(DataSpecificationIec61360.class);
              }
              theDataType = theDataTypeResult.getResult();
              break;
            }
            case "definition": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final JsonNode arrayDefinition = currentNode.getValue();
              if (!arrayDefinition.isArray()) {
                final Reporting.Error error = new Reporting.Error(
                  "Expected a JsonArray, but got " + arrayDefinition.getNodeType());
                error.prependSegment(
                  new Reporting.NameSegment(
                    "definition"));
                return Result.failure(error);
              }
              theDefinition = new ArrayList<>(
                arrayDefinition.size());
              int indexDefinition = 0;
              for (JsonNode item : arrayDefinition) {
                if (item == null) {
                  final Reporting.Error error = new Reporting.Error(
                    "Expected a non-null item, but got a null");
                  error.prependSegment(
                    new Reporting.IndexSegment(
                      indexDefinition));
                  error.prependSegment(
                    new Reporting.NameSegment(
                      "definition"));
                  return Result.failure(error);
                }
                final Result<? extends ILangStringDefinitionTypeIec61360> parsedItemResult =
                  tryLangStringDefinitionTypeIec61360From(item);
                if (parsedItemResult.isError()) {
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.IndexSegment(
                      indexDefinition));
                  parsedItemResult
                    .getError()
                    .prependSegment(
                    new Reporting.NameSegment(
                      "definition"));
                  return parsedItemResult.castTo(DataSpecificationIec61360.class);
                }
                theDefinition.add(
                  parsedItemResult.getResult());
                indexDefinition++;
              }
              break;
            }
            case "valueFormat": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueFormatResult = tryStringFrom(currentNode.getValue());
              if (theValueFormatResult.isError()) {
                theValueFormatResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueFormat"));
                return theValueFormatResult.castTo(DataSpecificationIec61360.class);
              }
              theValueFormat = theValueFormatResult.getResult();
              break;
            }
            case "valueList": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends IValueList> theValueListResult = tryValueListFrom(currentNode.getValue());
              if (theValueListResult.isError()) {
                theValueListResult.getError()
                  .prependSegment(new Reporting.NameSegment("valueList"));
                return theValueListResult.castTo(DataSpecificationIec61360.class);
              }
              theValueList = theValueListResult.getResult();
              break;
            }
            case "value": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends String> theValueResult = tryStringFrom(currentNode.getValue());
              if (theValueResult.isError()) {
                theValueResult.getError()
                  .prependSegment(new Reporting.NameSegment("value"));
                return theValueResult.castTo(DataSpecificationIec61360.class);
              }
              theValue = theValueResult.getResult();
              break;
            }
            case "levelType": {
              if (currentNode.getValue() == null) {
                continue;
              }

              final Result<? extends ILevelType> theLevelTypeResult = tryLevelTypeFrom(currentNode.getValue());
              if (theLevelTypeResult.isError()) {
                theLevelTypeResult.getError()
                  .prependSegment(new Reporting.NameSegment("levelType"));
                return theLevelTypeResult.castTo(DataSpecificationIec61360.class);
              }
              theLevelType = theLevelTypeResult.getResult();
              break;
            }
            case "modelType": {
                continue;
            }
            default: {
              final Reporting.Error error = new Reporting.Error(
                "Unexpected property: " + currentNode.getKey());
              return Result.failure(error);
            }
          }
        }

        if (thePreferredName == null) {
          final Reporting.Error error = new Reporting.Error(
            "Required property \"preferredName\" is missing");
          return Result.failure(error);
        }

        return Result.success(new DataSpecificationIec61360(
          thePreferredName,
          theShortName,
          theUnit,
          theUnitId,
          theSourceOfDefinition,
          theSymbol,
          theDataType,
          theDefinition,
          theValueFormat,
          theValueList,
          theValue,
          theLevelType));
      }
    }

    /**
    * Represent a critical error during the deserialization.
    */
    @SuppressWarnings("serial")
      public static class DeserializeException extends RuntimeException {
        private final String path;
        private final String reason;

        public DeserializeException(String path, String reason) {
          super(reason + " at: " + ("".equals(path) ? "the beginning" : path));
          this.path = path;
          this.reason = reason;
        }

        public Optional<String> getPath() {
          return Optional.ofNullable(path);
        }

        public Optional<String> getReason() {
          return Optional.ofNullable(reason);
        }
      }

    private static class Result<T> {
      private final T result;
      private final Reporting.Error error;
      private final boolean success;

      private Result(T result, Reporting.Error error, boolean success) {
        this.result = result;
        this.error = error;
        this.success = success;
      }

      public static <T> Result<T> success(T result) {
        if (result == null) throw new IllegalArgumentException("Result must not be null.");
        return new Result<>(result, null, true);
      }

      public static <T> Result<T> failure(Reporting.Error error) {
        if (error == null) throw new IllegalArgumentException("Error must not be null.");
        return new Result<>(null, error, false);
      }

      @SuppressWarnings("unchecked")
      public <I> Result<I> castTo(Class<I> type) {
        if (isError() || type.isInstance(result)) return (Result<I>) this;
        throw new IllegalStateException("Result of type "
          + result.getClass().getName()
          + " is not an instance of "
          + type.getName());
      }

      public T getResult() {
        if (!isSuccess()) throw new IllegalStateException("Result is not present.");
        return result;
      }

      public boolean isSuccess() {
        return success;
      }

      public boolean isError() {
        return !success;
      }

      public Reporting.Error getError() {
        if (isSuccess()) throw new IllegalStateException("Result is present.");
        return error;
      }

      public <R> R map(Function<T, R> successFunction, Function<Reporting.Error, R> errorFunction) {
        return isSuccess() ? successFunction.apply(result) : errorFunction.apply(error);
      }

      public T onError(Function<Reporting.Error, T> errorFunction) {
        return map(Function.identity(), errorFunction);
      }
    }

    /**
     * Deserialize instances of meta-model classes from JSON nodes.
     *
     * Here is an example how to parse an instance of IHasSemantics:
     * <pre>{@code
     * String someString = "... some JSON ...";
     * ObjectMapper objectMapper = new ObjectMapper();
     * JsonNode node = objectMapper.readTree(someString);
     * IHasSemantics anInstance = Deserialize.deserializeIHasSemantics(
     *   node);
     * }</pre>
     */
    public static class Deserialize
    {
      /**
       * Deserialize an instance of IHasSemantics from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IHasSemantics deserializeIHasSemantics(JsonNode node) {
        final Result<? extends IHasSemantics> result =
          DeserializeImplementation.tryIHasSemanticsFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Extension from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Extension deserializeExtension(JsonNode node) {
        final Result<? extends Extension> result =
          DeserializeImplementation.tryExtensionFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IHasExtensions from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IHasExtensions deserializeIHasExtensions(JsonNode node) {
        final Result<? extends IHasExtensions> result =
          DeserializeImplementation.tryIHasExtensionsFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IReferable from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IReferable deserializeIReferable(JsonNode node) {
        final Result<? extends IReferable> result =
          DeserializeImplementation.tryIReferableFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IIdentifiable from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IIdentifiable deserializeIIdentifiable(JsonNode node) {
        final Result<? extends IIdentifiable> result =
          DeserializeImplementation.tryIIdentifiableFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ModellingKind from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ModellingKind deserializeModellingKind(JsonNode node) {
        final Result<? extends ModellingKind> result =
          DeserializeImplementation.tryModellingKindFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IHasKind from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IHasKind deserializeIHasKind(JsonNode node) {
        final Result<? extends IHasKind> result =
          DeserializeImplementation.tryIHasKindFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IHasDataSpecification from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IHasDataSpecification deserializeIHasDataSpecification(JsonNode node) {
        final Result<? extends IHasDataSpecification> result =
          DeserializeImplementation.tryIHasDataSpecificationFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AdministrativeInformation from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AdministrativeInformation deserializeAdministrativeInformation(JsonNode node) {
        final Result<? extends AdministrativeInformation> result =
          DeserializeImplementation.tryAdministrativeInformationFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IQualifiable from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IQualifiable deserializeIQualifiable(JsonNode node) {
        final Result<? extends IQualifiable> result =
          DeserializeImplementation.tryIQualifiableFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of QualifierKind from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static QualifierKind deserializeQualifierKind(JsonNode node) {
        final Result<? extends QualifierKind> result =
          DeserializeImplementation.tryQualifierKindFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Qualifier from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Qualifier deserializeQualifier(JsonNode node) {
        final Result<? extends Qualifier> result =
          DeserializeImplementation.tryQualifierFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AssetAdministrationShell from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AssetAdministrationShell deserializeAssetAdministrationShell(JsonNode node) {
        final Result<? extends AssetAdministrationShell> result =
          DeserializeImplementation.tryAssetAdministrationShellFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AssetInformation from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AssetInformation deserializeAssetInformation(JsonNode node) {
        final Result<? extends AssetInformation> result =
          DeserializeImplementation.tryAssetInformationFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Resource from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Resource deserializeResource(JsonNode node) {
        final Result<? extends Resource> result =
          DeserializeImplementation.tryResourceFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AssetKind from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AssetKind deserializeAssetKind(JsonNode node) {
        final Result<? extends AssetKind> result =
          DeserializeImplementation.tryAssetKindFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of SpecificAssetId from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static SpecificAssetId deserializeSpecificAssetId(JsonNode node) {
        final Result<? extends SpecificAssetId> result =
          DeserializeImplementation.trySpecificAssetIdFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Submodel from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Submodel deserializeSubmodel(JsonNode node) {
        final Result<? extends Submodel> result =
          DeserializeImplementation.trySubmodelFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ISubmodelElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ISubmodelElement deserializeISubmodelElement(JsonNode node) {
        final Result<? extends ISubmodelElement> result =
          DeserializeImplementation.tryISubmodelElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IRelationshipElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IRelationshipElement deserializeIRelationshipElement(JsonNode node) {
        final Result<? extends IRelationshipElement> result =
          DeserializeImplementation.tryIRelationshipElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of RelationshipElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static RelationshipElement deserializeRelationshipElement(JsonNode node) {
        final Result<? extends RelationshipElement> result =
          DeserializeImplementation.tryRelationshipElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AasSubmodelElements from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AasSubmodelElements deserializeAasSubmodelElements(JsonNode node) {
        final Result<? extends AasSubmodelElements> result =
          DeserializeImplementation.tryAasSubmodelElementsFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of SubmodelElementList from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static SubmodelElementList deserializeSubmodelElementList(JsonNode node) {
        final Result<? extends SubmodelElementList> result =
          DeserializeImplementation.trySubmodelElementListFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of SubmodelElementCollection from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static SubmodelElementCollection deserializeSubmodelElementCollection(JsonNode node) {
        final Result<? extends SubmodelElementCollection> result =
          DeserializeImplementation.trySubmodelElementCollectionFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IDataElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IDataElement deserializeIDataElement(JsonNode node) {
        final Result<? extends IDataElement> result =
          DeserializeImplementation.tryIDataElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Property from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Property deserializeProperty(JsonNode node) {
        final Result<? extends Property> result =
          DeserializeImplementation.tryPropertyFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of MultiLanguageProperty from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static MultiLanguageProperty deserializeMultiLanguageProperty(JsonNode node) {
        final Result<? extends MultiLanguageProperty> result =
          DeserializeImplementation.tryMultiLanguagePropertyFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Range from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Range deserializeRange(JsonNode node) {
        final Result<? extends Range> result =
          DeserializeImplementation.tryRangeFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ReferenceElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ReferenceElement deserializeReferenceElement(JsonNode node) {
        final Result<? extends ReferenceElement> result =
          DeserializeImplementation.tryReferenceElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Blob from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Blob deserializeBlob(JsonNode node) {
        final Result<? extends Blob> result =
          DeserializeImplementation.tryBlobFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of File from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static File deserializeFile(JsonNode node) {
        final Result<? extends File> result =
          DeserializeImplementation.tryFileFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of AnnotatedRelationshipElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static AnnotatedRelationshipElement deserializeAnnotatedRelationshipElement(JsonNode node) {
        final Result<? extends AnnotatedRelationshipElement> result =
          DeserializeImplementation.tryAnnotatedRelationshipElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Entity from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Entity deserializeEntity(JsonNode node) {
        final Result<? extends Entity> result =
          DeserializeImplementation.tryEntityFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of EntityType from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static EntityType deserializeEntityType(JsonNode node) {
        final Result<? extends EntityType> result =
          DeserializeImplementation.tryEntityTypeFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Direction from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Direction deserializeDirection(JsonNode node) {
        final Result<? extends Direction> result =
          DeserializeImplementation.tryDirectionFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of StateOfEvent from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static StateOfEvent deserializeStateOfEvent(JsonNode node) {
        final Result<? extends StateOfEvent> result =
          DeserializeImplementation.tryStateOfEventFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of EventPayload from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static EventPayload deserializeEventPayload(JsonNode node) {
        final Result<? extends EventPayload> result =
          DeserializeImplementation.tryEventPayloadFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IEventElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IEventElement deserializeIEventElement(JsonNode node) {
        final Result<? extends IEventElement> result =
          DeserializeImplementation.tryIEventElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of BasicEventElement from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static BasicEventElement deserializeBasicEventElement(JsonNode node) {
        final Result<? extends BasicEventElement> result =
          DeserializeImplementation.tryBasicEventElementFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Operation from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Operation deserializeOperation(JsonNode node) {
        final Result<? extends Operation> result =
          DeserializeImplementation.tryOperationFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of OperationVariable from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static OperationVariable deserializeOperationVariable(JsonNode node) {
        final Result<? extends OperationVariable> result =
          DeserializeImplementation.tryOperationVariableFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Capability from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Capability deserializeCapability(JsonNode node) {
        final Result<? extends Capability> result =
          DeserializeImplementation.tryCapabilityFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ConceptDescription from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ConceptDescription deserializeConceptDescription(JsonNode node) {
        final Result<? extends ConceptDescription> result =
          DeserializeImplementation.tryConceptDescriptionFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ReferenceTypes from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ReferenceTypes deserializeReferenceTypes(JsonNode node) {
        final Result<? extends ReferenceTypes> result =
          DeserializeImplementation.tryReferenceTypesFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Reference from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Reference deserializeReference(JsonNode node) {
        final Result<? extends Reference> result =
          DeserializeImplementation.tryReferenceFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Key from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Key deserializeKey(JsonNode node) {
        final Result<? extends Key> result =
          DeserializeImplementation.tryKeyFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of KeyTypes from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static KeyTypes deserializeKeyTypes(JsonNode node) {
        final Result<? extends KeyTypes> result =
          DeserializeImplementation.tryKeyTypesFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of DataTypeDefXsd from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static DataTypeDefXsd deserializeDataTypeDefXsd(JsonNode node) {
        final Result<? extends DataTypeDefXsd> result =
          DeserializeImplementation.tryDataTypeDefXsdFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IAbstractLangString from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IAbstractLangString deserializeIAbstractLangString(JsonNode node) {
        final Result<? extends IAbstractLangString> result =
          DeserializeImplementation.tryIAbstractLangStringFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LangStringNameType from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LangStringNameType deserializeLangStringNameType(JsonNode node) {
        final Result<? extends LangStringNameType> result =
          DeserializeImplementation.tryLangStringNameTypeFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LangStringTextType from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LangStringTextType deserializeLangStringTextType(JsonNode node) {
        final Result<? extends LangStringTextType> result =
          DeserializeImplementation.tryLangStringTextTypeFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of Environment from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static Environment deserializeEnvironment(JsonNode node) {
        final Result<? extends Environment> result =
          DeserializeImplementation.tryEnvironmentFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of IDataSpecificationContent from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static IDataSpecificationContent deserializeIDataSpecificationContent(JsonNode node) {
        final Result<? extends IDataSpecificationContent> result =
          DeserializeImplementation.tryIDataSpecificationContentFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of EmbeddedDataSpecification from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static EmbeddedDataSpecification deserializeEmbeddedDataSpecification(JsonNode node) {
        final Result<? extends EmbeddedDataSpecification> result =
          DeserializeImplementation.tryEmbeddedDataSpecificationFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of DataTypeIec61360 from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static DataTypeIec61360 deserializeDataTypeIec61360(JsonNode node) {
        final Result<? extends DataTypeIec61360> result =
          DeserializeImplementation.tryDataTypeIec61360From(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LevelType from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LevelType deserializeLevelType(JsonNode node) {
        final Result<? extends LevelType> result =
          DeserializeImplementation.tryLevelTypeFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ValueReferencePair from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ValueReferencePair deserializeValueReferencePair(JsonNode node) {
        final Result<? extends ValueReferencePair> result =
          DeserializeImplementation.tryValueReferencePairFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of ValueList from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static ValueList deserializeValueList(JsonNode node) {
        final Result<? extends ValueList> result =
          DeserializeImplementation.tryValueListFrom(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LangStringPreferredNameTypeIec61360 from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LangStringPreferredNameTypeIec61360 deserializeLangStringPreferredNameTypeIec61360(JsonNode node) {
        final Result<? extends LangStringPreferredNameTypeIec61360> result =
          DeserializeImplementation.tryLangStringPreferredNameTypeIec61360From(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LangStringShortNameTypeIec61360 from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LangStringShortNameTypeIec61360 deserializeLangStringShortNameTypeIec61360(JsonNode node) {
        final Result<? extends LangStringShortNameTypeIec61360> result =
          DeserializeImplementation.tryLangStringShortNameTypeIec61360From(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of LangStringDefinitionTypeIec61360 from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static LangStringDefinitionTypeIec61360 deserializeLangStringDefinitionTypeIec61360(JsonNode node) {
        final Result<? extends LangStringDefinitionTypeIec61360> result =
          DeserializeImplementation.tryLangStringDefinitionTypeIec61360From(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }

      /**
       * Deserialize an instance of DataSpecificationIec61360 from {@code node}.
       *
       * @param node JSON node to be parsed
       */
      public static DataSpecificationIec61360 deserializeDataSpecificationIec61360(JsonNode node) {
        final Result<? extends DataSpecificationIec61360> result =
          DeserializeImplementation.tryDataSpecificationIec61360From(
            node);

        return result.onError(error -> {
          throw new DeserializeException(
            Reporting.generateJsonPath(error.getPathSegments()),
            error.getCause());
        });
      }
    }

    private static class Transformer extends AbstractTransformer<JsonNode> {
      /**
       * Convert {@code that} 64-bit long integer to a JSON value.
       *
       * @param that value to be converted
       */
      private static JsonNode toJsonNode(Long that) {
        // We need to check that we can perform a lossless conversion.
        long primitiveThat = that.longValue();
        if ((long)((double)primitiveThat) != primitiveThat) {
          throw new IllegalArgumentException(
            "The number can not be losslessly represented in JSON: " + that);
        }
        return JsonNodeFactory.instance.numberNode(that);
      }

      @Override
      public JsonNode transformExtension(
        IExtension that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        result.set("name", JsonNodeFactory.instance.textNode(
          that.getName()));

        if (that.getValueType().isPresent()) {
          result.set("valueType", Serialize.dataTypeDefXsdToJsonValue(
            that.getValueType().get()));
        }

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
            that.getValue().get()));
        }

        if (that.getRefersTo().isPresent()) {
          final ArrayNode arrayRefersTo = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getRefersTo().get()) {
            arrayRefersTo.add(
              transform(
                item));
          }
          result.set("refersTo", arrayRefersTo);
        }

        return result;
      }

      @Override
      public JsonNode transformAdministrativeInformation(
        IAdministrativeInformation that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getVersion().isPresent()) {
          result.set("version", JsonNodeFactory.instance.textNode(
            that.getVersion().get()));
        }

        if (that.getRevision().isPresent()) {
          result.set("revision", JsonNodeFactory.instance.textNode(
            that.getRevision().get()));
        }

        if (that.getCreator().isPresent()) {
          result.set("creator", transform(
            that.getCreator().get()));
        }

        if (that.getTemplateId().isPresent()) {
          result.set("templateId", JsonNodeFactory.instance.textNode(
            that.getTemplateId().get()));
        }

        return result;
      }

      @Override
      public JsonNode transformQualifier(
        IQualifier that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getKind().isPresent()) {
          result.set("kind", Serialize.qualifierKindToJsonValue(
            that.getKind().get()));
        }

        result.set("type", JsonNodeFactory.instance.textNode(
          that.getType()));

        result.set("valueType", Serialize.dataTypeDefXsdToJsonValue(
          that.getValueType()));

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
            that.getValue().get()));
        }

        if (that.getValueId().isPresent()) {
          result.set("valueId", transform(
            that.getValueId().get()));
        }

        return result;
      }

      @Override
      public JsonNode transformAssetAdministrationShell(
        IAssetAdministrationShell that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getAdministration().isPresent()) {
          result.set("administration", transform(
            that.getAdministration().get()));
        }

        result.set("id", JsonNodeFactory.instance.textNode(
          that.getId()));

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getDerivedFrom().isPresent()) {
          result.set("derivedFrom", transform(
            that.getDerivedFrom().get()));
        }

        result.set("assetInformation", transform(
          that.getAssetInformation()));

        if (that.getSubmodels().isPresent()) {
          final ArrayNode arraySubmodels = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSubmodels().get()) {
            arraySubmodels.add(
              transform(
                item));
          }
          result.set("submodels", arraySubmodels);
        }

        result.put("modelType", "AssetAdministrationShell");

        return result;
      }

      @Override
      public JsonNode transformAssetInformation(
        IAssetInformation that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("assetKind", Serialize.assetKindToJsonValue(
          that.getAssetKind()));

        if (that.getGlobalAssetId().isPresent()) {
          result.set("globalAssetId", JsonNodeFactory.instance.textNode(
            that.getGlobalAssetId().get()));
        }

        if (that.getSpecificAssetIds().isPresent()) {
          final ArrayNode arraySpecificAssetIds = JsonNodeFactory.instance.arrayNode();
          for (ISpecificAssetId item : that.getSpecificAssetIds().get()) {
            arraySpecificAssetIds.add(
              transform(
                item));
          }
          result.set("specificAssetIds", arraySpecificAssetIds);
        }

        if (that.getAssetType().isPresent()) {
          result.set("assetType", JsonNodeFactory.instance.textNode(
            that.getAssetType().get()));
        }

        if (that.getDefaultThumbnail().isPresent()) {
          result.set("defaultThumbnail", transform(
            that.getDefaultThumbnail().get()));
        }

        return result;
      }

      @Override
      public JsonNode transformResource(
        IResource that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("path", JsonNodeFactory.instance.textNode(
          that.getPath()));

        if (that.getContentType().isPresent()) {
          result.set("contentType", JsonNodeFactory.instance.textNode(
            that.getContentType().get()));
        }

        return result;
      }

      @Override
      public JsonNode transformSpecificAssetId(
        ISpecificAssetId that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        result.set("name", JsonNodeFactory.instance.textNode(
          that.getName()));

        result.set("value", JsonNodeFactory.instance.textNode(
          that.getValue()));

        if (that.getExternalSubjectId().isPresent()) {
          result.set("externalSubjectId", transform(
            that.getExternalSubjectId().get()));
        }

        return result;
      }

      @Override
      public JsonNode transformSubmodel(
        ISubmodel that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getAdministration().isPresent()) {
          result.set("administration", transform(
            that.getAdministration().get()));
        }

        result.set("id", JsonNodeFactory.instance.textNode(
          that.getId()));

        if (that.getKind().isPresent()) {
          result.set("kind", Serialize.modellingKindToJsonValue(
            that.getKind().get()));
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getSubmodelElements().isPresent()) {
          final ArrayNode arraySubmodelElements = JsonNodeFactory.instance.arrayNode();
          for (ISubmodelElement item : that.getSubmodelElements().get()) {
            arraySubmodelElements.add(
              transform(
                item));
          }
          result.set("submodelElements", arraySubmodelElements);
        }

        result.put("modelType", "Submodel");

        return result;
      }

      @Override
      public JsonNode transformRelationshipElement(
        IRelationshipElement that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.set("first", transform(
          that.getFirst()));

        result.set("second", transform(
          that.getSecond()));

        result.put("modelType", "RelationshipElement");

        return result;
      }

      @Override
      public JsonNode transformSubmodelElementList(
        ISubmodelElementList that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getOrderRelevant().isPresent()) {
          result.set("orderRelevant", JsonNodeFactory.instance.booleanNode(
            that.getOrderRelevant().get()));
        }

        if (that.getSemanticIdListElement().isPresent()) {
          result.set("semanticIdListElement", transform(
            that.getSemanticIdListElement().get()));
        }

        result.set("typeValueListElement", Serialize.aasSubmodelElementsToJsonValue(
          that.getTypeValueListElement()));

        if (that.getValueTypeListElement().isPresent()) {
          result.set("valueTypeListElement", Serialize.dataTypeDefXsdToJsonValue(
            that.getValueTypeListElement().get()));
        }

        if (that.getValue().isPresent()) {
          final ArrayNode arrayValue = JsonNodeFactory.instance.arrayNode();
          for (ISubmodelElement item : that.getValue().get()) {
            arrayValue.add(
              transform(
                item));
          }
          result.set("value", arrayValue);
        }

        result.put("modelType", "SubmodelElementList");

        return result;
      }

      @Override
      public JsonNode transformSubmodelElementCollection(
        ISubmodelElementCollection that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getValue().isPresent()) {
          final ArrayNode arrayValue = JsonNodeFactory.instance.arrayNode();
          for (ISubmodelElement item : that.getValue().get()) {
            arrayValue.add(
              transform(
                item));
          }
          result.set("value", arrayValue);
        }

        result.put("modelType", "SubmodelElementCollection");

        return result;
      }

      @Override
      public JsonNode transformProperty(
        IProperty that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.set("valueType", Serialize.dataTypeDefXsdToJsonValue(
          that.getValueType()));

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
            that.getValue().get()));
        }

        if (that.getValueId().isPresent()) {
          result.set("valueId", transform(
            that.getValueId().get()));
        }

        result.put("modelType", "Property");

        return result;
      }

      @Override
      public JsonNode transformMultiLanguageProperty(
        IMultiLanguageProperty that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getValue().isPresent()) {
          final ArrayNode arrayValue = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getValue().get()) {
            arrayValue.add(
              transform(
                item));
          }
          result.set("value", arrayValue);
        }

        if (that.getValueId().isPresent()) {
          result.set("valueId", transform(
            that.getValueId().get()));
        }

        result.put("modelType", "MultiLanguageProperty");

        return result;
      }

      @Override
      public JsonNode transformRange(
        IRange that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.set("valueType", Serialize.dataTypeDefXsdToJsonValue(
          that.getValueType()));

        if (that.getMin().isPresent()) {
          result.set("min", JsonNodeFactory.instance.textNode(
            that.getMin().get()));
        }

        if (that.getMax().isPresent()) {
          result.set("max", JsonNodeFactory.instance.textNode(
            that.getMax().get()));
        }

        result.put("modelType", "Range");

        return result;
      }

      @Override
      public JsonNode transformReferenceElement(
        IReferenceElement that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getValue().isPresent()) {
          result.set("value", transform(
            that.getValue().get()));
        }

        result.put("modelType", "ReferenceElement");

        return result;
      }

      @Override
      public JsonNode transformBlob(
        IBlob that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
              Base64.getEncoder()
                .encodeToString(that.getValue().get())));
        }

        result.set("contentType", JsonNodeFactory.instance.textNode(
          that.getContentType()));

        result.put("modelType", "Blob");

        return result;
      }

      @Override
      public JsonNode transformFile(
        IFile that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
            that.getValue().get()));
        }

        result.set("contentType", JsonNodeFactory.instance.textNode(
          that.getContentType()));

        result.put("modelType", "File");

        return result;
      }

      @Override
      public JsonNode transformAnnotatedRelationshipElement(
        IAnnotatedRelationshipElement that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.set("first", transform(
          that.getFirst()));

        result.set("second", transform(
          that.getSecond()));

        if (that.getAnnotations().isPresent()) {
          final ArrayNode arrayAnnotations = JsonNodeFactory.instance.arrayNode();
          for (IDataElement item : that.getAnnotations().get()) {
            arrayAnnotations.add(
              transform(
                item));
          }
          result.set("annotations", arrayAnnotations);
        }

        result.put("modelType", "AnnotatedRelationshipElement");

        return result;
      }

      @Override
      public JsonNode transformEntity(
        IEntity that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getStatements().isPresent()) {
          final ArrayNode arrayStatements = JsonNodeFactory.instance.arrayNode();
          for (ISubmodelElement item : that.getStatements().get()) {
            arrayStatements.add(
              transform(
                item));
          }
          result.set("statements", arrayStatements);
        }

        result.set("entityType", Serialize.entityTypeToJsonValue(
          that.getEntityType()));

        if (that.getGlobalAssetId().isPresent()) {
          result.set("globalAssetId", JsonNodeFactory.instance.textNode(
            that.getGlobalAssetId().get()));
        }

        if (that.getSpecificAssetIds().isPresent()) {
          final ArrayNode arraySpecificAssetIds = JsonNodeFactory.instance.arrayNode();
          for (ISpecificAssetId item : that.getSpecificAssetIds().get()) {
            arraySpecificAssetIds.add(
              transform(
                item));
          }
          result.set("specificAssetIds", arraySpecificAssetIds);
        }

        result.put("modelType", "Entity");

        return result;
      }

      @Override
      public JsonNode transformEventPayload(
        IEventPayload that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("source", transform(
          that.getSource()));

        if (that.getSourceSemanticId().isPresent()) {
          result.set("sourceSemanticId", transform(
            that.getSourceSemanticId().get()));
        }

        result.set("observableReference", transform(
          that.getObservableReference()));

        if (that.getObservableSemanticId().isPresent()) {
          result.set("observableSemanticId", transform(
            that.getObservableSemanticId().get()));
        }

        if (that.getTopic().isPresent()) {
          result.set("topic", JsonNodeFactory.instance.textNode(
            that.getTopic().get()));
        }

        if (that.getSubjectId().isPresent()) {
          result.set("subjectId", transform(
            that.getSubjectId().get()));
        }

        result.set("timeStamp", JsonNodeFactory.instance.textNode(
          that.getTimeStamp()));

        if (that.getPayload().isPresent()) {
          result.set("payload", JsonNodeFactory.instance.textNode(
              Base64.getEncoder()
                .encodeToString(that.getPayload().get())));
        }

        return result;
      }

      @Override
      public JsonNode transformBasicEventElement(
        IBasicEventElement that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.set("observed", transform(
          that.getObserved()));

        result.set("direction", Serialize.directionToJsonValue(
          that.getDirection()));

        result.set("state", Serialize.stateOfEventToJsonValue(
          that.getState()));

        if (that.getMessageTopic().isPresent()) {
          result.set("messageTopic", JsonNodeFactory.instance.textNode(
            that.getMessageTopic().get()));
        }

        if (that.getMessageBroker().isPresent()) {
          result.set("messageBroker", transform(
            that.getMessageBroker().get()));
        }

        if (that.getLastUpdate().isPresent()) {
          result.set("lastUpdate", JsonNodeFactory.instance.textNode(
            that.getLastUpdate().get()));
        }

        if (that.getMinInterval().isPresent()) {
          result.set("minInterval", JsonNodeFactory.instance.textNode(
            that.getMinInterval().get()));
        }

        if (that.getMaxInterval().isPresent()) {
          result.set("maxInterval", JsonNodeFactory.instance.textNode(
            that.getMaxInterval().get()));
        }

        result.put("modelType", "BasicEventElement");

        return result;
      }

      @Override
      public JsonNode transformOperation(
        IOperation that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getInputVariables().isPresent()) {
          final ArrayNode arrayInputVariables = JsonNodeFactory.instance.arrayNode();
          for (IOperationVariable item : that.getInputVariables().get()) {
            arrayInputVariables.add(
              transform(
                item));
          }
          result.set("inputVariables", arrayInputVariables);
        }

        if (that.getOutputVariables().isPresent()) {
          final ArrayNode arrayOutputVariables = JsonNodeFactory.instance.arrayNode();
          for (IOperationVariable item : that.getOutputVariables().get()) {
            arrayOutputVariables.add(
              transform(
                item));
          }
          result.set("outputVariables", arrayOutputVariables);
        }

        if (that.getInoutputVariables().isPresent()) {
          final ArrayNode arrayInoutputVariables = JsonNodeFactory.instance.arrayNode();
          for (IOperationVariable item : that.getInoutputVariables().get()) {
            arrayInoutputVariables.add(
              transform(
                item));
          }
          result.set("inoutputVariables", arrayInoutputVariables);
        }

        result.put("modelType", "Operation");

        return result;
      }

      @Override
      public JsonNode transformOperationVariable(
        IOperationVariable that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("value", transform(
          that.getValue()));

        return result;
      }

      @Override
      public JsonNode transformCapability(
        ICapability that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getSemanticId().isPresent()) {
          result.set("semanticId", transform(
            that.getSemanticId().get()));
        }

        if (that.getSupplementalSemanticIds().isPresent()) {
          final ArrayNode arraySupplementalSemanticIds = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getSupplementalSemanticIds().get()) {
            arraySupplementalSemanticIds.add(
              transform(
                item));
          }
          result.set("supplementalSemanticIds", arraySupplementalSemanticIds);
        }

        if (that.getQualifiers().isPresent()) {
          final ArrayNode arrayQualifiers = JsonNodeFactory.instance.arrayNode();
          for (IQualifier item : that.getQualifiers().get()) {
            arrayQualifiers.add(
              transform(
                item));
          }
          result.set("qualifiers", arrayQualifiers);
        }

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        result.put("modelType", "Capability");

        return result;
      }

      @Override
      public JsonNode transformConceptDescription(
        IConceptDescription that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getExtensions().isPresent()) {
          final ArrayNode arrayExtensions = JsonNodeFactory.instance.arrayNode();
          for (IExtension item : that.getExtensions().get()) {
            arrayExtensions.add(
              transform(
                item));
          }
          result.set("extensions", arrayExtensions);
        }

        if (that.getCategory().isPresent()) {
          result.set("category", JsonNodeFactory.instance.textNode(
            that.getCategory().get()));
        }

        if (that.getIdShort().isPresent()) {
          result.set("idShort", JsonNodeFactory.instance.textNode(
            that.getIdShort().get()));
        }

        if (that.getDisplayName().isPresent()) {
          final ArrayNode arrayDisplayName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringNameType item : that.getDisplayName().get()) {
            arrayDisplayName.add(
              transform(
                item));
          }
          result.set("displayName", arrayDisplayName);
        }

        if (that.getDescription().isPresent()) {
          final ArrayNode arrayDescription = JsonNodeFactory.instance.arrayNode();
          for (ILangStringTextType item : that.getDescription().get()) {
            arrayDescription.add(
              transform(
                item));
          }
          result.set("description", arrayDescription);
        }

        if (that.getAdministration().isPresent()) {
          result.set("administration", transform(
            that.getAdministration().get()));
        }

        result.set("id", JsonNodeFactory.instance.textNode(
          that.getId()));

        if (that.getEmbeddedDataSpecifications().isPresent()) {
          final ArrayNode arrayEmbeddedDataSpecifications = JsonNodeFactory.instance.arrayNode();
          for (IEmbeddedDataSpecification item : that.getEmbeddedDataSpecifications().get()) {
            arrayEmbeddedDataSpecifications.add(
              transform(
                item));
          }
          result.set("embeddedDataSpecifications", arrayEmbeddedDataSpecifications);
        }

        if (that.getIsCaseOf().isPresent()) {
          final ArrayNode arrayIsCaseOf = JsonNodeFactory.instance.arrayNode();
          for (IReference item : that.getIsCaseOf().get()) {
            arrayIsCaseOf.add(
              transform(
                item));
          }
          result.set("isCaseOf", arrayIsCaseOf);
        }

        result.put("modelType", "ConceptDescription");

        return result;
      }

      @Override
      public JsonNode transformReference(
        IReference that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("type", Serialize.referenceTypesToJsonValue(
          that.getType()));

        if (that.getReferredSemanticId().isPresent()) {
          result.set("referredSemanticId", transform(
            that.getReferredSemanticId().get()));
        }

        final ArrayNode arrayKeys = JsonNodeFactory.instance.arrayNode();
        for (IKey item : that.getKeys()) {
          arrayKeys.add(
            transform(
              item));
        }
        result.set("keys", arrayKeys);

        return result;
      }

      @Override
      public JsonNode transformKey(
        IKey that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("type", Serialize.keyTypesToJsonValue(
          that.getType()));

        result.set("value", JsonNodeFactory.instance.textNode(
          that.getValue()));

        return result;
      }

      @Override
      public JsonNode transformLangStringNameType(
        ILangStringNameType that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("language", JsonNodeFactory.instance.textNode(
          that.getLanguage()));

        result.set("text", JsonNodeFactory.instance.textNode(
          that.getText()));

        return result;
      }

      @Override
      public JsonNode transformLangStringTextType(
        ILangStringTextType that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("language", JsonNodeFactory.instance.textNode(
          that.getLanguage()));

        result.set("text", JsonNodeFactory.instance.textNode(
          that.getText()));

        return result;
      }

      @Override
      public JsonNode transformEnvironment(
        IEnvironment that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        if (that.getAssetAdministrationShells().isPresent()) {
          final ArrayNode arrayAssetAdministrationShells = JsonNodeFactory.instance.arrayNode();
          for (IAssetAdministrationShell item : that.getAssetAdministrationShells().get()) {
            arrayAssetAdministrationShells.add(
              transform(
                item));
          }
          result.set("assetAdministrationShells", arrayAssetAdministrationShells);
        }

        if (that.getSubmodels().isPresent()) {
          final ArrayNode arraySubmodels = JsonNodeFactory.instance.arrayNode();
          for (ISubmodel item : that.getSubmodels().get()) {
            arraySubmodels.add(
              transform(
                item));
          }
          result.set("submodels", arraySubmodels);
        }

        if (that.getConceptDescriptions().isPresent()) {
          final ArrayNode arrayConceptDescriptions = JsonNodeFactory.instance.arrayNode();
          for (IConceptDescription item : that.getConceptDescriptions().get()) {
            arrayConceptDescriptions.add(
              transform(
                item));
          }
          result.set("conceptDescriptions", arrayConceptDescriptions);
        }

        return result;
      }

      @Override
      public JsonNode transformEmbeddedDataSpecification(
        IEmbeddedDataSpecification that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("dataSpecification", transform(
          that.getDataSpecification()));

        result.set("dataSpecificationContent", transform(
          that.getDataSpecificationContent()));

        return result;
      }

      @Override
      public JsonNode transformLevelType(
        ILevelType that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("min", JsonNodeFactory.instance.booleanNode(
          that.getMin()));

        result.set("nom", JsonNodeFactory.instance.booleanNode(
          that.getNom()));

        result.set("typ", JsonNodeFactory.instance.booleanNode(
          that.getTyp()));

        result.set("max", JsonNodeFactory.instance.booleanNode(
          that.getMax()));

        return result;
      }

      @Override
      public JsonNode transformValueReferencePair(
        IValueReferencePair that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("value", JsonNodeFactory.instance.textNode(
          that.getValue()));

        result.set("valueId", transform(
          that.getValueId()));

        return result;
      }

      @Override
      public JsonNode transformValueList(
        IValueList that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        final ArrayNode arrayValueReferencePairs = JsonNodeFactory.instance.arrayNode();
        for (IValueReferencePair item : that.getValueReferencePairs()) {
          arrayValueReferencePairs.add(
            transform(
              item));
        }
        result.set("valueReferencePairs", arrayValueReferencePairs);

        return result;
      }

      @Override
      public JsonNode transformLangStringPreferredNameTypeIec61360(
        ILangStringPreferredNameTypeIec61360 that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("language", JsonNodeFactory.instance.textNode(
          that.getLanguage()));

        result.set("text", JsonNodeFactory.instance.textNode(
          that.getText()));

        return result;
      }

      @Override
      public JsonNode transformLangStringShortNameTypeIec61360(
        ILangStringShortNameTypeIec61360 that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("language", JsonNodeFactory.instance.textNode(
          that.getLanguage()));

        result.set("text", JsonNodeFactory.instance.textNode(
          that.getText()));

        return result;
      }

      @Override
      public JsonNode transformLangStringDefinitionTypeIec61360(
        ILangStringDefinitionTypeIec61360 that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        result.set("language", JsonNodeFactory.instance.textNode(
          that.getLanguage()));

        result.set("text", JsonNodeFactory.instance.textNode(
          that.getText()));

        return result;
      }

      @Override
      public JsonNode transformDataSpecificationIec61360(
        IDataSpecificationIec61360 that
      ) {
        final ObjectNode result = JsonNodeFactory.instance.objectNode();

        final ArrayNode arrayPreferredName = JsonNodeFactory.instance.arrayNode();
        for (ILangStringPreferredNameTypeIec61360 item : that.getPreferredName()) {
          arrayPreferredName.add(
            transform(
              item));
        }
        result.set("preferredName", arrayPreferredName);

        if (that.getShortName().isPresent()) {
          final ArrayNode arrayShortName = JsonNodeFactory.instance.arrayNode();
          for (ILangStringShortNameTypeIec61360 item : that.getShortName().get()) {
            arrayShortName.add(
              transform(
                item));
          }
          result.set("shortName", arrayShortName);
        }

        if (that.getUnit().isPresent()) {
          result.set("unit", JsonNodeFactory.instance.textNode(
            that.getUnit().get()));
        }

        if (that.getUnitId().isPresent()) {
          result.set("unitId", transform(
            that.getUnitId().get()));
        }

        if (that.getSourceOfDefinition().isPresent()) {
          result.set("sourceOfDefinition", JsonNodeFactory.instance.textNode(
            that.getSourceOfDefinition().get()));
        }

        if (that.getSymbol().isPresent()) {
          result.set("symbol", JsonNodeFactory.instance.textNode(
            that.getSymbol().get()));
        }

        if (that.getDataType().isPresent()) {
          result.set("dataType", Serialize.dataTypeIec61360ToJsonValue(
            that.getDataType().get()));
        }

        if (that.getDefinition().isPresent()) {
          final ArrayNode arrayDefinition = JsonNodeFactory.instance.arrayNode();
          for (ILangStringDefinitionTypeIec61360 item : that.getDefinition().get()) {
            arrayDefinition.add(
              transform(
                item));
          }
          result.set("definition", arrayDefinition);
        }

        if (that.getValueFormat().isPresent()) {
          result.set("valueFormat", JsonNodeFactory.instance.textNode(
            that.getValueFormat().get()));
        }

        if (that.getValueList().isPresent()) {
          result.set("valueList", transform(
            that.getValueList().get()));
        }

        if (that.getValue().isPresent()) {
          result.set("value", JsonNodeFactory.instance.textNode(
            that.getValue().get()));
        }

        if (that.getLevelType().isPresent()) {
          result.set("levelType", transform(
            that.getLevelType().get()));
        }

        result.put("modelType", "DataSpecificationIec61360");

        return result;
      }
    }

    /**
     * Serialize instances of meta-model classes to JSON elements.
     *
     * Here is an example how to serialize an instance of IHasSemantics:
     * <pre>{@code
     * IHasSemantics anInstance = new IHasSemantics(
     *     // ... some constructor arguments ...
     * );
     * JsonNode element = Jsonization.Serialize.toJsonObject(
     *     anInstance));
     * }</pre>
     */
    public static class Serialize
    {
      private static final Transformer transformer = new Transformer();

      /**
       * Serialize an instance of the meta-model into a JSON object.
       */
      public static JsonNode toJsonObject(IClass that) {
        return transformer.transform(that);
      }

      /**
       * Serialize a literal of ModellingKind into a JSON string.
       */
      public static JsonNode modellingKindToJsonValue(ModellingKind that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid ModellingKind: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of QualifierKind into a JSON string.
       */
      public static JsonNode qualifierKindToJsonValue(QualifierKind that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid QualifierKind: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of AssetKind into a JSON string.
       */
      public static JsonNode assetKindToJsonValue(AssetKind that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid AssetKind: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of AasSubmodelElements into a JSON string.
       */
      public static JsonNode aasSubmodelElementsToJsonValue(AasSubmodelElements that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid AasSubmodelElements: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of EntityType into a JSON string.
       */
      public static JsonNode entityTypeToJsonValue(EntityType that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid EntityType: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of Direction into a JSON string.
       */
      public static JsonNode directionToJsonValue(Direction that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid Direction: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of StateOfEvent into a JSON string.
       */
      public static JsonNode stateOfEventToJsonValue(StateOfEvent that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid StateOfEvent: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of ReferenceTypes into a JSON string.
       */
      public static JsonNode referenceTypesToJsonValue(ReferenceTypes that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid ReferenceTypes: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of KeyTypes into a JSON string.
       */
      public static JsonNode keyTypesToJsonValue(KeyTypes that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid KeyTypes: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of DataTypeDefXsd into a JSON string.
       */
      public static JsonNode dataTypeDefXsdToJsonValue(DataTypeDefXsd that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid DataTypeDefXsd: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }

      /**
       * Serialize a literal of DataTypeIec61360 into a JSON string.
       */
      public static JsonNode dataTypeIec61360ToJsonValue(DataTypeIec61360 that) {
        Optional<String> text = Stringification.toString(that);
        if (!text.isPresent()) {
          throw new IllegalArgumentException("Invalid DataTypeIec61360: " + that);
        }

        return JsonNodeFactory.instance.textNode(text.get());
      }
    }
}

/*
 * This code has been automatically generated by aas-core-codegen.
 * Do NOT edit or append.
 */
